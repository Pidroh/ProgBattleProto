/**
 * @version 1.0.0.0
 * @copyright Copyright Â©  2019
 * @compiler Bridge.NET 17.1.1
 */
Bridge.assembly("BuildBridgeB", function ($asm, globals) {
    "use strict";

    Bridge.define("BridgeBuild.App", {
        main: function Main () {
            Pidroh.BaseUtils.Debugger.ActiveStatic = false;
            BridgeBuild.App.TestEntitySystem();
            BridgeBuild.App.SetupGame(Bridge.ref(BridgeBuild.App, "gr"), Bridge.ref(BridgeBuild.App, "TextBoard"));
            BridgeBuild.App.colors = System.Array.init(30, null, System.String);
            for (var i = 0; i < Pidroh.ConsoleApp.Turnbased.ColorStuff.colors.length; i = (i + 1) | 0) {

                BridgeBuild.App.colors[System.Array.index(i, BridgeBuild.App.colors)] = Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(i, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)];
            }



            var style = document.createElement("style");
            style.innerHTML = "html,body {font-family: Courier; background-color:#1f2526; height: 100%; color:#888;}\n #canvas-container {width: 100%; height: 100%; text-align:center; vertical-align: middle; } ";
            document.head.appendChild(style);
            BridgeBuild.App.buffer = 9;
            BridgeBuild.App.bufferOn = false;

            document.onkeyup = Bridge.fn.combine(document.onkeyup, function (a) {
                var code = a.keyCode;
                if (code === 0) {
                    code = a.charCode;
                }
                var unicode = code;
                if (unicode >= 65 && unicode <= 90) {
                    unicode = (((unicode - 65) | 0) + 97) | 0;
                }
                while (BridgeBuild.App.keysDown.contains(unicode)) {
                    BridgeBuild.App.keysDown.remove(unicode);
                }



            });

            document.onkeydown = Bridge.fn.combine(document.onkeydown, function (a) {
                if (a.keyCode >= 37 && a.keyCode <= 40) {
                    BridgeBuild.App.Handle(a);
                    a.preventDefault();
                }
                if (a.keyCode === Pidroh.BaseUtils.Unicode.Escape) {
                    BridgeBuild.App.Handle(a);
                    a.preventDefault();
                }
                if (a.keyCode === Pidroh.BaseUtils.Unicode.Enter) {
                    BridgeBuild.App.Handle(a);
                    a.preventDefault();
                }


            });


            document.onkeypress = Bridge.fn.combine(document.onkeypress, function (a) {
                if (a.keyCode >= 37 && a.keyCode <= 40) {
                    return;
                }
                BridgeBuild.App.Handle(a);
                a.preventDefault();


            });

            BridgeBuild.App.UpdateGame();




        },
        statics: {
            fields: {
                buffer: 0,
                bufferOn: false,
                gr: null,
                TextBoard: null,
                colors: null,
                bufferUnicode: 0,
                aux: null,
                last: null,
                CanDraw: false,
                keysDown: null
            },
            ctors: {
                init: function () {
                    this.last = System.DateTime.getDefaultValue();
                    this.bufferUnicode = -1;
                    this.last = System.DateTime.getNow();
                    this.keysDown = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
            },
            methods: {
                SetupGame: function (gr, TextBoard) {

                    var rnd = new System.Random.ctor();
                    Pidroh.BaseUtils.RandomSupplier.Generate = function () {
                        var v = rnd.NextDouble();
                        return v;
                    };

                    gr.v = new Pidroh.ConsoleApp.Turnbased.GameMain();
                    TextBoard.v = gr.v.GetBoard();
                    BridgeBuild.App.aux = new Pidroh.TextRendering.TextBoard(300, 300);



                },
                Handle: function (a) {
                    var code = a.keyCode;
                    if (code === 0) {
                        code = a.charCode;
                    }
                    var unicode = code;
                    BridgeBuild.App.bufferUnicode = unicode;
                    BridgeBuild.App.keysDown.add(unicode);

                },
                TestEntitySystem: function () {

                },
                UpdateGame: function () {
                    if (BridgeBuild.App.CanDraw) {
                        var now = System.DateTime.getNow();
                        var secs = (System.DateTime.subdd(now, BridgeBuild.App.last)).getTotalSeconds();
                        if (secs > 0.08) {
                            secs = 0.08;
                        }

                        BridgeBuild.App.TextBoard = BridgeBuild.App.gr.GetBoard();
                        BridgeBuild.App.last = now;
                        BridgeBuild.App.gr.keyDownUnicode = BridgeBuild.App.bufferUnicode;
                        BridgeBuild.App.bufferUnicode = -1;
                        var mouseX = getMouseX();
                        var mouseY = getMouseY();
                        var point2D = new Pidroh.BaseUtils.Point2D.$ctor1(mouseX, mouseY);
                        if (Pidroh.BaseUtils.Point2D.op_Inequality(BridgeBuild.App.gr.Mouse.pos.$clone(), point2D.$clone())) {
                            BridgeBuild.App.gr.Mouse.pos = point2D.$clone();
                        }
                        BridgeBuild.App.gr.Keyboard.downUnicodes.clear();
                        BridgeBuild.App.gr.Keyboard.downUnicodes.AddRange(BridgeBuild.App.keysDown);

                        BridgeBuild.App.gr.Draw(secs);




                        for (var j = 0; j < BridgeBuild.App.TextBoard.Height; j = (j + 1) | 0) {
                            for (var i = 0; i < BridgeBuild.App.TextBoard.Width; i = (i + 1) | 0) {
                                if (!BridgeBuild.App.aux.SameAs(BridgeBuild.App.TextBoard, i, j)) {
                                    var tcI = BridgeBuild.App.TextBoard.TextColor.get([i, j]);
                                    var color = BridgeBuild.App.colors[System.Array.index(0, BridgeBuild.App.colors)];
                                    if (tcI < 0) {
                                    } else if (tcI >= BridgeBuild.App.colors.length) {
                                    } else {
                                        color = BridgeBuild.App.colors[System.Array.index(tcI, BridgeBuild.App.colors)];
                                    }



                                    var backColor = BridgeBuild.App.colors[System.Array.index(BridgeBuild.App.TextBoard.BackColor.get([i, j]), BridgeBuild.App.colors)];
                                    var $char = BridgeBuild.App.TextBoard.CharAt(i, j);
                                    draw(i, j, color, backColor, "" + String.fromCharCode($char));
                                    BridgeBuild.App.aux.Copy(BridgeBuild.App.TextBoard, i, j);
                                } else {
                                }


                            }
                        }
                    } else {
                        BridgeBuild.App.CanDraw = isReadyToDraw();
                    }


                    window.setTimeout(BridgeBuild.App.UpdateGame, 15);
                }
            }
        }
    });

    Bridge.define("BridgeBuild.App.Bla", {
        $kind: "nested class",
        fields: {
            i: 0,
            pos: null
        },
        ctors: {
            init: function () {
                this.pos = new BridgeBuild.App.Vector();
                this.i = 3;
            }
        }
    });

    Bridge.define("BridgeBuild.App.Vector", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new BridgeBuild.App.Vector(); }
            }
        },
        fields: {
            x: 0,
            y: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([1952700357, this.x, this.y]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, BridgeBuild.App.Vector)) {
                    return false;
                }
                return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
            },
            $clone: function (to) {
                var s = to || new BridgeBuild.App.Vector();
                s.x = this.x;
                s.y = this.y;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.ArrayExtensions.ArrayExtensions", {
        statics: {
            methods: {
                ForEach: function (array, action) {
                    if (array.length === 0) {
                        return;
                    }
                    var walker = new Pidroh.BaseUtils.ArrayExtensions.ArrayTraverse(array);
                    do {
                        action(array, walker.Position);
                    } while (walker.Step());
                }
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.ArrayExtensions.ArrayTraverse", {
        fields: {
            Position: null,
            maxLengths: null
        },
        ctors: {
            ctor: function (array) {
                this.$initialize();
                this.maxLengths = System.Array.init(System.Array.getRank(array), 0, System.Int32);
                for (var i = 0; i < System.Array.getRank(array); i = (i + 1) | 0) {
                    this.maxLengths[System.Array.index(i, this.maxLengths)] = (System.Array.getLength(array, i) - 1) | 0;
                }
                this.Position = System.Array.init(System.Array.getRank(array), 0, System.Int32);
            }
        },
        methods: {
            Step: function () {
                for (var i = 0; i < this.Position.length; i = (i + 1) | 0) {
                    if (this.Position[System.Array.index(i, this.Position)] < this.maxLengths[System.Array.index(i, this.maxLengths)]) {
                        this.Position[System.Array.index(i, this.Position)] = (this.Position[System.Array.index(i, this.Position)] + 1) | 0;
                        for (var j = 0; j < i; j = (j + 1) | 0) {
                            this.Position[System.Array.index(j, this.Position)] = 0;
                        }
                        return true;
                    }
                }
                return false;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Debugger", {
        statics: {
            fields: {
                ActiveStatic: false
            },
            ctors: {
                init: function () {
                    this.ActiveStatic = true;
                }
            }
        },
        fields: {
            debugging: false,
            ident: 0,
            stringBuilder: null
        },
        ctors: {
            init: function () {
                this.stringBuilder = new System.Text.StringBuilder();
            },
            ctor: function (debugging) {
                this.$initialize();
                if (Pidroh.BaseUtils.Debugger.ActiveStatic) {
                    this.debugging = debugging;
                }
            }
        },
        methods: {
            Print$1: function (s) {
                if (!this.debugging) {
                    return;
                }
                for (var i = 0; i < this.ident; i = (i + 1) | 0) {
                    System.Console.Write(String.fromCharCode(32));
                }
                System.Console.WriteLine(s);
            },
            Print: function (obj) {
                var $t;
                if (!this.debugging) {
                    return;
                }
                this.stringBuilder.setLength(0);

                var type = Bridge.getType(obj);
                this.stringBuilder.append("Type: ");
                this.stringBuilder.append(Bridge.Reflection.getTypeName(type));
                this.stringBuilder.appendLine();
                var fields = Bridge.Reflection.getMembers(type, 4, 52);
                $t = Bridge.getEnumerator(fields);
                try {
                    while ($t.moveNext()) {
                        var f = $t.Current;
                        this.stringBuilder.append(String.fromCharCode(32));
                        this.stringBuilder.append(String.fromCharCode(32));
                        this.stringBuilder.append(Bridge.Reflection.fieldAccess(f, Bridge.unbox(obj)));
                        this.stringBuilder.append(String.fromCharCode(32));
                        this.stringBuilder.append(String.fromCharCode(32));
                        this.stringBuilder.append(f.n);
                        this.stringBuilder.appendLine();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }System.Console.WriteLine(this.stringBuilder.toString());
            },
            Deident: function () {
                this.ident = (this.ident - 2) | 0;
                ;
            },
            Ident: function () {
                this.ident = (this.ident + 2) | 0;
            },
            Active: function () {
                if (!Pidroh.BaseUtils.Debugger.ActiveStatic) {
                    return;
                }
                this.debugging = true;
            },
            Active$1: function (v) {
                if (!Pidroh.BaseUtils.Debugger.ActiveStatic) {
                    return;
                }
                this.debugging = v;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.DeepCloneHelper", {
        statics: {
            fields: {
                debug: null
            },
            ctors: {
                init: function () {
                    this.debug = new Pidroh.BaseUtils.Debugger(false);
                }
            },
            methods: {
                /**
                 * Get the deep clone of an object.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.DeepCloneHelper
                 * @memberof Pidroh.BaseUtils.DeepCloneHelper
                 * @param   {Function}    T      The type of the obj.
                 * @param   {T}           obj    It is the object used to deep clone.
                 * @return  {T}                  Return the deep clone.
                 */
                DeepClone: function (T, obj) {
                    if (obj == null) {
                        throw new System.ArgumentNullException.$ctor1("Object is null");
                    }
                    return Bridge.cast(Bridge.unbox(Pidroh.BaseUtils.DeepCloneHelper.CloneProcedure(obj)), T);
                },
                DeepCopyPartial: function (from, to) {
                    if (from == null) {
                        throw new System.ArgumentNullException.$ctor1("Object is null");
                    }
                    Pidroh.BaseUtils.DeepCloneHelper.CopyProcedurePartial(from, to);
                },
                /**
                 * The method implements deep clone using reflection.
                 *
                 * @static
                 * @private
                 * @this Pidroh.BaseUtils.DeepCloneHelper
                 * @memberof Pidroh.BaseUtils.DeepCloneHelper
                 * @param   {System.Object}    obj    It is the object used to deep clone.
                 * @return  {System.Object}           Return the deep clone.
                 */
                CloneProcedure: function (obj) {
                    var $t;

                    if (obj == null) {
                        return null;
                    }

                    var type = Bridge.getType(obj);

                    Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1(System.String.concat("Cloning: ", Bridge.getTypeName(type)));

                    if (Bridge.Reflection.isEnum(type) || Bridge.referenceEquals(type, System.String) || Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.Char) || Bridge.referenceEquals(type, System.Single) || Bridge.referenceEquals(type, System.Double) || Bridge.referenceEquals(type, System.Boolean)) {
                        Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1(System.String.concat(Bridge.getTypeName(type), " ", obj) + " -V");

                        return obj;
                    } else if (Bridge.isArray(null, type)) {

                        var typeElement = (type.$elementType || null);

                        var array = Bridge.as(obj, Array);
                        var length = array.length;
                        var copiedArray = System.Array.init(length, Bridge.getDefaultValue(typeElement), typeElement);
                        for (var i = 0; i < array.length; i = (i + 1) | 0) {
                            System.Array.set(copiedArray, Pidroh.BaseUtils.DeepCloneHelper.CloneProcedure(System.Array.get(array, i)), i);

                        }
                        return copiedArray;
                    } else if (Bridge.Reflection.isClass(type) || Bridge.Reflection.isValueType(type)) {
                        var copiedObject = Bridge.createInstance(Bridge.getType(obj));

                        var fields = Bridge.Reflection.getMembers(type, 4, 52);
                        $t = Bridge.getEnumerator(fields);
                        try {
                            while ($t.moveNext()) {
                                var field = $t.Current;

                                Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1("Field: " + (field.n || ""));
                                var fieldValue = Bridge.Reflection.fieldAccess(field, Bridge.unbox(obj));
                                if (fieldValue != null) {
                                    Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1("Field: " + (field.n || "") + " being set");
                                    Bridge.Reflection.fieldAccess(field, Bridge.unbox(copiedObject), Bridge.unbox(Pidroh.BaseUtils.DeepCloneHelper.CloneProcedure(fieldValue)));
                                }

                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                        return copiedObject;
                    } else {
                        throw new System.ArgumentException.$ctor1("The object is unknown type");
                    }
                },
                CopyProcedurePartial: function (from, to) {
                    var $t;
                    if (from == null) {
                        return null;
                    }

                    var type = Bridge.getType(from);

                    Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1(System.String.concat("Copying ", Bridge.getTypeName(type)));
                    Pidroh.BaseUtils.DeepCloneHelper.debug.Ident();

                    if (Bridge.Reflection.isEnum(type) || Bridge.referenceEquals(type, System.String) || Bridge.referenceEquals(type, System.Int32) || Bridge.referenceEquals(type, System.Char) || Bridge.referenceEquals(type, System.Single) || Bridge.referenceEquals(type, System.Double)) {

                        Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1(System.String.concat(Bridge.getTypeName(type), " ", from) + " -V");
                        Pidroh.BaseUtils.DeepCloneHelper.debug.Deident();
                        return from;
                    } else if (Bridge.isArray(null, type)) {
                        Pidroh.BaseUtils.DeepCloneHelper.debug.Deident();
                        return null;
                    } else if (Bridge.Reflection.isClass(type) || Bridge.Reflection.isValueType(type)) {
                        var copiedObject = to;

                        var fields = Bridge.Reflection.getMembers(type, 4, 52);
                        $t = Bridge.getEnumerator(fields);
                        try {
                            while ($t.moveNext()) {
                                var field = $t.Current;

                                Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1("Field: " + (field.n || ""));
                                var fieldValue = Bridge.Reflection.fieldAccess(field, Bridge.unbox(from));
                                if (fieldValue != null) {
                                    Pidroh.BaseUtils.DeepCloneHelper.debug.Print$1("Field: " + (field.n || "") + " not null, being set");
                                    Pidroh.BaseUtils.DeepCloneHelper.debug.Ident();
                                    Bridge.Reflection.fieldAccess(field, Bridge.unbox(copiedObject), Bridge.unbox(Pidroh.BaseUtils.DeepCloneHelper.CloneProcedure(fieldValue)));
                                    Pidroh.BaseUtils.DeepCloneHelper.debug.Deident();
                                }

                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }Pidroh.BaseUtils.DeepCloneHelper.debug.Deident();
                        return copiedObject;
                    } else {
                        Pidroh.BaseUtils.DeepCloneHelper.debug.Deident();
                        throw new System.ArgumentException.$ctor1("The object is unknown type");
                    }
                }
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Extensions", {
        statics: {
            methods: {
                Shuffle: function (T, list) {
                    var n = System.Array.getCount(list, T);
                    while (n > 1) {
                        n = (n - 1) | 0;
                        var k = Pidroh.BaseUtils.RandomSupplier.Next(((n + 1) | 0));
                        var value = System.Array.getItem(list, k, T);
                        System.Array.setItem(list, k, System.Array.getItem(list, n, T), T);
                        System.Array.setItem(list, n, value, T);
                    }
                },
                RandomElement: function (T, list) {
                    var element = Pidroh.BaseUtils.RandomSupplier.Next(((System.Array.getCount(list, T) - 1) | 0));
                    return System.Array.getItem(list, element, T);
                }
            }
        }
    });

    Bridge.definei("Pidroh.BaseUtils.ICopyable$1", function (T) { return {
        $kind: "interface"
    }; });

    Bridge.define("Pidroh.BaseUtils.ObjectExtensions", {
        statics: {
            fields: {
                CloneMethod: null
            },
            ctors: {
                init: function () {
                    this.CloneMethod = Bridge.Reflection.getMembers(System.Object, 8, 36 | 256, "MemberwiseClone");
                }
            },
            methods: {
                IsPrimitiveMethod: function (type) {
                    if (Bridge.referenceEquals(type, System.String)) {
                        return true;
                    }
                    if (Bridge.referenceEquals(type, System.Int32)) {
                        return true;
                    }
                    if (Bridge.referenceEquals(type, System.Single)) {
                        return true;
                    }
                    if (Bridge.referenceEquals(type, System.Double)) {
                        return true;
                    }
                    if (Bridge.referenceEquals(type, System.Char)) {
                        return true;
                    }
                    var isValueType = Bridge.Reflection.isValueType(type);
                    return isValueType;
                },
                Copy$1: function (originalObject) {
                    return Pidroh.BaseUtils.ObjectExtensions.InternalCopy(originalObject, new (System.Collections.Generic.Dictionary$2(System.Object, System.Object))(null, new Pidroh.BaseUtils.ReferenceEqualityComparer()));
                },
                Copy: function (T, original) {
                    return Bridge.cast(Bridge.unbox(Pidroh.BaseUtils.ObjectExtensions.Copy$1(original)), T);
                },
                InternalCopy: function (originalObject, visited) {
                    if (originalObject == null) {
                        return null;
                    }
                    var typeToReflect = Bridge.getType(originalObject);
                    if (Pidroh.BaseUtils.ObjectExtensions.IsPrimitiveMethod(typeToReflect)) {
                        return originalObject;
                    }
                    if (visited.System$Collections$Generic$IDictionary$2$System$Object$System$Object$containsKey(originalObject)) {
                        return visited.System$Collections$Generic$IDictionary$2$System$Object$System$Object$getItem(originalObject);
                    }
                    if (Bridge.Reflection.isAssignableFrom(Function, typeToReflect)) {
                        return null;
                    }
                    var cloneObject = Bridge.Reflection.midel(Pidroh.BaseUtils.ObjectExtensions.CloneMethod, Bridge.unbox(originalObject)).apply(null, System.Array.init([], System.Object));
                    if (Bridge.isArray(null, typeToReflect)) {
                        var arrayType = (typeToReflect.$elementType || null);
                        if (Pidroh.BaseUtils.ObjectExtensions.IsPrimitiveMethod(arrayType) === false) {
                            var clonedArray = Bridge.cast(cloneObject, Array);
                            Pidroh.BaseUtils.ArrayExtensions.ArrayExtensions.ForEach(clonedArray, function (array, indices) {
                                System.Array.set.apply(System.Array, [array, Pidroh.BaseUtils.ObjectExtensions.InternalCopy(System.Array.get.apply(System.Array, [clonedArray].concat(indices)), visited)].concat(indices));
                            });
                        }

                    }
                    visited.System$Collections$Generic$IDictionary$2$System$Object$System$Object$add(originalObject, cloneObject);
                    Pidroh.BaseUtils.ObjectExtensions.CopyFields(originalObject, visited, cloneObject, typeToReflect);
                    Pidroh.BaseUtils.ObjectExtensions.RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect);
                    return cloneObject;
                },
                RecursiveCopyBaseTypePrivateFields: function (originalObject, visited, cloneObject, typeToReflect) {
                    if (Bridge.Reflection.getBaseType(typeToReflect) != null) {
                        Pidroh.BaseUtils.ObjectExtensions.RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, Bridge.Reflection.getBaseType(typeToReflect));
                        Pidroh.BaseUtils.ObjectExtensions.CopyFields(originalObject, visited, cloneObject, Bridge.Reflection.getBaseType(typeToReflect), 36, function (info) {
                            return (info.a === 1);
                        });
                    }
                },
                CopyFields: function (originalObject, visited, cloneObject, typeToReflect, bindingFlags, filter) {
                    var $t;
                    if (bindingFlags === void 0) { bindingFlags = 116; }
                    if (filter === void 0) { filter = null; }
                    $t = Bridge.getEnumerator(Bridge.Reflection.getMembers(typeToReflect, 4, bindingFlags));
                    try {
                        while ($t.moveNext()) {
                            var fieldInfo = $t.Current;
                            if (!Bridge.staticEquals(filter, null) && filter(fieldInfo) === false) {
                                continue;
                            }
                            if (Pidroh.BaseUtils.ObjectExtensions.IsPrimitiveMethod(fieldInfo.rt)) {
                                continue;
                            }
                            var originalFieldValue = Bridge.Reflection.fieldAccess(fieldInfo, Bridge.unbox(originalObject));
                            var clonedFieldValue = Pidroh.BaseUtils.ObjectExtensions.InternalCopy(originalFieldValue, visited);
                            Bridge.Reflection.fieldAccess(fieldInfo, Bridge.unbox(cloneObject), Bridge.unbox(clonedFieldValue));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Point2D", {
        inherits: function () { return [System.IEquatable$1(Pidroh.BaseUtils.Point2D)]; },
        $kind: "struct",
        statics: {
            fields: {
                zeroPoint: null
            },
            props: {
                Zero: {
                    get: function () {
                        return Pidroh.BaseUtils.Point2D.zeroPoint.$clone();
                    }
                }
            },
            ctors: {
                init: function () {
                    this.zeroPoint = new Pidroh.BaseUtils.Point2D();
                }
            },
            methods: {
                op_Equality: function (a, b) {
                    return a.equalsT(b.$clone());
                },
                op_Inequality: function (a, b) {
                    return !a.equalsT(b.$clone());
                },
                getDefaultValue: function () { return new Pidroh.BaseUtils.Point2D(); }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        alias: ["equalsT", "System$IEquatable$1$Pidroh$BaseUtils$Point2D$equalsT"],
        ctors: {
            $ctor1: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equalsT: function (other) {
                return ((this.X === other.X) && (this.Y === other.Y));
            },
            equals: function (obj) {
                return (Bridge.is(obj, Pidroh.BaseUtils.Point2D)) ? this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj), Pidroh.BaseUtils.Point2D))) : false;
            },
            getHashCode: function () {
                return this.X ^ this.Y;
            },
            toString: function () {
                return System.String.format("{{X:{0} Y:{1}}}", Bridge.box(this.X, System.Int32), Bridge.box(this.Y, System.Int32));
            },
            $clone: function (to) {
                var s = to || new Pidroh.BaseUtils.Point2D();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.RandomSupplier", {
        statics: {
            fields: {
                Generate: null
            },
            methods: {
                Range: function (min, max) {
                    return Bridge.Int.clip32((Pidroh.BaseUtils.RandomSupplier.Generate() * (((max - min) | 0)) + min) + 0.5);
                },
                RandomElement: function (T, array) {
                    return array[System.Array.index(Pidroh.BaseUtils.RandomSupplier.Range(0, ((array.length - 1) | 0)), array)];
                },
                Next: function (count) {
                    return Pidroh.BaseUtils.RandomSupplier.Range(0, count);
                }
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Rect", {
        inherits: function () { return [System.IEquatable$1(Pidroh.BaseUtils.Rect)]; },
        $kind: "struct",
        statics: {
            fields: {
                emptyRectangle: null
            },
            props: {
                Empty: {
                    get: function () {
                        return Pidroh.BaseUtils.Rect.emptyRectangle.$clone();
                    }
                }
            },
            ctors: {
                init: function () {
                    this.emptyRectangle = new Pidroh.BaseUtils.Rect();
                }
            },
            methods: {
                op_Equality: function (a, b) {
                    return ((a.X === b.X) && (a.Y === b.Y) && (a.Width === b.Width) && (a.Height === b.Height));
                },
                op_Inequality: function (a, b) {
                    return !(Pidroh.BaseUtils.Rect.op_Equality(a.$clone(), b.$clone()));
                },
                getDefaultValue: function () { return new Pidroh.BaseUtils.Rect(); }
            }
        },
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0
        },
        props: {
            Left: {
                get: function () {
                    return this.X;
                }
            },
            Right: {
                get: function () {
                    return (((this.X + this.Width) | 0));
                }
            },
            Top: {
                get: function () {
                    return this.Y;
                }
            },
            Bottom: {
                get: function () {
                    return (((this.Y + this.Height) | 0));
                }
            },
            Center: {
                get: function () {
                    return new Pidroh.BaseUtils.Point2D.$ctor1(((Bridge.Int.div((((this.X + this.Width) | 0)), 2)) | 0), ((Bridge.Int.div((((this.Y + this.Height) | 0)), 2)) | 0));
                }
            },
            IsEmpty: {
                get: function () {
                    return ((((this.Width === 0) && (this.Height === 0)) && (this.X === 0)) && (this.Y === 0));
                }
            }
        },
        alias: ["equalsT", "System$IEquatable$1$Pidroh$BaseUtils$Rect$equalsT"],
        ctors: {
            $ctor1: function (x, y, width, height) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Contains$3: function (x, y) {
                return ((((this.X <= x) && (x < (((this.X + this.Width) | 0)))) && (this.Y <= y)) && (y < (((this.Y + this.Height) | 0))));
            },
            Contains$2: function (value) {
                return ((((this.X <= value.X) && (value.X < (((this.X + this.Width) | 0)))) && (this.Y <= value.Y)) && (value.Y < (((this.Y + this.Height) | 0))));
            },
            Contains: function (value) {
                return ((((this.X <= value.X) && (value.X < (((this.X + this.Width) | 0)))) && (this.Y <= value.Y)) && (value.Y < (((this.Y + this.Height) | 0))));
            },
            Contains$1: function (value) {
                return ((((this.X <= value.X) && ((((value.X + value.Width) | 0)) <= (((this.X + this.Width) | 0)))) && (this.Y <= value.Y)) && ((((value.Y + value.Height) | 0)) <= (((this.Y + this.Height) | 0))));
            },
            Offset: function (offset) {
                this.X = (this.X + offset.X) | 0;
                this.Y = (this.Y + offset.Y) | 0;
            },
            Offset$1: function (offsetX, offsetY) {
                this.X = (this.X + offsetX) | 0;
                this.Y = (this.Y + offsetY) | 0;
            },
            Inflate: function (horizontalValue, verticalValue) {
                this.X = (this.X - horizontalValue) | 0;
                this.Y = (this.Y - verticalValue) | 0;
                this.Width = (this.Width + (Bridge.Int.mul(horizontalValue, 2))) | 0;
                this.Height = (this.Height + (Bridge.Int.mul(verticalValue, 2))) | 0;
            },
            equalsT: function (other) {
                return Pidroh.BaseUtils.Rect.op_Equality(this, other.$clone());
            },
            equals: function (obj) {
                return (Bridge.is(obj, Pidroh.BaseUtils.Rect)) ? Pidroh.BaseUtils.Rect.op_Equality(this, System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj), Pidroh.BaseUtils.Rect))) : false;
            },
            toString: function () {
                return System.String.format("{{X:{0} Y:{1} Width:{2} Height:{3}}}", Bridge.box(this.X, System.Int32), Bridge.box(this.Y, System.Int32), Bridge.box(this.Width, System.Int32), Bridge.box(this.Height, System.Int32));
            },
            getHashCode: function () {
                return (this.X ^ this.Y ^ this.Width ^ this.Height);
            },
            Intersects: function (r2) {
                return !(r2.Left > this.Right || r2.Right < this.Left || r2.Top > this.Bottom || r2.Bottom < this.Top);

            },
            Intersects$1: function (value, result) {
                result.v = !(value.v.Left > this.Right || value.v.Right < this.Left || value.v.Top > this.Bottom || value.v.Bottom < this.Top);

            },
            $clone: function (to) {
                var s = to || new Pidroh.BaseUtils.Rect();
                s.X = this.X;
                s.Y = this.Y;
                s.Width = this.Width;
                s.Height = this.Height;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.ReferenceEqualityComparer", {
        inherits: [System.Collections.Generic.EqualityComparer$1(System.Object)],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Object$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Object$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                return Bridge.referenceEquals(x, y);
            },
            getHashCode2: function (obj) {
                if (obj == null) {
                    return 0;
                }
                return Bridge.getHashCode(obj);
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.TimeStamp", {
        fields: {
            CurrentSnap: 0
        },
        methods: {
            GetSnap: function () {
                return new Pidroh.BaseUtils.TimeStampSnap.$ctor1(this.CurrentSnap);
            },
            Advance: function (delta) {
                this.CurrentSnap += delta;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.TimeStampSnap", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.BaseUtils.TimeStampSnap(); }
            }
        },
        fields: {
            TimeSnap: 0
        },
        ctors: {
            $ctor1: function (snap) {
                this.$initialize();
                this.TimeSnap = snap;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5171392903, this.TimeSnap]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.BaseUtils.TimeStampSnap)) {
                    return false;
                }
                return Bridge.equals(this.TimeSnap, o.TimeSnap);
            },
            $clone: function (to) {
                var s = to || new Pidroh.BaseUtils.TimeStampSnap();
                s.TimeSnap = this.TimeSnap;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Unicode", {
        statics: {
            fields: {
                Space: 0,
                Enter: 0,
                Backspace: 0,
                keyDown: 0,
                keyLeft: 0,
                keyUp: 0,
                keyRight: 0,
                Uparrow2: 0,
                Downarrow2: 0,
                Rightarrow2: 0,
                Leftarrow2: 0,
                Uparrow: 0,
                Downarrow: 0,
                Leftarrow: 0,
                Rightarrow: 0,
                AsciiGridHor: 0,
                AsciiGridVer: 0,
                grids: null,
                AsciiGridUpLeft: 0,
                AsciiGridUpRight: 0,
                AsciiGridUpRightLeft: 0,
                AsciiGridDownLeft: 0,
                AsciiGridDownRight: 0,
                AsciiGridDownRightLeft: 0,
                Escape: 0
            },
            ctors: {
                init: function () {
                    this.Space = 32;
                    this.Enter = 13;
                    this.Backspace = 8;
                    this.keyDown = 40;
                    this.keyLeft = 37;
                    this.keyUp = 38;
                    this.keyRight = 39;
                    this.Uparrow2 = 24;
                    this.Downarrow2 = 25;
                    this.Rightarrow2 = 26;
                    this.Leftarrow2 = 27;
                    this.Uparrow = 30;
                    this.Downarrow = 31;
                    this.Leftarrow = 17;
                    this.Rightarrow = 16;
                    this.AsciiGridHor = 196;
                    this.AsciiGridVer = 179;
                    this.grids = System.Array.init([Pidroh.BaseUtils.Unicode.AsciiGridHor, Pidroh.BaseUtils.Unicode.AsciiGridVer], System.Char);
                    this.AsciiGridUpLeft = 217;
                    this.AsciiGridUpRight = 192;
                    this.AsciiGridUpRightLeft = 193;
                    this.AsciiGridDownLeft = 191;
                    this.AsciiGridDownRight = 218;
                    this.AsciiGridDownRightLeft = 194;
                    this.Escape = 27;
                }
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Vector2D", {
        inherits: function () { return [System.IEquatable$1(Pidroh.BaseUtils.Vector2D)]; },
        $kind: "struct",
        statics: {
            fields: {
                zeroVector: null,
                unitVector: null,
                unitXVector: null,
                unitYVector: null
            },
            props: {
                Zero: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector2D.zeroVector.$clone();
                    }
                },
                One: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector2D.unitVector.$clone();
                    }
                },
                UnitX: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector2D.unitXVector.$clone();
                    }
                },
                UnitY: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector2D.unitYVector.$clone();
                    }
                }
            },
            ctors: {
                init: function () {
                    this.zeroVector = new Pidroh.BaseUtils.Vector2D();
                    this.unitVector = new Pidroh.BaseUtils.Vector2D();
                    this.unitXVector = new Pidroh.BaseUtils.Vector2D();
                    this.unitYVector = new Pidroh.BaseUtils.Vector2D();
                    this.zeroVector = new Pidroh.BaseUtils.Vector2D.$ctor2(0.0, 0.0);
                    this.unitVector = new Pidroh.BaseUtils.Vector2D.$ctor2(1.0, 1.0);
                    this.unitXVector = new Pidroh.BaseUtils.Vector2D.$ctor2(1.0, 0.0);
                    this.unitYVector = new Pidroh.BaseUtils.Vector2D.$ctor2(0.0, 1.0);
                }
            },
            methods: {
                InterpolateRounded: function (startPosition, endPosition, ratio) {
                    return (Pidroh.BaseUtils.Vector2D.op_Addition(Pidroh.BaseUtils.Vector2D.op_Multiply$1(startPosition.$clone(), (1 - ratio)), Pidroh.BaseUtils.Vector2D.op_Multiply$1(endPosition.$clone(), ratio))).Round();
                },
                Add: function (value1, value2) {
                    value1.X += value2.X;
                    value1.Y += value2.Y;
                    return value1.$clone();
                },
                Add$1: function (value1, value2, result) {
                    result.v.X = value1.v.X + value2.v.X;
                    result.v.Y = value1.v.Y + value2.v.Y;
                },
                Distance: function (value1, value2) {
                    var v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;
                    return Math.sqrt((v1 * v1) + (v2 * v2));
                },
                Distance$1: function (value1, value2, result) {
                    var v1 = value1.v.X - value2.v.X, v2 = value1.v.Y - value2.v.Y;
                    result.v = Math.sqrt((v1 * v1) + (v2 * v2));
                },
                DistanceSquared: function (value1, value2) {
                    var v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;
                    return (v1 * v1) + (v2 * v2);
                },
                DistanceSquared$1: function (value1, value2, result) {
                    var v1 = value1.v.X - value2.v.X, v2 = value1.v.Y - value2.v.Y;
                    result.v = (v1 * v1) + (v2 * v2);
                },
                Divide: function (value1, value2) {
                    value1.X /= value2.X;
                    value1.Y /= value2.Y;
                    return value1.$clone();
                },
                Divide$2: function (value1, value2, result) {
                    result.v.X = value1.v.X / value2.v.X;
                    result.v.Y = value1.v.Y / value2.v.Y;
                },
                Divide$1: function (value1, divider) {
                    var factor = 1 / divider;
                    value1.X *= factor;
                    value1.Y *= factor;
                    return value1.$clone();
                },
                Divide$3: function (value1, divider, result) {
                    var factor = 1 / divider;
                    result.v.X = value1.v.X * factor;
                    result.v.Y = value1.v.Y * factor;
                },
                Dot: function (value1, value2) {
                    return (value1.X * value2.X) + (value1.Y * value2.Y);
                },
                Dot$1: function (value1, value2, result) {
                    result.v = (value1.v.X * value2.v.X) + (value1.v.Y * value2.v.Y);
                },
                Reflect: function (vector, normal) {
                    var result = new Pidroh.BaseUtils.Vector2D();
                    var val = 2.0 * ((vector.X * normal.X) + (vector.Y * normal.Y));
                    result.X = vector.X - (normal.X * val);
                    result.Y = vector.Y - (normal.Y * val);
                    return result.$clone();
                },
                Reflect$1: function (vector, normal, result) {
                    var val = 2.0 * ((vector.v.X * normal.v.X) + (vector.v.Y * normal.v.Y));
                    result.v.X = vector.v.X - (normal.v.X * val);
                    result.v.Y = vector.v.Y - (normal.v.Y * val);
                },
                Max: function (value1, value2) {
                    return new Pidroh.BaseUtils.Vector2D.$ctor2(value1.X > value2.X ? value1.X : value2.X, value1.Y > value2.Y ? value1.Y : value2.Y);
                },
                Max$1: function (value1, value2, result) {
                    result.v.X = value1.v.X > value2.v.X ? value1.v.X : value2.v.X;
                    result.v.Y = value1.v.Y > value2.v.Y ? value1.v.Y : value2.v.Y;
                },
                Min: function (value1, value2) {
                    return new Pidroh.BaseUtils.Vector2D.$ctor2(value1.X < value2.X ? value1.X : value2.X, value1.Y < value2.Y ? value1.Y : value2.Y);
                },
                Min$1: function (value1, value2, result) {
                    result.v.X = value1.v.X < value2.v.X ? value1.v.X : value2.v.X;
                    result.v.Y = value1.v.Y < value2.v.Y ? value1.v.Y : value2.v.Y;
                },
                Multiply: function (value1, value2) {
                    value1.X *= value2.X;
                    value1.Y *= value2.Y;
                    return value1.$clone();
                },
                Multiply$1: function (value1, scaleFactor) {
                    value1.X *= scaleFactor;
                    value1.Y *= scaleFactor;
                    return value1.$clone();
                },
                Multiply$3: function (value1, scaleFactor, result) {
                    result.v.X = value1.v.X * scaleFactor;
                    result.v.Y = value1.v.Y * scaleFactor;
                },
                Multiply$2: function (value1, value2, result) {
                    result.v.X = value1.v.X * value2.v.X;
                    result.v.Y = value1.v.Y * value2.v.Y;
                },
                Negate: function (value) {
                    value.X = -value.X;
                    value.Y = -value.Y;
                    return value.$clone();
                },
                Negate$1: function (value, result) {
                    result.v.X = -value.v.X;
                    result.v.Y = -value.v.Y;
                },
                Normalize: function (value) {
                    var val = 1.0 / Math.sqrt((value.X * value.X) + (value.Y * value.Y));
                    value.X *= val;
                    value.Y *= val;
                    return value.$clone();
                },
                Normalize$1: function (value, result) {
                    var val = 1.0 / Math.sqrt((value.v.X * value.v.X) + (value.v.Y * value.v.Y));
                    result.v.X = value.v.X * val;
                    result.v.Y = value.v.Y * val;
                },
                Subtract: function (value1, value2) {
                    value1.X -= value2.X;
                    value1.Y -= value2.Y;
                    return value1.$clone();
                },
                Subtract$1: function (value1, value2, result) {
                    result.v.X = value1.v.X - value2.v.X;
                    result.v.Y = value1.v.Y - value2.v.Y;
                },
                op_UnaryNegation: function (value) {
                    value.X = -value.X;
                    value.Y = -value.Y;
                    return value.$clone();
                },
                op_Equality: function (value1, value2) {
                    return value1.X === value2.X && value1.Y === value2.Y;
                },
                op_Inequality: function (value1, value2) {
                    return value1.X !== value2.X || value1.Y !== value2.Y;
                },
                op_Addition: function (value1, value2) {
                    value1.X += value2.X;
                    value1.Y += value2.Y;
                    return value1.$clone();
                },
                op_Subtraction: function (value1, value2) {
                    value1.X -= value2.X;
                    value1.Y -= value2.Y;
                    return value1.$clone();
                },
                op_Multiply: function (value1, value2) {
                    value1.X *= value2.X;
                    value1.Y *= value2.Y;
                    return value1.$clone();
                },
                op_Multiply$1: function (value, scaleFactor) {
                    value.X *= scaleFactor;
                    value.Y *= scaleFactor;
                    return value.$clone();
                },
                op_Multiply$2: function (scaleFactor, value) {
                    value.X *= scaleFactor;
                    value.Y *= scaleFactor;
                    return value.$clone();
                },
                op_Division: function (value1, value2) {
                    value1.X /= value2.X;
                    value1.Y /= value2.Y;
                    return value1.$clone();
                },
                op_Division$1: function (value1, divider) {
                    var factor = 1 / divider;
                    value1.X *= factor;
                    value1.Y *= factor;
                    return value1.$clone();
                },
                getDefaultValue: function () { return new Pidroh.BaseUtils.Vector2D(); }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        props: {
            XInt: {
                get: function () {
                    return Bridge.Int.clip32(this.X);
                }
            },
            YInt: {
                get: function () {
                    return Bridge.Int.clip32(this.Y);
                }
            }
        },
        alias: ["equalsT", "System$IEquatable$1$Pidroh$BaseUtils$Vector2D$equalsT"],
        ctors: {
            $ctor2: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            },
            $ctor1: function (value) {
                this.$initialize();
                this.X = value;
                this.Y = value;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Round: function () {
                return new Pidroh.BaseUtils.Vector2D.$ctor2(Bridge.Math.round(this.X, 0, 6), Bridge.Math.round(this.Y, 0, 6));
            },
            Set: function (x, y) {
                this.X = x;
                this.Y = y;

            },
            equals: function (obj) {
                if (Bridge.is(obj, Pidroh.BaseUtils.Vector2D)) {
                    return this.equalsT(this);
                }

                return false;
            },
            equalsT: function (other) {
                return (this.X === other.X) && (this.Y === other.Y);
            },
            getHashCode: function () {
                return ((System.Single.getHashCode(this.X) + System.Single.getHashCode(this.Y)) | 0);
            },
            Length: function () {
                return Math.sqrt((this.X * this.X) + (this.Y * this.Y));
            },
            LengthSquared: function () {
                return (this.X * this.X) + (this.Y * this.Y);
            },
            Normalize: function () {
                var val = 1.0 / Math.sqrt((this.X * this.X) + (this.Y * this.Y));
                this.X *= val;
                this.Y *= val;
            },
            toString: function () {
                var currentCulture = System.Globalization.CultureInfo.getCurrentCulture();
                return System.String.formatProvider.apply(System.String, [currentCulture, "{{X:{0} Y:{1}}}"].concat(System.Array.init([System.Single.format(this.X, "G", currentCulture), System.Single.format(this.Y, "G", currentCulture)], System.Object)));
            },
            $clone: function (to) {
                var s = to || new Pidroh.BaseUtils.Vector2D();
                s.X = this.X;
                s.Y = this.Y;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.BaseUtils.Vector3D", {
        inherits: function () { return [System.IEquatable$1(Pidroh.BaseUtils.Vector3D)]; },
        $kind: "struct",
        statics: {
            fields: {
                zero: null,
                one: null,
                unitX: null,
                unitY: null,
                unitZ: null,
                up: null,
                down: null,
                right: null,
                left: null,
                forward: null,
                backward: null
            },
            props: {
                /**
                 * Returns a {@link } with components 0, 0, 0.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @function Zero
                 * @type Pidroh.BaseUtils.Vector3D
                 */
                Zero: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.zero.$clone();
                    }
                },
                /**
                 * Returns a {@link } with components 1, 1, 1.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @function One
                 * @type Pidroh.BaseUtils.Vector3D
                 */
                One: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.one.$clone();
                    }
                },
                /**
                 * Returns a {@link } with components 1, 0, 0.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @function UnitX
                 * @type Pidroh.BaseUtils.Vector3D
                 */
                UnitX: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.unitX.$clone();
                    }
                },
                /**
                 * Returns a {@link } with components 0, 1, 0.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @function UnitY
                 * @type Pidroh.BaseUtils.Vector3D
                 */
                UnitY: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.unitY.$clone();
                    }
                },
                /**
                 * Returns a {@link } with components 0, 0, 1.
                 *
                 * @static
                 * @public
                 * @readonly
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @function UnitZ
                 * @type Pidroh.BaseUtils.Vector3D
                 */
                UnitZ: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.unitZ.$clone();
                    }
                },
                Up: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.up.$clone();
                    }
                },
                Down: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.down.$clone();
                    }
                },
                Right: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.right.$clone();
                    }
                },
                Left: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.left.$clone();
                    }
                },
                Forward: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.forward.$clone();
                    }
                },
                Backward: {
                    get: function () {
                        return Pidroh.BaseUtils.Vector3D.backward.$clone();
                    }
                }
            },
            ctors: {
                init: function () {
                    this.zero = new Pidroh.BaseUtils.Vector3D();
                    this.one = new Pidroh.BaseUtils.Vector3D();
                    this.unitX = new Pidroh.BaseUtils.Vector3D();
                    this.unitY = new Pidroh.BaseUtils.Vector3D();
                    this.unitZ = new Pidroh.BaseUtils.Vector3D();
                    this.up = new Pidroh.BaseUtils.Vector3D();
                    this.down = new Pidroh.BaseUtils.Vector3D();
                    this.right = new Pidroh.BaseUtils.Vector3D();
                    this.left = new Pidroh.BaseUtils.Vector3D();
                    this.forward = new Pidroh.BaseUtils.Vector3D();
                    this.backward = new Pidroh.BaseUtils.Vector3D();
                    this.zero = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 0.0, 0.0);
                    this.one = new Pidroh.BaseUtils.Vector3D.$ctor3(1.0, 1.0, 1.0);
                    this.unitX = new Pidroh.BaseUtils.Vector3D.$ctor3(1.0, 0.0, 0.0);
                    this.unitY = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 1.0, 0.0);
                    this.unitZ = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 0.0, 1.0);
                    this.up = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 1.0, 0.0);
                    this.down = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, -1.0, 0.0);
                    this.right = new Pidroh.BaseUtils.Vector3D.$ctor3(1.0, 0.0, 0.0);
                    this.left = new Pidroh.BaseUtils.Vector3D.$ctor3(-1.0, 0.0, 0.0);
                    this.forward = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 0.0, -1.0);
                    this.backward = new Pidroh.BaseUtils.Vector3D.$ctor3(0.0, 0.0, 1.0);
                }
            },
            methods: {
                /**
                 * Performs vector addition on <b /> and <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value1    The first vector to add.
                 * @param   {Pidroh.BaseUtils.Vector3D}    value2    The second vector to add.
                 * @return  {Pidroh.BaseUtils.Vector3D}              The result of the vector addition.
                 */
                Add: function (value1, value2) {
                    value1.X += value2.X;
                    value1.Y += value2.Y;
                    value1.Z += value2.Z;
                    return value1.$clone();
                },
                /**
                 * Performs vector addition on <b /> and
                 <b />, storing the result of the
                 addition in <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value1    The first vector to add.
                 * @param   {Pidroh.BaseUtils.Vector3D}    value2    The second vector to add.
                 * @param   {Pidroh.BaseUtils.Vector3D}    result    The result of the vector addition.
                 * @return  {void}
                 */
                Add$1: function (value1, value2, result) {
                    result.v.X = value1.v.X + value2.v.X;
                    result.v.Y = value1.v.Y + value2.v.Y;
                    result.v.Z = value1.v.Z + value2.v.Z;
                },
                Cross: function (vector1, vector2) {
                    vector1 = {v:vector1};
                    vector2 = {v:vector2};
                    Pidroh.BaseUtils.Vector3D.Cross$1(vector1, vector2, vector1);
                    return vector1.v.$clone();
                },
                Cross$1: function (vector1, vector2, result) {
                    var x = vector1.v.Y * vector2.v.Z - vector2.v.Y * vector1.v.Z;
                    var y = -(vector1.v.X * vector2.v.Z - vector2.v.X * vector1.v.Z);
                    var z = vector1.v.X * vector2.v.Y - vector2.v.X * vector1.v.Y;
                    result.v.X = x;
                    result.v.Y = y;
                    result.v.Z = z;
                },
                Distance: function (vector1, vector2) {
                    vector1 = {v:vector1};
                    vector2 = {v:vector2};
                    var result = { };
                    Pidroh.BaseUtils.Vector3D.DistanceSquared$1(vector1, vector2, result);
                    return Math.sqrt(result.v);
                },
                Distance$1: function (value1, value2, result) {
                    Pidroh.BaseUtils.Vector3D.DistanceSquared$1(value1, value2, result);
                    result.v = Math.sqrt(result.v);
                },
                DistanceSquared: function (value1, value2) {
                    value1 = {v:value1};
                    value2 = {v:value2};
                    var result = { };
                    Pidroh.BaseUtils.Vector3D.DistanceSquared$1(value1, value2, result);
                    return result.v;
                },
                DistanceSquared$1: function (value1, value2, result) {
                    result.v = (value1.v.X - value2.v.X) * (value1.v.X - value2.v.X) + (value1.v.Y - value2.v.Y) * (value1.v.Y - value2.v.Y) + (value1.v.Z - value2.v.Z) * (value1.v.Z - value2.v.Z);
                },
                Divide: function (value1, value2) {
                    value1.X /= value2.X;
                    value1.Y /= value2.Y;
                    value1.Z /= value2.Z;
                    return value1.$clone();
                },
                Divide$1: function (value1, value2) {
                    var factor = 1 / value2;
                    value1.X *= factor;
                    value1.Y *= factor;
                    value1.Z *= factor;
                    return value1.$clone();
                },
                Divide$3: function (value1, divisor, result) {
                    var factor = 1 / divisor;
                    result.v.X = value1.v.X * factor;
                    result.v.Y = value1.v.Y * factor;
                    result.v.Z = value1.v.Z * factor;
                },
                Divide$2: function (value1, value2, result) {
                    result.v.X = value1.v.X / value2.v.X;
                    result.v.Y = value1.v.Y / value2.v.Y;
                    result.v.Z = value1.v.Z / value2.v.Z;
                },
                Dot: function (vector1, vector2) {
                    return vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z;
                },
                Dot$1: function (vector1, vector2, result) {
                    result.v = vector1.v.X * vector2.v.X + vector1.v.Y * vector2.v.Y + vector1.v.Z * vector2.v.Z;
                },
                Multiply: function (value1, value2) {
                    value1.X *= value2.X;
                    value1.Y *= value2.Y;
                    value1.Z *= value2.Z;
                    return value1.$clone();
                },
                Multiply$1: function (value1, scaleFactor) {
                    value1.X *= scaleFactor;
                    value1.Y *= scaleFactor;
                    value1.Z *= scaleFactor;
                    return value1.$clone();
                },
                Multiply$3: function (value1, scaleFactor, result) {
                    result.v.X = value1.v.X * scaleFactor;
                    result.v.Y = value1.v.Y * scaleFactor;
                    result.v.Z = value1.v.Z * scaleFactor;
                },
                Multiply$2: function (value1, value2, result) {
                    result.v.X = value1.v.X * value2.v.X;
                    result.v.Y = value1.v.Y * value2.v.Y;
                    result.v.Z = value1.v.Z * value2.v.Z;
                },
                /**
                 * Returns a {@link } pointing in the opposite
                 direction of <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value    The vector to negate.
                 * @return  {Pidroh.BaseUtils.Vector3D}             The vector negation of <b />.
                 */
                Negate: function (value) {
                    value = new Pidroh.BaseUtils.Vector3D.$ctor3(-value.X, -value.Y, -value.Z);
                    return value.$clone();
                },
                /**
                 * Stores a {@link } pointing in the opposite
                 direction of <b /> in <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value     The vector to negate.
                 * @param   {Pidroh.BaseUtils.Vector3D}    result    The vector that the negation of <b>result</b> will be stored in.
                 * @return  {void}
                 */
                Negate$1: function (value, result) {
                    result.v.X = -value.v.X;
                    result.v.Y = -value.v.Y;
                    result.v.Z = -value.v.Z;
                },
                Normalize: function (vector) {
                    vector = {v:vector};
                    Pidroh.BaseUtils.Vector3D.Normalize$1(vector, vector);
                    return vector.v.$clone();
                },
                Normalize$1: function (value, result) {
                    var factor = { };
                    Pidroh.BaseUtils.Vector3D.Distance$1(value, Bridge.ref(Pidroh.BaseUtils.Vector3D, "zero"), factor);
                    factor.v = 1.0 / factor.v;
                    result.v.X = value.v.X * factor.v;
                    result.v.Y = value.v.Y * factor.v;
                    result.v.Z = value.v.Z * factor.v;
                },
                Reflect: function (vector, normal) {
                    var reflectedVector = new Pidroh.BaseUtils.Vector3D();
                    var dotProduct = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);
                    reflectedVector.X = vector.X - (2.0 * normal.X) * dotProduct;
                    reflectedVector.Y = vector.Y - (2.0 * normal.Y) * dotProduct;
                    reflectedVector.Z = vector.Z - (2.0 * normal.Z) * dotProduct;

                    return reflectedVector.$clone();
                },
                Reflect$1: function (vector, normal, result) {

                    var dotProduct = ((vector.v.X * normal.v.X) + (vector.v.Y * normal.v.Y)) + (vector.v.Z * normal.v.Z);
                    result.v.X = vector.v.X - (2.0 * normal.v.X) * dotProduct;
                    result.v.Y = vector.v.Y - (2.0 * normal.v.Y) * dotProduct;
                    result.v.Z = vector.v.Z - (2.0 * normal.v.Z) * dotProduct;
                },
                /**
                 * Performs vector subtraction on <b /> and <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value1    The vector to be subtracted from.
                 * @param   {Pidroh.BaseUtils.Vector3D}    value2    The vector to be subtracted from <b>value2</b>.
                 * @return  {Pidroh.BaseUtils.Vector3D}              The result of the vector subtraction.
                 */
                Subtract: function (value1, value2) {
                    value1.X -= value2.X;
                    value1.Y -= value2.Y;
                    value1.Z -= value2.Z;
                    return value1.$clone();
                },
                /**
                 * Performs vector subtraction on <b /> and <b />.
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value1    The vector to be subtracted from.
                 * @param   {Pidroh.BaseUtils.Vector3D}    value2    The vector to be subtracted from <b>value2</b>.
                 * @param   {Pidroh.BaseUtils.Vector3D}    result    The result of the vector subtraction.
                 * @return  {void}
                 */
                Subtract$1: function (value1, value2, result) {
                    result.v.X = value1.v.X - value2.v.X;
                    result.v.Y = value1.v.Y - value2.v.Y;
                    result.v.Z = value1.v.Z - value2.v.Z;
                }/**
                 * // Transforms a vector by a quaternion rotation.
                //
                 *
                 * @static
                 * @public
                 * @this Pidroh.BaseUtils.Vector3D
                 * @memberof Pidroh.BaseUtils.Vector3D
                 * @param   {Pidroh.BaseUtils.Vector3D}    value1    
                 * @param   {Pidroh.BaseUtils.Vector3D}    value2
                 * @return  {boolean}
                 */
                ,
                op_Equality: function (value1, value2) {
                    return value1.X === value2.X && value1.Y === value2.Y && value1.Z === value2.Z;
                },
                op_Inequality: function (value1, value2) {
                    return !(Pidroh.BaseUtils.Vector3D.op_Equality(value1.$clone(), value2.$clone()));
                },
                op_Addition: function (value1, value2) {
                    value1.X += value2.X;
                    value1.Y += value2.Y;
                    value1.Z += value2.Z;
                    return value1.$clone();
                },
                op_UnaryNegation: function (value) {
                    value = new Pidroh.BaseUtils.Vector3D.$ctor3(-value.X, -value.Y, -value.Z);
                    return value.$clone();
                },
                op_Subtraction: function (value1, value2) {
                    value1.X -= value2.X;
                    value1.Y -= value2.Y;
                    value1.Z -= value2.Z;
                    return value1.$clone();
                },
                op_Multiply: function (value1, value2) {
                    value1.X *= value2.X;
                    value1.Y *= value2.Y;
                    value1.Z *= value2.Z;
                    return value1.$clone();
                },
                op_Multiply$1: function (value, scaleFactor) {
                    value.X *= scaleFactor;
                    value.Y *= scaleFactor;
                    value.Z *= scaleFactor;
                    return value.$clone();
                },
                op_Multiply$2: function (scaleFactor, value) {
                    value.X *= scaleFactor;
                    value.Y *= scaleFactor;
                    value.Z *= scaleFactor;
                    return value.$clone();
                },
                op_Division: function (value1, value2) {
                    value1.X /= value2.X;
                    value1.Y /= value2.Y;
                    value1.Z /= value2.Z;
                    return value1.$clone();
                },
                op_Division$1: function (value, divider) {
                    var factor = 1 / divider;
                    value.X *= factor;
                    value.Y *= factor;
                    value.Z *= factor;
                    return value.$clone();
                },
                getDefaultValue: function () { return new Pidroh.BaseUtils.Vector3D(); }
            }
        },
        fields: {
            X: 0,
            Y: 0,
            Z: 0
        },
        props: {
            DebugDisplayString: {
                get: function () {
                    return System.String.concat([System.Single.format(this.X), "  ", System.Single.format(this.Y), "  ", System.Single.format(this.Z)]);
                }
            }
        },
        alias: ["equalsT", "System$IEquatable$1$Pidroh$BaseUtils$Vector3D$equalsT"],
        ctors: {
            $ctor3: function (x, y, z) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Z = z;
            },
            $ctor2: function (value) {
                this.$initialize();
                this.X = value;
                this.Y = value;
                this.Z = value;
            },
            $ctor1: function (value, z) {
                this.$initialize();
                this.X = value.X;
                this.Y = value.Y;
                this.Z = z;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            equals: function (obj) {
                if (!(Bridge.is(obj, Pidroh.BaseUtils.Vector3D))) {
                    return false;
                }

                var other = System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj), Pidroh.BaseUtils.Vector3D));
                return this.X === other.X && this.Y === other.Y && this.Z === other.Z;
            },
            equalsT: function (other) {
                return this.X === other.X && this.Y === other.Y && this.Z === other.Z;
            },
            getHashCode: function () {
                return Bridge.Int.clip32(this.X + this.Y + this.Z);
            },
            Length: function () {
                var result = { };
                Pidroh.BaseUtils.Vector3D.DistanceSquared$1(Bridge.ref(this), Bridge.ref(Pidroh.BaseUtils.Vector3D, "zero"), result);
                return Math.sqrt(result.v);
            },
            LengthSquared: function () {
                var result = { };
                Pidroh.BaseUtils.Vector3D.DistanceSquared$1(Bridge.ref(this), Bridge.ref(Pidroh.BaseUtils.Vector3D, "zero"), result);
                return result.v;
            },
            Normalize: function () {
                Pidroh.BaseUtils.Vector3D.Normalize$1(Bridge.ref(this), Bridge.ref(this));
            },
            toString: function () {
                var sb = new System.Text.StringBuilder("", 32);
                sb.append("{X:");
                sb.append(this.X);
                sb.append(" Y:");
                sb.append(this.Y);
                sb.append(" Z:");
                sb.append(this.Z);
                sb.append("}");
                return sb.toString();
            },
            $clone: function (to) {
                var s = to || new Pidroh.BaseUtils.Vector3D();
                s.X = this.X;
                s.Y = this.Y;
                s.Z = this.Z;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Animation", {
        fields: {
            area: null,
            target: 0,
            element: 0,
            userRefOffset: null
        },
        ctors: {
            init: function () {
                this.userRefOffset = new Pidroh.BaseUtils.Vector2D();
                this.target = Pidroh.ConsoleApp.Turnbased.Target.None;
                this.element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness;
            },
            $ctor2: function (target) {
                this.$initialize();
                this.target = target;
            },
            $ctor3: function (target, element) {
                this.$initialize();
                this.element = element;
                this.target = target;
            },
            $ctor1: function (area, element, target) {
                this.$initialize();
                this.area = area;
                this.element = element;
                this.target = target;
            },
            ctor: function (area, element) {
                this.$initialize();
                this.area = area;
                this.element = element;
            },
            $ctor4: function (target, element, userRefOffset) {
                Pidroh.ConsoleApp.Turnbased.Animation.$ctor3.call(this, target, element);
                this.userRefOffset = userRefOffset.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Area", {
        fields: {
            target: 0,
            points: null
        },
        ctors: {
            init: function () {
                this.points = new (System.Collections.Generic.List$1(Pidroh.BaseUtils.Vector2D)).ctor();
            },
            ctor: function (target) {
                this.$initialize();
                this.target = target;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.AsyncTasks");

    Bridge.define("Pidroh.ConsoleApp.Turnbased.DelayedActions", {
        fields: {
            times: null,
            lists: null
        },
        ctors: {
            init: function () {
                this.times = new (System.Collections.Generic.List$1(System.Single)).ctor();
                this.lists = new (System.Collections.Generic.List$1(System.Collections.IList)).ctor();
            }
        },
        methods: {
            Update: function (delta) {
                for (var i = 0; i < this.times.Count; i = (i + 1) | 0) {
                    this.times.setItem(i, this.times.getItem(i) -delta);
                    if (this.times.getItem(i) <= 0) {
                        this.Execute(i);
                        this.EndTask(i);
                    }
                }
            },
            Add: function (time) {
                this.times.add(time);
            },
            IsDone: function () {
                return this.times.Count === 0;
            },
            EndTask: function (i) {
                var $t;
                this.times.removeAt(i);
                $t = Bridge.getEnumerator(this.lists);
                try {
                    while ($t.moveNext()) {
                        var l = $t.Current;
                        System.Array.removeAt(l, i, Object);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.AsyncTrack");

    Bridge.define("Pidroh.ConsoleApp.Turnbased.AttackInventory", {
        fields: {
            attackInventory: null,
            equippedAttacks: null
        },
        ctors: {
            init: function () {
                this.attackInventory = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.equippedAttacks = System.Array.init([-1, -1, -1, -1], System.Int32);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.AttackPrize", {
        fields: {
            prizes: null
        },
        ctors: {
            $ctor1: function (attack) {
                this.$initialize();
                this.prizes = System.Array.init(1, 0, System.Int32);
                this.prizes[System.Array.index(0, this.prizes)] = attack;
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    /** @namespace Pidroh.ConsoleApp.Turnbased */

    /**
     * data that will be a part of stagedata so each stage can have it's config
     It will also be contained in battlemain.
     Should be static, once created.
     *
     * @public
     * @class Pidroh.ConsoleApp.Turnbased.BattleConfig
     */
    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleConfig", {
        fields: {
            enemiesToSummon: null,
            needKillAllEnemies: false,
            attackDemonstrationMode: false,
            heroPresent: false,
            intermissionScreen: false
        },
        ctors: {
            init: function () {
                this.enemiesToSummon = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.needKillAllEnemies = true;
                this.attackDemonstrationMode = false;
                this.heroPresent = true;
                this.intermissionScreen = true;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor4: function (enemiesToSummon) {
                this.$initialize();
                this.enemiesToSummon.AddRange(enemiesToSummon);
            },
            $ctor1: function (needKillAllEnemies) {
                this.$initialize();
                this.needKillAllEnemies = needKillAllEnemies;
            },
            $ctor2: function (needKillAllEnemies, previewMode) {
                this.$initialize();
                this.needKillAllEnemies = needKillAllEnemies;
                this.attackDemonstrationMode = previewMode;
            },
            $ctor3: function (needKillAllEnemies, attackDemonstrationMode, heroPresent, intermission) {
                Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor2.call(this, needKillAllEnemies, attackDemonstrationMode);
                this.intermissionScreen = intermission;
                this.heroPresent = heroPresent;
            }
        },
        methods: {
            NoIntermission: function () {
                this.intermissionScreen = false;
                return this;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain", {
        statics: {
            methods: {
                RandomPosition: function (e) {
                    e.pos.X = Pidroh.BaseUtils.RandomSupplier.Range(0, 5);
                    e.pos.Y = Pidroh.BaseUtils.RandomSupplier.Range(0, 2);
                }
            }
        },
        fields: {
            deckManager: null,
            entities: null,
            battleState: null,
            happManager: null,
            movementMoves: null,
            enemyMoves: null,
            inputs: null,
            playerHandFixed: null,
            playerHandUnfixed: null,
            playerHandPool: null,
            timeToChooseMax: 0,
            timeToChoose: 0,
            battleResult: null,
            MoveDataExecuter: null,
            timeStamp: null,
            pickupAccessor: null,
            ecsInteg: null,
            EnemyGenerateMoves: null,
            trackBattle: null,
            BattleConfig: null,
            BoardWidth: 0,
            BoardHeight: 0
        },
        ctors: {
            init: function () {
                this.entities = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity)).ctor();
                this.battleState = new Pidroh.ConsoleApp.Turnbased.BattleMain.BattleState();
                this.happManager = new Pidroh.ConsoleApp.Turnbased.Happs.HappManager();
                this.movementMoves = new (System.Collections.Generic.Dictionary$2(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType,Pidroh.BaseUtils.Vector2D))();
                this.inputs = new Pidroh.ConsoleApp.Turnbased.InputHolder();
                this.playerHandFixed = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)).ctor();
                this.playerHandUnfixed = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)).ctor();
                this.playerHandPool = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)).ctor();
                this.timeToChooseMax = 15.0;
                this.timeToChoose = -1;
                this.battleResult = new Pidroh.ConsoleApp.Turnbased.BattleResult();
                this.BoardWidth = 6;
                this.BoardHeight = 3;
            },
            ctor: function (mode, ecs, timeStamp) {
                this.$initialize();
                this.timeStamp = timeStamp;
                this.pickupAccessor = ecs.QuickAccessor2(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity, Pidroh.ConsoleApp.Turnbased.PickupInfo);
                this.movementMoves.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.BaseUtils.Vector2D.UnitY.$clone());
                this.movementMoves.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.BaseUtils.Vector2D.op_UnaryNegation(Pidroh.BaseUtils.Vector2D.UnitY.$clone()));
                this.movementMoves.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.BaseUtils.Vector2D.op_UnaryNegation(Pidroh.BaseUtils.Vector2D.UnitX.$clone()));
                this.movementMoves.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.BaseUtils.Vector2D.UnitX.$clone());

                ecs.CreateEntityWithComponent(this.battleState);

                this.playerHandFixed.clear();
                this.playerHandFixed.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight);
                this.playerHandFixed.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft);
                this.playerHandFixed.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown);
                this.playerHandFixed.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp);

                if (mode === 0) {
                    this.playerHandUnfixed.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.NormalShot);
                    this.enemyMoves = System.Array.init([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.NormalShot], Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType);
                } else {


                    this.enemyMoves = System.Array.init([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder], Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType);
                }


            }
        },
        methods: {
            BattleConfigure: function (battleConfig) {
                if (battleConfig == null) {
                    battleConfig = new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true);
                }
                this.BattleConfig = battleConfig;
                this.battleState.turnsPerPhase.Val = 3;

            },
            IsVictory: function () {
                return this.battleResult.result === 1;
            },
            Init: function () {
                if (this.BattleConfig.attackDemonstrationMode === false) {
                    var hero = new Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity();

                    hero.pos.Set(1, 1);
                    hero.minPos.Set(0, 0);
                    hero.maxPos.Set(2, 2);
                    hero.Type = Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero;
                    hero.maxLife = 50;

                    for (var i = 0; i < hero.moves.length; i = (i + 1) | 0) {
                        hero.moves[System.Array.index(i, hero.moves)] = -1;
                    }


                    this.entities.add(hero);
                    this.ecsInteg.HeroCreated(hero);
                }


                this.ecsInteg.SpawnEnemies();

                {
                }


                this.Reset();
                this.ExecutePhase();
            },
            NewBattleEntity: function () {
                var battleEntity = new Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity();
                this.entities.add(battleEntity);
                return battleEntity;
            },
            Reset: function () {
                for (var i = 0; i < this.entities.Count; i = (i + 1) | 0) {
                    this.entities.getItem(i).life = this.entities.getItem(i).maxLife;
                }
                this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.EnemyMoveChoice);
                this.battleState.turn.Val = 0;
                this.battleState.totalTurns = 0;
                this.battleState.actingEntity = 0;
                this.battleState.moveTick_Now.Val = 0;
                this.battleState.moveTick_Total = 1;
                this.battleResult.result = 0;
            },
            IsOver: function () {
                return this.battleResult.result !== 0;
            },
            Tick: function () {
                var $t;
                this.FinishPreviousTick();
                var heroAlive = false;
                var enemyAlive = false;
                var pickupObligatoryExist = false;
                $t = Bridge.getEnumerator(this.entities);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (item.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            if (item.life > 0) {
                                enemyAlive = true;
                            }
                        }
                        if (item.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                            if (item.life > 0) {
                                heroAlive = true;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }for (var i = 0; i < this.pickupAccessor.Length; i = (i + 1) | 0) {
                    var pickup = this.pickupAccessor.Comp2(i);
                    if (pickup.necessaryForVictory && this.pickupAccessor.Comp1(i).Alive) {
                        pickupObligatoryExist = true;
                    }
                }
                if (this.battleState.BattleEndEnable && !this.BattleConfig.attackDemonstrationMode) {
                    if (!heroAlive) {
                        this.battleResult.result = 2;
                    } else if ((!enemyAlive || !this.BattleConfig.needKillAllEnemies) && !pickupObligatoryExist) {
                        this.battleResult.result = 1;
                        this.trackBattle.BattleEndVictory();
                    }
                }

                if (this.battleResult.result === 0) {
                    this.happManager.Tick();
                    this.timeStamp.Advance(1);
                    this.ExecutePhase();
                }

            },
            Update: function (delta) {
                if (this.timeToChoose > 0 && this.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                    this.timeToChoose -= delta;
                    if (this.timeToChoose <= 0) {
                        this.Tick();
                    }
                }


            },
            FinishPreviousTick: function () {
                var $t, $t1;
                var previousPhase = this.battleState.phase;
                switch (previousPhase) {
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.EnemyMoveChoice: 
                        this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.HandRecharge);
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.HandRecharge: 
                        this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands);
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands: 
                        this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove);
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove: 
                        if (Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(this.battleState.moveTick_Now) >= ((this.battleState.moveTick_Total - 1) | 0)) {
                            this.battleState.moveTick_Now.Val = 0;
                            this.battleState.moveTick_Total = 1;
                            var noMoreUnitsToActThisTurn = true;
                            var i_initial = (this.battleState.actingEntity + 1) | 0;
                            if (i_initial < this.entities.Count) {
                                for (var i = i_initial; i < this.entities.Count; i = (i + 1) | 0) {
                                    if (this.entities.getItem(i).Alive) {
                                        this.battleState.actingEntity = i;
                                        noMoreUnitsToActThisTurn = false;
                                        break;
                                    }
                                }
                            }


                            if (noMoreUnitsToActThisTurn) {
                                if (Pidroh.ConsoleApp.Turnbased.Value.op_Implicit$1(this.battleState.turn) >= Pidroh.ConsoleApp.Turnbased.Value.op_Subtraction(this.battleState.turnsPerPhase, 1)) {
                                    this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.EnemyMoveChoice);
                                    $t = Bridge.getEnumerator(this.entities);
                                    try {
                                        while ($t.moveNext()) {
                                            var e = $t.Current;
                                            if (e.randomPosition) {
                                                Pidroh.ConsoleApp.Turnbased.BattleMain.RandomPosition(e);
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t, System.IDisposable)) {
                                            $t.System$IDisposable$Dispose();
                                        }
                                    }} else {
                                    this.battleState.actingEntity = 0;
                                    this.battleState.turn = Pidroh.ConsoleApp.Turnbased.Value.op_Addition(this.battleState.turn, 1);
                                    this.battleState.totalTurns = (this.battleState.totalTurns + 1) | 0;
                                }
                            }
                        } else {
                            $t1 = this.battleState.moveTick_Now;
                            $t1.Val += 1;
                        }
                        break;
                    default: 
                        break;
                }
            },
            ChangePhase: function (phase) {
                var $t;
                var previousPhase = this.battleState.phase;
                if (phase === previousPhase) {
                    return;
                }

                if (phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                    this.trackBattle.Round();
                    if (previousPhase !== Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ConfirmInput) {
                        if (this.BattleConfig.heroPresent) {
                            this.deckManager.Refresh();
                            this.playerHandPool.clear();
                            var moves = this.deckManager.selection;
                            for (var i = 0; i < moves.Count; i = (i + 1) | 0) {
                                this.playerHandPool.add(moves.getItem(i));
                            }

                            this.playerHandUnfixed.clear();
                            var commandsToAdd = moves.Count;
                            if (commandsToAdd > this.playerHandPool.Count) {
                                commandsToAdd = this.playerHandPool.Count;
                            }
                            for (var i1 = 0; i1 < commandsToAdd; i1 = (i1 + 1) | 0) {
                                this.playerHandUnfixed.add(this.playerHandPool.getItem(i1));
                            }


                            this.timeToChoose = this.timeToChooseMax;
                        }

                    }

                }
                if (previousPhase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove) {
                    this.battleState.turn.Val = 0;
                    this.battleState.actingEntity = 0;
                    this.battleState.moveTick_Now.Val = 0;
                    this.battleState.moveTick_Total = 1;
                    $t = Bridge.getEnumerator(this.entities);
                    try {
                        while ($t.moveNext()) {
                            var e = $t.Current;
                            for (var i2 = 0; i2 < e.moves.length; i2 = (i2 + 1) | 0) {
                                e.moves[System.Array.index(i2, e.moves)] = -1;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}
                this.battleState.phase = phase;
            },
            ConfirmInputStart: function () {
                this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ConfirmInput);
                this.inputs.Clear();
                this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Confirm, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
                this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Cancel, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
            },
            ExecutePhase: function () {
                var phase = this.battleState.phase;
                switch (phase) {
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.EnemyMoveChoice: 
                        this.ecsInteg.SpawnEnemies();
                        this.EnemyGenerateMoves();
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.HandRecharge: 
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands: 
                        this.PickHandInput();
                        break;
                    case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove: 
                        this.ecsInteg.SpawnEnemies();
                        this.ExecuteMoves();
                        break;
                    default: 
                        break;
                }
            },
            PickHandInput: function () {
                var $t, $t1, $t2;
                this.inputs.Clear();
                this.inputs.inputForConfirmation = new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor2(Pidroh.ConsoleApp.Turnbased.InputType.None, -1);

                if (!this.BattleConfig.attackDemonstrationMode) {
                    $t = Bridge.getEnumerator(this.playerHandFixed);
                    try {
                        while ($t.moveNext()) {
                            var hi = $t.Current;
                            this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor2(Pidroh.ConsoleApp.Turnbased.InputType.Move, hi), Pidroh.ConsoleApp.Turnbased.InputTags.MOVEFIX);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }$t1 = Bridge.getEnumerator(this.playerHandUnfixed);
                    try {
                        while ($t1.moveNext()) {
                            var hi1 = $t1.Current;
                            if (hi1 !== Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing) {
                                this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor2(Pidroh.ConsoleApp.Turnbased.InputType.Move, hi1), Pidroh.ConsoleApp.Turnbased.InputTags.MOVEUNFIX);
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Redo, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
                    this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Done, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
                    this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Help, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
                } else {
                    this.inputs.Add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.LeaveAttackDemonstration, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.ConsoleApp.Turnbased.InputTags.MISC);
                }


                var enemyExist = false;
                $t2 = Bridge.getEnumerator(this.entities);
                try {
                    while ($t2.moveNext()) {
                        var item = $t2.Current;
                        if (item.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            enemyExist = true;
                        }
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }},
            InputDone: function (input) {



                if (this.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ConfirmInput) {
                    this.ProcessInput(input);
                } else {
                    this.inputs.inputForConfirmation = input;
                }

            },
            InputConfirmed: function () {
                this.ChangePhase(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands);
                var input = this.inputs.inputForConfirmation;
                this.inputs.inputForConfirmation = new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor2(Pidroh.ConsoleApp.Turnbased.InputType.None, -1);
                this.ProcessInput(input);
            },
            ProcessInput: function (input) {
                var $t;
                if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.Move) {
                    var arg1 = input.arg1;
                    if (this.playerHandFixed.contains(arg1) || this.playerHandUnfixed.contains(arg1)) {
                        this.deckManager.InputUsed(arg1);
                        this.MoveChosen(arg1);
                    }

                }

                if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle) {
                    var misc = input.arg1;
                    if (misc === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Redo) {
                        $t = Bridge.getEnumerator(this.entities);
                        try {
                            while ($t.moveNext()) {
                                var e = $t.Current;
                                if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                                    for (var i = 0; i < e.moves.length; i = (i + 1) | 0) {
                                        if (e.moves[System.Array.index(i, e.moves)] == null) {
                                            e.moves[System.Array.index(i, e.moves)] = -1;
                                        }
                                        var value = e.moves[System.Array.index(i, e.moves)];

                                        if (value === -1 || i === Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(this.battleState.turnsPerPhase)) {
                                            if (i > 0) {
                                                var lostMove = e.moves[System.Array.index(((i - 1) | 0), e.moves)];
                                                this.deckManager.Recover(lostMove);
                                                e.moves[System.Array.index(((i - 1) | 0), e.moves)] = -1;
                                            }
                                        }
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }}
                    if (misc === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Done) {
                        this.Tick();
                    }
                    if (misc === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Confirm) {
                        this.InputConfirmed();
                        this.PickHandInput();
                    }
                    if (misc === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Cancel) {

                    }
                    if (misc === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.LeaveAttackDemonstration) {
                        this.battleResult.result = 3;
                    }
                }
            },
            BattleDecided: function () {
                var $t;
                var heroes = 0;
                var enemies = 0;
                $t = Bridge.getEnumerator(this.entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                            if (e.Alive) {
                                heroes = (heroes + 1) | 0;
                            }
                        }
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            if (e.Alive) {
                                enemies = (enemies + 1) | 0;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return heroes === 0 || enemies === 0;
            },
            MoveChosen: function (moveType) {
                var $t;
                $t = Bridge.getEnumerator(this.entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                            for (var i = 0; i < e.moves.length; i = (i + 1) | 0) {

                                var value = e.moves[System.Array.index(i, e.moves)];

                                if (value === -1) {

                                    e.moves[System.Array.index(i, e.moves)] = moveType;
                                    break;
                                }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            ExecuteMoves: function () {

                var attacker = this.entities.getItem(this.battleState.actingEntity);
                var turn = Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(this.battleState.turn);
                this.ExecuteMove(attacker, turn);
            },
            ExecuteMove: function (actor, turn) {
                this.MoveDataExecuter.ExecuteMove(actor, turn);

            },
            CalculateAttackMultiplier: function (actor) {
                var $t;
                var baseD = actor.damageMultiplier;
                $t = Bridge.getEnumerator(this.entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (!Bridge.referenceEquals(e, actor)) {
                            if (Pidroh.BaseUtils.Vector2D.op_Equality(e.pos.$clone(), actor.pos.$clone())) {
                                if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect) {
                                    baseD *= 3;
                                }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return baseD;
            },
            CalculateDefenderMultiplier: function (actor) {
                var $t;
                var baseD = 1;
                $t = Bridge.getEnumerator(this.entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (!Bridge.referenceEquals(e, actor)) {
                            if (Pidroh.BaseUtils.Vector2D.op_Equality(e.pos.$clone(), actor.pos.$clone())) {
                                if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect) {
                                    baseD = Bridge.Int.mul(baseD, 3);
                                }
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return baseD;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity", {
        $kind: "nested class",
        fields: {
            life: 0,
            pos: null,
            minPos: null,
            maxPos: null,
            moves: null,
            graphic: 0,
            graphicRepeatedIndex: 0,
            damageMultiplier: 0,
            drawLife: false,
            drawTurn: false,
            randomPosition: false,
            element: 0,
            maxLife: 0,
            Type: 0
        },
        props: {
            PositionV2D: {
                get: function () {
                    return new Pidroh.BaseUtils.Vector2D.$ctor2(this.pos.X, this.pos.Y);
                }
            },
            Dead: {
                get: function () {
                    return this.life <= 0;
                }
            },
            Alive: {
                get: function () {
                    return !this.Dead;
                }
            }
        },
        ctors: {
            init: function () {
                this.pos = new Pidroh.BaseUtils.Vector2D();
                this.minPos = new Pidroh.BaseUtils.Vector2D();
                this.maxPos = new Pidroh.BaseUtils.Vector2D();
                this.moves = System.Array.init(10, 0, System.Int32);
                this.damageMultiplier = 1;
                this.drawLife = true;
                this.drawTurn = true;
                this.randomPosition = false;
                this.element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness;
                this.maxLife = 3;
                this.Type = Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase", {
        $kind: "nested enum",
        statics: {
            fields: {
                EnemyMoveChoice: 0,
                HandRecharge: 1,
                PickHands: 2,
                ConfirmInput: 3,
                ExecuteMove: 4
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.BattleState", {
        $kind: "nested class",
        fields: {
            turn: null,
            totalTurns: 0,
            turnsPerPhase: null,
            moveTick_Now: null,
            moveTick_Total: 0,
            actingEntity: 0,
            phase: 0,
            BattleEndEnable: false
        },
        ctors: {
            init: function () {
                this.turn = new Pidroh.ConsoleApp.Turnbased.Value();
                this.turnsPerPhase = new Pidroh.ConsoleApp.Turnbased.Value();
                this.moveTick_Now = new Pidroh.ConsoleApp.Turnbased.Value();
                this.moveTick_Total = 0;
                this.actingEntity = 0;
                this.BattleEndEnable = true;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.Element", {
        $kind: "nested enum",
        statics: {
            fields: {
                Fire: 0,
                Ice: 1,
                Thunder: 2,
                Nothingness: 3
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType", {
        $kind: "nested enum",
        statics: {
            fields: {
                hero: 0,
                enemy: 1,
                neutral: 2,
                pickup: 3,
                paneleffect: 4
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag", {
        $kind: "nested enum",
        statics: {
            fields: {
                AttackHit: 0,
                AttackMiss: 1,
                DamageTaken: 2,
                MovementFail: 3
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType", {
        $kind: "nested enum",
        statics: {
            fields: {
                DoNothing: 0,
                MoveUp: 1,
                MoveLeft: 2,
                MoveDown: 3,
                MoveRight: 4,
                NormalShot: 5,
                Fire: 6,
                Ice: 7,
                Thunder: 8,
                IceBomb: 9,
                ThunderBomb: 10,
                SummonEntity: 11,
                DownFire: 12,
                TripleFire: 13
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ITextScreen_", {
        $kind: "interface"
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleRender.Colors", {
        $kind: "nested class",
        statics: {
            fields: {
                GridHero: 0,
                GridEnemy: 0,
                Hero: 0,
                Enemy: 0,
                HeroTurn: 0,
                EnemyTurn: 0,
                inputKey: 0,
                Board: 0,
                WindowLabel: 0,
                FireAura: 0,
                IceAura: 0,
                ThunderAura: 0,
                FireShot: 0,
                IceShot: 0,
                ThunderShot: 0,
                BackgroundInput: 0,
                InputDescription: 0,
                BackBattle: 0,
                BackCommand: 0,
                BackStripe: 0
            },
            ctors: {
                init: function () {
                    this.GridHero = 1;
                    this.GridEnemy = 2;
                    this.Hero = 3;
                    this.Enemy = 4;
                    this.HeroTurn = 5;
                    this.EnemyTurn = 6;
                    this.inputKey = 7;
                    this.Board = 8;
                    this.WindowLabel = 9;
                    this.FireAura = 10;
                    this.IceAura = 11;
                    this.ThunderAura = 12;
                    this.FireShot = 13;
                    this.IceShot = 14;
                    this.ThunderShot = 15;
                    this.BackgroundInput = 16;
                    this.InputDescription = 17;
                    this.BackBattle = 18;
                    this.BackCommand = 19;
                    this.BackStripe = 20;
                }
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey", {
        $kind: "nested enum",
        statics: {
            fields: {
                NONE: 0,
                LEFT: 1,
                RIGHT: 2,
                DOWN: 3,
                UP: 4,
                FIRE: 5,
                REDO: 6,
                DONE: 7,
                ICE: 8,
                THUNDER: 9,
                NORMALSHOT: 10
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleResult", {
        fields: {
            result: 0
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleSetup", {
        fields: {
            ecs: null,
            battleMain: null,
            moveCreator: null,
            timeStamp: null
        },
        ctors: {
            ctor: function (mode, ecs, enemyDataCreator, mv) {
                this.$initialize();
                this.ecs = ecs;
                this.timeStamp = new Pidroh.BaseUtils.TimeStamp();
                ecs.CreateEntityWithComponent(this.timeStamp);
                this.battleMain = new Pidroh.ConsoleApp.Turnbased.BattleMain(mode, ecs, this.timeStamp);

                this.moveCreator = mv;

                this.battleMain.MoveDataExecuter = new Pidroh.ConsoleApp.Turnbased.MoveDataExecuter(this.battleMain, this.moveCreator.moveDatas, ecs, this.timeStamp);

                var enemyDatas = enemyDataCreator.enemyDatas;
                var enemyFactory = new Pidroh.ConsoleApp.Turnbased.SpawnEntityFactory(ecs, enemyDatas, this.battleMain);
                this.battleMain.ecsInteg = new Pidroh.ConsoleApp.Turnbased.ECSIntegration(enemyFactory, ecs);
                var battleState = this.battleMain.battleState;

                {
                    var enemyAis = ecs.QuickAccessor2(Pidroh.ConsoleApp.Turnbased.EnemyAI, Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity);
                    var enemyAiStateless = ecs.CreateAccessor(System.Array.init([Pidroh.ConsoleApp.Turnbased.EnemyAI], Function), System.Array.init([Pidroh.ConsoleApp.Turnbased.EnemyAIState], Function));
                    var possibleMoves = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    var moveDatas = this.moveCreator.moveDatas;

                    this.battleMain.EnemyGenerateMoves = Bridge.fn.bind(this, function () {
                        var $t, $t1, $t2, $t3;
                        while (enemyAiStateless.Length > 0) {
                            Pidroh.ECS.ExtensionMethods.AddComponent(Pidroh.ConsoleApp.Turnbased.EnemyAIState, enemyAiStateless.Get(0));

                        }

                        for (var i = 0; i < enemyAis.Length; i = (i + 1) | 0) {

                            var ai = enemyAis.Comp1(i);
                            var battler = enemyAis.Comp2(i);
                            var aiState = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.EnemyAIState, enemyAis.Entity(i));
                            var moves = ai.moves;
                            var posS = battler.pos.$clone();
                            for (var j = 0; j < Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(battleState.turnsPerPhase); j = (j + 1) | 0) {
                                var aiPro = (((j + aiState.progress) | 0)) % moves.Count;
                                var move = moves.getItem(aiPro);
                                var moveId = -1;
                                if (Bridge.is(move, Pidroh.ConsoleApp.Turnbased.MoveUse)) {

                                    moveId = (Bridge.as(move, Pidroh.ConsoleApp.Turnbased.MoveUse)).move;
                                }

                                if (Bridge.is(move, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves)) {

                                    var m = Bridge.cast(move, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves);
                                    if (Bridge.referenceEquals(m, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove)) {

                                        possibleMoves.clear();
                                        for (var i2 = 0; i2 < moveDatas.Count; i2 = (i2 + 1) | 0) {
                                            var tags = moveDatas.getItem(i2).tags;
                                            if (tags.contains(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement)) {
                                                var validMove = true;
                                                var us = moveDatas.getItem(i2).units;

                                                $t = Bridge.getEnumerator(us);
                                                try {
                                                    while ($t.moveNext()) {
                                                        var item = $t.Current;
                                                        var things = item.thingsToHappen;
                                                        $t1 = Bridge.getEnumerator(things);
                                                        try {
                                                            while ($t1.moveNext()) {
                                                                var thing = $t1.Current;
                                                                if (Bridge.is(thing, Pidroh.ConsoleApp.Turnbased.MoveAction)) {
                                                                    var ma = Bridge.as(thing, Pidroh.ConsoleApp.Turnbased.MoveAction);
                                                                    var dis = ma.distance.$clone();
                                                                    var testPos = Pidroh.BaseUtils.Vector2D.op_Addition(posS.$clone(), dis.$clone());
                                                                    if (testPos.X < 3) {
                                                                        validMove = false;
                                                                    }
                                                                    if (testPos.X > 5) {
                                                                        validMove = false;
                                                                    }
                                                                    if (testPos.Y < 0) {
                                                                        validMove = false;
                                                                    }
                                                                    if (testPos.Y > 2) {
                                                                        validMove = false;
                                                                    }
                                                                }
                                                            }
                                                        } finally {
                                                            if (Bridge.is($t1, System.IDisposable)) {
                                                                $t1.System$IDisposable$Dispose();
                                                            }
                                                        }
                                                    }
                                                } finally {
                                                    if (Bridge.is($t, System.IDisposable)) {
                                                        $t.System$IDisposable$Dispose();
                                                    }
                                                }if (validMove) {
                                                    possibleMoves.add(i2);
                                                }
                                            }
                                        }
                                        moveId = Pidroh.BaseUtils.Extensions.RandomElement(System.Int32, possibleMoves);


                                    }

                                }

                                if (moveId >= 0) {
                                    battler.moves[System.Array.index(j, battler.moves)] = moveId;
                                    var md = this.moveCreator.moveDatas.getItem(moveId);
                                    var us1 = md.units;
                                    $t2 = Bridge.getEnumerator(us1);
                                    try {
                                        while ($t2.moveNext()) {
                                            var item1 = $t2.Current;
                                            var things1 = item1.thingsToHappen;
                                            $t3 = Bridge.getEnumerator(things1);
                                            try {
                                                while ($t3.moveNext()) {
                                                    var thing1 = $t3.Current;
                                                    if (Bridge.is(thing1, Pidroh.ConsoleApp.Turnbased.MoveAction)) {
                                                        var ma1 = Bridge.as(thing1, Pidroh.ConsoleApp.Turnbased.MoveAction);
                                                        var dis1 = ma1.distance.$clone();
                                                        posS = Pidroh.BaseUtils.Vector2D.op_Addition(posS.$clone(), dis1.$clone());

                                                    }
                                                }
                                            } finally {
                                                if (Bridge.is($t3, System.IDisposable)) {
                                                    $t3.System$IDisposable$Dispose();
                                                }
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$Dispose();
                                        }
                                    }}
                            }
                            aiState.progress = (aiState.progress + Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(battleState.turnsPerPhase)) | 0;
                        }
                    });
                }

                var trackBattle = new Pidroh.ConsoleApp.Turnbased.TrackBattle();
                this.battleMain.MoveDataExecuter.trackBattle = trackBattle;
                this.battleMain.trackBattle = trackBattle;

            }
        },
        methods: {
            AttackPreviewInitialization: function (moveDataChosenPreview, enemyTutorialId, moveDataIndex) {
                this.battleMain.BattleConfigure(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor3(false, true, false, false));
                var testEnemySpawn = new Pidroh.ConsoleApp.Turnbased.SpawnData.$ctor1(((enemyTutorialId + moveDataIndex) | 0), new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1), Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy);
                this.ecs.CreateEntityWithComponent(testEnemySpawn);


            },
            StageInitialization: function (stageEntity, ecs) {
                var $t, $t1, $t2;
                var fixedAttack = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.FixedAttackStage, stageEntity);
                var playerHandPool = this.battleMain.playerHandPool;
                if (fixedAttack != null) {

                    $t = Bridge.getEnumerator(fixedAttack.moves);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            playerHandPool.add(item);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }} else {
                    playerHandPool.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire);
                    playerHandPool.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice);
                    playerHandPool.add(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder);
                }

                var deckManager = new Pidroh.ConsoleApp.Turnbased.DeckManager(5);
                this.battleMain.deckManager = deckManager;

                if (fixedAttack != null) {

                    $t1 = Bridge.getEnumerator(fixedAttack.moves);
                    try {
                        while ($t1.moveNext()) {
                            var item1 = $t1.Current;
                            var deckId = 0;
                            switch (this.moveCreator.moveRenders.getItem(item1).element) {
                                case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire: 
                                    deckManager.SetDefaultAttack(0, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire);
                                    break;
                                case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice: 
                                    deckManager.SetDefaultAttack(1, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice);
                                    deckId = 1;
                                    break;
                                case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder: 
                                    deckId = 2;
                                    deckManager.SetDefaultAttack(2, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder);
                                    break;
                                case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness: 
                                    break;
                                default: 
                                    break;
                            }
                            if (item1 !== Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire) {
                                if (item1 !== Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice) {
                                    if (item1 !== Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder) {
                                        deckManager.Add(deckId, item1);
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }} else {
                    deckManager.SetDefaultAttack(0, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire);
                    deckManager.SetDefaultAttack(1, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice);
                    deckManager.SetDefaultAttack(2, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder);





                }

                var stage = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageData, stageEntity);
                var enmys = stage.spawnDatas;

                $t2 = Bridge.getEnumerator(enmys);
                try {
                    while ($t2.moveNext()) {
                        var enemy = $t2.Current;
                        ecs.CreateEntityWithComponent(enemy);
                    }
                } finally {
                    if (Bridge.is($t2, System.IDisposable)) {
                        $t2.System$IDisposable$Dispose();
                    }
                }

                var trackInfo = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.TrackInfoStage, stageEntity);
                this.battleMain.trackBattle.stageInfo = trackInfo;

                this.battleMain.BattleConfigure(stage.battleConfig);
            },
            SetDefaultAttack: function (index, attack) {
                this.battleMain.deckManager.SetDefaultAttack(index, attack);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ColorStuff", {
        statics: {
            fields: {
                GoodMain: null,
                neutralDark: null,
                neutralStrong: null,
                GoodSub: null,
                EvilMain: null,
                colors: null
            },
            ctors: {
                init: function () {
                    this.neutralDark = "#19013b";
                    this.neutralStrong = "#2c3e43";
                    this.colors = System.Array.init(25, null, System.String);
                },
                ctor: function () {
                    for (var i = 0; i < Pidroh.ConsoleApp.Turnbased.ColorStuff.colors.length; i = (i + 1) | 0) {
                        Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(i, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#400020";
                    }

                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#8ad896";
                    var heroSub = "#4c6d50";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = heroSub;
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#ff7694";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = heroSub;
                    var enemysub = "#a7464f";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = enemysub;
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = enemysub;
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Board, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#1e486e";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#688690";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#1e486e";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.FireAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#793100";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.IceAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#005590";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#00583d";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.FireShot, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#f82b36";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.IceShot, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#007eff";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderShot, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#a37c00";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#080808";


                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#9E8664";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#808080";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#000000";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#1A1A1A";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#00B2B2";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#FF0040";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#00468C";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#8C0023";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#66FFFF";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#D90036";

                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#BFBFBF";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)];
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)];
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)];
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#666666";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackCommand, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#333333";

                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.FireAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#FF8C66";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.IceAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#66FFFF";
                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderAura, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#FFFF66";

                    Pidroh.ConsoleApp.Turnbased.ColorStuff.colors[System.Array.index(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackStripe, Pidroh.ConsoleApp.Turnbased.ColorStuff.colors)] = "#1A140D";
                }
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Condition", {
        fields: {
            type: 0,
            target: 0,
            vector: null
        },
        ctors: {
            init: function () {
                this.vector = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function (type, target, vector) {
                this.$initialize();
                this.type = type;
                this.target = target;
                this.vector = vector.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ConditionType", {
        $kind: "enum",
        statics: {
            fields: {
                CanMove: 0
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ContentCreator.StageDataProcedural_A", {
        fields: {
            stageDataCreator: null,
            enemyIds: null,
            bossIds: null,
            attackPrizeIds: null,
            positionPool: null
        },
        ctors: {
            init: function () {
                this.enemyIds = System.Array.init([0, 1, 2, 8, 5], System.Int32);
                this.bossIds = System.Array.init([3, 9, 10], System.Int32);
                this.attackPrizeIds = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.positionPool = new (System.Collections.Generic.List$1(Pidroh.BaseUtils.Point2D)).ctor();
            },
            ctor: function (sdc) {
                this.$initialize();

                this.stageDataCreator = sdc;
                for (var i = 14; i < 38; i = (i + 1) | 0) {
                    this.attackPrizeIds.add(i);
                }
                var master = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                sdc.AddGroup(master);
                master.childIds.add(sdc.TutorialGroup());




                for (var i1 = 0; i1 < 2; i1 = (i1 + 1) | 0) {
                    var campaign = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                    campaign.level = 1;
                    var eCamp = sdc.AddGroup(campaign);
                    master.childIds.add(eCamp.$clone());
                    for (var j = 0; j < 4; j = (j + 1) | 0) {

                        var group = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                        group.level = 0;
                        var eGroup = sdc.AddGroup(group);
                        campaign.childIds.add(eGroup.$clone());
                        sdc.currentGroup = group;

                        var attackPrize = 0;
                        var normalStage = j < 3;
                        var numberOfStages = 3;
                        for (var l = 0; l < numberOfStages; l = (l + 1) | 0) {
                            for (var x = 0; x < 3; x = (x + 1) | 0) {
                                for (var y = 0; y < 3; y = (y + 1) | 0) {
                                    this.positionPool.add(new Pidroh.BaseUtils.Point2D.$ctor1(((x + 3) | 0), y));
                                }
                            }

                            var finalStage = l === ((numberOfStages - 1) | 0);
                            {
                                var attackIndex = Pidroh.BaseUtils.RandomSupplier.Range(0, ((this.attackPrizeIds.Count - 1) | 0));
                                attackPrize = this.attackPrizeIds.getItem(attackIndex);
                                this.attackPrizeIds.removeAt(attackIndex);
                            }
                            var sd = new Pidroh.ConsoleApp.Turnbased.StageData.ctor();
                            var nEnemies = Pidroh.BaseUtils.RandomSupplier.Range(1, 3);
                            var currency = 30;
                            var boss = finalStage && !normalStage;
                            if (boss) {
                                currency = 80;
                                nEnemies = 1;
                            }

                            for (var enemyI = 0; enemyI < nEnemies; enemyI = (enemyI + 1) | 0) {
                                var posI = Pidroh.BaseUtils.RandomSupplier.Range(0, ((this.positionPool.Count - 1) | 0));
                                var pos = this.positionPool.getItem(posI).$clone();
                                this.positionPool.removeAt(posI);
                                var enemyId = Pidroh.BaseUtils.RandomSupplier.RandomElement(System.Int32, this.enemyIds);
                                if (boss) {
                                    enemyId = Pidroh.BaseUtils.RandomSupplier.RandomElement(System.Int32, this.bossIds);
                                }
                                sd.spawnDatas.add(sdc.Enemy(enemyId, new Pidroh.BaseUtils.Vector2D.$ctor2(pos.X, pos.Y)));
                            }
                            sdc.AddStage([sd, new Pidroh.ConsoleApp.Turnbased.CurrencyPrize.$ctor1(currency)]);
                        }




                    }
                }



            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.CurrencyHolder", {
        fields: {
            currency: 0
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.CurrencyPrize", {
        fields: {
            currency: null
        },
        ctors: {
            $ctor1: function (attack) {
                this.$initialize();
                this.currency = System.Array.init(1, 0, System.Int32);
                this.currency[System.Array.index(0, this.currency)] = attack;
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.DealDamageAction", {
        fields: {
            area: null,
            target: 0,
            damage: 0,
            element: 0,
            userRefOffset: null
        },
        ctors: {
            init: function () {
                this.userRefOffset = new Pidroh.BaseUtils.Vector2D();
                this.target = Pidroh.ConsoleApp.Turnbased.Target.None;
            },
            ctor: function (area, damage, element) {
                this.$initialize();
                this.area = area;
                this.damage = damage;
                this.element = element;
                this.target = Pidroh.ConsoleApp.Turnbased.Target.Area;
            },
            $ctor1: function (target, damage, element) {
                this.$initialize();
                this.target = target;
                this.damage = damage;
                this.element = element;
            },
            $ctor2: function (target, damage, element, userRefOffset) {
                Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1.call(this, target, damage, element);
                this.userRefOffset = userRefOffset.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx", {
        statics: {
            fields: {
                messages: null
            },
            ctors: {
                init: function () {
                    this.messages = new (System.Collections.Generic.List$1(System.String)).ctor();
                }
            },
            methods: {
                Log: function (v) {
                    Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx.messages.add(v);
                },
                Show: function () {
                    var $t;
                    System.Console.Clear();
                    $t = Bridge.getEnumerator(Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx.messages);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            System.Console.WriteLine(item);

                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }prompt();
                }
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.DeckManager", {
        fields: {
            decks: null,
            decksStatic: null,
            discards: null,
            decksOk: null,
            defaultAttack: null,
            selection: null,
            decksNotEmpty: null,
            defaultAttackAlwaysPresentAtStart: false,
            movesToRemove: null
        },
        ctors: {
            init: function () {
                this.decks = System.Array.init(3, null, System.Collections.Generic.List$1(System.Int32));
                this.decksStatic = System.Array.init(3, null, System.Collections.Generic.List$1(System.Int32));
                this.discards = System.Array.init(3, null, System.Collections.Generic.List$1(System.Int32));
                this.decksOk = System.Array.init(3, false, System.Boolean);
                this.defaultAttack = System.Array.init(4, 0, System.Int32);
                this.selection = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.decksNotEmpty = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.defaultAttackAlwaysPresentAtStart = true;
                this.movesToRemove = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            ctor: function (handSize) {
                this.$initialize();
                for (var i = 0; i < handSize; i = (i + 1) | 0) {
                    this.selection.add(0);
                }
                for (var i1 = 0; i1 < this.decks.length; i1 = (i1 + 1) | 0) {
                    this.decks[System.Array.index(i1, this.decks)] = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                    this.decksStatic[System.Array.index(i1, this.decksStatic)] = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                }
            }
        },
        methods: {
            Refresh: function () {
                var $t;
                $t = Bridge.getEnumerator(this.movesToRemove);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        var index = this.selection.indexOf(item);
                        if (index !== -1) {
                            this.selection.setItem(index, 0);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.movesToRemove.clear();
                if (this.defaultAttackAlwaysPresentAtStart) {
                    for (var i = 0; i < this.defaultAttack.length; i = (i + 1) | 0) {
                        this.selection.setItem(i, this.defaultAttack[System.Array.index(i, this.defaultAttack)]);
                    }
                }
                this.RefreshDeckEmptyStatus();
                for (var i1 = 0; i1 < this.decks.length; i1 = (i1 + 1) | 0) {
                    this.decksOk[System.Array.index(i1, this.decksOk)] = false;
                    if (this.selection.contains(this.defaultAttack[System.Array.index(i1, this.defaultAttack)])) {
                        this.decksOk[System.Array.index(i1, this.decksOk)] = true;
                    }
                    for (var j = 0; j < this.decksStatic[System.Array.index(i1, this.decksStatic)].Count; j = (j + 1) | 0) {

                        if (this.selection.contains(this.decksStatic[System.Array.index(i1, this.decksStatic)].getItem(j))) {
                            this.decksOk[System.Array.index(i1, this.decksOk)] = true;
                            break;
                        }
                    }



                }
                for (var i2 = 0; i2 < this.selection.Count; i2 = (i2 + 1) | 0) {
                    if (this.selection.getItem(i2) > 0) {
                        continue;
                    }
                    var added = false;
                    for (var j1 = 0; j1 < this.decksOk.length; j1 = (j1 + 1) | 0) {
                        if (!this.decksOk[System.Array.index(j1, this.decksOk)]) {
                            this.decksOk[System.Array.index(j1, this.decksOk)] = true;
                            added = true;
                            var move = this.defaultAttack[System.Array.index(j1, this.defaultAttack)];
                            if (this.decks[System.Array.index(j1, this.decks)].Count !== 0) {
                                move = this.Draw(j1);
                            }

                            this.selection.setItem(i2, move);
                            this.RefreshDeckEmptyStatus();
                            break;
                        }
                    }
                    if (!added) {
                        if (this.decksNotEmpty.Count > 0) {
                            var deck = Pidroh.BaseUtils.Extensions.RandomElement(System.Int32, this.decksNotEmpty);
                            var move1 = this.Draw(deck);
                            this.selection.setItem(i2, move1);
                            this.RefreshDeckEmptyStatus();
                        }
                    }
                }
            },
            SetDefaultAttack: function (deckId, move) {
                this.defaultAttack[System.Array.index(deckId, this.defaultAttack)] = move;
            },
            Draw: function (deckId) {
                var move = Pidroh.BaseUtils.Extensions.RandomElement(System.Int32, this.decks[System.Array.index(deckId, this.decks)]);
                this.decks[System.Array.index(deckId, this.decks)].remove(move);
                return move;
            },
            Add: function (deckId, item) {
                this.decks[System.Array.index(deckId, this.decks)].add(item);
                this.decksStatic[System.Array.index(deckId, this.decksStatic)].add(item);
            },
            RefreshDeckEmptyStatus: function () {
                this.decksNotEmpty.clear();
                for (var i = 0; i < this.decks.length; i = (i + 1) | 0) {
                    if (this.decks[System.Array.index(i, this.decks)].Count > 0) {
                        this.decksNotEmpty.add(i);
                    }
                }
            },
            InputUsed: function (move) {
                this.movesToRemove.add(move);

            },
            Recover: function (lostMove) {
                this.movesToRemove.remove(lostMove);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ECSIntegration", {
        fields: {
            enemyFactory: null,
            ecs: null
        },
        ctors: {
            ctor: function (enemyFactory, ecs) {
                this.$initialize();
                this.enemyFactory = enemyFactory;
                this.ecs = ecs;
            }
        },
        methods: {
            HeroCreated: function (hero) {
                this.ecs.CreateEntityWithComponent(hero);
            },
            SpawnEnemies: function () {
                this.enemyFactory.Spawn();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.EnemyAI", {
        fields: {
            moves: null
        },
        ctors: {
            init: function () {
                this.moves = new (System.Collections.Generic.List$1(System.Object)).ctor();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.EnemyAIState", {
        fields: {
            progress: 0
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.EnemyData", {
        fields: {
            enemyAI: null,
            hp: 0,
            render: 0
        },
        ctors: {
            ctor: function (enemyAI, hp, render) {
                this.$initialize();
                this.enemyAI = enemyAI;
                this.hp = hp;
                this.render = render;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.EnemyDataCreator", {
        fields: {
            renderTexts: null,
            enemyDatas: null,
            moveCreatorProg: null,
            startOfTutorialEnemy: 0
        },
        ctors: {
            init: function () {
                this.enemyDatas = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.EnemyData)).ctor();
            },
            ctor: function (renderTexts, moveCreatorProg) {
                this.$initialize();
                renderTexts.add("@");
                this.renderTexts = renderTexts;
                this.moveCreatorProg = moveCreatorProg;


                this.AddEnemy(this.Actions([this.Moves([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder])]), 12, "%");
                this.AddEnemy(this.Actions([this.Moves([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing])]), 15, "#");
                this.AddEnemy(this.Actions([this.Moves([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight])]), 17, "&");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), "Summon", Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 450, "$");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 28, "H");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 30, "J");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 30, "L");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 30, "K");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DownFire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove]), 30, "K");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove]), 250, "$");
                this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves.SmartMove, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.TripleFire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 250, "$");

                this.startOfTutorialEnemy = this.enemyDatas.Count;
                var moves = Bridge.cast(System.Enum.getValues(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType), System.Array.type(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType));
                for (var i = 0; i < moves.length; i = (i + 1) | 0) {
                    this.AddEnemy(this.Actions([Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(moves[System.Array.index(i, moves)], Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)), Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))]), 5, "@");
                }

            }
        },
        methods: {
            Actions: function (obs) {
                var $t, $t1;
                if (obs === void 0) { obs = []; }
                var ai = new Pidroh.ConsoleApp.Turnbased.EnemyAI();

                $t = Bridge.getEnumerator(obs);
                try {
                    while ($t.moveNext()) {
                        var o = $t.Current;
                        if (Bridge.is(o, System.Int32)) {
                            ai.moves.add(new Pidroh.ConsoleApp.Turnbased.MoveUse.$ctor1(System.Nullable.getValue(Bridge.cast(Bridge.unbox(o), System.Int32))));
                            continue;
                        }
                        if (Bridge.is(o, System.String)) {
                            ai.moves.add(new Pidroh.ConsoleApp.Turnbased.MoveUse.$ctor1(this.moveCreatorProg.GetMoveId(Bridge.as(o, System.String))));
                            continue;
                        }
                        if (Bridge.is(o, System.Array.type(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))) {
                            $t1 = Bridge.getEnumerator(Bridge.as(o, System.Array.type(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)));
                            try {
                                while ($t1.moveNext()) {
                                    var item = $t1.Current;
                                    ai.moves.add(new Pidroh.ConsoleApp.Turnbased.MoveUse.$ctor1(item));
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }continue;
                        }
                        ai.moves.add(o);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return ai;
            },
            Moves: function (moves) {
                if (moves === void 0) { moves = []; }
                return moves;
            },
            AddEnemy: function (ai, hp, renderText) {
                var render = this.renderTexts.Count;
                this.renderTexts.add(renderText);
                this.enemyDatas.add(new Pidroh.ConsoleApp.Turnbased.EnemyData(ai, hp, render));
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.FixedAttackStage", {
        fields: {
            moves: null
        },
        ctors: {
            init: function () {
                this.moves = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            $ctor1: function (move) {
                this.$initialize();
                this.moves.add(move);
            },
            $ctor2: function (move) {
                if (move === void 0) { move = []; }

                this.$initialize();
                this.moves.AddRange(move);
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappArea", {
        fields: {
            area: null,
            offset: null,
            mirroringX: 0
        },
        ctors: {
            init: function () {
                this.offset = new Pidroh.BaseUtils.Vector2D();
            },
            $ctor1: function (area) {
                this.$initialize();
                this.area = area;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor2: function (area, offset, mirroringX) {
                this.$initialize();
                this.area = area;
                this.offset = offset.$clone();
                this.mirroringX = mirroringX;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappDamageData", {
        fields: {
            targetE: 0,
            damageE: 0,
            target: 0,
            amount: 0,
            superEffective: false,
            elementalBlock: false
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (targetE, damageE, target, amount, superEffective, elementalBlock) {
                this.$initialize();
                this.targetE = targetE;
                this.damageE = damageE;
                this.target = target;
                this.amount = amount;
                this.superEffective = superEffective;
                this.elementalBlock = elementalBlock;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappMoveData", {
        fields: {
            user: 0,
            target: 0,
            element: 0
        },
        ctors: {
            init: function () {
                this.target = -1;
                this.element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (user) {
                this.$initialize();
                this.user = user;
            },
            $ctor2: function (user, target, element) {
                this.$initialize();
                this.user = user;
                this.target = target;
                this.element = element;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappMovement", {
        fields: {
            moveFrom: null,
            moveTo: null,
            success: false
        },
        ctors: {
            init: function () {
                this.moveFrom = new Pidroh.BaseUtils.Vector2D();
                this.moveTo = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (moveFrom, moveTo, success) {
                this.$initialize();
                this.moveFrom = moveFrom.$clone();
                this.moveTo = moveTo.$clone();
                this.success = success;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Happs.Happ", {
        fields: {
            tags: null,
            TimeStamp: 0,
            attrs: null
        },
        ctors: {
            init: function () {
                this.tags = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.attrs = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.Happs.Happ.Attribute)).ctor();
            },
            ctor: function (mainTag) {
                this.$initialize();
                this.tags.add(System.Convert.toInt32(mainTag));
            }
        },
        methods: {
            AddAttribute: function (a) {
                this.attrs.add(a);
                return this;
            },
            GetAttribute_Int: function (index) {
                return Bridge.Int.clip32(this.attrs.getItem(index).Value);
            },
            HasTag: function (tagsNeeded) {
                return this.tags.contains(tagsNeeded);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Happs.Happ.Attribute", {
        $kind: "nested class",
        fields: {
            Value: 0,
            tags: null
        },
        ctors: {
            init: function () {
                this.tags = new Pidroh.ConsoleApp.Turnbased.Happs.TagHolder();
            }
        },
        methods: {
            SetValue: function (f) {
                this.Value = f;
                return this;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Happs.HappHandler", {
        fields: {
            necessaryTags: null,
            Handle: null
        },
        ctors: {
            init: function () {
                this.necessaryTags = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            ctor: function (mainTag, handle) {
                this.$initialize();
                this.necessaryTags.add(System.Convert.toInt32(mainTag));
                this.Handle = handle;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Happs.HappManager", {
        fields: {
            CurrentTime: 0,
            Happs: null,
            handlers: null,
            latestHandled: 0
        },
        ctors: {
            init: function () {
                this.Happs = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.Happs.Happ)).ctor();
                this.handlers = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.Happs.HappHandler)).ctor();
                this.latestHandled = -1;
            }
        },
        methods: {
            AddHandler: function (hh) {
                this.handlers.add(hh);
            },
            TryHandle: function () {
                if (this.latestHandled !== this.CurrentTime) {
                    this.Handle();
                }
            },
            Handle: function () {
                var $t, $t1;
                this.latestHandled = this.CurrentTime;
                $t = Bridge.getEnumerator(this.handlers);
                try {
                    while ($t.moveNext()) {
                        var h = $t.Current;
                        for (var i = (this.Happs.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                            if (this.Happs.getItem(i).TimeStamp !== this.CurrentTime) {
                                Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx.Log("Happening not equal to current time");
                                break;
                            }
                            var hasTags = true;
                            $t1 = Bridge.getEnumerator(h.necessaryTags);
                            try {
                                while ($t1.moveNext()) {
                                    var tagsNeeded = $t1.Current;
                                    if (!this.Happs.getItem(i).HasTag(tagsNeeded)) {
                                        hasTags = false;
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }if (hasTags) {
                                Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx.Log("Happening handled");
                                h.Handle(this.Happs.getItem(i));
                            } else {
                                Pidroh.ConsoleApp.Turnbased.DebugExtra.DebugEx.Log("Happening tag is different");
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            Add: function (h) {
                h.TimeStamp = this.CurrentTime;
                this.Happs.add(h);
                return h;
            },
            Tick: function () {
                this.CurrentTime = (this.CurrentTime + 1) | 0;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Happs.TagHolder", {
        fields: {
            Tags: null
        },
        ctors: {
            init: function () {
                this.Tags = new (System.Collections.Generic.List$1(System.Object)).ctor();
            }
        },
        methods: {
            HasTag: function (t) {
                return this.Tags.contains(t);
            },
            Add: function (v) {
                this.Tags.add(v);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappShoot", {
        fields: {
            start: null,
            end: null
        },
        ctors: {
            init: function () {
                this.start = new Pidroh.BaseUtils.Vector2D();
                this.end = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (start, end) {
                this.$initialize();
                this.start = start.$clone();
                this.end = end.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.HappTags", {
        fields: {
            tags: null
        },
        ctors: {
            init: function () {
                this.tags = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            $ctor1: function (tags) {
                this.$initialize();
                this.tags.AddRange(tags);
            },
            $ctor2: function (i) {
                this.$initialize();
                this.tags.add(i);
            },
            ctor: function () {
                this.$initialize();

            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.InputHolder", {
        fields: {
            inputs: null,
            tags: null,
            inputForConfirmation: null
        },
        ctors: {
            init: function () {
                this.inputForConfirmation = new Pidroh.ConsoleApp.Turnbased.InputUnit();
                this.inputs = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.InputUnit)).ctor();
                this.tags = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.InputTags)).ctor();
            }
        },
        methods: {
            Clear: function () {
                this.inputs.clear();
                this.tags.clear();
            },
            Add: function (input, tag) {
                this.inputs.add(input);
                this.tags.add(tag);

            },
            TagIs: function (i2, tag) {
                if (this.tags.Count <= i2) {
                    return false;
                }
                return this.tags.getItem(i2) === tag;
            },
            Contains: function (key) {
                var $t;
                $t = Bridge.getEnumerator(this.inputs);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        if (i.arg1 === key.arg1 && i.type === key.type) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return false;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.InputTags", {
        $kind: "enum",
        statics: {
            fields: {
                NONE: 0,
                MOVEFIX: 1,
                MOVEUNFIX: 2,
                MISC: 3
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.InputType", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Move: 1,
                MiscBattle: 2
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.InputUnit", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.ConsoleApp.Turnbased.InputUnit(); }
            }
        },
        fields: {
            type: 0,
            arg1: 0
        },
        ctors: {
            $ctor2: function (type, arg1) {
                this.$initialize();
                this.type = type;
                this.arg1 = arg1;
            },
            $ctor1: function (type, arg1) {
                this.$initialize();
                this.type = type;
                this.arg1 = System.Convert.toInt32(arg1);
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3739141169, this.type, this.arg1]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.ConsoleApp.Turnbased.InputUnit)) {
                    return false;
                }
                return Bridge.equals(this.type, o.type) && Bridge.equals(this.arg1, o.arg1);
            },
            $clone: function (to) {
                var s = to || new Pidroh.ConsoleApp.Turnbased.InputUnit();
                s.type = this.type;
                s.arg1 = this.arg1;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MiscBattleInput", {
        $kind: "enum",
        statics: {
            fields: {
                Done: 0,
                Redo: 1,
                Preview: 2,
                Confirm: 3,
                Cancel: 4,
                Help: 5,
                LeaveAttackDemonstration: 6
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MiscHappTags", {
        $kind: "enum",
        statics: {
            fields: {
                ChangeElement: 500,
                Damage: 501,
                Death: 502
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveAction", {
        fields: {
            target: 0,
            distance: null
        },
        ctors: {
            init: function () {
                this.distance = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function (target, amount) {
                this.$initialize();
                this.target = target;
                this.distance = amount.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveCreatorProg", {
        fields: {
            moveDatas: null,
            moveRenders: null,
            areaUtils: null,
            ecs: null,
            elements: null,
            elementLabels: null,
            elementLetter: null
        },
        ctors: {
            init: function () {
                this.moveDatas = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.MoveData)).ctor();
                this.moveRenders = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.MoveMetaData)).ctor();
                this.areaUtils = new Pidroh.ConsoleApp.Turnbased.MoveCreatorProg.AreaCreationUtils();
                this.elements = System.Array.init([Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder], Pidroh.ConsoleApp.Turnbased.BattleMain.Element);
                this.elementLabels = System.Array.init(["Fire", "Ice", "Bolt"], System.String);
                this.elementLetter = System.Array.init(["F", "I", "B"], System.String);
            },
            ctor: function (ecs) {
                this.$initialize();
                this.ecs = ecs;
                var item = new Pidroh.ConsoleApp.Turnbased.MoveData.$ctor1("");
                this.moveDatas.add(item);
                this.moveRenders.add(new Pidroh.ConsoleApp.Turnbased.MoveMetaData("", "", Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness));
                ecs.CreateEntityWithComponent(item);
                var directions = System.Array.init([new Pidroh.BaseUtils.Vector2D.$ctor2(0, 1), new Pidroh.BaseUtils.Vector2D.$ctor2(-1, 0), new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1), new Pidroh.BaseUtils.Vector2D.$ctor2(1, 0)], Pidroh.BaseUtils.Vector2D);
                var moveLabels = System.Array.init(["Move Up", "Move Left", "Move Down", "Move Right"], System.String);
                var moveAbrev = System.Array.init(["^", "<", "v", ">"], System.String);
                for (var i = 0; i < directions.length; i = (i + 1) | 0) {
                    this.NewMoveData(moveLabels[System.Array.index(i, moveLabels)], new Pidroh.ConsoleApp.Turnbased.Condition(Pidroh.ConsoleApp.Turnbased.ConditionType.CanMove, Pidroh.ConsoleApp.Turnbased.Target.Self, directions[System.Array.index(i, directions)].$clone()), new Pidroh.ConsoleApp.Turnbased.MoveAction(Pidroh.ConsoleApp.Turnbased.Target.Self, directions[System.Array.index(i, directions)].$clone()), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags)), Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.HeroInitial, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData(moveLabels[System.Array.index(i, moveLabels)], moveAbrev[System.Array.index(i, moveAbrev)], moveLabels[System.Array.index(i, moveLabels)], 0, 3);
                }

                var baseDamage = 10;

                this.NewMoveData$1("Gun", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Gun", "G", "Shoots forward", baseDamage);


                this.NewMoveData$1("Firegun", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Firegun", "FG", "Shoots forward", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire);

                this.NewMoveData$1("Icegun", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Icegun", "IG", "Shoots forward", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice);

                this.NewMoveData$1("Boltgun", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Boltgun", "BG", "Shoots forward", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder);

                var areaBomb = this.AreaUser().RowForward(1, 3);
                this.NewMoveData$1("Icebomb", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.ctor(areaBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.ctor(areaBomb, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Icebomb", "IB", "Attacks row three squares forward", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice);

                this.NewMoveData$1("Boltbomb", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.ctor(areaBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.ctor(areaBomb, baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Boltbomb", "BB", "Attacks row three squares forward", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder);

                this.NewMoveData$1("Summon", this.OneTickPerAction([Pidroh.ConsoleApp.Turnbased.SummonEntity.Enemy(0, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 0))]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Summon, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Summon", "SU", "Summons an enemy", 0);

                var directionMove = new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1);
                var damageLow2 = Bridge.Int.clip32(baseDamage * 0.75);
                var damageHigh = Bridge.Int.clip32(baseDamage * 3.0);
                this.NewMoveData$1("Downfire", this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow2, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)]), this.TickUnitCondition(new Pidroh.ConsoleApp.Turnbased.Condition(Pidroh.ConsoleApp.Turnbased.ConditionType.CanMove, Pidroh.ConsoleApp.Turnbased.Target.Self, directionMove.$clone()), [new Pidroh.ConsoleApp.Turnbased.MoveAction(Pidroh.ConsoleApp.Turnbased.Target.Self, directionMove.$clone())]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, 1, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("Downfire", "DF", "Shoot, down, shoot", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire);

                this.NewMoveData$1("TripleFire", this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire, new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1)), new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire), new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 1))]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, 1, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire, new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1)), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, 1, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, 1, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 1))])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.NewMoveTextRenderData("TripleFire", "TF", "Shoots in the three rows", baseDamage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire);


                var areaPunch = this.AreaUser().SquareForward(1);
                var areaSlash = this.AreaUser().RowForward(1, 1);

                for (var i1 = 0; i1 < this.elements.length; i1 = (i1 + 1) | 0) {

                    this.NewMoveData$1((this.elementLabels[System.Array.index(i1, this.elementLabels)] || "") + "bomb", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.ctor(areaBomb, this.elements[System.Array.index(i1, this.elements)]), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.ctor(areaBomb, Bridge.Int.clip32(baseDamage * 1.0), this.elements[System.Array.index(i1, this.elements)])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData((this.elementLabels[System.Array.index(i1, this.elementLabels)] || "") + "bomb", (this.elementLetter[System.Array.index(i1, this.elementLetter)] || "") + "B", "Attacks row three squares forward", baseDamage, this.elements[System.Array.index(i1, this.elements)]);
                }

                for (var i2 = 0; i2 < this.elements.length; i2 = (i2 + 1) | 0) {


                    this.NewMoveData$1((this.elementLabels[System.Array.index(i2, this.elementLabels)] || "") + "punch", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.ctor(areaPunch, this.elements[System.Array.index(i2, this.elements)]), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.ctor(areaPunch, damageHigh, this.elements[System.Array.index(i2, this.elements)])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData((this.elementLabels[System.Array.index(i2, this.elementLabels)] || "") + "punch", (this.elementLetter[System.Array.index(i2, this.elementLetter)] || "") + "P", "Attacks enemy forward", damageHigh, this.elements[System.Array.index(i2, this.elements)]);
                }
                for (var i3 = 0; i3 < this.elements.length; i3 = (i3 + 1) | 0) {

                    var damageHigh2 = Bridge.Int.clip32(baseDamage * 2.0);
                    this.NewMoveData$1((this.elementLabels[System.Array.index(i3, this.elementLabels)] || "") + "slash", this.OneTickPerAction([new Pidroh.ConsoleApp.Turnbased.Animation.ctor(areaSlash, this.elements[System.Array.index(i3, this.elements)]), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.ctor(areaSlash, damageHigh2, this.elements[System.Array.index(i3, this.elements)])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData((this.elementLabels[System.Array.index(i3, this.elementLabels)] || "") + "slash", (this.elementLetter[System.Array.index(i3, this.elementLetter)] || "") + "S", "Attacks a row forward", damageHigh2, this.elements[System.Array.index(i3, this.elements)]);
                }
                for (var i4 = 0; i4 < this.elements.length; i4 = (i4 + 1) | 0) {

                    var userRefOffset = new Pidroh.BaseUtils.Vector2D.$ctor2(0, 1);
                    this.NewMoveData$1("Upside" + (this.elementLabels[System.Array.index(i4, this.elementLabels)] || ""), this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i4, this.elements)], userRefOffset.$clone())]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Bridge.Int.clip32(baseDamage * 1.0), this.elements[System.Array.index(i4, this.elements)], userRefOffset.$clone())])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData("Upside" + (this.elementLabels[System.Array.index(i4, this.elementLabels)] || ""), "U" + (this.elementLetter[System.Array.index(i4, this.elementLetter)] || ""), "Shoots from Above", baseDamage, this.elements[System.Array.index(i4, this.elements)]);
                }
                for (var i5 = 0; i5 < this.elements.length; i5 = (i5 + 1) | 0) {

                    var userRefOffset1 = new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1);
                    this.NewMoveData$1("Downside" + (this.elementLabels[System.Array.index(i5, this.elementLabels)] || ""), this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i5, this.elements)], userRefOffset1.$clone())]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, Bridge.Int.clip32(baseDamage * 1.0), this.elements[System.Array.index(i5, this.elements)], userRefOffset1.$clone())])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData("Downside" + (this.elementLabels[System.Array.index(i5, this.elementLabels)] || ""), "D" + (this.elementLetter[System.Array.index(i5, this.elementLetter)] || ""), "Shoots from below", baseDamage, this.elements[System.Array.index(i5, this.elements)]);
                }
                for (var i6 = 0; i6 < this.elements.length; i6 = (i6 + 1) | 0) {

                    var userRefOffset2 = new Pidroh.BaseUtils.Vector2D.$ctor2(0, -1);
                    var userRefOffset21 = new Pidroh.BaseUtils.Vector2D.$ctor2(0, 1);
                    this.NewMoveData$1("Sides" + (this.elementLabels[System.Array.index(i6, this.elementLabels)] || ""), this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i6, this.elements)], userRefOffset2.$clone()), new Pidroh.ConsoleApp.Turnbased.Animation.$ctor4(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i6, this.elements)], userRefOffset21.$clone())]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow2, this.elements[System.Array.index(i6, this.elements)], userRefOffset2.$clone()), new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor2(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow2, this.elements[System.Array.index(i6, this.elements)], userRefOffset21.$clone())])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData("Sides" + (this.elementLabels[System.Array.index(i6, this.elementLabels)] || ""), "S" + (this.elementLetter[System.Array.index(i6, this.elementLetter)] || ""), "Attacks from the sides", damageLow2, this.elements[System.Array.index(i6, this.elements)]);
                }
                for (var i7 = 0; i7 < this.elements.length; i7 = (i7 + 1) | 0) {
                    var damageLow3 = Bridge.Int.clip32(baseDamage * 0.4);
                    this.NewMoveData$1("Double" + (this.elementLabels[System.Array.index(i7, this.elementLabels)] || ""), this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i7, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow3, this.elements[System.Array.index(i7, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i7, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow3, this.elements[System.Array.index(i7, this.elements)])])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData("Double" + (this.elementLabels[System.Array.index(i7, this.elementLabels)] || ""), "D" + (this.elementLetter[System.Array.index(i7, this.elementLetter)] || ""), "Shoots two times", damageLow3, this.elements[System.Array.index(i7, this.elements)]);
                }
                for (var i8 = 0; i8 < this.elements.length; i8 = (i8 + 1) | 0) {
                    var damageLow4 = Bridge.Int.clip32(baseDamage * 0.2);
                    this.NewMoveData$1("Triple" + (this.elementLabels[System.Array.index(i8, this.elementLabels)] || ""), this.TickArray([this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i8, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow4, this.elements[System.Array.index(i8, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i8, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow4, this.elements[System.Array.index(i8, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.Animation.$ctor3(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, this.elements[System.Array.index(i8, this.elements)])]), this.TickUnit([new Pidroh.ConsoleApp.Turnbased.DealDamageAction.$ctor1(Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX, damageLow4, this.elements[System.Array.index(i8, this.elements)])])]), this.TagArray([Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                    this.NewMoveTextRenderData("Triple" + (this.elementLabels[System.Array.index(i8, this.elementLabels)] || ""), "T" + (this.elementLetter[System.Array.index(i8, this.elementLetter)] || ""), "Shoots three times", damageLow4, this.elements[System.Array.index(i8, this.elements)]);
                }

            }
        },
        methods: {
            GetMoveId: function (v) {
                return Pidroh.ConsoleApp.Turnbased.MoveData.FindByLabel(this.moveDatas, v);
            },
            AreaUser: function () {
                this.areaUtils.target = Pidroh.ConsoleApp.Turnbased.Target.Self;
                return this.areaUtils;
            },
            NewMoveTextRenderData: function (name, abrev, description, damage, e) {
                if (e === void 0) { e = 3; }
                var item = new Pidroh.ConsoleApp.Turnbased.MoveMetaData(name, abrev, e);
                item.Description = description;
                item.damage = damage;
                this.moveRenders.add(item);
            },
            NewMoveData$1: function (label, ticks, tags) {
                var $t;
                var mv = new Pidroh.ConsoleApp.Turnbased.MoveData.$ctor1(label);
                mv.units.AddRange(ticks);
                $t = Bridge.getEnumerator(tags);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        mv.tags.add(System.Convert.toInt32(item));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.ecs.CreateEntityWithComponent(mv);
                this.moveDatas.add(mv);
                return mv;
            },
            NewMoveData: function (label, condition, action, tags) {
                var $t;
                var mv = new Pidroh.ConsoleApp.Turnbased.MoveData.$ctor1(label);
                var tick = new Pidroh.ConsoleApp.Turnbased.Tick.ctor();
                tick.condition = condition;
                tick.thingsToHappen.add(action);
                mv.units.add(tick);
                $t = Bridge.getEnumerator(tags);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        mv.tags.add(System.Convert.toInt32(item));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.ecs.CreateEntityWithComponent(mv);
                this.moveDatas.add(mv);
                return mv;
            },
            OneTickPerAction: function (actions) {
                if (actions === void 0) { actions = []; }
                var ticks = System.Array.init(actions.length, null, Pidroh.ConsoleApp.Turnbased.Tick);
                for (var i = 0; i < ticks.length; i = (i + 1) | 0) {
                    ticks[System.Array.index(i, ticks)] = new Pidroh.ConsoleApp.Turnbased.Tick.$ctor1(actions[System.Array.index(i, actions)]);
                }
                return ticks;
            },
            TickUnitCondition: function (condition, actions) {
                if (actions === void 0) { actions = []; }
                var tick = new Pidroh.ConsoleApp.Turnbased.Tick.$ctor2(actions);
                tick.condition = condition;
                return tick;
            },
            TickUnit: function (actions) {
                if (actions === void 0) { actions = []; }
                return new Pidroh.ConsoleApp.Turnbased.Tick.$ctor2(actions);
            },
            TickArray: function (ticks) {
                if (ticks === void 0) { ticks = []; }
                return ticks;
            },
            TagArray: function (args) {
                if (args === void 0) { args = []; }
                return args;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveCreatorProg.AreaCreationUtils", {
        $kind: "nested class",
        fields: {
            target: 0,
            height: 0
        },
        ctors: {
            init: function () {
                this.height = 3;
            }
        },
        methods: {
            RowForward: function (width, XDis) {
                var ra = new Pidroh.ConsoleApp.Turnbased.Area(this.target);
                var offsetY = Bridge.Int.clip32(Math.floor(this.height / 2.0));
                for (var i = 0; i < width; i = (i + 1) | 0) {
                    for (var j = 0; j < this.height; j = (j + 1) | 0) {

                        ra.points.add(new Pidroh.BaseUtils.Vector2D.$ctor2(((i + XDis) | 0), ((j - offsetY) | 0)));
                    }
                }
                return ra;
            },
            SquareForward: function (XDis) {
                var ra = new Pidroh.ConsoleApp.Turnbased.Area(this.target);
                ra.points.add(new Pidroh.BaseUtils.Vector2D.$ctor2(XDis, 0));
                return ra;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveData", {
        statics: {
            methods: {
                FindByLabel: function (moveDatas, label) {
                    for (var i = 0; i < moveDatas.Count; i = (i + 1) | 0) {
                        if (moveDatas.getItem(i) != null) {
                            if (Bridge.referenceEquals(moveDatas.getItem(i).label, label)) {
                                return i;
                            }
                        }
                    }
                    return -1;
                }
            }
        },
        fields: {
            label: null,
            units: null,
            tags: null
        },
        ctors: {
            init: function () {
                this.units = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.Tick)).ctor();
                this.tags = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            $ctor1: function (label) {
                this.$initialize();
                this.label = label;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            HasTag: function (tag) {
                return this.tags.contains(tag);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveDataExecuter", {
        statics: {
            methods: {
                ResolveTarget: function (actor, entities, targetType, offsetReferenceUserPosition) {
                    var $t;
                    if (targetType === Pidroh.ConsoleApp.Turnbased.Target.Self) {
                        return actor;
                    }
                    var target = null;
                    var minDis = 10;
                    var referenceUserPosition = actor.pos.$clone();
                    referenceUserPosition = Pidroh.BaseUtils.Vector2D.op_Addition(referenceUserPosition.$clone(), offsetReferenceUserPosition.$clone());
                    $t = Bridge.getEnumerator(entities);
                    try {
                        while ($t.moveNext()) {
                            var e2 = $t.Current;

                            if (e2.Dead) {
                                continue;
                            }
                            if (actor.Type !== e2.Type && e2.Type !== Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect && e2.Type !== Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) {

                                var sameHeight = referenceUserPosition.Y === e2.pos.Y;

                                if (sameHeight) {
                                    var dis = referenceUserPosition.X - e2.pos.X;
                                    if (dis < 0) {
                                        dis *= -1;
                                    }
                                    if (dis < minDis) {
                                        minDis = dis;
                                        target = e2;
                                    }

                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    return target;
                }
            }
        },
        fields: {
            battleMain: null,
            moveDatas: null,
            happManager: null,
            entities: null,
            ecs: null,
            timeStamp: null,
            aux: null,
            trackBattle: null
        },
        ctors: {
            init: function () {
                this.aux = new (System.Collections.Generic.List$1(Pidroh.BaseUtils.Vector2D)).ctor();
            },
            ctor: function (turnBase, moveDatas, ecs, timeStamp) {
                this.$initialize();
                this.battleMain = turnBase;
                this.moveDatas = moveDatas;
                this.ecs = ecs;
                this.timeStamp = timeStamp;
            }
        },
        methods: {
            ExecuteMove: function (actor, turn) {
                var $t, $t1, $t2, $t3, $t4, $t5;


                var battleState = this.battleMain.battleState;
                this.entities = this.battleMain.entities;
                var userId = this.entities.indexOf(actor);

                var moveId = actor.moves[System.Array.index(turn, actor.moves)];
                if (moveId < 0) {
                    return;
                }
                var md = this.moveDatas.getItem(moveId);
                if (md == null) {
                    return;
                }
                if (md.units.Count === 0) {
                    return;
                }
                battleState.moveTick_Total = md.units.Count;
                var moveTick = Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(battleState.moveTick_Now);
                var actions = md.units.getItem(moveTick).thingsToHappen;
                this.happManager = this.battleMain.happManager;



                $t = Bridge.getEnumerator(actions);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;

                        if (Bridge.is(a, Pidroh.ConsoleApp.Turnbased.MoveAction)) {
                            var ma = Bridge.as(a, Pidroh.ConsoleApp.Turnbased.MoveAction);
                            var p = ma.distance.$clone();
                            actor.pos = Pidroh.BaseUtils.Vector2D.op_Addition(actor.pos.$clone(), p.$clone());
                            var invalidMove = actor.pos.X < actor.minPos.X || actor.pos.Y < actor.minPos.Y || actor.pos.Y > actor.maxPos.Y || actor.pos.X > actor.maxPos.X;
                            $t1 = Bridge.getEnumerator(this.entities);
                            try {
                                while ($t1.moveNext()) {
                                    var e = $t1.Current;
                                    if (!Bridge.referenceEquals(e, actor) && e.Alive) {
                                        if (Pidroh.BaseUtils.Vector2D.op_Equality(actor.pos.$clone(), e.pos.$clone())) {
                                            invalidMove = true;
                                            if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) {
                                                e.life = 0;
                                                actor.damageMultiplier = 2;
                                                invalidMove = false;
                                            }
                                            if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect) {
                                                invalidMove = false;
                                            }
                                            if (invalidMove) {
                                                break;
                                            }


                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }if (invalidMove) {

                                var actorId = this.entities.indexOf(actor);
                                var moveTo = actor.pos.$clone();
                                var moveFrom = Pidroh.BaseUtils.Vector2D.op_Subtraction(actor.pos.$clone(), p.$clone());
                                this.CreateHapp$1(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement, new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor1(actorId), new Pidroh.ConsoleApp.Turnbased.HappMovement.$ctor1(moveFrom.$clone(), moveTo.$clone(), false));



                                actor.pos = Pidroh.BaseUtils.Vector2D.op_Subtraction(actor.pos.$clone(), p.$clone());
                            } else {
                                var actorId1 = this.entities.indexOf(actor);
                                var moveTo1 = actor.pos.$clone();
                                var moveFrom1 = Pidroh.BaseUtils.Vector2D.op_Subtraction(actor.pos.$clone(), p.$clone());
                                this.CreateHapp$1(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement, new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor1(actorId1), new Pidroh.ConsoleApp.Turnbased.HappMovement.$ctor1(moveFrom1.$clone(), moveTo1.$clone(), true));
                            }
                        }
                        if (Bridge.is(a, Pidroh.ConsoleApp.Turnbased.DealDamageAction)) {
                            var dda = Bridge.as(a, Pidroh.ConsoleApp.Turnbased.DealDamageAction);
                            var attackElement = dda.element;

                            if (dda.target === Pidroh.ConsoleApp.Turnbased.Target.Area) {
                                var area = dda.area;
                                var referenceUserOfArea = Pidroh.ConsoleApp.Turnbased.MoveDataExecuter.ResolveTarget(actor, this.entities, area.target, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 0));
                                var mirroringX = 1;
                                if (actor.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                                    mirroringX = -1;
                                }
                                $t2 = Bridge.getEnumerator(area.points);
                                try {
                                    while ($t2.moveNext()) {
                                        var point = $t2.Current.$clone();
                                        var searchPos = Pidroh.BaseUtils.Vector2D.op_Addition(Pidroh.BaseUtils.Vector2D.op_Multiply(point.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(mirroringX, 1)), referenceUserOfArea.pos.$clone());
                                        for (var i = 0; i < this.entities.Count; i = (i + 1) | 0) {
                                            if (Pidroh.BaseUtils.Vector2D.op_Equality(this.entities.getItem(i).pos.$clone(), searchPos.$clone()) && this.entities.getItem(i).Alive) {

                                                this.DealDamage(actor, dda, this.entities.getItem(i));
                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t2, System.IDisposable)) {
                                        $t2.System$IDisposable$Dispose();
                                    }
                                }
                            } else {
                                var target = Pidroh.ConsoleApp.Turnbased.MoveDataExecuter.ResolveTarget(actor, this.entities, dda.target, dda.userRefOffset.$clone());
                                if (target != null) {
                                    this.DealDamage(actor, dda, target);

                                }
                            }
                        }
                        if (Bridge.is(a, Pidroh.ConsoleApp.Turnbased.SummonEntity)) {
                            var entities = this.battleMain.entities;
                            var battlers = 0;
                            $t3 = Bridge.getEnumerator(entities);
                            try {
                                while ($t3.moveNext()) {
                                    var item = $t3.Current;
                                    if (item.drawLife && item.life > 0) {
                                        battlers = (battlers + 1) | 0;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t3, System.IDisposable)) {
                                    $t3.System$IDisposable$Dispose();
                                }
                            }if (battlers < 4) {
                                var se = Bridge.as(a, Pidroh.ConsoleApp.Turnbased.SummonEntity);
                                var enemyWhich = se.enemyWhich;
                                var enemyId = this.battleMain.BattleConfig.enemiesToSummon.getItem(enemyWhich);

                                var positions = this.GetEmptySpots(1);
                                if (positions.Count === 0) {
                                    return;
                                }

                                var summonPos = se.preferentialRowColumn.$clone();
                                if (!positions.contains(summonPos.$clone())) {
                                    summonPos = positions.getItem(0).$clone();
                                }
                                this.ecs.CreateEntityWithComponent(new Pidroh.ConsoleApp.Turnbased.SpawnData.$ctor1(enemyId, summonPos.$clone(), Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy));
                            }


                        }
                        if (Bridge.is(a, Pidroh.ConsoleApp.Turnbased.Animation)) {
                            var anim = Bridge.as(a, Pidroh.ConsoleApp.Turnbased.Animation);
                            var target1 = Pidroh.ConsoleApp.Turnbased.MoveDataExecuter.ResolveTarget(actor, this.entities, anim.target, anim.userRefOffset.$clone());
                            var area1 = anim.area;
                            var happArea = null;
                            if (area1 != null) {
                                var referenceUserOfArea1 = Pidroh.ConsoleApp.Turnbased.MoveDataExecuter.ResolveTarget(actor, this.entities, area1.target, Pidroh.BaseUtils.Vector2D.Zero.$clone());

                                var mirroringX1 = 1;
                                if (actor.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                                    mirroringX1 = -1;
                                }
                                happArea = new Pidroh.ConsoleApp.Turnbased.HappArea.$ctor2(area1, referenceUserOfArea1.pos.$clone(), mirroringX1);
                            }
                            var targetId = -1;
                            if (target1 != null) {
                                targetId = this.entities.indexOf(target1);
                            }
                            this.CreateHapp(md, happArea, new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor2(userId, targetId, anim.element));
                            if (anim.target !== Pidroh.ConsoleApp.Turnbased.Target.None) {
                                var initialPos = Pidroh.BaseUtils.Vector2D.op_Addition(actor.pos.$clone(), anim.userRefOffset.$clone());
                                var finalPos = new Pidroh.BaseUtils.Vector2D();
                                if (target1 != null) {
                                    finalPos = target1.pos.$clone();
                                } else {
                                    finalPos = initialPos.$clone();
                                    finalPos.X = 7;
                                    if (actor.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                                        finalPos.X = -1;
                                    }
                                }
                                this.CreateHapp$1(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, new Pidroh.ConsoleApp.Turnbased.HappShoot.$ctor1(initialPos.$clone(), finalPos.$clone()), new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor2(userId, targetId, anim.element));
                            }





                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                if (moveTick === ((md.units.Count - 1) | 0)) {
                    $t4 = Bridge.getEnumerator(md.units);
                    try {
                        while ($t4.moveNext()) {
                            var item1 = $t4.Current;
                            $t5 = Bridge.getEnumerator(item1.thingsToHappen);
                            try {
                                while ($t5.moveNext()) {
                                    var act = $t5.Current;
                                    if (Bridge.is(act, Pidroh.ConsoleApp.Turnbased.DealDamageAction)) {
                                        this.ChangeElement(actor, (Bridge.as(act, Pidroh.ConsoleApp.Turnbased.DealDamageAction)).element);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t5, System.IDisposable)) {
                                    $t5.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t4, System.IDisposable)) {
                            $t4.System$IDisposable$Dispose();
                        }
                    }
                }
            },
            GetEmptySpots: function (side) {
                var $t;
                if (side === void 0) { side = -1; }
                this.aux.clear();
                var offX = 0;
                if (side === 1) {
                    offX = 3;
                }
                var width = (Bridge.Int.div(this.battleMain.BoardWidth, 2)) | 0;
                if (side === -1) {
                    width = this.battleMain.BoardWidth;
                }
                for (var i = 0; i < width; i = (i + 1) | 0) {
                    for (var j = 0; j < this.battleMain.BoardHeight; j = (j + 1) | 0) {

                        this.aux.add(new Pidroh.BaseUtils.Vector2D.$ctor2(((i + offX) | 0), j));
                    }
                }
                var entities = this.battleMain.entities;
                $t = Bridge.getEnumerator(entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.Alive && this.aux.contains(e.pos.$clone())) {
                            this.aux.remove(e.pos.$clone());
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return this.aux;

            },
            ChangeElement: function (actor, element) {
                if (actor.element === element) {
                    return;
                }
                actor.element = element;
                var th = new Pidroh.ConsoleApp.Turnbased.HappTags.$ctor2(Pidroh.ConsoleApp.Turnbased.MiscHappTags.ChangeElement);
                Pidroh.ECS.ExtensionMethods.AddComponent$1(this.ecs.CreateEntityWithComponent$1(th, new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor2(this.entities.indexOf(actor), -1, element)), this.timeStamp.GetSnap());
            },
            CreateHapp: function (md, comp1, comp2) {
                var th = new Pidroh.ConsoleApp.Turnbased.HappTags.$ctor1(md.tags);
                var e = this.ecs.CreateEntityWithComponent$1(th, this.timeStamp.GetSnap());
                if (comp1 != null) {
                    Pidroh.ECS.ExtensionMethods.AddComponent$1(e, comp1);
                }
                if (comp2 != null) {
                    Pidroh.ECS.ExtensionMethods.AddComponent$1(e, comp2);
                }
            },
            CreateHapp$1: function (tag, comp1, comp2) {
                var th = new Pidroh.ConsoleApp.Turnbased.HappTags.$ctor2(tag);
                var e = this.ecs.CreateEntityWithComponent$1(th, this.timeStamp.GetSnap());
                if (comp1 != null) {
                    Pidroh.ECS.ExtensionMethods.AddComponent$1(e, comp1);
                }
                if (comp2 != null) {
                    Pidroh.ECS.ExtensionMethods.AddComponent$1(e, comp2);
                }
            },
            DealDamage: function (actor, dda, target) {
                var attackElement = dda.element;
                var elementalBlock = attackElement === target.element && attackElement !== Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness;
                var superEffective = false;
                var damage = 0;
                var targetId = this.entities.indexOf(target);
                if (elementalBlock) {
                }
                {
                    if (!elementalBlock) {
                        var mul = this.battleMain.CalculateAttackMultiplier(actor);
                        mul *= this.battleMain.CalculateDefenderMultiplier(target);
                        if (attackElement === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire && target.element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice || attackElement === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder && target.element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire || attackElement === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice && target.element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder) {
                            mul *= 3;
                            superEffective = true;
                        }



                        damage = Bridge.Int.mul(dda.damage, Bridge.Int.clip32(mul));
                        target.life = (target.life - damage) | 0;
                        if (target.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                            this.trackBattle.HeroDamage(damage);
                        }

                        actor.damageMultiplier = 1;

                        this.happManager.Add(new Pidroh.ConsoleApp.Turnbased.Happs.Happ(Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag.DamageTaken, Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag)))).AddAttribute(new Pidroh.ConsoleApp.Turnbased.Happs.Happ.Attribute().SetValue(targetId));
                    }
                }
                this.CreateHapp$1(Pidroh.ConsoleApp.Turnbased.MiscHappTags.Damage, new Pidroh.ConsoleApp.Turnbased.HappDamageData.$ctor1(target.element, dda.element, this.entities.indexOf(target), damage, superEffective, elementalBlock), null);
                if (target.life <= 0 && !superEffective) {
                    this.CreateHapp$1(Pidroh.ConsoleApp.Turnbased.MiscHappTags.Death, new Pidroh.ConsoleApp.Turnbased.HappMoveData.$ctor1(targetId), null);
                }
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveDataTags", {
        $kind: "enum",
        statics: {
            fields: {
                HeroInitial: 0,
                Movement: 1,
                Shoot: 2,
                Bomb: 3,
                Summon: 4
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveMetaData", {
        fields: {
            Label: null,
            Abrev: null,
            element: 0,
            damage: 0,
            Description: null
        },
        ctors: {
            ctor: function (label, abrev, element) {
                this.$initialize();
                this.Label = label;
                this.Abrev = abrev;
                this.element = element;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.MoveUse", {
        fields: {
            move: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (move) {
                this.$initialize();
                this.move = move;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.PickupInfo", {
        fields: {
            necessaryForVictory: false
        },
        ctors: {
            $ctor1: function (necessaryForVictory) {
                this.$initialize();
                this.necessaryForVictory = necessaryForVictory;
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.SpawnData", {
        fields: {
            id: 0,
            entityType: 0,
            position: null
        },
        ctors: {
            init: function () {
                this.position = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (id, position, type) {
                this.$initialize();
                this.id = id;
                this.position = position.$clone();
                this.entityType = type;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.SpawnEntityFactory", {
        fields: {
            ecs: null,
            enemyDatas: null,
            battleMain: null,
            spawns: null
        },
        ctors: {
            ctor: function (ecs, enemyDatas, battleMain) {
                this.$initialize();
                this.ecs = ecs;
                this.spawns = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.SpawnData);
                this.enemyDatas = enemyDatas;
                this.battleMain = battleMain;
            }
        },
        methods: {
            Spawn: function () {
                var $t;
                var spawned = 0;
                while (this.spawns.Count > 0) {
                    var spawn = this.spawns.Comp1(0);
                    Pidroh.ECS.ExtensionMethods.RemoveComponent(this.spawns.Entity(0), spawn);
                    var id = spawn.id;
                    var entType = spawn.entityType;
                    if (entType === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) {
                        var be = this.battleMain.NewBattleEntity();
                        be.Type = entType;
                        var pickup = new Pidroh.ConsoleApp.Turnbased.PickupInfo.$ctor1(true);
                        var pickupE = this.ecs.CreateEntityWithComponent(pickup);
                        Pidroh.ECS.ExtensionMethods.AddComponent$1(pickupE, be);
                        be.pos = spawn.position.$clone();
                        be.life = 1;
                        be.maxLife = 1;
                        be.drawLife = false;
                        be.drawTurn = false;
                        be.graphic = 4;

                    }
                    if (entType === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.neutral) {
                        var be1 = this.battleMain.NewBattleEntity();
                        be1.Type = entType;

                        be1.pos = spawn.position.$clone();
                        be1.life = 30;
                        be1.maxLife = 30;
                        be1.drawLife = false;
                        be1.drawTurn = false;
                        be1.graphic = 5;

                    }
                    if (entType === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                        var enemyAI = this.enemyDatas.getItem(id).enemyAI;
                        var enemy = this.ecs.CreateEntityWithComponent(enemyAI);
                        var be2 = this.battleMain.NewBattleEntity();
                        be2.pos = spawn.position.$clone();
                        be2.life = this.enemyDatas.getItem(id).hp;
                        be2.maxLife = be2.life;
                        be2.graphic = this.enemyDatas.getItem(id).render;
                        var entities = this.battleMain.entities;
                        $t = Bridge.getEnumerator(entities);
                        try {
                            while ($t.moveNext()) {
                                var item = $t.Current;
                                if (!Bridge.referenceEquals(item, be2) && item.graphic === be2.graphic) {
                                    be2.graphicRepeatedIndex = (be2.graphicRepeatedIndex + 1) | 0;
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }be2.minPos = new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0);
                        be2.maxPos = new Pidroh.BaseUtils.Vector2D.$ctor2(5, 2);
                        be2.Type = Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy;
                        Pidroh.ECS.ExtensionMethods.AddComponent$1(enemy, be2);
                        var enemyAiState = new Pidroh.ConsoleApp.Turnbased.EnemyAIState();
                        enemyAiState.progress = spawned;
                        Pidroh.ECS.ExtensionMethods.AddComponent$1(enemy, enemyAiState);
                        spawned = (spawned + 1) | 0;
                    }

                }

            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves", {
        statics: {
            fields: {
                SmartMove: null
            },
            ctors: {
                init: function () {
                    this.SmartMove = new Pidroh.ConsoleApp.Turnbased.SpecialEnemyMoves(0);
                }
            }
        },
        fields: {
            number: 0
        },
        ctors: {
            ctor: function (v) {
                this.$initialize();
                this.number = v;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageBattleMetrics", {
        fields: {
            damage: 0,
            damageTimes: 0,
            previewTimes: 0,
            round: 0,
            rank: 0
        },
        ctors: {
            init: function () {
                this.damage = -1;
                this.damageTimes = -1;
                this.previewTimes = -1;
                this.round = -1;
                this.rank = -1;
            },
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (initValues) {
                this.$initialize();
                this.damage = 0;
                this.damageTimes = 0;
                this.previewTimes = 0;
                this.rank = 0;
                this.round = 0;
            }
        },
        methods: {
            CopyValues: function (metrics) {
                this.damage = metrics.damage;
                this.damageTimes = metrics.damageTimes;
                this.previewTimes = metrics.previewTimes;
                this.round = metrics.round;
                this.rank = metrics.rank;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageData", {
        statics: {
            fields: {
                staticIdHelper: 0
            },
            ctors: {
                init: function () {
                    this.staticIdHelper = -1;
                }
            },
            methods: {
                ResetIdCreation: function () {
                    Pidroh.ConsoleApp.Turnbased.StageData.staticIdHelper = -1;
                }
            }
        },
        fields: {
            spawnDatas: null,
            battleConfig: null,
            hideLifeUI: false,
            id: 0
        },
        ctors: {
            init: function () {
                this.spawnDatas = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.SpawnData)).ctor();
                this.hideLifeUI = false;
                this.id = -1;
            },
            ctor: function () {
                this.$initialize();
                Pidroh.ConsoleApp.Turnbased.StageData.staticIdHelper = (Pidroh.ConsoleApp.Turnbased.StageData.staticIdHelper + 1) | 0;
                this.id = Pidroh.ConsoleApp.Turnbased.StageData.staticIdHelper;
            },
            $ctor2: function (spawns) {
                if (spawns === void 0) { spawns = []; }

                Pidroh.ConsoleApp.Turnbased.StageData.ctor.call(this);
                this.spawnDatas.AddRange(spawns);
            },
            $ctor1: function (battleConfig, spawns) {
                if (spawns === void 0) { spawns = []; }

                Pidroh.ConsoleApp.Turnbased.StageData.ctor.call(this);
                this.spawnDatas.AddRange(spawns);
                this.battleConfig = battleConfig;
            }
        },
        methods: {
            HideLifeUI: function () {
                this.hideLifeUI = true;
                return this;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageDataCreator", {
        fields: {
            ecs: null,
            currentGroup: null
        },
        ctors: {
            ctor: function (ecs) {
                this.$initialize();
                this.ecs = ecs;

                Pidroh.ConsoleApp.Turnbased.StageData.ResetIdCreation();

            }
        },
        methods: {
            CreateDefaultStageData: function () {
                this.TutorialGroup();

                this.currentGroup = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                this.AddGroup(this.currentGroup);

                this.Add([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(1, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 2)), this.Enemy(2, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(0, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1)), this.Enemy(1, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(0, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 2)), this.Enemy(2, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 1)), this.Enemy(2, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor4(System.Array.init([1], System.Int32)), [this.Enemy(3, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1))])]);

                this.currentGroup = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                this.AddGroup(this.currentGroup);

                this.Add([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(8, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(8, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1)), this.Enemy(5, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(8, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 2)), this.Enemy(2, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Enemy(8, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0)), this.Enemy(1, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 2)), this.Enemy(1, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]), new Pidroh.ConsoleApp.Turnbased.StageData.$ctor2([this.Neutral(0, new Pidroh.BaseUtils.Vector2D.$ctor2(1, 2)), this.Enemy(9, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0)), this.Enemy(10, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 2))])]);
            },
            TutorialGroup: function () {
                var trainingGroup = new Pidroh.ConsoleApp.Turnbased.StageDataGroup();
                this.currentGroup = trainingGroup;
                var eTuto = this.AddGroup(trainingGroup);
                Pidroh.ECS.ExtensionMethods.AddComponent$1(eTuto, new Pidroh.ConsoleApp.Turnbased.TagComponent.$ctor1("tutorial"));

                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(false).NoIntermission(), [this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 0)), this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(2, 2))]).HideLifeUI(), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.ctor()]);

                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(false).NoIntermission(), [this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(2, 1)), this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 2)), this.Enemy(4, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 1))]).HideLifeUI(), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.ctor()]);
                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(false).NoIntermission(), [this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(2, 2)), this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(1, 2)), this.Pickup(0, new Pidroh.BaseUtils.Vector2D.$ctor2(0, 2)), this.Enemy(5, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 2))]), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.ctor()]);
                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true).NoIntermission(), [this.Enemy(6, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 0))]), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.$ctor1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire), new Pidroh.ConsoleApp.Turnbased.TrackInfoStage.$ctor1(2)]);
                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true).NoIntermission(), [this.Enemy(4, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1))]), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.$ctor1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire), new Pidroh.ConsoleApp.Turnbased.TrackInfoStage.$ctor1(2)]);
                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true).NoIntermission(), [this.Enemy(5, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1))]), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.$ctor1(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire)]);
                this.AddStage([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true).NoIntermission(), [this.Enemy(5, new Pidroh.BaseUtils.Vector2D.$ctor2(4, 1)), this.Enemy(7, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0))]), new Pidroh.ConsoleApp.Turnbased.FixedAttackStage.$ctor2([Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder])]);

                this.Add([new Pidroh.ConsoleApp.Turnbased.StageData.$ctor1(new Pidroh.ConsoleApp.Turnbased.BattleConfig.$ctor1(true).NoIntermission(), [this.Enemy(0, new Pidroh.BaseUtils.Vector2D.$ctor2(3, 0)), this.Enemy(0, new Pidroh.BaseUtils.Vector2D.$ctor2(5, 2))])]);
                return eTuto.$clone();
            },
            InitializeProgress: function (persistentList) {
                var $t;
                var stageDatas = this.ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageData);
                var stageGroups = this.ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageDataGroup);

                for (var i = 0; i < stageDatas.Count; i = (i + 1) | 0) {
                    var locked = true;
                    for (var j = 0; j < stageGroups.Count; j = (j + 1) | 0) {
                        if (stageGroups.Comp1(j).childIds.getItem(0).$clone().equalsT(stageDatas.Entity(i))) {
                            locked = false;
                            break;
                        }

                    }

                    var comp = null;
                    var id = stageDatas.Comp1(i).id;
                    $t = Bridge.getEnumerator(persistentList);
                    try {
                        while ($t.moveNext()) {
                            var per = $t.Current;
                            if (per.stageId === id) {
                                comp = per;
                                break;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    if (comp == null) {
                        comp = new Pidroh.ConsoleApp.Turnbased.StageProgressPersistence.$ctor1(id);
                        comp.available = !locked;
                        persistentList.add(comp);
                    } else {
                    }
                    Pidroh.ECS.ExtensionMethods.AddComponent$1(stageDatas.Entity(i), comp);
                }
            },
            CalculateTrackInfo: function (enemies) {
                var $t;
                var stageDatas = this.ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageData);
                for (var i = 0; i < stageDatas.Count; i = (i + 1) | 0) {
                    var sd = stageDatas.Comp1(i);

                    var spawns = sd.spawnDatas;
                    var totalHP = 0;
                    $t = Bridge.getEnumerator(spawns);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            if (item.entityType === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                                var enemyId = item.id;
                                var hp = enemies.getItem(enemyId).hp;
                                totalHP = (totalHP + hp) | 0;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }var target = 1;
                    if (totalHP === 0) {
                        target = 2;
                    }
                    if (totalHP > 3) {
                        target = Bridge.Int.clip32(Math.ceil(totalHP / 3.0));
                    }

                    if (sd.battleConfig != null && !sd.battleConfig.needKillAllEnemies) {
                        target = 2;
                    }

                    var entity = stageDatas.Entity(i);
                    var trackInfoStae = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.TrackInfoStage, entity);
                    if (trackInfoStae == null) {
                        Pidroh.ECS.ExtensionMethods.AddComponent$1(entity, new Pidroh.ConsoleApp.Turnbased.TrackInfoStage.$ctor1(target));
                    }
                }
            },
            AddStage: function (comps) {
                var $t;
                if (comps === void 0) { comps = []; }

                var e = this.ecs.CreateEntity();
                $t = Bridge.getEnumerator(comps);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        Pidroh.ECS.ExtensionMethods.AddComponent$1(e, item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.currentGroup.childIds.add(e.$clone());
            },
            AddGroup: function (group) {

                var e = this.ecs.CreateEntity();
                Pidroh.ECS.ExtensionMethods.AddComponent$1(e, group);
                return e.$clone();
            },
            Pickup: function (v, vector2D) {
                return new Pidroh.ConsoleApp.Turnbased.SpawnData.$ctor1(v, vector2D.$clone(), Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup);
            },
            Neutral: function (v, vector2D) {
                return new Pidroh.ConsoleApp.Turnbased.SpawnData.$ctor1(v, vector2D.$clone(), Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.neutral);
            },
            Enemy: function (v, vector2D) {
                return new Pidroh.ConsoleApp.Turnbased.SpawnData.$ctor1(v, vector2D.$clone(), Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy);
            },
            Add: function (stageData1) {
                var $t;
                if (stageData1 === void 0) { stageData1 = []; }
                $t = Bridge.getEnumerator(stageData1);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;

                        this.currentGroup.childIds.add(this.ecs.CreateEntityWithComponent(item));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageDataGroup", {
        fields: {
            childIds: null,
            level: 0
        },
        ctors: {
            init: function () {
                this.childIds = new (System.Collections.Generic.List$1(Pidroh.ECS.Entity)).ctor();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageGroupNavigator", {
        fields: {
            backTrackPile: null,
            currentGroupE: null,
            currentSDG: null
        },
        ctors: {
            init: function () {
                this.currentGroupE = new Pidroh.ECS.Entity();
                this.backTrackPile = new (System.Collections.Generic.List$1(Pidroh.ECS.Entity)).ctor();
            },
            ctor: function (ecs) {
                this.$initialize();
                var sdgs = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageDataGroup);
                var firstGroup = sdgs.Comp1(0);
                var newCurrent = sdgs.Entity(0);
                this.ChangeCurrent(newCurrent.$clone());
            }
        },
        methods: {
            ChangeCurrent: function (newCurrent) {
                this.currentGroupE = newCurrent.$clone();
                this.currentSDG = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageDataGroup, this.currentGroupE);

            },
            Enter: function (childId) {
                this.backTrackPile.add(this.currentGroupE.$clone());
                this.ChangeCurrent(Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageDataGroup, this.currentGroupE).childIds.getItem(childId).$clone());
            },
            Backtrack: function () {
                var lastElement = (this.backTrackPile.Count - 1) | 0;
                if (lastElement < 0) {
                    return;
                }
                this.ChangeCurrent(this.backTrackPile.getItem(lastElement).$clone());
                this.backTrackPile.removeAt(lastElement);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageProgressPersistence", {
        fields: {
            stageId: 0,
            bestBattleMetrics: null,
            available: false
        },
        ctors: {
            init: function () {
                this.bestBattleMetrics = new Pidroh.ConsoleApp.Turnbased.StageBattleMetrics.ctor();
                this.available = false;
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (id) {
                this.$initialize();
                this.stageId = id;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageToBattle", {
        fields: {
            stageToUnlock: null,
            CurrentStage: null
        },
        ctors: {
            init: function () {
                this.stageToUnlock = new Pidroh.ECS.Entity();
                this.CurrentStage = new Pidroh.ECS.Entity();
            }
        },
        methods: {
            Victory: function () {
                if (this.stageToUnlock.Exist()) {
                    Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageProgressPersistence, this.stageToUnlock).available = true;
                }
            },
            BattleMetricsUpdate: function (metrics) {
                var stageProgressPersistence = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageProgressPersistence, this.CurrentStage);
                stageProgressPersistence.bestBattleMetrics.CopyValues(metrics);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.SummonEntity", {
        statics: {
            methods: {
                Enemy: function (v, vector2D) {
                    return new Pidroh.ConsoleApp.Turnbased.SummonEntity(v, vector2D.$clone());
                }
            }
        },
        fields: {
            enemyWhich: 0,
            preferentialRowColumn: null
        },
        ctors: {
            init: function () {
                this.preferentialRowColumn = new Pidroh.BaseUtils.Vector2D();
            },
            ctor: function (enemyWhich, preferentialRowColumn) {
                this.$initialize();
                this.enemyWhich = enemyWhich;
                this.preferentialRowColumn = preferentialRowColumn.$clone();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.TagComponent", {
        fields: {
            tags: null
        },
        ctors: {
            init: function () {
                this.tags = new (System.Collections.Generic.List$1(System.String)).ctor();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (v) {
                this.$initialize();
                this.tags.add(v);
            }
        },
        methods: {
            Contains: function (v) {
                return this.tags.contains(v);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Target", {
        $kind: "enum",
        statics: {
            fields: {
                None: 0,
                Self: 1,
                ClosestTarget: 2,
                ClosestTargetX: 3,
                Area: 4
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Tick", {
        fields: {
            condition: null,
            thingsToHappen: null
        },
        ctors: {
            init: function () {
                this.thingsToHappen = new (System.Collections.Generic.List$1(System.Object)).ctor();
            },
            $ctor1: function (action) {
                this.$initialize();
                this.thingsToHappen.add(action);
            },
            $ctor2: function (actions) {
                this.$initialize();
                this.thingsToHappen.AddRange(actions);
            },
            ctor: function () {
                this.$initialize();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.TrackBattle", {
        fields: {
            stageInfo: null,
            metrics: null
        },
        ctors: {
            init: function () {
                this.metrics = new Pidroh.ConsoleApp.Turnbased.StageBattleMetrics.$ctor1(true);
            }
        },
        methods: {
            HeroDamage: function (damage) {
                if (damage > 0) {
                    this.metrics.damage = (this.metrics.damage + damage) | 0;
                    this.metrics.damageTimes = (this.metrics.damageTimes + 1) | 0;
                }
            },
            Preview: function () {
                this.metrics.previewTimes = (this.metrics.previewTimes + 1) | 0;
            },
            Round: function () {
                this.metrics.round = (this.metrics.round + 1) | 0;
            },
            BattleEndVictory: function () {
                this.metrics.rank = this.CalculateRank();

            },
            CalculateRank: function () {
                if (this.stageInfo == null) {
                    return -1;
                }
                var rank = 100;
                var diff = (this.stageInfo.targetRounds - this.metrics.round) | 0;
                if (diff > 0) {
                    rank = (rank + (Bridge.Int.mul(Bridge.Int.mul(diff, (diff)), 3))) | 0;
                } else {
                    rank = (rank - (Bridge.Int.mul(Bridge.Int.mul(diff, (diff)), 3))) | 0;
                }

                if (this.metrics.damageTimes > 3) {
                    rank = (rank - 10) | 0;
                }
                if (this.metrics.damageTimes > 0) {
                    rank = (rank - 10) | 0;
                }
                return rank;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.TrackInfoStage", {
        fields: {
            targetRounds: 0
        },
        ctors: {
            init: function () {
                this.targetRounds = 0;
            },
            ctor: function () {
                this.$initialize();

            },
            $ctor1: function (targetTurns) {
                this.$initialize();
                this.targetRounds = targetTurns;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.Value", {
        statics: {
            methods: {
                op_Addition: function (c1, c2) {
                    c1.Val += c2;
                    return c1;
                },
                op_Subtraction: function (c1, c2) {
                    return c1.Val - c2;
                },
                op_Equality: function (c1, c2) {
                    var c2null = Bridge.referenceEquals(c2, null);
                    var c1null = Bridge.referenceEquals(c1, null);
                    if (c2null && c1null) {
                        return true;
                    }
                    if (c1null || c2null) {
                        return false;
                    }
                    return c1.Val === c2.Val;
                },
                op_Inequality: function (c1, c2) {
                    var c2null = Bridge.referenceEquals(c2, null);
                    var c1null = Bridge.referenceEquals(c1, null);
                    if (c2null && c1null) {
                        return false;
                    }
                    if (c1null || c2null) {
                        return true;
                    }
                    return c1.Val !== c2.Val;
                },
                op_Implicit$1: function (d) {
                    return d.Val;
                },
                op_Implicit: function (d) {
                    return Bridge.Int.clip32(d.Val);
                }
            }
        },
        fields: {
            Val: 0
        },
        props: {
            valAsEnum: {
                set: function (value) {
                    this.Val = System.Convert.toSingle(value);
                }
            }
        },
        methods: {
            Set: function (v) {
                this.Val = v;
            }
        }
    });

    Bridge.define("Pidroh.ECS.Accessor", {
        fields: {
            TypesProhibited: null,
            TypesNecessary: null,
            SelectedEntities: null
        },
        props: {
            Length: {
                get: function () {
                    return this.SelectedEntities.Count;
                }
            }
        },
        ctors: {
            init: function () {
                this.SelectedEntities = new (System.Collections.Generic.List$1(Pidroh.ECS.Entity)).ctor();
            },
            ctor: function (s) {
                if (s === void 0) { s = []; }

                this.$initialize();
                this.TypesNecessary = s;
            }
        },
        methods: {
            EntityAdded: function (e) {
                return this.SelectedEntities.contains(e.$clone());
            },
            Get: function (i) {
                return this.SelectedEntities.getItem(i).$clone();
            }
        }
    });

    Bridge.define("Pidroh.ECS.ClonedState", {
        fields: {
            comps: null
        },
        ctors: {
            init: function () {
                this.comps = new (System.Collections.Generic.Dictionary$2(Function,System.Array.type(System.Object)))();
            }
        }
    });

    Bridge.define("Pidroh.ECS.ECSManager", {
        statics: {
            fields: {
                managers: null
            },
            ctors: {
                init: function () {
                    this.managers = System.Array.init(8000, null, Pidroh.ECS.ECSManager);
                }
            },
            methods: {
                GetInstance: function (e) {
                    return Pidroh.ECS.ECSManager.managers[System.Array.index(e.ecs, Pidroh.ECS.ECSManager.managers)];
                },
                Create: function () {

                    for (var i = 0; i < Pidroh.ECS.ECSManager.managers.length; i = (i + 1) | 0) {
                        if (Pidroh.ECS.ECSManager.managers[System.Array.index(i, Pidroh.ECS.ECSManager.managers)] == null) {
                            Pidroh.ECS.ECSManager.managers[System.Array.index(i, Pidroh.ECS.ECSManager.managers)] = new Pidroh.ECS.ECSManager();
                            Pidroh.ECS.ECSManager.managers[System.Array.index(i, Pidroh.ECS.ECSManager.managers)].ECSId = i;
                            return Pidroh.ECS.ECSManager.managers[System.Array.index(i, Pidroh.ECS.ECSManager.managers)];
                        }

                    }
                    return null;
                }
            }
        },
        fields: {
            comps: null,
            ECSId: 0,
            entityIdMax: 0,
            accessors: null,
            CopyMethods: null,
            aux: null
        },
        ctors: {
            init: function () {
                this.comps = new (System.Collections.Generic.Dictionary$2(Function,System.Array.type(System.Object)))();
                this.entityIdMax = -1;
                this.accessors = new (System.Collections.Generic.List$1(Pidroh.ECS.Accessor)).ctor();
                this.CopyMethods = new (System.Collections.Generic.Dictionary$2(Function,Function))();
                this.aux = new (System.Collections.Generic.List$1(Function)).ctor();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            CreateProcessor: function (accessor, action) {

                return new Pidroh.ECS.ProcessorAccessor(action, accessor);
            },
            AddCopyMethod: function (type, copyMetho) {
                this.CopyMethods.add(type, copyMetho);
            },
            CreateAccessor: function (necessary, not) {
                var acc = new Pidroh.ECS.Accessor(necessary);
                acc.TypesProhibited = not;
                this.AddAccessor(acc);
                return acc;

            },
            QuickAccessor2: function (T1, T2) {
                var accessor = new (Pidroh.ECS.QuickAccessorTwo$2(T1,T2))();
                this.AddAccessor(accessor.accessor);
                return accessor;
            },
            QuickAccessor1: function (T1) {
                var accessor = new (Pidroh.ECS.QuickAccessorOne$1(T1))();
                this.AddAccessor(accessor.accessor);
                return accessor;
            },
            CreateEntityWithComponent: function (v) {
                var e = { v : new Pidroh.ECS.Entity() };
                this.CreateEntity$1(e);
                this.AddComponent(e.v.$clone(), v);
                return e.v.$clone();
            },
            CreateEntityWithComponent$1: function (v, v2) {
                var e = { v : new Pidroh.ECS.Entity() };
                this.CreateEntity$1(e);
                this.AddComponent(e.v.$clone(), v);
                this.AddComponent(e.v.$clone(), v2);
                return e.v.$clone();
            },
            DeleteAllEntitiesThatDoNotHave: function (componentTypes) {
                var acs = new Pidroh.ECS.Accessor();

            },
            CreateEntity$1: function (e) {
                this.entityIdMax = (this.entityIdMax + 1) | 0;
                var entity = new Pidroh.ECS.Entity.$ctor1(this.ECSId, this.entityIdMax);
                e.v = entity.$clone();
                return entity.$clone();
            },
            CreateEntity: function () {
                this.entityIdMax = (this.entityIdMax + 1) | 0;
                var entity = new Pidroh.ECS.Entity.$ctor1(this.ECSId, this.entityIdMax);
                return entity.$clone();
            },
            QuickProcessorFlex: function (T1, T2, p) {
                var processorFlex = new (Pidroh.ECS.ProcessorFlex$2(T1,T2))(p);
                var accessor = processorFlex.accessor;
                var accessor1 = accessor.accessor;
                this.AddAccessor(accessor1);
                return processorFlex;
            },
            AddAccessor: function (accessor1) {
                this.accessors.add(accessor1);
                for (var i = 0; i <= this.entityIdMax; i = (i + 1) | 0) {
                    this.UpdateAccessorEntity(accessor1, i);
                }

            },
            UpdateAccessorEntity: function (accessor, entityId) {
                var entity = new Pidroh.ECS.Entity.$ctor1(this.ECSId, entityId);
                var belong = this.HasAllComps(accessor.TypesNecessary, entityId) && this.HasNoneOfTheseComps(accessor.TypesProhibited, entityId);
                var member = accessor.EntityAdded(entity.$clone());

                if (belong !== member) {
                    if (belong) {
                        accessor.SelectedEntities.add(entity.$clone());
                    } else {
                        accessor.SelectedEntities.remove(entity.$clone());
                    }
                }

            },
            CloneState: function (cs) {
                var comps = this.comps;
                var comps2 = cs.comps;
                this.Copy(comps, comps2);
            },
            RestoreState: function (cs) {
                var $t;
                var comps = this.comps;
                var comps2 = cs.comps;
                this.Copy(comps2, comps);

                for (var i = 0; i <= this.entityIdMax; i = (i + 1) | 0) {
                    $t = Bridge.getEnumerator(this.accessors);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current;
                            this.UpdateAccessorEntity(item, i);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}

            },
            Copy: function (from, to) {
                var $t, $t1;
                this.aux.clear();

                $t = Bridge.getEnumerator(from);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        var type = c.key;



                        this.aux.add(type);
                        if (!to.containsKey(type)) {
                            to.add(type, System.Array.init(300, null, System.Object));
                        }
                        var toArray = to.get(type);
                        var origin = c.value;
                        this.Copy$1(to, type, toArray, origin);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }$t1 = Bridge.getEnumerator(to);
                try {
                    while ($t1.moveNext()) {
                        var c1 = $t1.Current;
                        var type1 = c1.key;
                        if (!this.aux.contains(type1)) {
                            this.aux.add(type1);
                            var toArray1 = c1.value;
                            for (var i = 0; i < toArray1.length; i = (i + 1) | 0) {
                                toArray1[System.Array.index(i, toArray1)] = null;
                            }
                        }

                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }},
            Copy$1: function (to, type, toArray, origin) {
                var copyMethod = { v : null };
                this.CopyMethods.tryGetValue(type, copyMethod);

                for (var i = 0; i < origin.length; i = (i + 1) | 0) {
                    if (origin[System.Array.index(i, origin)] == null) {
                        if (toArray[System.Array.index(i, toArray)] != null) {
                            toArray[System.Array.index(i, toArray)] = null;
                        }

                    } else {
                        if (toArray[System.Array.index(i, toArray)] == null) {
                            toArray[System.Array.index(i, toArray)] = Bridge.createInstance(type);
                        }
                        if (!Bridge.staticEquals(copyMethod.v, null)) {
                            copyMethod.v(origin[System.Array.index(i, origin)], toArray[System.Array.index(i, toArray)]);
                        }

                    }
                }
            },
            AddComponent$1: function (T, e) {
                var t = Bridge.createInstance(T);
                this.AddComponent(e.$clone(), t);

                return t;
            },
            AddComponent: function (e, t) {
                var $t, $t1;
                var type = Bridge.getType(t);
                if (!this.comps.containsKey(type)) {
                    this.comps.add(type, System.Array.init(300, null, System.Object));
                }
                ($t = this.comps.get(type))[System.Array.index(e.id, $t)] = t;
                $t1 = Bridge.getEnumerator(this.accessors);
                try {
                    while ($t1.moveNext()) {
                        var item = $t1.Current;
                        this.UpdateAccessorEntity(item, e.id);

                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }},
            RemoveComponent: function (e, t) {
                var $t, $t1;
                var type = Bridge.getType(t);
                if (!this.comps.containsKey(type)) {
                    this.comps.add(type, System.Array.init(300, null, System.Object));
                }
                ($t = this.comps.get(type))[System.Array.index(e.id, $t)] = null;
                $t1 = Bridge.getEnumerator(this.accessors);
                try {
                    while ($t1.moveNext()) {
                        var item = $t1.Current;
                        this.UpdateAccessorEntity(item, e.id);

                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }},
            HasAllComponents: function (e, typesNecessary) {
                var id = e.id;
                return this.HasAllComps(typesNecessary, id);
            },
            HasAllComps: function (typesNecessary, id) {
                var $t, $t1;
                $t = Bridge.getEnumerator(typesNecessary);
                try {
                    while ($t.moveNext()) {
                        var type = $t.Current;
                        if (!this.comps.containsKey(type)) {
                            return false;
                        }

                        if (($t1 = this.comps.get(type))[System.Array.index(id, $t1)] == null) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            },
            HasNoneOfTheseComps: function (typesProhibited, id) {
                var $t, $t1;
                if (typesProhibited == null) {
                    return true;
                }
                $t = Bridge.getEnumerator(typesProhibited);
                try {
                    while ($t.moveNext()) {
                        var type = $t.Current;
                        if (this.comps.containsKey(type)) {
                            if (($t1 = this.comps.get(type))[System.Array.index(id, $t1)] != null) {
                                return false;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            },
            GetComponent: function (T, e) {
                var $t;
                var type = T;
                if (!this.comps.containsKey(type)) {
                    return Bridge.getDefaultValue(T);
                }
                return Bridge.cast(Bridge.unbox(($t = this.comps.get(type))[System.Array.index(e.id, $t)]), T);
            }
        }
    });

    Bridge.define("Pidroh.ECS.Entity", {
        inherits: function () { return [System.IEquatable$1(Pidroh.ECS.Entity)]; },
        $kind: "struct",
        statics: {
            fields: {
                None: null
            },
            ctors: {
                init: function () {
                    this.None = new Pidroh.ECS.Entity();
                    this.None = new Pidroh.ECS.Entity.$ctor1(-1, -1);
                }
            },
            methods: {
                getDefaultValue: function () { return new Pidroh.ECS.Entity(); }
            }
        },
        fields: {
            ecs: 0,
            id: 0
        },
        alias: ["equalsT", "System$IEquatable$1$Pidroh$ECS$Entity$equalsT"],
        ctors: {
            $ctor1: function (ecs, id) {
                this.$initialize();
                this.ecs = ecs;
                this.id = id;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            Exist: function () {
                return this.id !== -1;
            },
            equalsT: function (other) {
                return other.id === this.id && other.ecs === this.ecs;
            },
            getHashCode: function () {
                var h = Bridge.addHash([1769269177, this.ecs, this.id]);
                return h;
            },
            $clone: function (to) {
                var s = to || new Pidroh.ECS.Entity();
                s.ecs = this.ecs;
                s.id = this.id;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.ECS.ExtensionMethods", {
        statics: {
            methods: {
                RemoveComponent: function (e, comp) {
                    Pidroh.ECS.ECSManager.GetInstance(e.$clone()).RemoveComponent(e.$clone(), comp);
                },
                AddComponent: function (T, e) {
                    return Pidroh.ECS.ECSManager.GetInstance(e.$clone()).AddComponent$1(T, e.$clone());
                },
                AddComponent$1: function (e, comp) {
                    Pidroh.ECS.ECSManager.GetInstance(e.$clone()).AddComponent(e.$clone(), comp);
                },
                GetComponent: function (T, e) {
                    return Pidroh.ECS.ECSManager.GetInstance(e.$clone()).GetComponent(T, e.$clone());
                }
            }
        }
    });

    Bridge.define("Pidroh.ECS.ProcessorAccessor", {
        fields: {
            p: null,
            a: null
        },
        ctors: {
            ctor: function (p, a) {
                this.$initialize();
                this.p = p;
                this.a = a;
            }
        },
        methods: {
            Run: function () {
                this.p(this.a);
            }
        }
    });

    Bridge.define("Pidroh.ECS.ProcessorFlex$2", function (T1, T2) { return {
        fields: {
            p: null,
            accessor: null
        },
        ctors: {
            ctor: function (p) {
                this.$initialize();
                this.p = p;
                this.accessor = new (Pidroh.ECS.QuickAccessorTwo$2(T1,T2))();
            }
        },
        methods: {
            Run: function () {
                this.p(this.accessor);
            }
        }
    }; });

    Bridge.define("Pidroh.ECS.QuickAccessorOne$1", function (T1) { return {
        fields: {
            accessor: null
        },
        props: {
            Count: {
                get: function () {
                    return this.accessor.Length;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.accessor = new Pidroh.ECS.Accessor([T1]);
            }
        },
        methods: {
            Comp1: function (i) {
                return Pidroh.ECS.ExtensionMethods.GetComponent(T1, this.accessor.SelectedEntities.getItem(i).$clone());
            },
            Entity: function (i) {
                return this.accessor.SelectedEntities.getItem(i).$clone();
            }
        }
    }; });

    Bridge.define("Pidroh.ECS.QuickAccessorTwo$2", function (T1, T2) { return {
        fields: {
            accessor: null
        },
        props: {
            Length: {
                get: function () {
                    return this.accessor.Length;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.accessor = new Pidroh.ECS.Accessor([T1, T2]);
            }
        },
        methods: {
            Comp1: function (i) {
                return Pidroh.ECS.ExtensionMethods.GetComponent(T1, this.accessor.SelectedEntities.getItem(i).$clone());
            },
            Entity: function (i) {
                return this.accessor.SelectedEntities.getItem(i).$clone();
            },
            Comp2: function (i) {
                return Pidroh.ECS.ExtensionMethods.GetComponent(T2, this.accessor.SelectedEntities.getItem(i).$clone());
            }
        }
    }; });

    Bridge.define("Pidroh.TextRendering.TextAnimation", {
        fields: {
            length: null,
            progress: null,
            targets: null,
            lists: null
        },
        ctors: {
            init: function () {
                this.length = new (System.Collections.Generic.List$1(System.Single)).ctor();
                this.progress = new (System.Collections.Generic.List$1(System.Single)).ctor();
                this.targets = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.lists = new (System.Collections.Generic.List$1(System.Collections.IList)).ctor();
            }
        },
        methods: {
            RegisterLists: function () {
                this.lists.add(this.length);
                this.lists.add(this.progress);
                this.lists.add(this.targets);
                this.RequestRegisterLists();
            },
            Update: function (delta) {
                for (var i = 0; i < this.progress.Count; i = (i + 1) | 0) {
                    this.progress.setItem(i, this.progress.getItem(i) +delta);
                    if (this.progress.getItem(i) >= this.length.getItem(i)) {
                        this.progress.setItem(i, this.length.getItem(i));
                    } else {
                    }
                }
            },
            Add: function (bd) {
                this.progress.add(bd.progress);
                this.targets.add(bd.target);
                this.length.add(bd.length);
            },
            IsDone: function () {
                var $t;
                $t = Bridge.getEnumerator(this.lists);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (System.Array.getCount(item) !== this.progress.Count) {
                            var s = null;
                            s.trim();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return this.progress.Count === 0;
            },
            EndTask: function (i) {
                var $t;
                $t = Bridge.getEnumerator(this.lists);
                try {
                    while ($t.moveNext()) {
                        var l = $t.Current;

                        System.Array.removeAt(l, i, Object);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            RegisterList: function (mainData) {
                this.lists.add(mainData);
            },
            Modify$1: function (a) {
                for (var i = 0; i < this.progress.Count; i = (i + 1) | 0) {
                    if (a.id === this.targets.getItem(i)) {
                        this.Modify(a, i, this.progress.getItem(i), this.length.getItem(i));
                        a.animating = true;
                    }
                }
            },
            Modify: function (entity, index, progress, length) { },
            TryEnd: function () {
                for (var i = 0; i < this.progress.Count; i = (i + 1) | 0) {
                    if (this.progress.getItem(i) >= this.length.getItem(i)) {
                        this.EndTask(i);
                    }
                }

            }
        }
    });

    Bridge.define("Pidroh.TextRendering.DefaultPalettes", {
        statics: {
            fields: {
                C4KiroKaze: null,
                C4Reader: null,
                C4Novel: null,
                C4Black: 0,
                C4BlackNeutral: 0,
                C4WhiteNeutral: 0,
                C4White: 0
            },
            ctors: {
                init: function () {
                    this.C4KiroKaze = new Pidroh.TextRendering.Palette(["#332c50", "#46878f", "#94e344", "#e2f3e4"]);
                    this.C4Reader = new Pidroh.TextRendering.Palette(["#262626", "#8b8cba", "#8bba91", "#649f8d"]);
                    this.C4Novel = new Pidroh.TextRendering.Palette(["#262626", "#342d41", "#b8b8b8", "#8b8cba"]);
                    this.C4Black = 0;
                    this.C4BlackNeutral = 1;
                    this.C4WhiteNeutral = 2;
                    this.C4White = 3;
                }
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.GameScreen.KeyboardIO", {
        fields: {
            downUnicodes: null
        },
        ctors: {
            init: function () {
                this.downUnicodes = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.GameScreen.MouseHover", {
        $kind: "struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.TextRendering.GameScreen.MouseHover(); }
            }
        },
        fields: {
            rect: null,
            type: 0,
            id: 0
        },
        ctors: {
            init: function () {
                this.rect = new Pidroh.BaseUtils.Rect();
            },
            $ctor1: function (rect, type, id) {
                this.$initialize();
                this.rect = rect.$clone();
                this.type = type;
                this.id = id;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3924109847, this.rect, this.type, this.id]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.TextRendering.GameScreen.MouseHover)) {
                    return false;
                }
                return Bridge.equals(this.rect, o.rect) && Bridge.equals(this.type, o.type) && Bridge.equals(this.id, o.id);
            },
            $clone: function (to) {
                var s = to || new Pidroh.TextRendering.GameScreen.MouseHover();
                s.rect = this.rect.$clone();
                s.type = this.type;
                s.id = this.id;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.GameScreen.MouseHoverManager", {
        fields: {
            mouseHovers: null,
            mouseHoversActive: null,
            mouseHoversClickDown: null,
            mouseIO: null
        },
        ctors: {
            init: function () {
                this.mouseHovers = new (System.Collections.Generic.List$1(Pidroh.TextRendering.GameScreen.MouseHover)).ctor();
                this.mouseHoversActive = new (System.Collections.Generic.List$1(Pidroh.TextRendering.GameScreen.MouseHover)).ctor();
                this.mouseHoversClickDown = new (System.Collections.Generic.List$1(Pidroh.TextRendering.GameScreen.MouseHover)).ctor();
            },
            ctor: function (mouseIO) {
                this.$initialize();
                this.mouseIO = mouseIO;
            }
        },
        methods: {
            Update: function () {
                var $t;
                this.mouseHoversActive.clear();
                this.mouseHoversClickDown.clear();
                $t = Bridge.getEnumerator(this.mouseHovers);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current.$clone();
                        if (item.rect.Contains(this.mouseIO.pos.$clone())) {
                            this.mouseHoversActive.add(item.$clone());
                            if (this.mouseIO.mouseClickHappen) {
                                this.mouseHoversClickDown.add(item.$clone());
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    Bridge.define("Pidroh.TextRendering.GameScreen.MouseIO", {
        fields: {
            pos: null,
            mouseClickHappen: false
        },
        ctors: {
            init: function () {
                this.pos = new Pidroh.BaseUtils.Point2D();
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.GameScreen.UnicodeRemap", {
        fields: {
            remaps: null
        },
        ctors: {
            init: function () {
                this.remaps = new (System.Collections.Generic.Dictionary$2(System.Int32,System.Int32))();
            },
            ctor: function () {
                this.$initialize();
                this.remaps.add(Pidroh.BaseUtils.Unicode.keyUp, 119);
                this.remaps.add(Pidroh.BaseUtils.Unicode.keyDown, 115);
                this.remaps.add(Pidroh.BaseUtils.Unicode.keyLeft, 97);
                this.remaps.add(Pidroh.BaseUtils.Unicode.keyRight, 100);

                this.remaps.add(Pidroh.BaseUtils.Unicode.Enter, Pidroh.BaseUtils.Unicode.Space);

                this.remaps.add(105, 49);

            }
        },
        methods: {
            Remap: function (unicode) {
                var result = { };
                if (this.remaps.tryGetValue(unicode, result)) {
                    return result.v;
                }
                return unicode;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.IKeyboardInput", {
        $kind: "interface"
    });

    Bridge.define("Pidroh.TextRendering.IMouseInput", {
        $kind: "interface"
    });

    Bridge.define("Pidroh.TextRendering.ITextGame", {
        $kind: "interface"
    });

    Bridge.define("Pidroh.TextRendering.ITextScreen", {
        $kind: "interface"
    });

    Bridge.define("Pidroh.TextRendering.MouseEvents", {
        $kind: "enum",
        statics: {
            fields: {
                MouseDown: 0,
                None: 1
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.Palette", {
        fields: {
            HtmlColors: null
        },
        ctors: {
            ctor: function (colors) {
                if (colors === void 0) { colors = []; }

                this.$initialize();
                this.HtmlColors = colors;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextAnimation.BaseData", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.TextRendering.TextAnimation.BaseData(); }
            }
        },
        fields: {
            length: 0,
            progress: 0,
            target: 0
        },
        ctors: {
            $ctor1: function (length, progress, target) {
                this.$initialize();
                this.length = length;
                this.progress = progress;
                this.target = target;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3337077382, this.length, this.progress, this.target]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.TextRendering.TextAnimation.BaseData)) {
                    return false;
                }
                return Bridge.equals(this.length, o.length) && Bridge.equals(this.progress, o.progress) && Bridge.equals(this.target, o.target);
            },
            $clone: function (to) {
                var s = to || new Pidroh.TextRendering.TextAnimation.BaseData();
                s.length = this.length;
                s.progress = this.progress;
                s.target = this.target;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextBoard", {
        statics: {
            fields: {
                NOCHANGECHAR: 0,
                INVISIBLECHAR: 0,
                NOCHANGECOLOR: 0,
                INVISIBLECOLOR: 0
            },
            ctors: {
                init: function () {
                    this.NOCHANGECHAR = 1;
                    this.INVISIBLECHAR = 2;
                    this.NOCHANGECOLOR = -2;
                    this.INVISIBLECOLOR = -1;
                }
            }
        },
        fields: {
            chars: null,
            TextColor: null,
            BackColor: null,
            cursorX: 0,
            cursorY: 0,
            Position: null,
            Width: 0,
            Height: 0
        },
        props: {
            CursorX: {
                get: function () {
                    return this.cursorX;
                },
                set: function (value) {
                    this.cursorX = value;
                }
            },
            CursorY: {
                get: function () {
                    return this.cursorY;
                },
                set: function (value) {
                    this.cursorY = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.Position = new Pidroh.BaseUtils.Vector2D();
                this.cursorX = 0;
                this.cursorY = 0;
            },
            ctor: function (width, height) {
                this.$initialize();
                this.Resize(width, height);
            }
        },
        methods: {
            DrawOnCenter: function (message, color, xOff, yOff, alignString) {
                if (xOff === void 0) { xOff = 0; }
                if (yOff === void 0) { yOff = 0; }
                if (alignString === void 0) { alignString = true; }
                var x = (Bridge.Int.div((this.Width), 2)) | 0;
                if (alignString) {
                    x = (x - (((Bridge.Int.div(message.length, 2)) | 0))) | 0;
                }
                var y = (Bridge.Int.div(this.Height, 2)) | 0;
                this.Draw$1(message, ((x + xOff) | 0), ((y + yOff) | 0), color);
            },
            DrawOnCenterHorizontal: function (message, color, xOff, y, alignString) {
                if (xOff === void 0) { xOff = 0; }
                if (y === void 0) { y = 0; }
                if (alignString === void 0) { alignString = true; }
                var x = (Bridge.Int.div((this.Width), 2)) | 0;
                if (alignString) {
                    x = (x - (((Bridge.Int.div(message.length, 2)) | 0))) | 0;
                }
                this.Draw$1(message, ((x + xOff) | 0), y, color);
            },
            SetMaxSize: function (width, height) {
                this.chars = System.Array.create(0, null, System.Char, width, height);
                this.TextColor = System.Array.create(0, null, System.Int32, width, height);
                this.BackColor = System.Array.create(0, null, System.Int32, width, height);
            },
            Reset: function () {
                this.DrawRepeated(32, 0, 0, this.Width, this.Height, 0, 0);
            },
            ResetInvisible: function () {
                this.DrawRepeated(Pidroh.TextRendering.TextBoard.INVISIBLECHAR, 0, 0, this.Width, this.Height, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR);
            },
            Insert: function (secondBoard) {
                for (var i = 0; i < secondBoard.Width; i = (i + 1) | 0) {
                    for (var j = 0; j < secondBoard.Height; j = (j + 1) | 0) {
                        var x = (Bridge.Int.clip32(secondBoard.Position.X) + i) | 0;
                        var y = (Bridge.Int.clip32(secondBoard.Position.Y) + j) | 0;
                        if (x < 0 || y < 0) {
                            continue;
                        }
                        if (x >= this.Width || y >= this.Height) {
                            continue;
                        }
                        if (secondBoard.chars.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECHAR) {
                            this.chars.set([x, y], secondBoard.chars.get([i, j]));
                        }
                        if (secondBoard.TextColor.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECOLOR) {
                            this.TextColor.set([x, y], secondBoard.TextColor.get([i, j]));
                        }
                        if (secondBoard.BackColor.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECOLOR) {
                            this.BackColor.set([x, y], secondBoard.BackColor.get([i, j]));
                        }
                    }
                }
            },
            DrawHorizontalLine: function (c, y, color) {
                this.DrawRepeated(c, 0, y, this.Width, 1, color);
            },
            DrawRect: function (c, x, y, w, h, textColor, backColor) {
                this.DrawRepeated(c, x, y, 1, h, textColor, backColor);
                this.DrawRepeated(c, ((((x + w) | 0) - 1) | 0), y, 1, h, textColor, backColor);
                this.DrawRepeated(c, x, y, w, 1, textColor, backColor);
                this.DrawRepeated(c, x, ((((y + h) | 0) - 1) | 0), w, 1, textColor, backColor);
            },
            DrawOneDigit: function (i, x, y, color, background) {
                if (color === void 0) { color = -2; }
                if (background === void 0) { background = -2; }
                var c = (((i + 48) | 0)) & 65535;
                this.DrawChar$1(c, x, y, color, background);
            },
            DrawTwoDigits: function (i, x, y, color, background) {
                if (color === void 0) { color = -2; }
                if (background === void 0) { background = -2; }
                this.DrawOneDigit(((Bridge.Int.div(i, 10)) | 0), x, y, color, background);
                this.DrawOneDigit(i % 10, ((x + 1) | 0), y, color, background);
            },
            SameAs: function (textBoard, x, y) {
                return this.chars.get([x, y]) === textBoard.chars.get([x, y]) && this.BackColor.get([x, y]) === textBoard.BackColor.get([x, y]) && this.TextColor.get([x, y]) === textBoard.TextColor.get([x, y]);
            },
            Copy: function (textBoard, x, y) {
                this.chars.set([x, y], textBoard.chars.get([x, y]));
                this.TextColor.set([x, y], textBoard.TextColor.get([x, y]));
                this.BackColor.set([x, y], textBoard.BackColor.get([x, y]));
            },
            Draw_Cursor_UnicodeLabel: function (v, color) {
                var len = this.DrawUnicodeLabel(v, this.cursorX, this.cursorY, color);
                for (var i = 0; i < len; i = (i + 1) | 0) {
                    this.AdvanceCursor();
                }

            },
            DrawUnicodeLabel: function (unicode, x, y, color) {
                if (unicode >= 97 && unicode <= 122) {
                    this.DrawChar$1(((((((unicode + 65) | 0) - 97) | 0)) & 65535), x, y, color);
                    return 1;
                }
                if (unicode >= 48 && unicode <= 57) {
                    this.DrawChar$1((unicode & 65535), x, y, color);
                    return 1;
                }
                var label = "";
                if (unicode === 32) {
                    label = "SPACE";
                }
                if (unicode === Pidroh.BaseUtils.Unicode.Escape) {
                    label = "ESCAPE";
                }
                this.Draw$1(label, x, y, color);
                return label.length;
            },
            Set: function (origin) {
                this.Position = origin.Position.$clone();
                for (var i = 0; i < this.Width; i = (i + 1) | 0) {
                    for (var j = 0; j < this.Height; j = (j + 1) | 0) {
                        this.chars.set([i, j], origin.chars.get([i, j]));
                        this.BackColor.set([i, j], origin.BackColor.get([i, j]));
                        this.TextColor.set([i, j], origin.TextColor.get([i, j]));
                    }
                }
            },
            Resize: function (w, h) {
                if (this.chars == null || w > System.Array.getLength(this.chars, 0) || h > System.Array.getLength(this.chars, 1)) {
                    this.SetMaxSize(w, h);
                }
                this.Width = w;
                this.Height = h;

            },
            CharAt: function (i, j) {
                return this.chars.get([i, j]);
            },
            SetCursorAt: function (x, y) {
                this.cursorX = x;
                this.cursorY = y;
            },
            Draw_Cursor$2: function (v) {
                var $t;
                $t = Bridge.getEnumerator(v);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        this.Draw_Cursor(c);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            Draw_Cursor$3: function (v, color, backColor) {
                var $t;
                if (backColor === void 0) { backColor = -2; }
                $t = Bridge.getEnumerator(v);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        this.Draw_Cursor$1(c, color, backColor);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            Draw_Cursor: function (c) {

                this.DrawChar(c, this.cursorX, this.cursorY);
                this.AdvanceCursor();
            },
            Draw_Cursor$1: function (c, color, backColor) {
                if (backColor === void 0) { backColor = -2; }

                this.DrawChar$1(c, this.cursorX, this.cursorY, color, backColor);
                this.AdvanceCursor();
            },
            CanDraw_Cursor_SmartLineBreak: function (v) {
                var currentX = this.cursorX;
                var currentY = this.cursorY;

                for (var i = 0; i < v.length; i = (i + 1) | 0) {
                    var lineBreak = false;
                    var shouldCheckForLineBreaks = (i === 0 || v.charCodeAt(i) === 32) && i !== ((v.length - 1) | 0);
                    if (shouldCheckForLineBreaks) {
                        for (var j = 1; j < ((v.length - i) | 0); j = (j + 1) | 0) {
                            if (((j + currentX) | 0) >= this.Width) {
                                if (v.charCodeAt(i) === 32) {
                                    i = (i + 1) | 0;
                                }
                                lineBreak = true;
                                break;
                            }
                            if (v.charCodeAt(((i + j) | 0)) === 32) {
                                break;
                            }
                        }
                    }
                    if (lineBreak) {
                        currentY = (currentY + 1) | 0;
                        currentX = 0;
                    }
                    currentX = (currentX + 1) | 0;
                    if (currentX >= this.Width) {
                        currentY = (currentY + 1) | 0;
                        currentX = 0;
                    }
                    if (currentX >= this.Width || currentY >= this.Height) {
                        return false;
                    }


                }
                return true;
            },
            Draw_Cursor_SmartLineBreak: function (v, color) {
                var offStart = 0;
                var offEnd = (v.length - 1) | 0;
                return this.Draw_Cursor_SmartLineBreak$1(v, color, offStart, offEnd);
            },
            Draw_Cursor_SmartLineBreak$1: function (v, color, offStart, offEnd, xNewline) {
                if (xNewline === void 0) { xNewline = 0; }

                var start = new Pidroh.BaseUtils.Vector2D.$ctor2(this.CursorX, this.CursorY);
                var endIndex = (offEnd + 1) | 0;
                for (var i = offStart; i < endIndex; i = (i + 1) | 0) {
                    var originX = this.cursorX;
                    var lineBreak = false;
                    var shouldCheckForLineBreaks = (i === 0 || v.charCodeAt(i) === 32) && i !== ((endIndex - 1) | 0);
                    if (shouldCheckForLineBreaks) {
                        for (var j = 1; j < ((endIndex - i) | 0); j = (j + 1) | 0) {
                            if (((j + originX) | 0) >= this.Width) {
                                if (v.charCodeAt(i) === 32) {
                                    i = (i + 1) | 0;
                                }
                                lineBreak = true;
                                break;
                            }
                            if (v.charCodeAt(((i + j) | 0)) === 32) {
                                break;
                            }
                        }
                    }
                    if (lineBreak) {
                        this.CursorNewLine(xNewline);
                    }
                    this.Draw_Cursor$1(v.charCodeAt(i), color);
                }
                var end = new Pidroh.BaseUtils.Vector2D.$ctor2(this.CursorX, this.CursorY);
                return new Pidroh.TextRendering.TextBoard.DrawCursorResult.$ctor1(this.PositionToIndex(start.$clone()), this.PositionToIndex(end.$clone()), start.$clone(), end.$clone());
            },
            AutoFixGridding: function () {
                for (var i = 0; i < this.Width; i = (i + 1) | 0) {
                    for (var j = 0; j < this.Height; j = (j + 1) | 0) {
                        if (this.IsGrid(i, j)) {
                            var mask = 0;
                            if (this.IsGrid(((i - 1) | 0), j)) {
                                mask = (mask + 1) | 0;
                            }
                            if (this.IsGrid(((i + 1) | 0), j)) {
                                mask = (mask + 2) | 0;
                            }
                            if (this.IsGrid(i, ((j - 1) | 0))) {
                                mask = (mask + 4) | 0;
                            }
                            if (this.IsGrid(i, ((j + 1) | 0))) {
                                mask = (mask + 8) | 0;
                            }
                            switch (mask) {
                                case 1: 
                                case 2: 
                                case 3: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridHor);
                                    break;
                                case 4: 
                                case 8: 
                                case 12: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridVer);
                                    break;
                                case 5: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridUpLeft);
                                    break;
                                case 6: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridUpRight);
                                    break;
                                case 7: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridUpRightLeft);
                                    break;
                                case 9: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridDownLeft);
                                    break;
                                case 10: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridDownRight);
                                    break;
                                case 11: 
                                    this.chars.set([i, j], Pidroh.BaseUtils.Unicode.AsciiGridDownRightLeft);
                                    break;
                                default: 
                                    break;
                            }
                        }


                    }
                }
            },
            IsGrid: function (x, y) {
                var $t;
                if (x < 0 || y < 0 || x >= this.Width || y >= this.Height) {
                    return false;
                }
                var c = this.chars.get([x, y]);
                $t = Bridge.getEnumerator(Pidroh.BaseUtils.Unicode.grids);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (c === item) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return false;
            },
            DrawLines: function (hero, points) {
                if (points === void 0) { points = []; }
                for (var i = 0; i < ((points.length - 1) | 0); i = (i + 1) | 0) {
                    this.DrawLine(points[System.Array.index(i, points)].$clone(), points[System.Array.index(((i + 1) | 0), points)].$clone(), hero);
                }

            },
            DrawLine: function (pos1, pos2, color) {
                var c = Pidroh.BaseUtils.Unicode.AsciiGridHor;
                if (pos1.Y !== pos2.Y) {
                    c = Pidroh.BaseUtils.Unicode.AsciiGridVer;
                }
                var height = (pos2.YInt - pos1.YInt) | 0;
                var width = (pos2.XInt - pos1.XInt) | 0;
                this.DrawRepeated(c, pos1.XInt, pos1.YInt, ((width + 1) | 0), ((height + 1) | 0), color);
            },
            PositionToIndex: function (start) {
                return Bridge.Int.clip32(start.X + start.Y * this.Width);
            },
            DrawOneDigit_Cursor: function (i) {
                this.Draw_Cursor(((((i + 48) | 0)) & 65535));
            },
            AdvanceCursor: function () {
                this.cursorX = (this.cursorX + 1) | 0;
                if (this.cursorX >= this.Width) {
                    this.cursorX = 0;
                    this.cursorY = (this.cursorY + 1) | 0;
                }
            },
            CursorNewLine: function (x) {
                this.cursorY = (this.cursorY + 1) | 0;
                this.cursorX = x;
            },
            DrawChar: function (v, x, y) {

                if (v !== Pidroh.TextRendering.TextBoard.NOCHANGECHAR) {
                    this.chars.set([x, y], v);

                }

            },
            DrawChar$1: function (v, x, y, color, backColor) {
                if (backColor === void 0) { backColor = -2; }

                this.DrawChar(v, x, y);
                this.SetColor(color, x, y);
                this.SetBackColor(backColor, x, y);
            },
            SetAll: function (text, textColor, backColor) {
                if (textColor === void 0) { textColor = -2; }
                if (backColor === void 0) { backColor = -2; }
                this.DrawRepeated(text, 0, 0, this.Width, this.Height, textColor, backColor);
            },
            SetAllIfVisible: function (text, textColor, backColor) {
                if (textColor === void 0) { textColor = -2; }
                if (backColor === void 0) { backColor = -2; }
                this.DrawRepeatedIfVisible(text, 0, 0, this.Width, this.Height, textColor, backColor);
            },
            DrawWithGrid: function (text, x, y, gridColor, textColor) {
                var width = text.length;
                this.DrawGrid(x, y, ((width + 2) | 0), 3, gridColor);
                this.Draw$1(text, ((x + 1) | 0), ((y + 1) | 0), textColor);
            },
            Draw$1: function (v, x, y, color, backColor) {
                if (backColor === void 0) { backColor = -2; }
                for (var i = 0; i < v.length; i = (i + 1) | 0) {
                    var x2 = (x + i) | 0;
                    var y2 = y;
                    if (x2 >= this.Width) {
                        x2 = (x2 - this.Width) | 0;
                        y2 = (y2 + 1) | 0;
                    }
                    this.DrawChar$1(v.charCodeAt(i), x2, y2, color, backColor);
                }
            },
            Draw: function (v, x, y, color, backColor) {
                if (backColor === void 0) { backColor = -2; }
                for (var i = 0; i < System.Linq.Enumerable.from(v).count(); i = (i + 1) | 0) {
                    this.DrawChar$1(System.Linq.Enumerable.from(v).elementAt(i), ((x + i) | 0), y, color, backColor);
                }
            },
            Draw$2: function (v, x2, y2, input) {
                throw new System.NotImplementedException.ctor();
            },
            DrawWithLinebreaks: function (v, x, y, newlineX, color, backColor) {
                if (backColor === void 0) { backColor = -2; }
                var linebreaks = 0;
                var xOffsetnewlines = 0;
                for (var i = 0; i < v.length; i = (i + 1) | 0) {
                    var x2 = (((x + i) | 0) + xOffsetnewlines) | 0;
                    var y2 = y;

                    while (x2 >= this.Width) {
                        x2 = (((x2 - this.Width) | 0) + newlineX) | 0;
                        y2 = (y2 + 1) | 0;
                    }

                    if (v.charCodeAt(i) === 10) {
                        linebreaks = (linebreaks + 1) | 0;
                        xOffsetnewlines = (xOffsetnewlines + (((((newlineX - x2) | 0) - 1) | 0))) | 0;
                    } else {
                        this.DrawChar$1(v.charCodeAt(i), x2, ((y2 + linebreaks) | 0), color, backColor);
                    }
                }
            },
            DrawGrid: function (x, y, width, height, color) {

                this.DrawRepeated(Pidroh.BaseUtils.Unicode.AsciiGridVer, x, y, 1, height, color);
                this.DrawRepeated(Pidroh.BaseUtils.Unicode.AsciiGridVer, ((((x + width) | 0) - 1) | 0), y, 1, height, color);
                this.DrawRepeated(Pidroh.BaseUtils.Unicode.AsciiGridHor, x, y, width, 1, color);
                this.DrawRepeated(Pidroh.BaseUtils.Unicode.AsciiGridHor, x, ((((y + height) | 0) - 1) | 0), width, 1, color);

                this.DrawRepeated(218, x, y, 1, 1, color);
                this.DrawRepeated(192, x, ((((y + height) | 0) - 1) | 0), 1, 1, color);
                this.DrawRepeated(217, ((((x + width) | 0) - 1) | 0), ((((y + height) | 0) - 1) | 0), 1, 1, color);
                this.DrawRepeated(191, ((((x + width) | 0) - 1) | 0), y, 1, 1, color);
            },
            DrawGrid$1: function (v1, v2, v3, v4, board) {
                throw new System.NotImplementedException.ctor();
            },
            DrawRepeated: function (c, x, y, width, height, color, backColor) {
                if (backColor === void 0) { backColor = -2; }
                for (var i = x; i < ((x + width) | 0); i = (i + 1) | 0) {
                    for (var j = y; j < ((y + height) | 0); j = (j + 1) | 0) {
                        this.DrawChar$1(c, i, j, color);

                        this.SetBackColor(backColor, i, j);
                    }
                }
            },
            DrawRepeatedIfVisible: function (c, x, y, width, height, color, backColor) {
                if (backColor === void 0) { backColor = -2; }
                for (var i = x; i < ((x + width) | 0); i = (i + 1) | 0) {
                    for (var j = y; j < ((y + height) | 0); j = (j + 1) | 0) {
                        if (this.chars.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECHAR || this.TextColor.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECOLOR) {
                            this.DrawChar$1(c, i, j, color);
                        }
                        if (this.BackColor.get([i, j]) !== Pidroh.TextRendering.TextBoard.INVISIBLECOLOR) {
                            this.SetBackColor(backColor, i, j);
                        }
                    }
                }
            },
            SetColor: function (color, x, y) {
                if (color !== Pidroh.TextRendering.TextBoard.NOCHANGECOLOR) {
                    this.TextColor.set([x, y], color);
                }
            },
            SetBackColor: function (color, x, y) {
                if (color !== Pidroh.TextRendering.TextBoard.NOCHANGECOLOR) {
                    this.BackColor.set([x, y], color);
                }
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextBoard.DrawCursorResult", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.TextRendering.TextBoard.DrawCursorResult(); }
            }
        },
        fields: {
            StartIndex: 0,
            EndIndex: 0,
            StartPosition: null,
            EndPosition: null
        },
        ctors: {
            init: function () {
                this.StartPosition = new Pidroh.BaseUtils.Vector2D();
                this.EndPosition = new Pidroh.BaseUtils.Vector2D();
            },
            $ctor1: function (startIndex, endIndex, startPosition, endPosition) {
                this.$initialize();
                this.StartIndex = startIndex;
                this.EndIndex = endIndex;
                this.StartPosition = startPosition.$clone();
                this.EndPosition = endPosition.$clone();
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([7592922985, this.StartIndex, this.EndIndex, this.StartPosition, this.EndPosition]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.TextRendering.TextBoard.DrawCursorResult)) {
                    return false;
                }
                return Bridge.equals(this.StartIndex, o.StartIndex) && Bridge.equals(this.EndIndex, o.EndIndex) && Bridge.equals(this.StartPosition, o.StartPosition) && Bridge.equals(this.EndPosition, o.EndPosition);
            },
            $clone: function (to) {
                var s = to || new Pidroh.TextRendering.TextBoard.DrawCursorResult();
                s.StartIndex = this.StartIndex;
                s.EndIndex = this.EndIndex;
                s.StartPosition = this.StartPosition.$clone();
                s.EndPosition = this.EndPosition.$clone();
                return s;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextEntity", {
        fields: {
            id: 0,
            Origin: null,
            Animation: null,
            freeIfIdle: false,
            animating: false
        },
        props: {
            Height: {
                get: function () {
                    return this.Origin.Height;
                }
            },
            Width: {
                get: function () {
                    return this.Origin.Width;
                }
            }
        },
        ctors: {
            init: function () {
                this.freeIfIdle = false;
            }
        },
        methods: {
            AnimBase: function (length) {
                return new Pidroh.TextRendering.TextAnimation.BaseData.$ctor1(length, 0, this.id);
            },
            GetPosition: function () {
                return this.Origin.Position.$clone();
            },
            ResetAnimation: function () {
                this.animating = false;
                this.Animation.Set(this.Origin);
            },
            ResetFull: function () {
                this.Origin.ResetInvisible();
            },
            SetPosition$2: function (x, y) {
                this.Origin.Position = new Pidroh.BaseUtils.Vector2D.$ctor2(x, y);
            },
            SetPosition$1: function (vector2D) {
                this.Origin.Position = vector2D.$clone();
            },
            SetPosition: function (point) {
                this.Origin.Position = new Pidroh.BaseUtils.Vector2D.$ctor2(point.X, point.Y);
            },
            SetSize: function (w, h) {
                if (this.Origin == null) {
                    this.Origin = new Pidroh.TextRendering.TextBoard(w, h);
                    this.Animation = new Pidroh.TextRendering.TextBoard(w, h);
                }
                this.Origin.Resize(w, h);
                this.Animation.Resize(w, h);

            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextScreenHolder", {
        fields: {
            Screen: null,
            Mouse: null,
            Key: null
        },
        methods: {
            SetAll: function (dns) {
                this.Screen = Bridge.as(dns, Pidroh.TextRendering.ITextScreen);
                this.Mouse = Bridge.as(dns, Pidroh.TextRendering.IMouseInput);
                this.Key = Bridge.as(dns, Pidroh.TextRendering.IKeyboardInput);
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextWorld", {
        fields: {
            palette: null,
            activeAgents: null,
            freeBoards: null,
            animations: null,
            mainBoard: null,
            latestId: 0
        },
        ctors: {
            init: function () {
                this.palette = Pidroh.TextRendering.DefaultPalettes.C4KiroKaze;
                this.activeAgents = new (System.Collections.Generic.List$1(Pidroh.TextRendering.TextEntity)).ctor();
                this.freeBoards = new (System.Collections.Generic.List$1(Pidroh.TextRendering.TextEntity)).ctor();
                this.animations = new (System.Collections.Generic.List$1(Pidroh.TextRendering.TextAnimation)).ctor();
                this.latestId = -1;
            }
        },
        methods: {
            AddAnimation: function (T, ta) {
                this.animations.add(ta);
                ta.RegisterLists();
                return ta;
            },
            Init: function (width, height) {
                this.mainBoard = new Pidroh.TextRendering.TextBoard(width, height);

            },
            Draw: function () {
                this.mainBoard.Reset();
                this.DrawChildren();
            },
            DrawChildren: function () {
                var $t;
                for (var i = 0; i < this.activeAgents.Count; i = (i + 1) | 0) {
                    this.activeAgents.getItem(i).ResetAnimation();
                    $t = Bridge.getEnumerator(this.animations);
                    try {
                        while ($t.moveNext()) {
                            var anim = $t.Current;
                            anim.Modify$1(this.activeAgents.getItem(i));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }if (this.activeAgents.getItem(i).freeIfIdle && !this.activeAgents.getItem(i).animating) {
                        this.freeBoards.add(this.activeAgents.getItem(i));
                        this.activeAgents.remove(this.activeAgents.getItem(i));
                        i = (i - 1) | 0;
                    } else {
                        this.mainBoard.Insert(this.activeAgents.getItem(i).Animation);
                    }

                }
            },
            GetFreeEntity: function (w, h) {
                var te;
                if (this.freeBoards.Count > 0) {
                    te = this.freeBoards.getItem(((this.freeBoards.Count - 1) | 0));
                    this.freeBoards.removeAt(((this.freeBoards.Count - 1) | 0));
                } else {
                    te = new Pidroh.TextRendering.TextEntity();
                    te.id = ((this.latestId = (this.latestId + 1) | 0));

                }

                this.activeAgents.add(te);
                te.freeIfIdle = false;
                te.SetSize(w, h);
                te.ResetFull();
                return te;
            },
            GetTempEntity: function (w, h) {
                var te = this.GetFreeEntity(w, h);
                te.freeIfIdle = true;
                return te;
            },
            AdvanceTime: function (v) {
                var $t;
                $t = Bridge.getEnumerator(this.animations);
                try {
                    while ($t.moveNext()) {
                        var anim = $t.Current;
                        anim.Update(v);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            TryEndAnimations: function () {
                var $t;
                $t = Bridge.getEnumerator(this.animations);
                try {
                    while ($t.moveNext()) {
                        var anim = $t.Current;
                        anim.TryEnd();
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            Free: function (entities) {
                var $t;

                this.freeBoards.AddRange(entities);
                $t = Bridge.getEnumerator(entities);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.activeAgents.remove(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            IsDone: function () {
                var $t;
                $t = Bridge.getEnumerator(this.animations);
                try {
                    while ($t.moveNext()) {
                        var anim = $t.Current;
                        if (!anim.IsDone()) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.AttackPreview", {
        fields: {
            ecs: null,
            render: null,
            moveDatas: null,
            entities: null,
            currentMoveId: 0
        },
        ctors: {
            init: function () {
                this.entities = new (System.Collections.Generic.List$1(Pidroh.TextRendering.TextEntity)).ctor();
            },
            ctor: function (ecs, render) {
                this.$initialize();
                this.ecs = ecs;
                this.render = render;
                this.render.attackPreview = this;
                this.moveDatas = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.MoveData);

            }
        },
        methods: {
            ShowPreview: function (user, moveId) {
                var $t, $t1;
                if (moveId === this.currentMoveId) {
                    return;
                }
                this.End();
                this.currentMoveId = moveId;

                var moveData = this.moveDatas.Comp1(moveId);
                var pos = this.render.EntityScreenPosition(user);
                var gridRect = this.render.GetGridRect();

                $t = Bridge.getEnumerator(moveData.units);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        var items = item.thingsToHappen;
                        $t1 = Bridge.getEnumerator(items);
                        try {
                            while ($t1.moveNext()) {
                                var thing = $t1.Current;
                                if (Bridge.is(thing, Pidroh.ConsoleApp.Turnbased.DealDamageAction)) {
                                    var da = Bridge.as(thing, Pidroh.ConsoleApp.Turnbased.DealDamageAction);
                                    var target = da.target;
                                    switch (target) {
                                        case Pidroh.ConsoleApp.Turnbased.Target.None: 
                                            break;
                                        case Pidroh.ConsoleApp.Turnbased.Target.Self: 
                                            break;
                                        case Pidroh.ConsoleApp.Turnbased.Target.ClosestTarget: 
                                            break;
                                        case Pidroh.ConsoleApp.Turnbased.Target.ClosestTargetX: 
                                            var freeEntity = this.render.textWorld.GetFreeEntity(((((gridRect.X + gridRect.Width) | 0) - pos.XInt) | 0), 1);
                                            this.entities.add(freeEntity);
                                            freeEntity.SetPosition$1(pos.$clone());
                                            freeEntity.Origin.SetAll(Pidroh.TextRendering.TextBoard.INVISIBLECHAR, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR, 1);
                                            break;
                                        case Pidroh.ConsoleApp.Turnbased.Target.Area: 
                                            break;
                                        default: 
                                            break;
                                    }
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            End: function () {

                if (this.currentMoveId >= 0) {
                    this.currentMoveId = -1;
                    this.render.textWorld.Free(this.entities);
                }
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HappHandling", {
        fields: {
            battleRender: null,
            ecs: null,
            Handle: null,
            handlers: null,
            happs: null,
            handleState: null
        },
        props: {
            highestHandled: {
                get: function () {
                    return this.handleState.highestHandled;
                },
                set: function (value) {
                    this.handleState.highestHandled = value;
                }
            }
        },
        ctors: {
            init: function () {
                this.handlers = new (System.Collections.Generic.List$1(Pidroh.TurnBased.TextRendering.HappHandling.HappHandler)).ctor();
                this.handleState = new Pidroh.TurnBased.TextRendering.HappHandling.HappHandleState();
            },
            ctor: function (battleRender, battleSetup) {
                this.$initialize();
                this.battleRender = battleRender;
                var world = battleRender.textWorld;
                var posAnim = world.AddAnimation(Bridge.global.Pidroh.TextRendering.PositionAnimation, new Pidroh.TextRendering.PositionAnimation());
                var blinkAnim = world.AddAnimation(Bridge.global.Pidroh.TextRendering.BlinkAnim, new Pidroh.TextRendering.BlinkAnim());
                var delayAnim = world.AddAnimation(Bridge.global.Pidroh.TextRendering.DelaysAnimation, new Pidroh.TextRendering.DelaysAnimation());
                this.ecs = battleSetup.ecs;
                this.ecs.CreateEntityWithComponent(this.handleState);
                var battleMain = battleSetup.battleMain;
                var time = battleSetup.timeStamp;
                battleRender.HappHandling = this;
                this.happs = this.ecs.QuickAccessor2(Pidroh.ConsoleApp.Turnbased.HappTags, Pidroh.BaseUtils.TimeStampSnap);
                this.highestHandled = -1;


                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(function (e) {



                    var damage = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappDamageData, e);

                    var amount = damage.amount;





                    var message;
                    if (damage.elementalBlock) {

                        {
                            var text = (System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.damageE).toUpperCase() || "") + " BLOCK " + (System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.targetE).toUpperCase() || "");
                            var message2 = battleRender.textWorld.GetTempEntity(text.length, 1);
                            var colorE = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE);
                            message2.Origin.Draw$1(text, 0, 0, colorE);

                            blinkAnim.Add$1(message2.AnimBase(0.6), Pidroh.TextRendering.BlinkAnim.BlinkData.FrontColor(colorE, 0.2));
                            var offset = Bridge.Int.clip32(Math.floor(((-text.length) | 0) / 2.0));
                            message2.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(battleRender.battlerRenders.getItem(damage.target).GetPosition(), new Pidroh.BaseUtils.Vector2D.$ctor2(((1 + offset) | 0), -3)));
                            delayAnim.Delay(0.65);
                        }
                        {
                            var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities.getItem(damage.target).pos.$clone());
                            var blast = battleRender.textWorld.GetTempEntity(5, 5);
                            blast.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(pos.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(-2, -2)));

                            blast.Origin.DrawRect(32, 0, 0, 5, 5, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE));
                            blinkAnim.Add$1(blast.AnimBase(0.2), Pidroh.TextRendering.BlinkAnim.BlinkData.BackColor(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey, 0.05, false));
                        }
                        message = System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.damageE) + " absorbs " + System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.targetE) + "\n";
                        message = (message || "") + (((battleRender.GetEntityName(damage.target) || "") + " is unafectted.") || "");
                    } else {

                        if (damage.superEffective) {

                            {
                                var text1 = (System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.damageE).toUpperCase() || "") + " BREAK " + (System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, damage.targetE).toUpperCase() || "");
                                var message21 = battleRender.textWorld.GetTempEntity(text1.length, 1);
                                var colorE1 = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE);
                                message21.Origin.Draw$1(text1, 0, 0, colorE1);

                                blinkAnim.Add$1(message21.AnimBase(0.45), Pidroh.TextRendering.BlinkAnim.BlinkData.FrontColor(colorE1, 0.2));
                                var offset1 = Bridge.Int.clip32(Math.floor(((-text1.length) | 0) / 2.0));
                                message21.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(battleRender.battlerRenders.getItem(damage.target).GetPosition(), new Pidroh.BaseUtils.Vector2D.$ctor2(((1 + offset1) | 0), -2)));
                                delayAnim.Delay(0.65);
                            }

                            message = null;
                            {
                                var pos1 = battleRender.BattleEntityToScreenPosition(battleMain.entities.getItem(damage.target).pos.$clone());
                                var blast1 = battleRender.textWorld.GetTempEntity(5, 5);
                                blast1.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(pos1.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(-2, -2)));

                                blast1.Origin.DrawRepeated(32, 1, 1, 3, 3, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy);
                                blinkAnim.Add$1(blast1.AnimBase(0.2), Pidroh.TextRendering.BlinkAnim.BlinkData.BackColor(Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE), 0.05));
                            }
                        } else {
                            message = null;
                        }
                    }

                    {
                        var pos2 = battleRender.BattleEntityToScreenPosition(battleMain.entities.getItem(damage.target).pos.$clone());
                        var number = battleRender.textWorld.GetTempEntity(2, 1);

                        var initialPos = Pidroh.BaseUtils.Vector2D.op_Addition(pos2.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(0, 0));
                        number.SetPosition$1(initialPos.$clone());

                        if (amount >= 10) {
                            number.Origin.DrawTwoDigits(amount, 0, 0, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);
                        } else {
                            number.Origin.DrawOneDigit(amount, 0, 0, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);
                        }
                        posAnim.Add$1(number.AnimBase(0.6), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(initialPos.$clone(), Pidroh.BaseUtils.Vector2D.op_Addition(initialPos.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(0, -3))));
                    }

                    if (message != null) {
                        battleRender.ShowMessage(message);
                    }

                    var defender = battleRender.battlerRenders.getItem(damage.target);

                    if (!damage.superEffective && !damage.elementalBlock) {
                        var fe = battleRender.textWorld.GetTempEntity(3, 3);
                        var backColor = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE);
                        backColor = 0;
                        var xColor = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(damage.damageE);
                        var damageChar = 88;
                        fe.Origin.DrawChar$1(damageChar, 1, 0, xColor, backColor);
                        fe.Origin.DrawChar$1(damageChar, 1, 1, xColor, backColor);
                        fe.Origin.DrawChar$1(damageChar, 1, 2, xColor, backColor);
                        fe.Origin.DrawChar$1(damageChar, 0, 1, xColor, backColor);
                        fe.Origin.DrawChar$1(damageChar, 2, 1, xColor, backColor);
                        fe.Origin.Position = Pidroh.BaseUtils.Vector2D.op_Addition(defender.GetPosition(), new Pidroh.BaseUtils.Vector2D.$ctor2(-1, -1));

                        blinkAnim.Add$1(fe.AnimBase(0.35), Pidroh.TextRendering.BlinkAnim.BlinkData.Char(90, 0.05));
                    }


                }, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscHappTags.Damage, Pidroh.ConsoleApp.Turnbased.MiscHappTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscHappTags))]));
                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(function (e) {
                    var hmd = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMoveData, e);


                    var text = System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.Element, hmd.element);
                    var message = battleRender.textWorld.GetTempEntity(text.length, 1);
                    message.Origin.Draw$1(text, 0, 0, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);
                    blinkAnim.Add$1(message.AnimBase(0.5), Pidroh.TextRendering.BlinkAnim.BlinkData.FrontColor(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription, 0.15));
                    var offset = Bridge.Int.clip32(Math.floor(((-text.length) | 0) / 2.0));
                    message.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(battleRender.battlerRenders.getItem(hmd.user).GetPosition(), new Pidroh.BaseUtils.Vector2D.$ctor2(((1 + offset) | 0), -1)));

                }, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscHappTags.ChangeElement, Pidroh.ConsoleApp.Turnbased.MiscHappTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscHappTags))]));
                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(function (e) {
                    var hmd = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMoveData, e);
                    var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities.getItem(hmd.user).pos.$clone());
                    var blast = battleRender.textWorld.GetTempEntity(3, 3);
                    blast.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(pos.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(-1, -1)));

                    blast.Origin.DrawRepeated(32, 1, 1, 1, 1, Pidroh.TextRendering.TextBoard.INVISIBLECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy);
                    blinkAnim.Add$1(blast.AnimBase(0.2), Pidroh.TextRendering.BlinkAnim.BlinkData.BackColor(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0.05));

                }, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscHappTags.Death, Pidroh.ConsoleApp.Turnbased.MiscHappTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscHappTags))]));
                var moveHandle = function (e) {
                    var hmd = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMoveData, e);
                    var hmf = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMovement, e);
                    var eId = hmd.user;
                    var mover = battleMain.entities.getItem(eId);

                    var pos = mover.PositionV2D.$clone();
                    var pos2 = hmf.moveTo.$clone();
                    var posF = Pidroh.BaseUtils.Vector2D.op_Division$1((Pidroh.BaseUtils.Vector2D.op_Addition(pos.$clone(), pos2.$clone())), 2);

                    var fe = battleRender.battlerRenders.getItem(eId);
                    if (hmf.success) {
                        var finalPosScreen = battleRender.BattleEntityToScreenPosition(hmf.moveTo.$clone());
                        posAnim.Add$1(fe.AnimBase(0.2), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(battleRender.BattleEntityToScreenPosition(hmf.moveFrom.$clone()), finalPosScreen.$clone()));
                        fe.SetPosition$1(finalPosScreen.$clone());
                    } else {
                        posAnim.Add$1(fe.AnimBase(0.2), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(battleRender.BattleEntityToScreenPosition(hmf.moveFrom.$clone()), battleRender.BattleEntityToScreenPosition(posF.$clone())));
                    }

                };
                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(moveHandle, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));

                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(function (e) {
                    var $t;
                    var ha = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappArea, e);
                    var hmd = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMoveData, e);
                    var eId = hmd.user;
                    var mover = battleMain.entities.getItem(eId);
                    var area = ha.area;
                    var points = area.points;

                    var useEffect = world.GetTempEntity(1, 1);
                    useEffect.SetPosition$1(battleRender.BattleEntityToScreenPosition(mover.pos.$clone()));
                    blinkAnim.Add$1(useEffect.AnimBase(0.5), Pidroh.TextRendering.BlinkAnim.BlinkData.BackColor(Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(hmd.element), 0.15));
                    $t = Bridge.getEnumerator(points);
                    try {
                        while ($t.moveNext()) {
                            var item = $t.Current.$clone();
                            var entity = world.GetTempEntity(1, 1);
                            var finalPos = Pidroh.BaseUtils.Vector2D.op_Addition(Pidroh.BaseUtils.Vector2D.op_Multiply(item.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(ha.mirroringX, 1)), ha.offset.$clone());
                            if (finalPos.X < 0) {
                                continue;
                            }
                            if (finalPos.Y < 0) {
                                continue;
                            }
                            if (finalPos.X > 5) {
                                continue;
                            }
                            if (finalPos.Y > 2) {
                                continue;
                            }
                            var pos = battleRender.BattleEntityToScreenPosition(finalPos.$clone());
                            entity.SetPosition$2(pos.XInt, pos.YInt);
                            blinkAnim.Add$1(entity.AnimBase(0.5), Pidroh.TextRendering.BlinkAnim.BlinkData.BackColor(Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(hmd.element), 0.15));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Bomb, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));
                this.handlers.add(new Pidroh.TurnBased.TextRendering.HappHandling.HappHandler(function (e) {
                    var ha = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappShoot, e);
                    var md = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.HappMoveData, e);
                    if (ha != null) {

                        var element = md.element;
                        var fe = battleRender.GetProjTextEntity(element);
                        var pos = ha.start.$clone();
                        var pos2 = ha.end.$clone();
                        var xDis = Math.abs(pos.X - pos2.X);
                        var timeV = xDis * 0.1;
                        posAnim.Add$1(fe.AnimBase(timeV), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(battleRender.BattleEntityToScreenPosition(pos.$clone()), battleRender.BattleEntityToScreenPosition(pos2.$clone())));


                    }

                }, [Bridge.box(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Shoot, Pidroh.ConsoleApp.Turnbased.MoveDataTags, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MoveDataTags))]));

                this.Handle = Bridge.fn.bind(this, function () {
                    var $t, $t1;
                    var newHighestHandled = this.highestHandled;
                    for (var i = 0; i < this.happs.Length; i = (i + 1) | 0) {
                        if (!battleRender.CanAdvanceGraphics()) {
                            break;
                        }
                        var tags = this.happs.Comp1(i);
                        if (i > this.highestHandled) {
                            newHighestHandled = i;
                            var handled = false;
                            $t = Bridge.getEnumerator(this.handlers);
                            try {
                                while ($t.moveNext()) {
                                    var han = $t.Current;
                                    if (han.CanHandle(tags.tags)) {
                                        handled = true;
                                        han.Handler(this.happs.Entity(i));
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }if (!handled) {
                                $t1 = Bridge.getEnumerator(tags.tags);
                                try {
                                    while ($t1.moveNext()) {
                                        var t = $t1.Current;
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }}
                        } else {
                        }
                    }
                    this.highestHandled = newHighestHandled;
                });

            }
        },
        methods: {
            IsDone: function () {
                return this.highestHandled >= ((this.happs.Length - 1) | 0);
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HappHandling.HappHandler", {
        $kind: "nested class",
        fields: {
            necessaryTags: null,
            Handler: null
        },
        ctors: {
            init: function () {
                this.necessaryTags = new (System.Collections.Generic.List$1(System.Int32)).ctor();
            },
            ctor: function (handler, tags) {
                if (tags === void 0) { tags = []; }
                var $t;

                this.$initialize();
                $t = Bridge.getEnumerator(tags);
                try {
                    while ($t.moveNext()) {
                        var t = $t.Current;
                        this.necessaryTags.add(System.Convert.toInt32(t));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.Handler = handler;
            }
        },
        methods: {
            CanHandle: function (tags) {
                var $t;
                $t = Bridge.getEnumerator(this.necessaryTags);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (!tags.contains(item)) {
                            return false;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return true;
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HappHandling.HappHandleState", {
        $kind: "nested class",
        fields: {
            highestHandled: 0
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HelpScreenIntegration", {
        fields: {
            showRequest: false,
            caller: null
        },
        methods: {
            Show: function (screen) {
                this.showRequest = true;
                this.caller = screen;
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HelpScreenModel", {
        fields: {
            battleMain: null,
            commandsHero: null,
            commandsEnemy: null,
            battleIntroMode: false,
            attackDemo: false,
            killAllEnemies: false
        },
        ctors: {
            init: function () {
                this.commandsHero = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.commandsEnemy = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.battleIntroMode = false;
            },
            ctor: function (battleMain) {
                this.$initialize();
                this.battleMain = battleMain;

            }
        },
        methods: {
            RefreshData: function () {
                var $t;
                this.commandsHero.clear();
                this.AddAll(this.battleMain.playerHandFixed, this.commandsHero);
                this.AddAll(this.battleMain.playerHandUnfixed, this.commandsHero);
                this.AddAll(this.battleMain.playerHandPool, this.commandsHero);
                $t = Bridge.getEnumerator(this.battleMain.entities);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.AddAllArray(item.moves, this.commandsEnemy);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.attackDemo = this.battleMain.BattleConfig.attackDemonstrationMode;
                this.killAllEnemies = this.battleMain.BattleConfig.needKillAllEnemies;
            },
            AddAll: function (moves, commands) {
                var $t;
                $t = Bridge.getEnumerator(moves);
                try {
                    while ($t.moveNext()) {
                        var m = $t.Current;
                        var a = m;
                        if (a < 0) {
                            continue;
                        }
                        if (!commands.contains(a)) {
                            commands.add(a);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }},
            AddAllArray: function (moves, commands) {
                var $t;
                $t = Bridge.getEnumerator(moves);
                try {
                    while ($t.moveNext()) {
                        var a = $t.Current;
                        if (a < 0) {
                            continue;
                        }
                        if (!commands.contains(a)) {
                            commands.add(a);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }}
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.InputHandling", {
        fields: {
            unfixedCommandKeys: null,
            fixedMoveButtons: null,
            fixedMoveButtonAlternative: null
        },
        ctors: {
            init: function () {
                this.unfixedCommandKeys = System.Array.init([
                    49, 
                    50, 
                    51, 
                    52, 
                    53
                ], System.Int32);
                this.fixedMoveButtons = function (_o1) {
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.NormalShot, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 103);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 102);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 105);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 98);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 121);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 116);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 100);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 119);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 115);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.Move, Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType))), 97);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Done, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.BaseUtils.Unicode.Space);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Redo, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), 114);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Preview, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), 112);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Help, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), 104);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Cancel, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), 114);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Confirm, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.BaseUtils.Unicode.Space);
                        _o1.add(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.LeaveAttackDemonstration, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.BaseUtils.Unicode.Escape);
                        return _o1;
                    }(new (System.Collections.Generic.Dictionary$2(Pidroh.ConsoleApp.Turnbased.InputUnit,System.Int32))());
                this.fixedMoveButtonAlternative = function (_o2) {
                        _o2.add(new (System.Collections.Generic.KeyValuePair$2(Pidroh.ConsoleApp.Turnbased.InputUnit,System.Int32)).$ctor1(new Pidroh.ConsoleApp.Turnbased.InputUnit.$ctor1(Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle, Bridge.box(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Redo, Pidroh.ConsoleApp.Turnbased.MiscBattleInput, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.MiscBattleInput))), Pidroh.BaseUtils.Unicode.Backspace));
                        return _o2;
                    }(new (System.Collections.Generic.List$1(System.Collections.Generic.KeyValuePair$2(Pidroh.ConsoleApp.Turnbased.InputUnit,System.Int32))).ctor());
            }
        },
        methods: {
            GetFixedMoveUnicode: function (input) {
                var value = { };
                if (this.fixedMoveButtons.tryGetValue(input, value)) {

                } else {
                    value.v = -1;
                }
                return value.v;
            },
            Inputted: function (unicodeKey, input) {
                var $t, $t1;
                $t = Bridge.getEnumerator(this.fixedMoveButtons);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        if (item.value === unicodeKey) {
                            if (input.Contains(item.key)) {
                                return item.key;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }$t1 = Bridge.getEnumerator(this.fixedMoveButtonAlternative);
                try {
                    while ($t1.moveNext()) {
                        var item1 = $t1.Current;
                        if (item1.value === unicodeKey) {
                            if (input.Contains(item1.key)) {
                                return item1.key;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }for (var i = 0; i < this.unfixedCommandKeys.length; i = (i + 1) | 0) {
                    if (this.unfixedCommandKeys[System.Array.index(i, this.unfixedCommandKeys)] === unicodeKey) {
                        var unfixedCommandPos = 0;
                        for (var i2 = 0; i2 < input.inputs.Count; i2 = (i2 + 1) | 0) {
                            if (input.TagIs(i2, Pidroh.ConsoleApp.Turnbased.InputTags.MOVEUNFIX)) {
                                if (unfixedCommandPos === i) {
                                    return input.inputs.getItem(i2);
                                }
                                unfixedCommandPos = (unfixedCommandPos + 1) | 0;
                            }
                        }
                    }
                }
                return Bridge.getDefaultValue(Pidroh.ConsoleApp.Turnbased.InputUnit);
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.MessageOnPosition", {
        fields: {
            battleRender: null,
            textWorld: null,
            blinkAnim: null
        },
        ctors: {
            ctor: function (battleRender) {
                this.$initialize();
                this.textWorld = battleRender.textWorld;
                this.blinkAnim = this.textWorld.AddAnimation(Bridge.global.Pidroh.TextRendering.BlinkAnim, new Pidroh.TextRendering.BlinkAnim());
            }
        },
        methods: {
            MessageOnPos: function (pos, v) {
                var entity = this.textWorld.GetTempEntity(((v.length + 2) | 0), 6);
                this.blinkAnim.Add$1(entity.AnimBase(2.0), new Pidroh.TextRendering.BlinkAnim.BlinkData.$ctor1(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, 0.35, 0.35));
                var xOff = (Bridge.Int.div((((v.length - 3) | 0)), 2)) | 0;
                if (xOff < 0) {
                    xOff = 0;
                }
                var lineStart = new Pidroh.BaseUtils.Vector2D.$ctor2(xOff, 0);
                entity.SetPosition$1(Pidroh.BaseUtils.Vector2D.op_Addition(pos.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(((1 - xOff) | 0), 0)));
                entity.Origin.DrawWithGrid(v, 0, 3, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);

                entity.Origin.DrawLines(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, [lineStart.$clone(), Pidroh.BaseUtils.Vector2D.op_Addition(lineStart.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(2, 0)), Pidroh.BaseUtils.Vector2D.op_Addition(lineStart.$clone(), new Pidroh.BaseUtils.Vector2D.$ctor2(2, 2))]);
                entity.Origin.AutoFixGridding();
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.MouseHoverText", {
        fields: {
            texts: null,
            hoverManager: null,
            entity: null
        },
        ctors: {
            init: function () {
                this.texts = System.Array.init(3, null, System.Array.type(System.String));
            },
            ctor: function (hoverManager, entity, moveDescriptions) {
                this.$initialize();
                this.hoverManager = hoverManager;
                this.entity = entity;

                this.texts[System.Array.index(0, this.texts)] = moveDescriptions;
                this.texts[System.Array.index(1, this.texts)] = System.Array.init(["Starts command execution", "Removes the last inputted command", "Preview moves of the opponents", "Inputs move", "Returns", "Shows helpful information"], System.String);
                this.texts[System.Array.index(2, this.texts)] = System.Array.init(["Moves in the corresponding direction"], System.String);
            }
        },
        methods: {
            Update: function () {
                var $t;
                this.entity.ResetFull();
                this.hoverManager.Update();
                var active = this.hoverManager.mouseHoversActive;
                if (active.Count > 0) {
                    var id = active.getItem(0).$clone().id;
                    if (id >= 0) {
                        var text = ($t = this.texts[System.Array.index(active.getItem(0).$clone().type, this.texts)])[System.Array.index(id, $t)];
                        this.entity.Origin.SetCursorAt(0, 0);
                        this.entity.Origin.Draw_Cursor_SmartLineBreak(text, 2);

                        var x = (((active.getItem(0).$clone().rect.X + 1) | 0) - ((Bridge.Int.div(text.length, 2)) | 0)) | 0;
                        if (x < 0) {
                            x = 1;
                        }
                        this.entity.SetPosition$2(x, ((active.getItem(0).$clone().rect.Y - 2) | 0));
                    }


                }
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.NavigationKeyboard", {
        fields: {
            points: null,
            currentPoint: 0,
            textWorld: null,
            cursor: null,
            chosenOption: 0,
            showEscape: false,
            wantToEscape: false
        },
        ctors: {
            init: function () {
                this.points = new (System.Collections.Generic.List$1(Pidroh.BaseUtils.Point2D)).ctor();
                this.currentPoint = 0;
                this.chosenOption = -1;
                this.showEscape = true;
                this.wantToEscape = false;
            },
            ctor: function (textWorld) {
                this.$initialize();
                this.textWorld = textWorld;
                this.cursor = textWorld.GetFreeEntity(1, 1);
                this.cursor.Origin.DrawChar$1(64, 0, 0, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);
            }
        },
        methods: {
            CheckInput: function (inputUnicode) {

                if (inputUnicode === Pidroh.BaseUtils.Unicode.Space) {
                    this.chosenOption = this.currentPoint;
                }
                if (inputUnicode === 115 || inputUnicode === 100) {
                    this.Move(1);
                }
                if (inputUnicode === 119 || inputUnicode === 97) {
                    this.Move(-1);
                }
                if (inputUnicode === Pidroh.BaseUtils.Unicode.Escape && this.showEscape) {
                    this.wantToEscape = true;
                }
            },
            Move: function (v) {
                this.currentPoint = (this.currentPoint + v) | 0;
                if (this.currentPoint >= this.points.Count) {
                    this.currentPoint = 0;
                }
                if (this.currentPoint < 0) {
                    this.currentPoint = (this.points.Count - 1) | 0;
                }
                this.UpdatePoint();
            },
            UpdatePoint: function () {
                if (this.currentPoint < this.points.Count) {
                    this.cursor.SetPosition(this.points.getItem(this.currentPoint).$clone());
                }
            },
            DrawControls: function () {
                var y = 30;
                Pidroh.TurnBased.TextRendering.UIReusable.DrawControlsLabel(this.textWorld, y);
                {
                    var forceInputLabel = Pidroh.TurnBased.TextRendering.UIReusable.WASD;
                    var forceCommandLabel = Pidroh.TurnBased.TextRendering.UIReusable.arrows;

                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInput$1(7, ((y + 2) | 0), forceInputLabel, forceCommandLabel, this.textWorld.mainBoard);
                    Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(7, ((y + 4) | 0), Pidroh.BaseUtils.Unicode.Space, "SELECT", this.textWorld.mainBoard);
                    if (this.showEscape) {
                        Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(7, ((y + 6) | 0), Pidroh.BaseUtils.Unicode.Escape, "RETURN", this.textWorld.mainBoard);
                    }
                }


            },
            Clear: function () {
                this.points.clear();
            },
            ResetChoice: function () {
                this.chosenOption = -1;
                this.wantToEscape = false;
            },
            Add: function (x, y) {
                this.points.add(new Pidroh.BaseUtils.Point2D.$ctor1(x, y));
                this.UpdatePoint();
            },
            ShowCursor: function (v) {
                if (v) {
                    this.cursor.Origin.DrawChar$1(64, 0, 0, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);
                } else {
                    this.cursor.Origin.Reset();

                }
            },
            ResetCursor: function () {
                this.Move(((-this.currentPoint) | 0));
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.PreviewSystem", {
        fields: {
            ecs: null,
            battleMain: null,
            previewActive: false,
            clonedState: null,
            battleEntity: null,
            debug: null
        },
        ctors: {
            init: function () {
                this.previewActive = false;
                this.debug = new Pidroh.BaseUtils.Debugger(true);
            },
            ctor: function (ecs, battleMain) {
                this.$initialize();
                this.ecs = ecs;
                ecs.AddCopyMethod(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity, function (o1, o2) {
                    var to = Bridge.as(o2, Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity);
                    var from = Bridge.as(o1, Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity);
                    to.pos = from.pos.$clone();
                    to.life = from.life;
                    to.maxLife = from.maxLife;
                    to.element = from.element;
                    for (var i = 0; i < to.moves.length; i = (i + 1) | 0) {
                        to.moves[System.Array.index(i, to.moves)] = from.moves[System.Array.index(i, from.moves)];
                    }
                });
                ecs.AddCopyMethod(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleState, function (o1, o2) {
                    var to = Bridge.as(o2, Pidroh.ConsoleApp.Turnbased.BattleMain.BattleState);
                    var from = Bridge.as(o1, Pidroh.ConsoleApp.Turnbased.BattleMain.BattleState);
                    to.actingEntity = from.actingEntity;
                    to.BattleEndEnable = from.BattleEndEnable;
                    to.moveTick_Now = from.moveTick_Now;
                    to.moveTick_Total = from.moveTick_Total;
                    to.phase = from.phase;
                    to.turn = from.turn;
                    to.turnsPerPhase = from.turnsPerPhase;
                    to.totalTurns = from.totalTurns;
                });
                ecs.AddCopyMethod(Pidroh.BaseUtils.TimeStamp, function (o1, o2) {
                    var to = Bridge.as(o2, Pidroh.BaseUtils.TimeStamp);
                    var from = Bridge.as(o1, Pidroh.BaseUtils.TimeStamp);
                    to.CurrentSnap = from.CurrentSnap;
                });
                ecs.AddCopyMethod(Pidroh.TurnBased.TextRendering.HappHandling.HappHandleState, function (o1, o2) {
                    var to = Bridge.as(o2, Pidroh.TurnBased.TextRendering.HappHandling.HappHandleState);
                    var from = Bridge.as(o1, Pidroh.TurnBased.TextRendering.HappHandling.HappHandleState);
                    to.highestHandled = from.highestHandled;
                });
                this.battleMain = battleMain;
                this.clonedState = new Pidroh.ECS.ClonedState();
                this.battleEntity = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity);
            }
        },
        methods: {
            StartPreview: function () {
                var $t, $t1;
                this.battleMain.trackBattle.Preview();
                $t = Bridge.getEnumerator(this.battleMain.entities);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;

                        this.debug.Print$1("ALL ENTITIES BEFORE PREVIEW");
                        this.debug.Print(item);
                        this.debug.Print$1(System.Boolean.toString(item.randomPosition) + " RANDOM POS");
                        this.debug.Print$1(System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType, item.Type) + " type");
                        this.debug.Print$1(System.Boolean.toString(item.drawTurn) + " draw turn");
                        this.debug.Print$1("END");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }this.ecs.CloneState(this.clonedState);
                this.battleMain.battleState.BattleEndEnable = false;
                this.previewActive = true;

                $t1 = Bridge.getEnumerator(this.battleMain.entities);
                try {
                    while ($t1.moveNext()) {
                        var item1 = $t1.Current;
                        if (item1.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                            item1.life = 0;
                            for (var i = 0; i < item1.moves.length; i = (i + 1) | 0) {
                                item1.moves[System.Array.index(i, item1.moves)] = -1;
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }this.battleMain.Tick();

            },
            EndPreview: function () {
                this.previewActive = false;

                this.ecs.RestoreState(this.clonedState);
                this.battleMain.battleState.phase = Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands;

                for (var j = 0; j < this.battleMain.entities.Count; j = (j + 1) | 0) {
                    var item = this.battleMain.entities.getItem(j);
                    var exist = false;
                    for (var i = 0; i < this.battleEntity.Count; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(item, this.battleEntity.Comp1(i))) {
                            exist = true;
                            break;
                        }
                    }
                    if (!exist) {
                        this.battleMain.entities.remove(item);
                        j = (j - 1) | 0;
                    }
                    this.debug.Print$1("ALL ENTITIES AFTER PREVIEW");
                    this.debug.Print(item);
                    this.debug.Print$1(System.Boolean.toString(item.randomPosition) + " RANDOM POS");
                    this.debug.Print$1(System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType, item.Type) + " type");
                    this.debug.Print$1(System.Boolean.toString(item.drawTurn) + " draw turn");
                    this.debug.Print$1("END");
                }
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.ReflectionTest", {
        ctors: {
            ctor: function () {
                this.$initialize();
                var debug = new Pidroh.BaseUtils.Debugger(true);

                var be = new Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity();
                var type = Bridge.getType(be);
                var be2 = new Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity();
                be2.randomPosition = true;
                debug.Print$1(Bridge.toString(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(type, 4, 284, "randomPosition"), be2)));
                debug.Print$1(System.Boolean.toString(be2.randomPosition) + "");
                debug.Print(be);
                Pidroh.BaseUtils.DeepCloneHelper.DeepCopyPartial(be, be2);
                Pidroh.BaseUtils.DeepCloneHelper.DeepCopyPartial(be2, be);
                debug.Print(be);
                debug.Print(be2);


                debug.Print$1(Bridge.toString(Bridge.Reflection.fieldAccess(Bridge.Reflection.getMembers(type, 4, 284, "randomPosition"), be2)));
                debug.Print$1(System.Boolean.toString(be2.randomPosition) + "");

            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.ScreenUtils");

    Bridge.define("Pidroh.TurnBased.TextRendering.UIReusable", {
        statics: {
            fields: {
                WASD: null,
                arrows: null
            },
            ctors: {
                init: function () {
                    this.WASD = "WASD";
                    this.arrows = "" + String.fromCharCode(Pidroh.BaseUtils.Unicode.Uparrow2) + String.fromCharCode(Pidroh.BaseUtils.Unicode.Leftarrow2) + String.fromCharCode(Pidroh.BaseUtils.Unicode.Downarrow2) + String.fromCharCode(Pidroh.BaseUtils.Unicode.Rightarrow2);
                }
            },
            methods: {
                DrawControlsLabel: function (textWorld, y) {
                    textWorld.mainBoard.DrawOnCenterHorizontal("Controls", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel, 0, y);

                }
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.AsyncTaskSetter$1", function (T) { return {
        inherits: [Pidroh.ConsoleApp.Turnbased.DelayedActions],
        fields: {
            ToValue: null,
            setters: null
        },
        ctors: {
            init: function () {
                this.ToValue = new (System.Collections.Generic.List$1(T)).ctor();
                this.setters = new (System.Collections.Generic.List$1(Function)).ctor();
            }
        },
        methods: {
            Add$1: function (e, setter, time) {
                this.ToValue.add(e);
                this.setters.add(setter);
                this.Add(time);
            },
            Execute: function (i) {
                this.setters.getItem(i)(this.ToValue.getItem(i));
                this.ToValue.removeAt(i);
                this.setters.removeAt(i);

            }
        }
    }; });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.BattleRender", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        statics: {
            methods: {
                ElementToAuraColor: function (element) {
                    var bc = Pidroh.TextRendering.TextBoard.INVISIBLECOLOR;
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.FireAura;
                    }
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.IceAura;
                    }
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderAura;
                    }

                    return bc;
                },
                ElementToProjColor: function (element) {
                    var bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey;
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.FireShot;
                    }
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.IceAura;
                    }
                    if (element === Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder) {
                        bc = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderAura;
                    }

                    return bc;
                },
                DrawInput: function (x2, y2, keyUnicode, description, TextBoard) {
                    var x3 = Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInpCommon(x2, y2, description, TextBoard);

                    TextBoard.DrawUnicodeLabel(keyUnicode, x3, y2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey);
                },
                DrawInput$1: function (x2, y2, keyLabel, description, TextBoard) {
                    var x3 = Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInpCommon(x2, y2, description, TextBoard);
                    TextBoard.Draw$1(keyLabel, x3, y2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey);

                },
                DrawInpCommon: function (x2, y2, description, TextBoard) {
                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawBrownStripe(y2, TextBoard);
                    TextBoard.Draw$1(description, x2, y2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    var x3 = (x2 + 14) | 0;

                    var barx = (x2 + description.length) | 0;
                    TextBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, x3, y2, 6, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                    return x3;
                },
                DrawStrippedText: function (x, y, description, TextBoard) {
                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawBrownStripe(y, TextBoard);
                    TextBoard.Draw$1(description, x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                },
                DrawSubText: function (x, y, description, TextBoard) {
                    TextBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, x, y, 6, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                    TextBoard.Draw$1(description, ((x + 1) | 0), y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey);
                },
                DrawBrownStripe: function (yOff, textBoard) {
                    textBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, 0, yOff, textBoard.Width, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackStripe);
                }
            }
        },
        fields: {
            attackPreview: null,
            Keyboard: null,
            turnBaseTry: null,
            stageData: null,
            previewSystem: null,
            moveRenders: null,
            posAnim: null,
            charByCharAnim: null,
            delayAnim: null,
            textWorld: null,
            TextBoard: null,
            inputPhases: null,
            input: 0,
            HappHandling: null,
            keyDownUnicode: 0,
            Mouse: null,
            mouseHover: null,
            miscDescriptions: null,
            moveButtons: null,
            debugOn: false,
            gridScale: 0,
            gridOffsetx: 0,
            gridOffsety: 0,
            battlerRenders: null,
            entitiesChars: null,
            MessageDoNotHide: false,
            message: null,
            waitingForMessageInput: false,
            lastPhase: 0,
            messageEnt: null,
            inputH: null,
            help: null,
            attackMenu: false
        },
        props: {
            Input: {
                get: function () {
                    return this.input;
                },
                set: function (value) {
                    this.input = value;
                }
            }
        },
        alias: [
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.inputPhases = function (_o1) {
                        _o1.add(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands);
                        _o1.add(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ConfirmInput);
                        return _o1;
                    }(new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase)).ctor());
                this.keyDownUnicode = -1;
                this.miscDescriptions = function (_o2) {
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Done, "DONE");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Redo, "REDO");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Help, "HELP");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Preview, "PREVIEW");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Confirm, "CONFIRM");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Cancel, "CANCEL");
                        _o2.add(Pidroh.ConsoleApp.Turnbased.MiscBattleInput.LeaveAttackDemonstration, "END PREVIEW");
                        return _o2;
                    }(new (System.Collections.Generic.Dictionary$2(Pidroh.ConsoleApp.Turnbased.MiscBattleInput,System.String))());
                this.debugOn = true;
                this.gridScale = 5;
                this.gridOffsetx = 2;
                this.gridOffsety = 1;
                this.inputH = new Pidroh.TurnBased.TextRendering.InputHandling();
                this.attackMenu = false;
            },
            ctor: function (battleLogic, stageData, PreviewSystem, entityTexts, moveRenders) {
                var $t;
                this.$initialize();


                this.entitiesChars = System.Array.init(entityTexts.Count, null, System.Array.type(System.Char));
                for (var i = 0; i < entityTexts.Count; i = (i + 1) | 0) {
                    this.entitiesChars[System.Array.index(i, this.entitiesChars)] = ($t = entityTexts.getItem(i), System.String.toCharArray($t, 0, $t.length));
                }

                this.turnBaseTry = battleLogic;
                this.stageData = stageData;
                this.previewSystem = PreviewSystem;
                this.moveRenders = moveRenders;
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.posAnim = this.textWorld.AddAnimation(Bridge.global.Pidroh.TextRendering.PositionAnimation, new Pidroh.TextRendering.PositionAnimation());
                this.charByCharAnim = this.textWorld.AddAnimation(Bridge.global.Pidroh.TextRendering.CharByCharAnimation, new Pidroh.TextRendering.CharByCharAnimation());
                this.delayAnim = this.textWorld.AddAnimation(Bridge.global.Pidroh.TextRendering.DelaysAnimation, new Pidroh.TextRendering.DelaysAnimation());
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.TextBoard = this.textWorld.mainBoard;

                var blinkAnim = this.textWorld.AddAnimation(Bridge.global.Pidroh.TextRendering.BlinkAnim, new Pidroh.TextRendering.BlinkAnim());

                this.battlerRenders = new (System.Collections.Generic.List$1(Pidroh.TextRendering.TextEntity)).ctor();
                this.UpdateBattleRenderCount();


                this.messageEnt = this.textWorld.GetFreeEntity(40, 4);

                this.turnBaseTry.happManager.AddHandler(new Pidroh.ConsoleApp.Turnbased.Happs.HappHandler(Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag.AttackHit, Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag)), Bridge.fn.bind(this, function (h) {
                    var attacker = this.turnBaseTry.entities.getItem(h.GetAttribute_Int(1));
                    var defenderEID = h.GetAttribute_Int(0);
                    var defender = null;
                    if (defenderEID >= 0) {
                        defender = this.turnBaseTry.entities.getItem(defenderEID);
                    }
                    var element = h.GetAttribute_Int(2);
                    var fe = this.GetProjTextEntity(element);

                    if (defender != null) {
                        var pos = attacker.PositionV2D.$clone();
                        var pos2 = defender.PositionV2D.$clone();
                        var xDis = Math.abs(pos.X - pos2.X);
                        var time = xDis * 0.1;


                        this.posAnim.Add$1(fe.AnimBase(time), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(this.BattleEntityToScreenPosition(attacker.PositionV2D.$clone()), this.BattleEntityToScreenPosition(defender.PositionV2D.$clone())));
                    } else {
                        var pos1 = attacker.PositionV2D.$clone();
                        var pos21 = pos1.$clone();
                        if (attacker.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            pos21.X = -1;
                        } else {
                            pos21.X = 6;
                        }
                        var xDis1 = Math.abs(pos1.X - pos21.X);
                        var time1 = xDis1 * 0.1;
                        this.posAnim.Add$1(fe.AnimBase(time1), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(this.BattleEntityToScreenPosition(pos1.$clone()), this.BattleEntityToScreenPosition(pos21.$clone())));
                    }




                })));

                this.turnBaseTry.happManager.AddHandler(new Pidroh.ConsoleApp.Turnbased.Happs.HappHandler(Bridge.box(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag.AttackMiss, Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag, System.Enum.toStringFn(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag)), Bridge.fn.bind(this, function (h) {

                    var attacker = this.turnBaseTry.entities.getItem(h.GetAttribute_Int(0));
                    var element = h.GetAttribute_Int(1);
                    var fe = this.GetProjTextEntity(element);
                    var pos = attacker.PositionV2D.$clone();
                    var pos2 = pos.$clone();
                    if (attacker.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                        pos2.X = -1;
                    } else {
                        pos2.X = 6;
                    }
                    var xDis = Math.abs(pos.X - pos2.X);
                    var time = xDis * 0.1;
                    this.posAnim.Add$1(fe.AnimBase(time), new Pidroh.TextRendering.PositionAnimation.PositionData.$ctor1(this.BattleEntityToScreenPosition(pos.$clone()), this.BattleEntityToScreenPosition(pos2.$clone())));
                })));





                var mesOnPos = new Pidroh.TurnBased.TextRendering.MessageOnPosition(this);

                for (var i1 = 0; i1 < this.turnBaseTry.entities.Count; i1 = (i1 + 1) | 0) {
                    var e = this.turnBaseTry.entities.getItem(i1);
                    if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero) {
                        var pos = this.battlerRenders.getItem(i1).GetPosition();
                    }
                }


            }
        },
        methods: {
            EntityScreenPosition: function (user) {
                return this.BattleEntityToScreenPosition(this.turnBaseTry.entities.getItem(user).pos.$clone());
            },
            GetGridRect: function () {
                return new Pidroh.BaseUtils.Rect.$ctor1(this.gridOffsetx, this.gridOffsety, Bridge.Int.mul(this.gridScale, 6), Bridge.Int.mul(this.gridScale, 3));
            },
            UpdateBattleRenderCount: function () {
                while (this.battlerRenders.Count < this.turnBaseTry.entities.Count) {
                    var item = this.textWorld.GetFreeEntity(2, 2);
                    this.battlerRenders.add(item);
                    item.SetPosition$1(this.BattleEntityToScreenPosition(this.turnBaseTry.entities.getItem(((this.battlerRenders.Count - 1) | 0)).pos.$clone()));

                }
                if (this.battlerRenders.Count > this.turnBaseTry.entities.Count) {
                    for (var i = this.turnBaseTry.entities.Count; i < this.battlerRenders.Count; i = (i + 1) | 0) {
                        this.battlerRenders.getItem(i).Origin.ResetInvisible();
                    }
                }
            },
            GetEntityName: function (user) {
                var gameEntity = this.turnBaseTry.entities.getItem(user);
                var chars = this.GetChar(gameEntity);
                var name = System.String.fromCharArray(chars);
                if (gameEntity.graphicRepeatedIndex > 0) {
                    return (name || "") + (((gameEntity.graphicRepeatedIndex + 1) | 0));
                } else {
                    return name;
                }


            },
            GetProjTextEntity: function (element) {
                var fe = this.textWorld.GetTempEntity(1, 1);
                fe.Origin.DrawChar(Pidroh.TextRendering.TextBoard.INVISIBLECHAR, 0, 0);
                var elementColor = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToProjColor(element);
                fe.Origin.SetBackColor(elementColor, 0, 0);
                return fe;
            },
            Draw: function (delta) {

                var input = this.Input;
                if (input !== Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.NONE && this.waitingForMessageInput) {
                    this.waitingForMessageInput = false;
                    this.message = null;
                }

                if (this.lastPhase !== this.turnBaseTry.battleState.phase) {
                    if (this.turnBaseTry.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {

                    }
                    if (this.lastPhase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                        this.HideMessage();
                    }
                }
                this.lastPhase = this.turnBaseTry.battleState.phase;
                if (this.inputPhases.contains(this.turnBaseTry.battleState.phase)) {
                    if (this.keyDownUnicode >= 0) {
                        if (this.keyDownUnicode === 112) {
                            this.previewSystem.StartPreview();
                            return;
                        }
                        if (this.keyDownUnicode === 101 && this.HasAttacks()) {
                            this.attackMenu = !this.attackMenu;

                        }

                        if (this.attackMenu && this.keyDownUnicode === Pidroh.BaseUtils.Unicode.Escape) {
                            this.attackMenu = false;
                        }
                        var inputX = this.inputH.Inputted(this.keyDownUnicode, this.turnBaseTry.inputs);
                        if (inputX.type === Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle && inputX.arg1 === Pidroh.ConsoleApp.Turnbased.MiscBattleInput.Help) {
                            this.help.Show(this);
                        }

                        if (inputX.type !== Pidroh.ConsoleApp.Turnbased.InputType.None) {

                            this.turnBaseTry.InputDone(inputX);
                        }

                    }
                    if (this.Keyboard.downUnicodes.contains(99)) {
                        this.attackMenu = false;
                    } else {
                        this.attackMenu = true;
                    }
                    if (this.turnBaseTry.inputs.inputForConfirmation.type !== Pidroh.ConsoleApp.Turnbased.InputType.None) {
                        if (false) {
                            this.attackPreview.ShowPreview(0, this.turnBaseTry.inputs.inputForConfirmation.arg1);
                            this.turnBaseTry.ConfirmInputStart();
                        } else {
                            this.attackPreview.End();
                            this.turnBaseTry.InputConfirmed();
                        }

                    } else {
                        this.attackPreview.End();
                    }


                }
                this.UpdateBattleRenderCount();
                this.DrawGraphics(delta);
                if (this.CanAdvance_Logic()) {
                    if (this.turnBaseTry.battleState.phase !== Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove && this.previewSystem.previewActive) {
                        this.previewSystem.EndPreview();
                    }
                    switch (this.turnBaseTry.battleState.phase) {
                        case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.EnemyMoveChoice: 
                            this.turnBaseTry.Tick();
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.HandRecharge: 
                            this.turnBaseTry.Tick();
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands: 
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove: 
                            this.turnBaseTry.Tick();
                            break;
                        default: 
                            break;
                    }
                }

            },
            CanAdvanceGraphics: function () {
                return this.textWorld.IsDone() && !this.waitingForMessageInput;
            },
            CanAdvance_Logic: function () {
                return this.CanAdvanceGraphics() && this.HappHandling.IsDone();
            },
            ShowMessage: function (s, waitForInput, doNotHide) {
                if (waitForInput === void 0) { waitForInput = true; }
                if (doNotHide === void 0) { doNotHide = false; }
                this.MessageDoNotHide = doNotHide;
                this.message = s;
                this.messageEnt.Origin.ResetInvisible();
                var timeToWrite = this.message.length * 0.015;
                if (timeToWrite > 0.4) {
                    timeToWrite = 0.4;
                }
                this.charByCharAnim.Add$1(this.messageEnt.AnimBase(timeToWrite), new Pidroh.TextRendering.CharByCharAnimation.CharByCharData(0, ((this.message.length + 1) | 0)));
                this.delayAnim.Delay(timeToWrite + 0.8);

            },
            HideMessage: function () {
                this.message = null;
                this.waitingForMessageInput = false;
            },
            ShowBattleMessage: function (s) {
                if (!this.turnBaseTry.BattleDecided()) {
                    this.ShowMessage(s);
                }
            },
            DrawGraphics: function (delta) {
                this.mouseHover.mouseHovers.clear();
                this.turnBaseTry.Update(delta);
                this.TextBoard.Reset();

                if (this.inputPhases.contains(this.turnBaseTry.battleState.phase)) {
                    this.TextBoard.SetAll(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                }

                var controlsY = (((((Bridge.Int.mul(this.gridScale, 3) + 10) | 0) + 3) | 0) + 2) | 0;

                var enemyGridOffX = Bridge.Int.mul(this.gridScale, 3);
                var drawDot = false;
                this.TextBoard.DrawRepeated(32, this.gridOffsetx, this.gridOffsety, Bridge.Int.mul(this.gridScale, 6), Bridge.Int.mul(this.gridScale, 3), Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                for (var i = 0; i < Bridge.Int.mul(3, this.gridScale); i = (i + 1) | 0) {
                    for (var j = 0; j < Bridge.Int.mul(3, this.gridScale); j = (j + 1) | 0) {
                        if (drawDot) {
                            this.TextBoard.DrawChar$1(46, ((this.gridOffsetx + i) | 0), ((this.gridOffsety + j) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);
                            this.TextBoard.DrawChar$1(46, ((((this.gridOffsetx + i) | 0) + enemyGridOffX) | 0), ((this.gridOffsety + j) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy);
                        }
                        if (i % this.gridScale === 0 && j % this.gridScale === 0) {

                            this.TextBoard.DrawGrid(((((i + this.gridOffsetx) | 0) + enemyGridOffX) | 0), ((j + this.gridOffsety) | 0), this.gridScale, this.gridScale, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy);
                            this.TextBoard.DrawGrid(((i + this.gridOffsetx) | 0), ((j + this.gridOffsety) | 0), this.gridScale, this.gridScale, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);
                        }
                    }
                }

                for (var i1 = 0; i1 < this.turnBaseTry.entities.Count; i1 = (i1 + 1) | 0) {

                    var gameEntity = this.turnBaseTry.entities.getItem(i1);

                    var ec = this.GetChar(gameEntity);

                    var pos = gameEntity.PositionV2D.$clone();
                    var screenPos = this.BattleEntityToScreenPosition(pos);
                    if (gameEntity.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect) {
                        screenPos.Y = screenPos.Y + 1;
                        screenPos.X = screenPos.X - 1;
                    }
                    if (this.textWorld.IsDone() && this.HappHandling.IsDone()) {
                        this.battlerRenders.getItem(i1).Origin.Position = screenPos.$clone();
                    }
                    if (Pidroh.BaseUtils.Vector2D.op_Inequality(this.battlerRenders.getItem(i1).Origin.Position.$clone(), screenPos.$clone()) && this.textWorld.IsDone()) {
                    }

                    var c = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero;
                    if (gameEntity.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                        c = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy;
                    }
                    if (gameEntity.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) {
                        c = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey;
                    }
                    if (gameEntity.Dead) {
                        c = Pidroh.TextRendering.TextBoard.INVISIBLECOLOR;
                    }
                    var bc = Pidroh.TextRendering.TextBoard.INVISIBLECOLOR;

                    if (gameEntity.Alive) {
                        var element = gameEntity.element;
                        if (element !== Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness) {
                            c = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToAuraColor(element);
                        }

                    }
                    if (gameEntity.Dead) {
                        for (var j1 = 0; j1 < ((ec.length + 1) | 0); j1 = (j1 + 1) | 0) {
                            this.battlerRenders.getItem(i1).Origin.DrawChar$1(Pidroh.TextRendering.TextBoard.INVISIBLECHAR, j1, 0, c, bc);
                        }

                    } else {
                        this.battlerRenders.getItem(i1).Origin.Draw(ec, 0, 0, c, bc);
                        if (gameEntity.graphicRepeatedIndex > 0) {
                            this.battlerRenders.getItem(i1).Origin.DrawOneDigit(((gameEntity.graphicRepeatedIndex + 1) | 0), ((0 + ec.length) | 0), 0, c, bc);
                        }
                    }


                }


                var textBoardHeight = Bridge.Int.mul(3, this.gridScale);

                {

                    var x = 3;

                    if (this.inputPhases.contains(this.turnBaseTry.battleState.phase)) {
                        this.DrawControls(controlsY, 7);
                        if (this.turnBaseTry.timeToChoose > 0) {
                            var ratio = this.turnBaseTry.timeToChoose / this.turnBaseTry.timeToChooseMax;
                            this.TextBoard.DrawRepeated(32, x, ((controlsY + 16) | 0), Bridge.Int.clip32(ratio * 15), 1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Board, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);
                        }
                    } else {
                        this.TextBoard.DrawRepeated(32, ((x - 1) | 0), ((controlsY - 1) | 0), 15, 15, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Board);
                    }
                }

                var turnOrderX = (Bridge.Int.mul(6, this.gridScale) + 5) | 0;
                var turnOrderY = 2;
                turnOrderX = 2;
                turnOrderY = (Bridge.Int.mul(3, this.gridScale) + 1) | 0;
                if (this.inputPhases.contains(this.turnBaseTry.battleState.phase)) {
                    turnOrderY = (turnOrderY + 3) | 0;
                }

                this.DrawTurnOrder(turnOrderX, turnOrderY);
                if (!this.stageData.hideLifeUI) {
                    this.DrawLife(((turnOrderX + 14) | 0), turnOrderY);
                }

                {
                    var X = 2;
                    this.messageEnt.SetPosition$2(X, ((controlsY - 2) | 0));
                    if (this.message != null && (!this.CanAdvanceGraphics())) {
                        this.messageEnt.Origin.DrawWithLinebreaks(this.message, 1, 0, 1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn);
                    } else {
                        if (!this.MessageDoNotHide) {
                            this.message = null;
                            this.messageEnt.Origin.SetAll(Pidroh.TextRendering.TextBoard.INVISIBLECHAR);
                        }

                    }
                }
                this.TextBoard.CursorNewLine(1);
                this.TextBoard.CursorNewLine(1);


                this.textWorld.DrawChildren();
                this.textWorld.TryEndAnimations();
                this.textWorld.AdvanceTime(delta);

                if (this.CanAdvanceGraphics()) {
                    this.HappHandling.Handle();
                    if (this.CanAdvanceGraphics()) {
                        this.turnBaseTry.happManager.TryHandle();
                    }
                }

            },
            BattleEntityToScreenPosition: function (pos) {
                var x = pos.X;
                var y = pos.Y;
                var screenPos = new Pidroh.BaseUtils.Vector2D.$ctor2(x * this.gridScale + ((Bridge.Int.div(this.gridScale, 2)) | 0) + this.gridOffsetx, Bridge.Int.mul(2, this.gridScale) - y * this.gridScale + ((Bridge.Int.div(this.gridScale, 2)) | 0) + this.gridOffsety);
                return screenPos.$clone();
            },
            DrawControls: function (y, x) {
                this.TextBoard.SetCursorAt(((x + 5) | 0), y);
                this.TextBoard.Draw_Cursor$3("Controls", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                this.TextBoard.CursorNewLine(x);


                var yOff = 0;

                if (!this.attackMenu) {
                    yOff = this.DrawInputs_Fix(y, x, Pidroh.ConsoleApp.Turnbased.InputTags.MOVEFIX, yOff);



                    yOff = this.DrawInputs_Fix(y, x, Pidroh.ConsoleApp.Turnbased.InputTags.MISC, yOff);
                    return;
                }




                var attackNumber = 1;
                for (var i = 0; i < this.turnBaseTry.inputs.inputs.Count; i = (i + 1) | 0) {
                    var x2 = x;
                    var y2 = (((y + 2) | 0) + yOff) | 0;
                    var input = this.turnBaseTry.inputs.inputs.getItem(i);

                    if (this.turnBaseTry.inputs.TagIs(i, Pidroh.ConsoleApp.Turnbased.InputTags.MOVEUNFIX)) {
                        yOff = (yOff + 1) | 0;
                        yOff = (yOff + 1) | 0;
                        var unicode = (48 + attackNumber) | 0;
                        attackNumber = (attackNumber + 1) | 0;
                        this.mouseHover.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(((x2 - 2) | 0), y2, 20, 1), 0, input.arg1));


                        var description = "";
                        if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.Move) {
                            if (input.arg1 >= 0) {
                                var m = input.arg1;

                                description = this.moveRenders.getItem(input.arg1).Label;
                                if (description == null) {
                                    description = System.Enum.toString(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType, m);
                                }
                            }


                        }
                        if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle) {
                            var arg1 = input.arg1;
                            description = this.miscDescriptions.get(arg1);
                        }
                        var TextBoard = this.TextBoard;
                        Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(x2, y2, unicode, description, TextBoard);

                    }

                }
                if (this.PreviewVisible()) {
                    Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(x, ((((y + 2) | 0) + yOff) | 0), 112, "PREVIEW", this.TextBoard);
                } else {
                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInput$1(x, ((((y + 2) | 0) + yOff) | 0), "", "", this.TextBoard);
                }
                yOff = (yOff + 2) | 0;
                Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(x, ((((y + 2) | 0) + yOff) | 0), 99, "CONTROLS", this.TextBoard);
            },
            HasAttacks: function () {
                for (var i = 0; i < this.turnBaseTry.inputs.inputs.Count; i = (i + 1) | 0) {
                    if (this.turnBaseTry.inputs.TagIs(i, Pidroh.ConsoleApp.Turnbased.InputTags.MOVEUNFIX)) {
                        return true;
                    }
                }
                return false;
            },
            PreviewVisible: function () {
                var $t;
                $t = Bridge.getEnumerator(this.turnBaseTry.entities);
                try {
                    while ($t.moveNext()) {
                        var e = $t.Current;
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            return true;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }return false;
            },
            DrawInputs_Fix: function (y, x, inputTag, yOff) {

                for (var i = 0; i < this.turnBaseTry.inputs.inputs.Count; i = (i + 1) | 0) {
                    var x2 = x;
                    var y2 = (((y + 2) | 0) + yOff) | 0;
                    var input = this.turnBaseTry.inputs.inputs.getItem(i);

                    if (this.turnBaseTry.inputs.TagIs(i, inputTag)) {
                        var unicode = this.inputH.GetFixedMoveUnicode(input);
                        var forceInputLabel = null;
                        var forceCommandLabel = null;
                        var movementCommand = unicode === 119;
                        if (movementCommand) {
                            forceInputLabel = Pidroh.TurnBased.TextRendering.UIReusable.WASD;
                            forceCommandLabel = Pidroh.TurnBased.TextRendering.UIReusable.arrows;
                        }
                        if (unicode === 97 || unicode === 115 || unicode === 100) {
                            continue;
                        }
                        yOff = (yOff + 1) | 0;
                        yOff = (yOff + 1) | 0;





                        var description = "";
                        if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.Move) {
                            if (forceCommandLabel != null) {
                                description = forceCommandLabel;
                            } else {
                                description = this.moveRenders.getItem(input.arg1).Label;
                            }


                        }
                        if (input.type === Pidroh.ConsoleApp.Turnbased.InputType.MiscBattle) {
                            var arg1 = input.arg1;
                            description = this.miscDescriptions.get(arg1);
                            this.mouseHover.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(((x2 - 2) | 0), y2, 20, 1), 1, input.arg1));
                        } else {
                            if (movementCommand) {
                                this.mouseHover.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(((x2 - 2) | 0), y2, 20, 1), 2, 0));
                            } else {
                                this.mouseHover.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(((x2 - 2) | 0), y2, 20, 1), 0, input.arg1));
                            }
                        }
                        var TextBoard = this.TextBoard;
                        if (forceInputLabel == null) {
                            Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInput(x2, y2, unicode, description, TextBoard);
                        } else {
                            Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInput$1(x2, y2, forceInputLabel, description, TextBoard);
                        }


                    }

                }

                return yOff;
            },
            DrawLife: function (turnOrderX, turnOrderY) {
                this.TextBoard.SetCursorAt(((turnOrderX + 1) | 0), turnOrderY);
                if (this.turnBaseTry.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                    this.TextBoard.Draw_Cursor$3("Life", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                }
                this.TextBoard.SetCursorAt(((turnOrderX + 8) | 0), turnOrderY);
                if (this.turnBaseTry.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                    this.TextBoard.Draw_Cursor$3("Element", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                }
                var index = -1;
                for (var i = 0; i < 4; i = (i + 1) | 0) {
                    var xOff = (turnOrderX + 1) | 0;
                    var yOff = (((turnOrderY + 2) | 0) + Bridge.Int.mul(i, 2)) | 0;
                    this.TextBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, xOff, yOff, 4, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                    this.TextBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, ((xOff + 7) | 0), yOff, 8, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                }
                for (var i1 = 0; i1 < this.turnBaseTry.entities.Count; i1 = (i1 + 1) | 0) {
                    if (i1 >= this.turnBaseTry.entities.Count) {
                        continue;
                    }
                    var e = this.turnBaseTry.entities.getItem(i1);
                    if (!e.drawLife) {
                        continue;
                    }
                    if (!e.Dead) {
                        index = (index + 1) | 0;
                        var xOff1 = (turnOrderX + 1) | 0;
                        var yOff1 = (((turnOrderY + 2) | 0) + Bridge.Int.mul(index, 2)) | 0;
                        var color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn;
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn;
                        }
                        if (e.element !== Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness) {
                            color = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToAuraColor(e.element);
                        }

                        this.TextBoard.DrawTwoDigits(e.life, xOff1, yOff1, color);
                        var element = "";
                        switch (e.element) {
                            case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire: 
                                element = "Fire";
                                break;
                            case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice: 
                                element = "Ice";
                                break;
                            case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder: 
                                element = "Thunder";
                                break;
                            case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness: 
                                break;
                            default: 
                                break;
                        }
                        var eColor = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToAuraColor(e.element);

                        this.TextBoard.Draw$1(element, ((xOff1 + 7) | 0), yOff1, eColor);
                    }


                }
            },
            DrawBrownStripe: function (yOff) {
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawBrownStripe(yOff, this.TextBoard);
            },
            DrawTurnOrder: function (turnOrderX, turnOrderY, horizontal) {
                if (horizontal === void 0) { horizontal = true; }
                var turnsPerPhase = this.turnBaseTry.battleState.turnsPerPhase;
                this.TextBoard.SetCursorAt(((turnOrderX + 3) | 0), turnOrderY);
                if (this.turnBaseTry.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands) {
                    this.TextBoard.Draw_Cursor$3("Turn", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                }

                var drawingId = -1;
                for (var i = 0; i < 4; i = (i + 1) | 0) {
                    var yOff = (((turnOrderY + 2) | 0) + Bridge.Int.mul(i, 2)) | 0;
                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawBrownStripe(yOff, this.TextBoard);
                    for (var j = 0; j < 3; j = (j + 1) | 0) {
                        var xOff = (((turnOrderX + Bridge.Int.mul(j, 3)) | 0) + 3) | 0;


                        this.TextBoard.DrawRect(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, xOff, yOff, 2, 1, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle);
                    }
                }
                for (var i1 = 0; i1 < this.turnBaseTry.entities.Count; i1 = (i1 + 1) | 0) {

                    var e = this.turnBaseTry.entities.getItem(i1);
                    if (!e.drawTurn) {
                        continue;
                    }
                    if (!e.Dead) {
                        drawingId = (drawingId + 1) | 0;
                        var color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn;
                        if (e.Type === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                            color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn;
                        }
                        if (e.element !== Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Nothingness) {
                            color = Pidroh.ConsoleApp.Turnbased.BattleRender.ElementToAuraColor(e.element);
                        }

                        var xOff1 = (((turnOrderX + 1) | 0) + Bridge.Int.mul(drawingId, 3)) | 0;
                        var yEntity = (turnOrderY + 2) | 0;
                        var yFirstMove = (turnOrderY + 3) | 0;
                        var xFirstMove = xOff1;
                        if (horizontal) {
                            xOff1 = turnOrderX;
                            yEntity = (((turnOrderY + 2) | 0) + Bridge.Int.mul(drawingId, 2)) | 0;
                            yFirstMove = yEntity;
                            xFirstMove = (turnOrderX + 3) | 0;
                        }
                        this.DrawEntityChar(e, color, xOff1, yEntity);

                        this.TextBoard.SetCursorAt(xFirstMove, yFirstMove);

                        for (var i2 = 0; i2 < Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(turnsPerPhase); i2 = (i2 + 1) | 0) {
                            var color2 = color;
                            var backColor = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackCommand;
                            if (this.turnBaseTry.battleState.phase === Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.ExecuteMove) {
                                if (drawingId === this.turnBaseTry.battleState.actingEntity && i2 === Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(this.turnBaseTry.battleState.turn)) {
                                } else {
                                    backColor = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackBattle;
                                    color2 = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription;
                                }

                            }

                            if (i2 < Pidroh.ConsoleApp.Turnbased.Value.op_Implicit(turnsPerPhase)) {
                                var c = this.GetCharOfMove(e, i2);
                                this.mouseHover.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(this.TextBoard.CursorX, this.TextBoard.CursorY, c.length, 1), 0, e.moves[System.Array.index(i2, e.moves)]));

                                this.TextBoard.Draw_Cursor$3(c, color2);
                                if (horizontal) {
                                    for (var j1 = c.length; j1 < 3; j1 = (j1 + 1) | 0) {
                                        this.TextBoard.AdvanceCursor();
                                    }




                                }

                            } else {
                                this.TextBoard.Draw_Cursor$1(32, color, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackCommand);
                            }
                            if (horizontal) {

                            } else {
                                this.TextBoard.CursorNewLine(xFirstMove);
                            }
                        }
                    }


                }
            },
            DrawEntityChar: function (e, color, x, y) {
                var chars = this.GetChar(e);

                this.TextBoard.Draw(chars, x, y, color);
                if (e.graphicRepeatedIndex > 0) {
                    this.TextBoard.DrawOneDigit(((e.graphicRepeatedIndex + 1) | 0), ((x + chars.length) | 0), y, color);
                }
            },
            GetCharOfMove: function (e, i2) {


                var val = e.moves[System.Array.index(i2, e.moves)];
                if (val >= 0) {
                    return this.moveRenders.getItem(val).Abrev;
                } else {
                    return " ";
                }
            },
            GetChar: function (gameEntity) {
                return this.entitiesChars[System.Array.index(gameEntity.graphic, this.entitiesChars)];

            },
            DrawMove$1: function (move, color) {
                if (move.Val >= 0) {
                    var m = Bridge.Int.clip32(move.Val);
                    this.DrawMove(m, color);
                } else {
                    this.TextBoard.Draw_Cursor(32);
                }

            },
            DrawMove: function (move, color) {
                var c = this.moveRenders.getItem(move).Abrev;
                this.TextBoard.Draw_Cursor$3(c, color);
            },
            GetBoard: function () {
                return this.TextBoard;
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.GameMain", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        statics: {
            fields: {
                Width: 0,
                Height: 0
            },
            ctors: {
                init: function () {
                    this.Width = 35;
                    this.Height = 46;
                }
            },
            methods: {
                DrawInput: function (x2, y2, unicode, description, textBoard) {
                    Pidroh.ConsoleApp.Turnbased.BattleRender.DrawInput(x2, y2, unicode, description, textBoard);
                }
            }
        },
        fields: {
            battleMain: null,
            battleRender: null,
            modeSelectionScreen: null,
            mainDraw: null,
            beforeLevelMenuScreen: null,
            helpScreen: null,
            helpInt: null,
            resultScreen: null,
            stageId: 0,
            mouseHover: null,
            stageToBattle: null,
            stageProgressPersistence: null,
            Keyboard: null,
            stageGroupNav: null,
            movePreviewCounter: 0,
            aux: null,
            Mouse: null,
            remap: null,
            stageSelecScreen: null,
            attackInventory: null,
            currencyHolder: null,
            equipScreen: null,
            stageEntity: null
        },
        props: {
            Input: {
                get: function () {
                    return 99;
                },
                set: function (value) {
                    this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input = value;
                }
            },
            keyDownUnicode: {
                get: function () {
                    return 99;
                },
                set: function (value) {
                    value = this.remap.Remap(value);
                    this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode = value;
                }
            }
        },
        alias: [
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.stageEntity = new Pidroh.ECS.Entity();
                this.helpInt = new Pidroh.TurnBased.TextRendering.HelpScreenIntegration();
                this.stageToBattle = new Pidroh.ConsoleApp.Turnbased.StageToBattle();
                this.stageProgressPersistence = new (System.Collections.Generic.List$1(Pidroh.ConsoleApp.Turnbased.StageProgressPersistence)).ctor();
                this.Keyboard = new Pidroh.TextRendering.GameScreen.KeyboardIO();
                this.movePreviewCounter = -1;
                this.aux = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.Mouse = new Pidroh.TextRendering.GameScreen.MouseIO();
                this.remap = new Pidroh.TextRendering.GameScreen.UnicodeRemap();
            },
            ctor: function () {
                var $t, $t1, $t2;
                this.$initialize();
                this.modeSelectionScreen = new Pidroh.TurnBased.TextRendering.ModeSelectionScreen();
                this.stageSelecScreen = new Pidroh.TurnBased.TextRendering.StageSelectionScreen();
                this.attackInventory = new Pidroh.ConsoleApp.Turnbased.AttackInventory();
                this.currencyHolder = new Pidroh.ConsoleApp.Turnbased.CurrencyHolder();
                this.currencyHolder.currency = 200;
                for (var i = Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire; i <= Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder; i = (i + 1) | 0) {
                    this.attackInventory.attackInventory.add(i);
                }
                ($t = this.attackInventory.equippedAttacks)[System.Array.index(0, $t)] = Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire;
                ($t1 = this.attackInventory.equippedAttacks)[System.Array.index(1, $t1)] = Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice;
                ($t2 = this.attackInventory.equippedAttacks)[System.Array.index(2, $t2)] = Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder;

                this.Reset();
                this.modeSelectionScreen.mode = 1;
                this.modeSelectionScreen.wannaLeave = 1;
                this.mainDraw = this.modeSelectionScreen;
                this.beforeLevelMenuScreen = new Pidroh.TurnBased.TextRendering.GenericChoiceScreen();
                this.beforeLevelMenuScreen.choices.add("Begin Stage");
                this.beforeLevelMenuScreen.choices.add("Change Attacks");
                this.beforeLevelMenuScreen.choices.add("Acquire New Attack   Cost: 100");
                this.beforeLevelMenuScreen.title = "Stage Prelude";

            }
        },
        methods: {
            Reset: function () {
                var $t, $t1, $t2;
                var wasInBeforeLevelMenu = Bridge.referenceEquals(this.mainDraw, this.beforeLevelMenuScreen);

                var moveDescriptions = System.Array.init(["", "Move up", "Move left", "Move down", "Move right", "Shoots forward", "Shoots fire forward", "Shoots ice forward", "Shoots bolt forward", "Throws ice bomb three squares forward", "Throws bolt bomb three squares forward", "Summons another enemy", "Shoot, down, shoot", "Shoots in three lines around user", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], System.String);

                var mode = this.modeSelectionScreen.mode;
                var timeAttack = this.modeSelectionScreen.timeAttack;

                var ecs = Pidroh.ECS.ECSManager.Create();


                var sdc = new Pidroh.ConsoleApp.Turnbased.StageDataCreator(ecs);

                new Pidroh.ConsoleApp.Turnbased.ContentCreator.StageDataProcedural_A(sdc);

                var groups = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageDataGroup);
                if (this.stageGroupNav == null) {
                    this.stageGroupNav = new Pidroh.ConsoleApp.Turnbased.StageGroupNavigator(ecs);
                }

                var group = this.stageGroupNav.currentSDG;

                this.stageSelecScreen.stageGroup = group;

                this.stageId = this.stageSelecScreen.chosenStage;
                if (this.stageSelecScreen.chosenStage < 0) {
                    this.stageId = 0;
                }
                var d = this.stageId;
                if (group.childIds.Count <= d) {
                    this.mainDraw = this.modeSelectionScreen;
                    this.modeSelectionScreen.Reset();
                    this.stageId = 0;
                    this.stageGroupNav.Backtrack();
                    this.Reset();
                    return;
                }

                var entityRenderTexts = new (System.Collections.Generic.List$1(System.String)).ctor();
                var moveCreator = new Pidroh.ConsoleApp.Turnbased.MoveCreatorProg(ecs);

                var enemyData = new Pidroh.ConsoleApp.Turnbased.EnemyDataCreator(entityRenderTexts, moveCreator);
                sdc.CalculateTrackInfo(enemyData.enemyDatas);
                sdc.InitializeProgress(this.stageProgressPersistence);

                var stageData = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageData, group.childIds.getItem(this.stageId).$clone());
                if (this.stageSelecScreen.chosenStage < 0) {
                    if (stageData == null) {
                        this.stageSelecScreen.ResetChoice();
                        this.stageSelecScreen.chosenStage = -1;
                    }
                } else {
                    if (stageData == null) {
                        this.stageSelecScreen.ResetChoice();
                        this.stageSelecScreen.chosenStage = -1;
                        var stageDataGroup = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageDataGroup, group.childIds.getItem(this.stageId).$clone());
                        this.stageSelecScreen.stageGroup = stageDataGroup;
                        this.stageGroupNav.Enter(this.stageId);
                    }

                }


                if (this.stageSelecScreen.chosenStage < 0) {
                    this.mainDraw = this.stageSelecScreen;
                    this.stageSelecScreen.ResetChoice();
                    this.stageSelecScreen.ResetCursor();
                    return;

                }


                var battleConfig = stageData.battleConfig;

                this.stageEntity = group.childIds.getItem(this.stageId).$clone();
                if (group.childIds.Count > ((this.stageId + 1) | 0)) {
                    this.stageToBattle.stageToUnlock = group.childIds.getItem(((this.stageId + 1) | 0)).$clone();
                } else {
                    this.stageToBattle.stageToUnlock = Pidroh.ECS.Entity.None.$clone();
                }
                this.stageToBattle.CurrentStage = this.stageEntity.$clone();

                var movePosition = -1;
                var spawns = stageData.spawnDatas;
                var moveDataChosenPreview = null;
                var moveDataChosenPreviewIndex = -1;
                this.aux.clear();
                if (false) {
                    $t = Bridge.getEnumerator(spawns);
                    try {
                        while ($t.moveNext()) {
                            var s = $t.Current;
                            if (s.entityType === Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) {
                                var enemy = enemyData.enemyDatas.getItem(s.id);
                                var ai = enemy.enemyAI;
                                var moves = ai.moves;
                                $t1 = Bridge.getEnumerator(moves);
                                try {
                                    while ($t1.moveNext()) {
                                        var move = $t1.Current;
                                        if (Bridge.is(move, Pidroh.ConsoleApp.Turnbased.MoveUse)) {


                                            var moveIndex = Bridge.cast(move, Pidroh.ConsoleApp.Turnbased.MoveUse).move;
                                            var moveData = moveCreator.moveDatas.getItem(moveIndex);
                                            if (!moveData.tags.contains(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement)) {
                                                if (!this.aux.contains(moveIndex)) {
                                                    this.aux.add(moveIndex);
                                                    movePosition = (movePosition + 1) | 0;
                                                    if (movePosition === this.movePreviewCounter) {
                                                        this.movePreviewCounter = (this.movePreviewCounter + 1) | 0;
                                                        moveDataChosenPreview = moveData;
                                                        moveDataChosenPreviewIndex = moveIndex;
                                                        break;
                                                    }
                                                }

                                            }
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t1, System.IDisposable)) {
                                        $t1.System$IDisposable$Dispose();
                                    }
                                }if (moveDataChosenPreview != null) {
                                    break;
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }}


                var battleSetup = new Pidroh.ConsoleApp.Turnbased.BattleSetup(mode, ecs, enemyData, moveCreator);
                if (moveDataChosenPreview == null) {

                    battleSetup.StageInitialization(this.stageEntity.$clone(), ecs);
                    var fixedAttack = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.FixedAttackStage, this.stageEntity);
                    if (fixedAttack == null) {
                        for (var i = 0; i < this.attackInventory.equippedAttacks.length; i = (i + 1) | 0) {
                            battleSetup.SetDefaultAttack(i, ($t2 = this.attackInventory.equippedAttacks)[System.Array.index(i, $t2)]);
                        }
                    }

                } else {
                    battleSetup.AttackPreviewInitialization(moveDataChosenPreview, enemyData.startOfTutorialEnemy, moveDataChosenPreviewIndex);
                }



                this.battleMain = battleSetup.battleMain;
                var moveRenders = moveCreator.moveRenders;
                this.equipScreen = new Pidroh.TurnBased.TextRendering.EquipScreen(moveRenders);
                this.equipScreen.inventory = this.attackInventory;
                var helpModel = new Pidroh.TurnBased.TextRendering.HelpScreenModel(this.battleMain);
                this.helpScreen = new Pidroh.TurnBased.TextRendering.HelpScreen(helpModel, moveRenders, moveCreator.moveDatas);

                var ps = new Pidroh.TurnBased.TextRendering.PreviewSystem(ecs, this.battleMain);


                var timeToChoose = -1;
                if (timeAttack) {
                    timeToChoose = 30.0;

                }
                this.battleMain.timeToChooseMax = timeToChoose;
                this.battleMain.Init();



                this.battleRender = new Pidroh.ConsoleApp.Turnbased.BattleRender(this.battleMain, stageData, ps, entityRenderTexts, moveRenders);
                this.battleRender.help = this.helpInt;
                new Pidroh.TurnBased.TextRendering.AttackPreview(ecs, this.battleRender);
                new Pidroh.TurnBased.TextRendering.HappHandling(this.battleRender, battleSetup);

                if (this.helpScreen.IsWannaShowIntro()) {
                    this.helpScreen.Show();
                    this.mainDraw = this.helpScreen;
                    helpModel.battleIntroMode = true;
                } else {
                    this.mainDraw = this.battleRender;
                }

                this.resultScreen = new Pidroh.ConsoleApp.Turnbased.ResultScreen(this.battleMain.trackBattle);

                this.resultScreen.battleResult = this.battleMain.battleResult;
                this.resultScreen.moveRenders = moveRenders;

                var hoverManager = new Pidroh.TextRendering.GameScreen.MouseHoverManager(this.Mouse);
                hoverManager.mouseHovers.add(new Pidroh.TextRendering.GameScreen.MouseHover.$ctor1(new Pidroh.BaseUtils.Rect.$ctor1(5, 5, 5, 5), 0, 0));


                this.mouseHover = new Pidroh.TurnBased.TextRendering.MouseHoverText(hoverManager, this.battleRender.textWorld.GetFreeEntity(((this.battleRender.textWorld.mainBoard.Width - 2) | 0), 3), moveDescriptions);

                this.battleRender.mouseHover = hoverManager;

                var intermissionScreen = true;
                if (battleConfig != null) {
                    intermissionScreen = battleConfig.intermissionScreen;
                }
                if (!wasInBeforeLevelMenu && intermissionScreen) {
                    this.mainDraw = this.beforeLevelMenuScreen;
                    this.beforeLevelMenuScreen.SetExtraText(2, "Fragments: " + this.currencyHolder.currency);
                    this.beforeLevelMenuScreen.SetEnabled(2, this.currencyHolder.currency >= 100);
                }

            },
            Draw: function (f) {
                if (this.mouseHover != null) {
                    this.mouseHover.Update();
                }
                this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw(f);
                this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse = this.Mouse;
                this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard = this.Keyboard;
                if (Bridge.referenceEquals(this.mainDraw, this.stageSelecScreen) && this.stageSelecScreen.chosenStage >= 0) {
                    this.movePreviewCounter = 0;
                    this.Reset();
                }
                if (Bridge.referenceEquals(this.mainDraw, this.beforeLevelMenuScreen)) {
                    if (this.beforeLevelMenuScreen.WannaLeave()) {
                        this.stageSelecScreen.ResetChoice();
                        this.mainDraw = this.stageSelecScreen;
                        this.beforeLevelMenuScreen.ResetChoice();
                    }
                    if (this.beforeLevelMenuScreen.chosenOption >= 0) {
                        if (this.beforeLevelMenuScreen.chosenOption === 0) {
                            this.Reset();
                        }
                        if (this.beforeLevelMenuScreen.chosenOption === 1) {
                            this.mainDraw = this.equipScreen;
                        }
                        if (this.beforeLevelMenuScreen.chosenOption === 2) {
                            if (this.currencyHolder.currency >= 100) {
                                this.currencyHolder.currency = (this.currencyHolder.currency - 100) | 0;
                                this.aux.clear();
                                for (var i = 14; i < 38; i = (i + 1) | 0) {
                                    if (!this.attackInventory.attackInventory.contains(i)) {
                                        this.aux.add(i);
                                    }
                                }
                                var attack = Pidroh.BaseUtils.Extensions.RandomElement(System.Int32, this.aux);
                                this.attackInventory.attackInventory.add(attack);
                                this.mainDraw = this.resultScreen;
                                this.resultScreen.AddMovePrize(attack);
                                this.resultScreen.SkipToShowMove();
                            }
                        }

                        this.beforeLevelMenuScreen.ResetChoice();
                    }
                }
                if (Bridge.referenceEquals(this.mainDraw, this.equipScreen)) {
                    if (this.equipScreen.wantToReturn) {
                        this.mainDraw = this.beforeLevelMenuScreen;
                        this.equipScreen.ResetChoice();
                    }
                }
                if (this.stageSelecScreen.wantToReturn) {

                    this.stageSelecScreen.ResetChoice();


                    this.stageSelecScreen.chosenStage = -1;
                    this.stageGroupNav.Backtrack();

                    this.Reset();
                }
                if (this.helpScreen != null) {
                    if (this.helpScreen.wannaLeave === true) {
                        this.helpScreen.wannaLeave = false;
                        this.mainDraw = this.battleRender;

                    }
                }

                if (this.helpInt.showRequest) {
                    this.helpScreen.Show();
                    this.helpInt.showRequest = false;
                    this.mainDraw = this.helpScreen;
                    this.helpScreen.HelpMode();
                }
                if (Bridge.referenceEquals(this.mainDraw, this.battleRender)) {
                    if (this.battleMain.IsOver()) {
                        if (this.battleMain.BattleConfig.attackDemonstrationMode) {
                            this.Reset();
                        } else {
                            if (this.battleMain.IsVictory()) {
                                this.stageId = (this.stageId + 1) | 0;
                                this.stageToBattle.Victory();
                                this.stageSelecScreen.ResetChoice();
                                this.stageToBattle.BattleMetricsUpdate(this.battleMain.trackBattle.metrics);
                                var attackPrize = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.AttackPrize, this.stageToBattle.CurrentStage);
                                if (attackPrize != null) {
                                    if (attackPrize.prizes != null) {
                                        this.attackInventory.attackInventory.AddRange(attackPrize.prizes);
                                        this.resultScreen.AddMovePrize(attackPrize.prizes[System.Array.index(0, attackPrize.prizes)]);
                                    }

                                }
                                var currencyPrize = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.CurrencyPrize, this.stageToBattle.CurrentStage);
                                if (currencyPrize != null) {
                                    if (currencyPrize.currency != null) {
                                        this.currencyHolder.currency = (this.currencyHolder.currency + currencyPrize.currency[System.Array.index(0, currencyPrize.currency)]) | 0;
                                        this.resultScreen.currencyPrize = currencyPrize.currency[System.Array.index(0, currencyPrize.currency)];
                                    }
                                }
                            }
                            this.resultScreen.Enter();
                            this.mainDraw = this.resultScreen;
                        }

                    }
                }
                if (Bridge.referenceEquals(this.mainDraw, this.resultScreen)) {
                    if (this.resultScreen.wannaLeave === 1) {
                        this.Reset();
                    }
                }
                if (Bridge.referenceEquals(this.mainDraw, this.modeSelectionScreen)) {
                    if (this.modeSelectionScreen.wannaLeave === 1) {
                        this.Reset();
                    }
                }

            },
            GetBoard: function () {
                return this.mainDraw.Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard();
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.ResultScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            textWorld: null,
            youWin: null,
            Mouse: null,
            youLose: null,
            battleResult: null,
            trackBattle: null,
            prizeEntity: null,
            Keyboard: null,
            movePrizes: null,
            wannaLeave: 0,
            mode: 0,
            moveRenders: null,
            Input: 0,
            keyDownUnicode: 0,
            MoveRenders: null,
            currencyPrize: 0,
            moveIndex: 0
        },
        alias: [
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.youWin = "You Win";
                this.youLose = "You lose";
                this.movePrizes = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.currencyPrize = -1;
                this.moveIndex = 0;
            },
            ctor: function (trackBattle) {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.trackBattle = trackBattle;
                this.prizeEntity = this.textWorld.GetFreeEntity(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.prizeEntity.Origin.ResetInvisible();
            }
        },
        methods: {
            Enter: function () {
                this.wannaLeave = 0;
                this.mode = 0;
            },
            Draw: function (f) {
                if (this.keyDownUnicode > 0) {
                    if (this.mode === 1) {
                        this.moveIndex = (this.moveIndex + 1) | 0;

                    } else {
                        if (this.mode === 2) {
                            this.wannaLeave = 1;
                        }
                        if (this.mode === 0) {
                            this.mode = 1;
                        }
                    }
                    if (this.movePrizes.Count <= this.moveIndex) {
                        if (this.currencyPrize > 0) {
                            this.mode = 2;
                            this.DrawCurrencyGet(this.currencyPrize);
                        } else {
                            this.wannaLeave = 1;
                        }

                    } else {
                        this.DrawMoveGet(this.movePrizes.getItem(this.moveIndex));
                    }


                }
                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                var message = this.youWin;
                if (this.battleResult.result === 2) {
                    message = this.youLose;
                }
                this.textWorld.mainBoard.DrawOnCenter(message, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderShot);

                var x = 3;
                var y = 3;
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawStrippedText(x, y, "TURNS", this.textWorld.mainBoard);
                var metrics = this.trackBattle.metrics;
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawSubText(((x + 14) | 0), y, metrics.round + "", this.textWorld.mainBoard);
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawStrippedText(x, ((y + 2) | 0), "TIMES HIT", this.textWorld.mainBoard);
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawSubText(((x + 14) | 0), ((y + 2) | 0), metrics.damageTimes + "", this.textWorld.mainBoard);

                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawStrippedText(x, ((y + 10) | 0), "RANK", this.textWorld.mainBoard);
                Pidroh.ConsoleApp.Turnbased.BattleRender.DrawSubText(((x + 14) | 0), ((y + 10) | 0), metrics.rank + "", this.textWorld.mainBoard);

                this.textWorld.mainBoard.DrawHorizontalLine(Pidroh.BaseUtils.Unicode.AsciiGridHor, ((y + 7) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                this.textWorld.mainBoard.DrawHorizontalLine(Pidroh.BaseUtils.Unicode.AsciiGridHor, ((y + 13) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                this.textWorld.DrawChildren();

            },
            SkipToShowMove: function () {
                this.mode = 1;
                this.DrawMoveGet(this.movePrizes.getItem(this.moveIndex));
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            },
            DrawMoveGet: function (move) {
                this.prizeEntity.Origin.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.prizeEntity.Origin.DrawOnCenterHorizontal("You received a new attack", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription, 0, 18, true);
                this.prizeEntity.Origin.DrawOnCenterHorizontal(this.moveRenders.getItem(move).Label, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey, 0, 20, true);
            },
            DrawCurrencyGet: function (amount) {
                this.prizeEntity.Origin.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.prizeEntity.Origin.DrawOnCenterHorizontal("You received data fragments", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription, 0, 18, true);
                this.prizeEntity.Origin.DrawOnCenterHorizontal("" + amount, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey, 0, 20, true);
            },
            AddMovePrize: function (v) {
                this.movePrizes.add(v);
            }
        }
    });

    Bridge.define("Pidroh.ConsoleApp.Turnbased.StageGroupSelectionScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            stageGroups: null,
            textWorld: null,
            Mouse: null,
            Keyboard: null,
            wantedGroup: 0,
            wantedGroupEntity: null,
            wannaLeave: 0,
            navKey: null,
            Input: 0,
            keyDownUnicode: 0
        },
        alias: [
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.wantedGroupEntity = new Pidroh.ECS.Entity();
                this.wantedGroup = -1;
                this.wantedGroupEntity = Pidroh.ECS.Entity.None.$clone();
            },
            ctor: function () {
                this.$initialize();

                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.navKey = new Pidroh.TurnBased.TextRendering.NavigationKeyboard(this.textWorld);
                this.navKey.showEscape = false;
                this.textWorld.mainBoard.SetAll(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);

                this.textWorld.mainBoard.DrawOnCenterHorizontal("Stage Selection", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0, 1);

                this.textWorld.mainBoard.DrawOnCenterHorizontal("Controls", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel, 0, 6);


            }
        },
        methods: {
            SetECS: function (ecs) {
                this.stageGroups = ecs.QuickAccessor1(Pidroh.ConsoleApp.Turnbased.StageDataGroup);


            },
            Enter: function () {
                this.wannaLeave = 0;
            },
            Draw: function (f) {
                this.navKey.Clear();
                this.textWorld.mainBoard.Reset();
                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.textWorld.DrawChildren();
                this.textWorld.mainBoard.DrawOnCenterHorizontal("Stage Selection", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0, 1);

                for (var i = 0; i < this.stageGroups.Count; i = (i + 1) | 0) {
                    var x = 5;
                    var y = (5 + Bridge.Int.mul(i, 2)) | 0;
                    this.textWorld.mainBoard.Draw$1("World " + (((i + 1) | 0)), x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                    this.navKey.Add(((x - 2) | 0), y);
                }

                if (this.keyDownUnicode >= 0) {
                    this.navKey.CheckInput(this.keyDownUnicode);
                }

                this.wantedGroup = this.navKey.chosenOption;
                if (this.wantedGroup >= 0) {
                    this.wantedGroupEntity = this.stageGroups.Entity(this.wantedGroup);
                }
                this.navKey.DrawControls();


            },
            ResetChoice: function () {
                this.wantedGroup = -1;
                this.navKey.ResetChoice();
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextAnimation$1", function (T) { return {
        inherits: [Pidroh.TextRendering.TextAnimation],
        fields: {
            mainData: null
        },
        ctors: {
            init: function () {
                this.mainData = new (System.Collections.Generic.List$1(T)).ctor();
            }
        },
        methods: {
            RequestRegisterLists: function () {
                this.RegisterList(this.mainData);
            },
            Add$1: function (baseData, mainD) {
                this.Add(baseData);
                this.mainData.add(mainD);
            },
            Modify: function (entity, index, progress, length) {
                this.Modify$2(entity, this.mainData.getItem(index), progress, length);
            },
            Modify$2: function (entity, mainData, progress, length) { }
        }
    }; });

    Bridge.define("Pidroh.TextRendering.DelaysAnimation", {
        inherits: [Pidroh.TextRendering.TextAnimation],
        methods: {
            RequestRegisterLists: function () {

            },
            Delay: function (v) {
                this.Add(new Pidroh.TextRendering.TextAnimation.BaseData.$ctor1(v, 0, -1));
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TestGame", {
        inherits: [Pidroh.TextRendering.ITextGame],
        fields: {
            ScreenHolder: null,
            palette: null
        },
        alias: [
            "ScreenHolder", "Pidroh$TextRendering$ITextGame$ScreenHolder",
            "GetPalette", "Pidroh$TextRendering$ITextGame$GetPalette",
            "Init", "Pidroh$TextRendering$ITextGame$Init",
            "Update", "Pidroh$TextRendering$ITextGame$Update"
        ],
        ctors: {
            init: function () {
                this.ScreenHolder = new Pidroh.TextRendering.TextScreenHolder();
                this.palette = Pidroh.TextRendering.DefaultPalettes.C4Novel;
            }
        },
        methods: {
            GetPalette: function () {
                return this.palette;
            },
            Init: function (w, h) {
                var screen = new Pidroh.TextRendering.TestScreen();
                this.ScreenHolder.SetAll(screen);
                screen.Init(w, h);
                screen.GetBoard().Draw$1("Test", 0, 0, 2);
            },
            Update: function (delta) {

            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TextScreenN", {
        inherits: [Pidroh.TextRendering.ITextScreen,Pidroh.TextRendering.IMouseInput,Pidroh.TextRendering.IKeyboardInput],
        fields: {
            TextWorld: null,
            InputUnicode: 0,
            mouseIO: null
        },
        props: {
            InputAsNumber: {
                get: function () {
                    return ((this.InputUnicode - 48) | 0);
                }
            }
        },
        alias: [
            "Update", "Pidroh$TextRendering$ITextScreen$Update",
            "GetBoard", "Pidroh$TextRendering$ITextScreen$GetBoard",
            "MouseEvent", "Pidroh$TextRendering$IMouseInput$MouseEvent",
            "InputUnicode", "Pidroh$TextRendering$IKeyboardInput$InputUnicode",
            "mouseIO", "Pidroh$TextRendering$IMouseInput$mouseIO"
        ],
        ctors: {
            init: function () {
                this.mouseIO = new Pidroh.TextRendering.GameScreen.MouseIO();
            },
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (textWorld) {
                this.$initialize();
                this.TextWorld = textWorld;
            }
        },
        methods: {
            Update: function (f) { },
            Init: function (w, h) {
                this.TextWorld = new Pidroh.TextRendering.TextWorld();
                this.TextWorld.Init(w, h);

            },
            GetBoard: function () {
                return this.TextWorld.mainBoard;
            },
            MouseEvent: function (mouseDown, v1, v2) {

            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.EquipScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            inventory: null,
            textWorld: null,
            navKey_Inventory: null,
            navKey_Equip: null,
            moveMetaDatas: null,
            Input: 0,
            keyDownUnicode: 0,
            Mouse: null,
            Keyboard: null,
            mode: 0,
            wantToReturn: false
        },
        alias: [
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.mode = 0;
            },
            ctor: function (moveMetaDatas) {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.navKey_Inventory = new Pidroh.TurnBased.TextRendering.NavigationKeyboard(this.textWorld);
                this.navKey_Equip = new Pidroh.TurnBased.TextRendering.NavigationKeyboard(this.textWorld);
                this.moveMetaDatas = moveMetaDatas;
            }
        },
        methods: {
            Draw: function (f) {
                var $t, $t1, $t2, $t3;
                this.navKey_Inventory.Clear();
                this.navKey_Equip.Clear();
                this.textWorld.mainBoard.Reset();
                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.textWorld.DrawChildren();

                this.textWorld.mainBoard.DrawOnCenterHorizontal("ATTACK EQUIPMENT", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0, 1);

                for (var i = 0; i < this.inventory.equippedAttacks.length; i = (i + 1) | 0) {
                    var x = 4;
                    var y = (Bridge.Int.mul(i, 2) + 5) | 0;
                    this.navKey_Equip.Add(((x - 2) | 0), y);
                    this.textWorld.mainBoard.DrawOneDigit(((i + 1) | 0), x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    this.textWorld.mainBoard.DrawChar$1(46, ((x + 1) | 0), y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    if (($t = this.inventory.equippedAttacks)[System.Array.index(i, $t)] >= 0) {


                        this.textWorld.mainBoard.Draw$1(this.moveMetaDatas.getItem(($t1 = this.inventory.equippedAttacks)[System.Array.index(i, $t1)]).Label, ((x + 3) | 0), y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    } else {
                        this.textWorld.mainBoard.Draw$1("_____", ((x + 3) | 0), y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    }
                }

                var yOffset = (((5 + Bridge.Int.mul(this.inventory.equippedAttacks.length, 2)) | 0) + 2) | 0;

                this.textWorld.mainBoard.DrawHorizontalLine(95, ((yOffset - 2) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);

                for (var i1 = 0; i1 < this.inventory.attackInventory.Count; i1 = (i1 + 1) | 0) {
                    var x1 = 4;
                    var y1 = (i1 + yOffset) | 0;
                    this.navKey_Inventory.Add(((x1 - 2) | 0), y1);
                    this.textWorld.mainBoard.Draw$1(this.moveMetaDatas.getItem(this.inventory.attackInventory.getItem(i1)).Label, x1, y1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                }
                if (this.keyDownUnicode >= 0) {
                    if (this.mode === 1) {
                        this.navKey_Inventory.CheckInput(this.keyDownUnicode);
                    }
                    if (this.mode === 0) {
                        this.navKey_Equip.CheckInput(this.keyDownUnicode);
                    }
                }

                var attackDescription = "";
                var move = -1;
                if (this.mode === 1) {
                    var cp = this.navKey_Inventory.currentPoint;
                    if (cp >= 0) {
                        move = this.inventory.attackInventory.getItem(cp);
                    }
                }
                if (this.mode === 0) {
                    var cp1 = this.navKey_Equip.currentPoint;
                    if (cp1 >= 0) {
                        move = ($t2 = this.inventory.equippedAttacks)[System.Array.index(cp1, $t2)];
                    }
                }
                if (move >= 0) {
                    this.textWorld.mainBoard.Draw$1(this.moveMetaDatas.getItem(move).Description, 4, ((yOffset + 13) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    this.textWorld.mainBoard.Draw$1("Power: ", 4, ((yOffset + 14) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    this.textWorld.mainBoard.DrawTwoDigits(this.moveMetaDatas.getItem(move).damage, ((4 + ("Power: ").length) | 0), ((yOffset + 14) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                }


                this.navKey_Inventory.DrawControls();


                if (this.navKey_Inventory.chosenOption >= 0) {
                    var attack = this.inventory.attackInventory.getItem(this.navKey_Inventory.chosenOption);
                    ($t3 = this.inventory.equippedAttacks)[System.Array.index(this.navKey_Equip.chosenOption, $t3)] = attack;
                    this.navKey_Equip.ResetChoice();
                    this.navKey_Inventory.ResetChoice();
                    this.mode = 0;

                }
                if (this.navKey_Equip.chosenOption >= 0) {
                    this.mode = 1;
                }
                if (this.navKey_Inventory.wantToEscape) {
                    this.navKey_Equip.ResetChoice();
                    this.navKey_Inventory.ResetChoice();
                    this.mode = 0;
                }
                this.navKey_Inventory.ShowCursor(this.mode === 1);
                this.navKey_Equip.ShowCursor(this.mode === 0);
                this.wantToReturn = this.navKey_Equip.wantToEscape;
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            },
            ResetChoice: function () {
                this.navKey_Equip.ResetChoice();
                this.wantToReturn = false;
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.GenericChoiceScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            textWorld: null,
            navKey: null,
            Input: 0,
            keyDownUnicode: 0,
            Mouse: null,
            Keyboard: null,
            mode: 0,
            chosenOption: 0,
            choices: null,
            extraText: null,
            enabled: null,
            title: null
        },
        alias: [
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.mode = 0;
                this.chosenOption = -1;
                this.choices = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.extraText = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.enabled = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
            },
            ctor: function () {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.navKey = new Pidroh.TurnBased.TextRendering.NavigationKeyboard(this.textWorld);
            }
        },
        methods: {
            Draw: function (f) {
                this.navKey.Clear();
                this.textWorld.mainBoard.Reset();
                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.textWorld.DrawChildren();

                if (this.title != null) {
                    this.textWorld.mainBoard.DrawOnCenterHorizontal(this.title, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0, 1);
                }

                for (var i = 0; i < this.choices.Count; i = (i + 1) | 0) {
                    var y = (Bridge.Int.mul(i, 2) + 5) | 0;
                    var x = 4;
                    var color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription;
                    if (this.enabled.Count > i) {
                        if (!this.enabled.getItem(i)) {
                            color = Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel;
                        }
                    }
                    this.textWorld.mainBoard.Draw$1(this.choices.getItem(i), x, y, color);
                    this.navKey.Add(((x - 2) | 0), y);

                }
                for (var i1 = 0; i1 < this.extraText.Count; i1 = (i1 + 1) | 0) {
                    var y1 = (((Bridge.Int.mul(i1, 2) + 5) | 0) + 1) | 0;
                    var x1 = 12;
                    this.textWorld.mainBoard.Draw$1(this.extraText.getItem(i1), x1, y1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                }

                if (this.keyDownUnicode >= 0) {
                    this.navKey.CheckInput(this.keyDownUnicode);
                }


                this.navKey.DrawControls();

                this.chosenOption = this.navKey.chosenOption;
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            },
            ResetChoice: function () {
                this.navKey.ResetChoice();
                this.chosenOption = -1;
            },
            WannaLeave: function () {
                return this.navKey.wantToEscape;
            },
            SetExtraText: function (id, text) {
                while (this.extraText.Count <= id) {
                    this.extraText.add("");
                }
                this.extraText.setItem(id, text);
            },
            SetEnabled: function (id, enable) {
                while (this.enabled.Count <= id) {
                    this.enabled.add(true);
                }
                this.enabled.setItem(id, enable);
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.HelpScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            Input: 0,
            keyDownUnicode: 0,
            Keyboard: null,
            Mouse: null,
            textWorld: null,
            model: null,
            moveRenders: null,
            moveDatas: null,
            LeaveButton: 0,
            wannaLeave: false,
            explanationEntity: null
        },
        alias: [
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.Mouse = new Pidroh.TextRendering.GameScreen.MouseIO();
            },
            ctor: function (helpModel, moveRenders, moveDatas) {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.model = helpModel;
                this.moveRenders = moveRenders;
                this.moveDatas = moveDatas;
                this.textWorld.mainBoard.SetAll(Pidroh.TextRendering.TextBoard.INVISIBLECHAR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackCommand, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackCommand);
                this.explanationEntity = this.textWorld.GetFreeEntity(((Pidroh.ConsoleApp.Turnbased.GameMain.Width - 4) | 0), 35);
                this.explanationEntity.SetPosition$2(2, 4);
            }
        },
        methods: {
            Draw: function (f) {
                var input = this.keyDownUnicode;
                if (input === this.LeaveButton) {
                    this.wannaLeave = true;
                }
                if (input === 72) {
                    this.wannaLeave = true;
                }
                if (input === 104) {
                    this.wannaLeave = true;
                }
                if (input === Pidroh.BaseUtils.Unicode.Escape) {
                    this.wannaLeave = true;
                }



                var pos = 0;
                this.explanationEntity.Origin.SetCursorAt(0, 0);
                if (false) {
                    this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("Input your commands and watch the turn play out. Plan your moves based on what the enemy will do!", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    this.explanationEntity.Origin.CursorNewLine(0);
                    this.explanationEntity.Origin.CursorNewLine(0);
                    this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("Attacks have three elements, Fire, Thunder and Ice. Fire beats Ice, Ice beats Thunder, Thunder beats Fire.", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    this.explanationEntity.Origin.CursorNewLine(0);
                    this.explanationEntity.Origin.CursorNewLine(0);

                    this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("The element of the attacker changes upon attacking. Attackers are immune to attacks of the same element!", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    pos = (pos + 18) | 0;
                } else {
                    pos = 5;
                }

                if (this.model.attackDemo) {
                    this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("A battle simulation so you can examine enemy attacks beforehand", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                } else {
                    this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("Pick your moves and execute them!", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);

                    pos = (pos + 6) | 0;
                    this.explanationEntity.Origin.CursorNewLine(0);
                    this.explanationEntity.Origin.CursorNewLine(0);
                    if (this.model.killAllEnemies) {

                        this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("Defeat all enemies!", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    } else {
                        this.explanationEntity.Origin.Draw_Cursor_SmartLineBreak("Collect all objects", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription);
                    }


                }

                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.textWorld.Draw();




                var menuTitle = "HELP";
                var leaveLabel = "EXIT";
                if (this.model.battleIntroMode) {
                    leaveLabel = "START";
                    menuTitle = "BATTLE INTRO";
                    this.LeaveButton = 32;
                } else {
                    this.LeaveButton = 120;
                }
                if (this.model.attackDemo) {
                    menuTitle = "ATTACK SIMULATION";
                }
                this.textWorld.mainBoard.DrawOnCenterHorizontal(menuTitle, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel, 0, 1);
                var heroCommandExist = false;
                for (var i = 0; i < this.model.commandsHero.Count; i = (i + 1) | 0) {
                    if (this.CheckDrawCommand(this.model.commandsHero.getItem(i))) {
                        heroCommandExist = true;
                        break;
                    }
                }
                var enemyCommandExist = false;
                for (var i1 = 0; i1 < this.model.commandsEnemy.Count; i1 = (i1 + 1) | 0) {
                    if (this.CheckDrawCommand(this.model.commandsEnemy.getItem(i1))) {
                        enemyCommandExist = true;
                        break;
                    }
                }
                if (this.model.attackDemo) {
                    pos = (pos + 4) | 0;
                    this.textWorld.mainBoard.Draw$1("SIMULATED ATTACK", 2, pos, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                } else {
                    if (heroCommandExist && false) {
                        this.textWorld.mainBoard.Draw$1("YOUR COMMANDS", 2, ((pos - 2) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                        var commandList = this.model.commandsHero;
                        pos = this.ShowCommands(pos, commandList);
                        pos = (pos + 4) | 0;
                    }

                    if (enemyCommandExist) {
                        this.textWorld.mainBoard.Draw$1("ENEMY COMMANDS", 2, pos, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                    }
                }


                if (enemyCommandExist) {
                    pos = (pos + 2) | 0;
                    pos = this.ShowCommands(pos, this.model.commandsEnemy);
                }


                Pidroh.ConsoleApp.Turnbased.GameMain.DrawInput(1, ((pos + 3) | 0), this.LeaveButton, leaveLabel, this.textWorld.mainBoard);


            },
            ShowCommands: function (pos, commandList) {
                for (var i = 0; i < commandList.Count; i = (i + 1) | 0) {

                    var command = commandList.getItem(i);
                    var drawFlag = this.CheckDrawCommand(command);
                    if (drawFlag) {
                        this.textWorld.mainBoard.Draw$1(this.moveRenders.getItem(command).Abrev, 2, pos, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn);
                        this.textWorld.mainBoard.Draw$1(this.moveRenders.getItem(command).Label.toUpperCase(), 5, pos, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn);
                        this.textWorld.mainBoard.SetCursorAt(3, ((pos + 1) | 0));
                        this.textWorld.mainBoard.Draw_Cursor_SmartLineBreak$1(this.moveRenders.getItem(command).Description, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.InputDescription, 0, ((this.moveRenders.getItem(command).Description.length - 1) | 0), 3);
                        pos = (pos + 3) | 0;
                    }

                }

                return pos;
            },
            IsShowingCommandInList: function (commandList) {
                for (var i = 0; i < commandList.Count; i = (i + 1) | 0) {

                    var command = commandList.getItem(i);
                    if (this.CheckDrawCommand(command)) {
                        return true;
                    }


                }

                return false;
            },
            CheckDrawCommand: function (command) {
                var drawFlag = false;
                if (command >= 0) {
                    var md = this.moveDatas.getItem(command);
                    if (!md.HasTag(Pidroh.ConsoleApp.Turnbased.MoveDataTags.Movement)) {
                        drawFlag = this.moveRenders.getItem(command).Label.length !== 0;
                    }


                }

                return drawFlag;
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            },
            Show: function () {
                this.model.RefreshData();
            },
            HelpMode: function () {
                this.model.battleIntroMode = false;
            },
            IsWannaShowIntro: function () {
                this.model.RefreshData();
                return this.IsShowingCommandInList(this.model.commandsEnemy) || this.IsShowingCommandInList(this.model.commandsHero);
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.ModeSelectionScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            textWorld: null,
            Mouse: null,
            selection: 0,
            battleResult: null,
            Keyboard: null,
            wannaLeave: 0,
            mode: 0,
            timeAttack: false,
            screenStage: 0,
            Input: 0,
            keyDownUnicode: 0
        },
        alias: [
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.timeAttack = false;
            },
            ctor: function () {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(70, 25);
            }
        },
        methods: {
            Enter: function () {
                this.wannaLeave = 0;
            },
            Draw: function (f) {
                this.textWorld.mainBoard.Reset();
                var ik = this.Input;
                this.mode = -1;
                this.textWorld.mainBoard.Draw$1("ProgBattle Prototype v0.3", 1, 1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);
                this.textWorld.mainBoard.Draw$1("A game by Pidroh", 1, 2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);
                if (this.screenStage === 0) {
                    switch (ik) {
                        case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.LEFT: 
                            this.screenStage = 1;
                            this.timeAttack = false;
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.RIGHT: 
                            this.screenStage = 1;
                            this.timeAttack = true;
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN: 
                            this.timeAttack = true;
                            this.mode = 0;
                            break;
                        case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP: 
                            this.mode = 0;
                            this.timeAttack = false;
                            break;
                        default: 
                            break;
                    }
                    this.textWorld.mainBoard.DrawOnCenter("[w] Vanilla", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 4, false);
                    this.textWorld.mainBoard.DrawOnCenter("[a] Elemental", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 5, false);
                    this.textWorld.mainBoard.DrawOnCenter("[s] Vanilla Time Attack", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 6, false);
                    this.textWorld.mainBoard.DrawOnCenter("[d] Elemental Time Attack", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 7, false);
                }
                if (this.screenStage === 1) {
                    if (ik === Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP) {
                        this.mode = 1;

                    }
                    if (ik === Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN) {
                        this.screenStage = 0;
                    }
                    this.textWorld.mainBoard.DrawOnCenter("Elemental Mode", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, -5, true);
                    this.textWorld.mainBoard.DrawOnCenter("Fire beats Ice, Ice beats Thunder, Thunder beats fire", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, -2, true);
                    this.textWorld.mainBoard.DrawOnCenter("Same element = no damage", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 0, true);
                    this.textWorld.mainBoard.DrawOnCenter("It is best to have had some experience with vanilla mode", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 1, true);
                    this.textWorld.mainBoard.DrawOnCenter("[w] Start Elemental Mode", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 4, false);
                    this.textWorld.mainBoard.DrawOnCenter("[s] Go back", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, 0, 5, false);
                }


                if (this.mode >= 0) {
                    this.wannaLeave = 1;
                }




            },
            Reset: function () {
                this.mode = -1;
                this.wannaLeave = 0;
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            }
        }
    });

    Bridge.define("Pidroh.TurnBased.TextRendering.StageSelectionScreen", {
        inherits: [Pidroh.ConsoleApp.Turnbased.ITextScreen_],
        fields: {
            stageGroup: null,
            Input: 0,
            keyDownUnicode: 0,
            Mouse: null,
            Keyboard: null,
            textWorld: null,
            navKey: null,
            chosenStage: 0,
            wantToReturn: false,
            groupLabels: null
        },
        alias: [
            "Input", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Input",
            "keyDownUnicode", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$keyDownUnicode",
            "Mouse", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Mouse",
            "Keyboard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Keyboard",
            "Draw", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$Draw",
            "GetBoard", "Pidroh$ConsoleApp$Turnbased$ITextScreen_$GetBoard"
        ],
        ctors: {
            init: function () {
                this.chosenStage = -1;
                this.groupLabels = System.Array.init(["Sector ", "World "], System.String);
            },
            ctor: function () {
                this.$initialize();
                this.textWorld = new Pidroh.TextRendering.TextWorld();
                this.textWorld.Init(Pidroh.ConsoleApp.Turnbased.GameMain.Width, Pidroh.ConsoleApp.Turnbased.GameMain.Height);
                this.navKey = new Pidroh.TurnBased.TextRendering.NavigationKeyboard(this.textWorld);
            }
        },
        methods: {
            Draw: function (f) {
                this.navKey.Clear();
                this.textWorld.mainBoard.Reset();
                this.textWorld.mainBoard.SetAll(32, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.BackgroundInput);
                this.textWorld.DrawChildren();
                this.textWorld.mainBoard.DrawOnCenterHorizontal("Stage Selection", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, 0, 1);

                var stageN = 1;
                for (var i = 0; i < this.stageGroup.childIds.Count; i = (i + 1) | 0) {
                    var x = 5;
                    var y = (5 + Bridge.Int.mul(i, 3)) | 0;
                    var e = this.stageGroup.childIds.getItem(i).$clone();
                    var stageProgressPersistence = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageProgressPersistence, e);
                    var group = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageDataGroup, e);
                    var stageLabelPrefix = "Stage ";
                    var tags = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.TagComponent, e);
                    if (group != null) {
                        stageLabelPrefix = this.groupLabels[System.Array.index(group.level, this.groupLabels)];
                    }
                    var finalLabel = "";

                    if (tags != null && tags.Contains("tutorial")) {
                        finalLabel = "Tutorial";
                    } else {
                        finalLabel = (stageLabelPrefix || "") + stageN;
                        stageN = (stageN + 1) | 0;
                    }
                    if (stageProgressPersistence != null) {
                        if (stageProgressPersistence.available) {
                            this.textWorld.mainBoard.Draw$1(finalLabel, x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey);

                            var rank = stageProgressPersistence.bestBattleMetrics.rank;
                            if (rank >= 0) {
                                this.textWorld.mainBoard.Draw$1("Best Rank: " + rank, ((x + 2) | 0), ((y + 1) | 0), Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                            }
                        } else {
                            this.textWorld.mainBoard.Draw$1("???", x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.WindowLabel);
                        }
                    } else {
                        this.textWorld.mainBoard.Draw$1(finalLabel, x, y, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.inputKey);
                    }

                    this.navKey.Add(((x - 2) | 0), y);
                }
                if (this.keyDownUnicode >= 0) {
                    this.navKey.CheckInput(this.keyDownUnicode);
                }

                this.chosenStage = this.navKey.chosenOption;
                if (this.chosenStage >= 0) {
                    var stageProgressPersistence1 = Pidroh.ECS.ExtensionMethods.GetComponent(Pidroh.ConsoleApp.Turnbased.StageProgressPersistence, this.stageGroup.childIds.getItem(this.chosenStage).$clone());
                    if (stageProgressPersistence1 != null) {
                        if (!stageProgressPersistence1.available) {
                            this.chosenStage = -1;
                            this.navKey.chosenOption = -1;
                        }
                    } else {

                    }
                }
                this.navKey.DrawControls();
                this.wantToReturn = this.navKey.wantToEscape;
            },
            GetBoard: function () {
                return this.textWorld.mainBoard;
            },
            ResetChoice: function () {
                this.chosenStage = -1;
                this.navKey.ResetChoice();
                this.wantToReturn = false;
            },
            ResetCursor: function () {
                this.navKey.ResetCursor();
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.BlinkAnim.BlinkData", {
        $kind: "nested struct",
        statics: {
            methods: {
                BackColor: function (backColor, blinkDuration, changeNoChangeColor) {
                    if (changeNoChangeColor === void 0) { changeNoChangeColor = true; }
                    return new Pidroh.TextRendering.BlinkAnim.BlinkData.$ctor1(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, backColor, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration, changeNoChangeColor);
                },
                FrontColor: function (frontColor, blinkDuration) {
                    return new Pidroh.TextRendering.BlinkAnim.BlinkData.$ctor1(Pidroh.TextRendering.TextBoard.NOCHANGECHAR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, frontColor, blinkDuration, blinkDuration);
                },
                Char: function (c, blinkDuration) {
                    return new Pidroh.TextRendering.BlinkAnim.BlinkData.$ctor1(c, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, Pidroh.TextRendering.TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration);
                },
                getDefaultValue: function () { return new Pidroh.TextRendering.BlinkAnim.BlinkData(); }
            }
        },
        fields: {
            text: 0,
            backColor: 0,
            textColor: 0,
            blinkActiveTime: 0,
            blinkInactive: 0,
            changeInvisible: false
        },
        ctors: {
            $ctor1: function (text, backColor, textColor, blinkActiveTime, blinkInactive, changeNoChangeColor) {
                if (changeNoChangeColor === void 0) { changeNoChangeColor = true; }

                this.$initialize();
                this.text = text;
                this.backColor = backColor;
                this.textColor = textColor;
                this.blinkActiveTime = blinkActiveTime;
                this.blinkInactive = blinkInactive;
                this.changeInvisible = true;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([3804934414, this.text, this.backColor, this.textColor, this.blinkActiveTime, this.blinkInactive, this.changeInvisible]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.TextRendering.BlinkAnim.BlinkData)) {
                    return false;
                }
                return Bridge.equals(this.text, o.text) && Bridge.equals(this.backColor, o.backColor) && Bridge.equals(this.textColor, o.textColor) && Bridge.equals(this.blinkActiveTime, o.blinkActiveTime) && Bridge.equals(this.blinkInactive, o.blinkInactive) && Bridge.equals(this.changeInvisible, o.changeInvisible);
            },
            $clone: function (to) {
                var s = to || new Pidroh.TextRendering.BlinkAnim.BlinkData();
                s.text = this.text;
                s.backColor = this.backColor;
                s.textColor = this.textColor;
                s.blinkActiveTime = this.blinkActiveTime;
                s.blinkInactive = this.blinkInactive;
                s.changeInvisible = this.changeInvisible;
                return s;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.CharByCharAnimation.CharByCharData", {
        $kind: "nested class",
        fields: {
            charStart: 0,
            charEnd: 0
        },
        ctors: {
            ctor: function (charStart, charEnd) {
                this.$initialize();
                this.charStart = charStart;
                this.charEnd = charEnd;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.PositionAnimation.PositionData", {
        $kind: "nested struct",
        statics: {
            methods: {
                getDefaultValue: function () { return new Pidroh.TextRendering.PositionAnimation.PositionData(); }
            }
        },
        fields: {
            permanent: false,
            startPosition: null,
            endPosition: null
        },
        ctors: {
            init: function () {
                this.startPosition = new Pidroh.BaseUtils.Vector2D();
                this.endPosition = new Pidroh.BaseUtils.Vector2D();
            },
            $ctor1: function (startPosition, endPosition, perm) {
                if (perm === void 0) { perm = false; }

                this.$initialize();
                this.startPosition = startPosition.$clone();
                this.endPosition = endPosition.$clone();
                this.permanent = perm;
            },
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            getHashCode: function () {
                var h = Bridge.addHash([5256985096, this.permanent, this.startPosition, this.endPosition]);
                return h;
            },
            equals: function (o) {
                if (!Bridge.is(o, Pidroh.TextRendering.PositionAnimation.PositionData)) {
                    return false;
                }
                return Bridge.equals(this.permanent, o.permanent) && Bridge.equals(this.startPosition, o.startPosition) && Bridge.equals(this.endPosition, o.endPosition);
            },
            $clone: function (to) {
                var s = to || new Pidroh.TextRendering.PositionAnimation.PositionData();
                s.permanent = this.permanent;
                s.startPosition = this.startPosition.$clone();
                s.endPosition = this.endPosition.$clone();
                return s;
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.TestScreen", {
        inherits: [Pidroh.TextRendering.TextScreenN],
        alias: ["Update", "Pidroh$TextRendering$ITextScreen$Update"],
        methods: {
            Update: function (f) {

            }
        }
    });

    Bridge.define("Pidroh.TextRendering.BlinkAnim", {
        inherits: [Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.BlinkAnim.BlinkData)],
        methods: {
            Modify$2: function (entity, mainData, progress, length) {
                Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.BlinkAnim.BlinkData).prototype.Modify$2.call(this, entity, mainData, progress, length);
                var aux = progress;
                var blink = true;
                while (true) {
                    if (blink) {
                        aux -= mainData.blinkActiveTime;
                    } else {
                        aux -= mainData.blinkInactive;
                    }
                    if (aux < 0) {
                        break;
                    } else {
                        blink = !blink;
                    }
                }
                if (!blink) {
                    if (mainData.changeInvisible) {
                        entity.Animation.SetAll(mainData.text, mainData.textColor, mainData.backColor);
                    } else {
                        entity.Animation.SetAllIfVisible(mainData.text, mainData.textColor, mainData.backColor);
                    }

                }
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.CharByCharAnimation", {
        inherits: [Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.CharByCharAnimation.CharByCharData)],
        methods: {
            Modify$2: function (entity, mainData, progress, length) {
                Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.CharByCharAnimation.CharByCharData).prototype.Modify$2.call(this, entity, mainData, progress, length);
                var ratio = progress / length;
                var lengthText = (mainData.charEnd - mainData.charStart) | 0;
                var lineBreaks = 0;
                var offsetedPerm = 0;
                for (var i = mainData.charStart; i < mainData.charEnd; i = (i + 1) | 0) {
                    var offseted = (i + offsetedPerm) | 0;
                    var line = 0;
                    var tb = entity.Animation;


                    while (offseted >= tb.Width) {
                        line = (line + 1) | 0;
                        offseted = (offseted - tb.Width) | 0;
                    }
                    if (entity.Origin.CharAt(offseted, ((line + lineBreaks) | 0)) === 10) {
                        lineBreaks = (lineBreaks + 1) | 0;
                        offsetedPerm = (offsetedPerm - offseted) | 0;
                        offseted = 0;
                    }
                    if (i > ((lengthText * ratio) + mainData.charStart)) {
                        tb.DrawChar(32, offseted, ((line + lineBreaks) | 0));

                    }
                }
            }
        }
    });

    Bridge.define("Pidroh.TextRendering.PositionAnimation", {
        inherits: [Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.PositionAnimation.PositionData)],
        methods: {
            Modify$2: function (entity, mainData, progress, length) {
                Pidroh.TextRendering.TextAnimation$1(Pidroh.TextRendering.PositionAnimation.PositionData).prototype.Modify$2.call(this, entity, mainData, progress, length);
                var target = entity.Animation;
                if (mainData.permanent) {
                    target = entity.Origin;
                }
                target.Position = Pidroh.BaseUtils.Vector2D.InterpolateRounded(mainData.startPosition.$clone(), mainData.endPosition.$clone(), progress / length);

            }
        }
    });
});

//# sourceMappingURL=data:application/json;base64,
