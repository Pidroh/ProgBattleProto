Executing Bridge.Build.Task...
Reading configuration file bridge.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj for configuration Debug ...
Getting configuration by file path bridge.Debug.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
Skipping bridge.Debug.json (not found)
Getting configuration by file path bridge.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
Found configuration file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bridge.json
Reading base configuration at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bridge.json ...
Setting translator properties...
Translator properties:
	BridgeLocation:bin\Debug\Bridge.dll
	BuildArguments:
	DefineConstants:BRIDGE DEBUG TRACE
	Rebuild:False
	ProjectProperties:$(AssemblyName):BridgeBuild, $(CheckForOverflowUnderflow):, $(Configuration):Debug, $(DefineConstants):DEBUG;TRACE, $(OutDir):bin\Debug\, $(OutputPath):bin\Debug\, $(OutputType):Library, $(Platform):AnyCPU, $(RootNamespace):BridgeBuild
EnsureProjectProperties at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
DefaultNamespace:BridgeBuild
BuildAssemblyLocation...
    FullOutputPath:C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\
    OutDir:bin\Debug\
    OutputPath:bin\Debug\
    AssemblyLocation:C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
BuildAssemblyLocation done
Getting source files by xml...
Getting source files by location...
Getting source files by location done (found 64 items)
Getting source files by xml done
EnsureDefineConstants...
EnsureDefineConstants done
EnsureProjectProperties done
ApplyProjectPropertiesToConfig...
ApplyTokens ...
Properties:$(AssemblyName):BridgeBuild, $(CheckForOverflowUnderflow):, $(Configuration):Debug, $(DefineConstants):DEBUG;TRACE, $(OutDir):bin\Debug\, $(OutputPath):bin\Debug\, $(OutputType):Library, $(Platform):AnyCPU, $(RootNamespace):BridgeBuild
ApplyTokens done
ApplyProjectPropertiesToConfig done
Setting translator properties done
Applying logger configuration parameters...
Logger level: Trace
Read config file: {"FileName":null,"Output":"bin\\Debug\\bridge\\","OutputBy":"Project","FileNameCasing":"None","OutputFormatting":"Formatted","StartIndexInName":0,"Module":null,"Dependencies":[],"BeforeBuild":null,"AfterBuild":null,"AutoPropertyToField":false,"PluginsPath":null,"GenerateTypeScript":false,"GenerateDocumentation":"Basic","BuildArguments":null,"CleanOutputFolderBeforeBuild":null,"CleanOutputFolderBeforeBuildPattern":null,"Configuration":null,"DefineConstants":[],"Locales":null,"LocalesOutput":null,"LocalesFileName":null,"CombineLocales":false,"CombineScripts":false,"UseTypedArrays":false,"IgnoreCast":false,"Logging":{"Level":"Trace","TimeStamps":null,"MaxSize":null,"Folder":null,"FileName":null},"OverflowMode":null,"NoLoggerTimeStamps":null,"StrictNullChecks":false,"Reflection":{"Disabled":false,"memberAccessibility":null,"TypeAccessibility":null,"Filter":null,"Output":null,"Target":0},"Assembly":{"DisableInitAssembly":false,"EnableReservedNamespaces":false,"FullName":null},"Resources":[],"Loader":{"Type":0,"FunctionName":null,"ManualLoading":false,"ManualLoadingMask":null,"SkipManualVariables":false},"NamedFunctions":0,"SourceMap":true,"Html":true,"Console":true,"Report":false,"Rules":{"Lambda":1,"Boxing":1,"ArrayIndex":0,"Integer":0,"AnonymousType":1,"AutoProperty":1,"InlineComment":null,"ExternalCast":null,"Level":0},"ReferencesPath":null,"References":null}
2018-08-15T06:33:00:426 	Trace		Setting logger configuration parameters done
2018-08-15T06:33:00:426 	Info		Translating...
2018-08-15T06:33:00:427 	Info		Inspecting references...
2018-08-15T06:33:00:428 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll ...
2018-08-15T06:33:00:428 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll ...
2018-08-15T06:33:00:438 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll done
2018-08-15T06:33:00:438 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.Html5.dll ...
2018-08-15T06:33:00:439 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll ...
2018-08-15T06:33:00:447 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll done
2018-08-15T06:33:00:447 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.Html5.dll done
2018-08-15T06:33:00:448 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll done
2018-08-15T06:33:00:448 	Trace		Reading types for assembly BridgeBuild ...
2018-08-15T06:33:00:449 	Trace		Reading types for assembly done
2018-08-15T06:33:00:449 	Trace		Reading types for assembly Bridge ...
2018-08-15T06:33:00:454 	Trace		Reading types for assembly done
2018-08-15T06:33:00:455 	Trace		Reading types for assembly Bridge.Html5 ...
2018-08-15T06:33:00:455 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:00:456 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference, ReaderParameters) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null, Deferred
2018-08-15T06:33:00:471 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:00:472 	Trace		Reading types for assembly done
2018-08-15T06:33:00:472 	Info		Inspecting references done
2018-08-15T06:33:00:474 	Info		Product info:
2018-08-15T06:33:00:474 	Info			Bridge.Compiler version 17.1.1
2018-08-15T06:33:00:474 	Info			[Bridge Framework, version 17.1.1]
2018-08-15T06:33:00:474 	Info			Copyright 2008-2018 Object.NET, Inc.
2018-08-15T06:33:00:474 	Info		Discovering plugins...
2018-08-15T06:33:00:475 	Trace		Current domain MSBuild.exe
2018-08-15T06:33:00:475 	Trace		Application base: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\
2018-08-15T06:33:00:475 	Trace		Loaded assemblies:
2018-08-15T06:33:00:475 	Trace			mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll True
2018-08-15T06:33:00:475 	Trace			MSBuild, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe False
2018-08-15T06:33:00:476 	Trace			System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll True
2018-08-15T06:33:00:476 	Trace			System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll True
2018-08-15T06:33:00:476 	Trace			System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll True
2018-08-15T06:33:00:476 	Trace			Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Framework.dll False
2018-08-15T06:33:00:476 	Trace			Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.dll False
2018-08-15T06:33:00:477 	Trace			System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\System.Runtime.InteropServices.RuntimeInformation.dll False
2018-08-15T06:33:00:477 	Trace			System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.dll True
2018-08-15T06:33:00:477 	Trace			System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll True
2018-08-15T06:33:00:477 	Trace			System.Threading.Tasks.Dataflow, Version=4.5.24.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading.Tasks.Dataflow\v4.0_4.5.24.0__b03f5f7f11d50a3a\System.Threading.Tasks.Dataflow.dll True
2018-08-15T06:33:00:477 	Trace			System.Threading.Tasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading.Tasks\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Threading.Tasks.dll True
2018-08-15T06:33:00:478 	Trace			System.Diagnostics.Tracing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Diagnostics.Tracing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Diagnostics.Tracing.dll True
2018-08-15T06:33:00:478 	Trace			System.Collections.Concurrent, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Collections.Concurrent\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Collections.Concurrent.dll True
2018-08-15T06:33:00:478 	Trace			System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\System.Collections.Immutable.dll False
2018-08-15T06:33:00:478 	Trace			Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Utilities.Core.dll False
2018-08-15T06:33:00:478 	Trace			System.Collections, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Collections\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Collections.dll True
2018-08-15T06:33:00:478 	Trace			Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Tasks.Core.dll False
2018-08-15T06:33:00:479 	Trace			NuGet.Build.Tasks, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll False
2018-08-15T06:33:00:479 	Trace			NuGet.Commands, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Commands.dll False
2018-08-15T06:33:00:479 	Trace			Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.Build.Utilities.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Utilities.v4.0.dll True
2018-08-15T06:33:00:479 	Trace			NuGet.Common, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Common.dll False
2018-08-15T06:33:00:479 	Trace			NuGet.Frameworks, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Frameworks.dll False
2018-08-15T06:33:00:480 	Trace			Microsoft.NET.Build.Extensions.Tasks, Version=15.5.0.1015, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\tools\net46\Microsoft.NET.Build.Extensions.Tasks.dll False
2018-08-15T06:33:00:480 	Trace			System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll True
2018-08-15T06:33:00:480 	Trace			Microsoft.Build.Tasks.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll False
2018-08-15T06:33:00:480 	Trace			System.Text.Encoding, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Text.Encoding\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Text.Encoding.dll True
2018-08-15T06:33:00:480 	Trace			System.Reflection, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Reflection\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Reflection.dll True
2018-08-15T06:33:00:481 	Trace			System.Resources.ResourceManager, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Resources.ResourceManager\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Resources.ResourceManager.dll True
2018-08-15T06:33:00:481 	Trace			System.Globalization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Globalization\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Globalization.dll True
2018-08-15T06:33:00:481 	Trace			System.Runtime.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Extensions\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.Extensions.dll True
2018-08-15T06:33:00:481 	Trace			System.IO.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.FileSystem\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.FileSystem.dll True
2018-08-15T06:33:00:481 	Trace			System.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Linq\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Linq.dll True
2018-08-15T06:33:00:482 	Trace			System.Security.Principal.Windows, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\System.Security.Principal.Windows.dll False
2018-08-15T06:33:00:482 	Trace			System.Security.Cryptography.Algorithms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Security.Cryptography.Algorithms\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Security.Cryptography.Algorithms.dll True
2018-08-15T06:33:00:482 	Trace			System.Security.Cryptography.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Security.Cryptography.Primitives\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Security.Cryptography.Primitives.dll True
2018-08-15T06:33:00:482 	Trace			System.IO, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.dll True
2018-08-15T06:33:00:482 	Trace			System.IO.FileSystem.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.FileSystem.Primitives\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.FileSystem.Primitives.dll True
2018-08-15T06:33:00:482 	Trace			System.Threading, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Threading.dll True
2018-08-15T06:33:00:483 	Trace			System.IO.Pipes, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.Pipes\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.Pipes.dll True
2018-08-15T06:33:00:483 	Trace			System.Runtime.InteropServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.InteropServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.InteropServices.dll True
2018-08-15T06:33:00:483 	Trace			System.Security.AccessControl, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\System.Security.AccessControl.dll False
2018-08-15T06:33:00:483 	Trace			System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll True
2018-08-15T06:33:00:484 	Trace			SMDiagnostics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\SMDiagnostics\v4.0_4.0.0.0__b77a5c561934e089\SMDiagnostics.dll True
2018-08-15T06:33:00:484 	Trace			System.ServiceModel.Internals, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Internals\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Internals.dll True
2018-08-15T06:33:00:484 	Trace			Bridge.Build, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Bridge.Builder.v16.dll False
2018-08-15T06:33:00:484 	Trace			Bridge.Contract, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Bridge.Contract.dll False
2018-08-15T06:33:00:485 	Trace			Bridge.Translator, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Bridge.Translator.dll False
2018-08-15T06:33:00:485 	Trace			Mono.Cecil, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Mono.Cecil.dll False
2018-08-15T06:33:00:485 	Trace			ICSharpCode.NRefactory.CSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\ICSharpCode.NRefactory.CSharp.dll False
2018-08-15T06:33:00:485 	Trace			ICSharpCode.NRefactory, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\ICSharpCode.NRefactory.dll False
2018-08-15T06:33:00:485 	Trace			Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Newtonsoft.Json.dll False
2018-08-15T06:33:00:486 	Trace			System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Numerics\v4.0_4.0.0.0__b77a5c561934e089\System.Numerics.dll True
2018-08-15T06:33:00:486 	Trace			System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll True
2018-08-15T06:33:00:486 	Trace			Mono.Cecil.Rocks, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Mono.Cecil.Rocks.dll False
2018-08-15T06:33:00:486 	Trace			System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.Composition\v4.0_4.0.0.0__b77a5c561934e089\System.ComponentModel.Composition.dll True
2018-08-15T06:33:00:486 	Trace			Microsoft.CodeAnalysis.CSharp, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Microsoft.CodeAnalysis.CSharp.dll False
2018-08-15T06:33:00:487 	Trace			Microsoft.CodeAnalysis, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Microsoft.CodeAnalysis.dll False
2018-08-15T06:33:00:487 	Trace			System.ValueTuple, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.ValueTuple\v4.0_4.0.0.0__cc7b13ffcd2ddd51\System.ValueTuple.dll True
2018-08-15T06:33:00:487 	Trace			System.Reflection.Metadata, Version=1.4.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\System.Reflection.Metadata.dll False
2018-08-15T06:33:00:487 	Trace			System.Threading.Tasks.Parallel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading.Tasks.Parallel\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Threading.Tasks.Parallel.dll True
2018-08-15T06:33:00:487 	Trace			System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Numerics\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.Numerics.dll True
2018-08-15T06:33:00:488 	Trace			System.Reflection.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Reflection.Primitives\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Reflection.Primitives.dll True
2018-08-15T06:33:00:488 	Trace			System.Text.Encoding.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Text.Encoding.Extensions\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Text.Encoding.Extensions.dll True
2018-08-15T06:33:00:488 	Trace			System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Reflection.Extensions\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Reflection.Extensions.dll True
2018-08-15T06:33:00:488 	Trace			Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.CSharp\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.CSharp.dll True
2018-08-15T06:33:00:488 	Trace			ICSharpCode.NRefactory.Cecil, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\ICSharpCode.NRefactory.Cecil.dll False
2018-08-15T06:33:00:489 	Trace			Object.Net.Utilities, Version=2.5.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\Object.Net.Utilities.dll False
2018-08-15T06:33:00:489 	Trace			Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null dynamic False
2018-08-15T06:33:00:489 	Trace			TopologicalSorting, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\TopologicalSorting.dll False
2018-08-15T06:33:00:489 	Trace			AjaxMin, Version=5.14.5506.26196, Culture=neutral, PublicKeyToken=21ef50ce11b5d80f C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.1.1\tools\AjaxMin.dll False
2018-08-15T06:33:00:489 	Info		Will use the following plugin path "C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Bridge\plugins"
2018-08-15T06:33:00:489 	Info		The plugin path does not exist. Skipping searching test framework plugins in the plugin folder.
2018-08-15T06:33:00:490 	Trace		Will search all translator references to find resource(s) with names starting from "Bridge.Plugins." ...
2018-08-15T06:33:00:490 	Trace		Searching plugins in reference Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null ...
2018-08-15T06:33:00:490 	Trace		skipPluginAssemblies is not set
2018-08-15T06:33:00:491 	Trace		The reference contains 0 resource(s) needed
2018-08-15T06:33:00:491 	Trace		Searching plugins in reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null ...
2018-08-15T06:33:00:491 	Trace		skipPluginAssemblies is not set
2018-08-15T06:33:00:492 	Trace		The reference contains 0 resource(s) needed
2018-08-15T06:33:00:493 	Info		No AssemblyCatalogs found
2018-08-15T06:33:00:493 	Info		Reading plugin configs...
2018-08-15T06:33:00:493 	Info		Reading plugin configs done
2018-08-15T06:33:00:494 	Info		Building syntax tree...
2018-08-15T06:33:00:537 	Trace		Rewriting/replacing code from files one after the other (not parallel) due to logger level being 'trace'.
2018-08-15T06:33:01:067 	Trace		Building syntax tree...
Parsing files one after the other (not parallel) due to logger level being 'trace'.
2018-08-15T06:33:01:068 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs ...
2018-08-15T06:33:01:069 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:069 	Trace			Expanding query expressions done
2018-08-15T06:33:01:070 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:071 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:071 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:071 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs done
2018-08-15T06:33:01:072 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs ...
2018-08-15T06:33:01:072 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:072 	Trace			Expanding query expressions done
2018-08-15T06:33:01:072 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:073 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:073 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs done
2018-08-15T06:33:01:073 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Debugger.cs ...
2018-08-15T06:33:01:073 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:074 	Trace			Expanding query expressions done
2018-08-15T06:33:01:074 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:074 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:075 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:075 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Debugger.cs done
2018-08-15T06:33:01:075 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\DeepCloneHelper.cs ...
2018-08-15T06:33:01:076 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:076 	Trace			Expanding query expressions done
2018-08-15T06:33:01:076 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:076 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:077 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\DeepCloneHelper.cs done
2018-08-15T06:33:01:077 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs ...
2018-08-15T06:33:01:077 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:077 	Trace			Expanding query expressions done
2018-08-15T06:33:01:077 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:078 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:078 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs done
2018-08-15T06:33:01:078 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ICopyable.cs ...
2018-08-15T06:33:01:078 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:078 	Trace			Expanding query expressions done
2018-08-15T06:33:01:078 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:078 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:079 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ICopyable.cs done
2018-08-15T06:33:01:079 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ObjectCloner.cs ...
2018-08-15T06:33:01:080 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:080 	Trace			Expanding query expressions done
2018-08-15T06:33:01:080 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:081 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:081 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:082 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ObjectCloner.cs done
2018-08-15T06:33:01:082 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs ...
2018-08-15T06:33:01:082 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:082 	Trace			Expanding query expressions done
2018-08-15T06:33:01:082 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:083 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:083 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs done
2018-08-15T06:33:01:083 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs ...
2018-08-15T06:33:01:083 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:083 	Trace			Expanding query expressions done
2018-08-15T06:33:01:083 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:084 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:084 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs done
2018-08-15T06:33:01:084 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs ...
2018-08-15T06:33:01:084 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:085 	Trace			Expanding query expressions done
2018-08-15T06:33:01:085 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:085 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:085 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs done
2018-08-15T06:33:01:086 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs ...
2018-08-15T06:33:01:086 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:086 	Trace			Expanding query expressions done
2018-08-15T06:33:01:086 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:087 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:087 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs done
2018-08-15T06:33:01:087 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs ...
2018-08-15T06:33:01:087 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:088 	Trace			Expanding query expressions done
2018-08-15T06:33:01:088 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:088 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:089 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs done
2018-08-15T06:33:01:089 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs ...
2018-08-15T06:33:01:091 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:096 	Trace			Expanding query expressions done
2018-08-15T06:33:01:096 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:097 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:097 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs done
2018-08-15T06:33:01:097 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs ...
2018-08-15T06:33:01:099 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:099 	Trace			Expanding query expressions done
2018-08-15T06:33:01:100 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:101 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:102 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:102 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs done
2018-08-15T06:33:01:102 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs ...
2018-08-15T06:33:01:103 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:103 	Trace			Expanding query expressions done
2018-08-15T06:33:01:103 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:103 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:104 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs done
2018-08-15T06:33:01:104 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ClonedState.cs ...
2018-08-15T06:33:01:105 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:105 	Trace			Expanding query expressions done
2018-08-15T06:33:01:105 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:105 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:105 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ClonedState.cs done
2018-08-15T06:33:01:105 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs ...
2018-08-15T06:33:01:107 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:108 	Trace			Expanding query expressions done
2018-08-15T06:33:01:108 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:109 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:110 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:111 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs done
2018-08-15T06:33:01:111 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs ...
2018-08-15T06:33:01:112 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:112 	Trace			Expanding query expressions done
2018-08-15T06:33:01:113 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:113 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:113 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs done
2018-08-15T06:33:01:113 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs ...
2018-08-15T06:33:01:114 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:114 	Trace			Expanding query expressions done
2018-08-15T06:33:01:114 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:114 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:114 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs done
2018-08-15T06:33:01:114 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs ...
2018-08-15T06:33:01:115 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:115 	Trace			Expanding query expressions done
2018-08-15T06:33:01:115 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:115 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:115 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs done
2018-08-15T06:33:01:116 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs ...
2018-08-15T06:33:01:116 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:116 	Trace			Expanding query expressions done
2018-08-15T06:33:01:117 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:117 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:117 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs done
2018-08-15T06:33:01:117 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs ...
2018-08-15T06:33:01:118 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:118 	Trace			Expanding query expressions done
2018-08-15T06:33:01:118 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:118 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:118 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs done
2018-08-15T06:33:01:119 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs ...
2018-08-15T06:33:01:119 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:119 	Trace			Expanding query expressions done
2018-08-15T06:33:01:120 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:120 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:120 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs done
2018-08-15T06:33:01:120 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs ...
2018-08-15T06:33:01:121 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:121 	Trace			Expanding query expressions done
2018-08-15T06:33:01:121 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:121 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:122 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs done
2018-08-15T06:33:01:122 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs ...
2018-08-15T06:33:01:122 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:122 	Trace			Expanding query expressions done
2018-08-15T06:33:01:122 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:123 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:123 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs done
2018-08-15T06:33:01:123 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\UnicodeRemap.cs ...
2018-08-15T06:33:01:123 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:124 	Trace			Expanding query expressions done
2018-08-15T06:33:01:124 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:124 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:124 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\UnicodeRemap.cs done
2018-08-15T06:33:01:124 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs ...
2018-08-15T06:33:01:124 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:125 	Trace			Expanding query expressions done
2018-08-15T06:33:01:125 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:125 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:125 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs done
2018-08-15T06:33:01:125 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs ...
2018-08-15T06:33:01:125 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:126 	Trace			Expanding query expressions done
2018-08-15T06:33:01:126 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:126 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:126 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs done
2018-08-15T06:33:01:126 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs ...
2018-08-15T06:33:01:129 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:143 	Trace			Expanding query expressions done
2018-08-15T06:33:01:143 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:146 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:146 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:146 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs done
2018-08-15T06:33:01:147 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs ...
2018-08-15T06:33:01:148 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:148 	Trace			Expanding query expressions done
2018-08-15T06:33:01:149 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:150 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:150 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:150 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs done
2018-08-15T06:33:01:151 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs ...
2018-08-15T06:33:01:151 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:152 	Trace			Expanding query expressions done
2018-08-15T06:33:01:152 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:152 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:152 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs done
2018-08-15T06:33:01:152 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs ...
2018-08-15T06:33:01:153 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:153 	Trace			Expanding query expressions done
2018-08-15T06:33:01:153 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:153 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:153 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs done
2018-08-15T06:33:01:154 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs ...
2018-08-15T06:33:01:154 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:154 	Trace			Expanding query expressions done
2018-08-15T06:33:01:154 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:154 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:154 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs done
2018-08-15T06:33:01:155 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs ...
2018-08-15T06:33:01:155 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:155 	Trace			Expanding query expressions done
2018-08-15T06:33:01:155 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:155 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:155 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs done
2018-08-15T06:33:01:155 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs ...
2018-08-15T06:33:01:156 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:156 	Trace			Expanding query expressions done
2018-08-15T06:33:01:157 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:157 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:157 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs done
2018-08-15T06:33:01:157 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs ...
2018-08-15T06:33:01:158 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:158 	Trace			Expanding query expressions done
2018-08-15T06:33:01:158 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:158 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:158 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs done
2018-08-15T06:33:01:158 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs ...
2018-08-15T06:33:01:159 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:159 	Trace			Expanding query expressions done
2018-08-15T06:33:01:160 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:160 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:160 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:160 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs done
2018-08-15T06:33:01:161 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs ...
2018-08-15T06:33:01:161 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:161 	Trace			Expanding query expressions done
2018-08-15T06:33:01:161 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:162 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:162 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:162 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs done
2018-08-15T06:33:01:162 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs ...
2018-08-15T06:33:01:163 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:163 	Trace			Expanding query expressions done
2018-08-15T06:33:01:163 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:164 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:164 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs done
2018-08-15T06:33:01:164 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs ...
2018-08-15T06:33:01:164 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:165 	Trace			Expanding query expressions done
2018-08-15T06:33:01:165 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:165 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:166 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:166 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs done
2018-08-15T06:33:01:166 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs ...
2018-08-15T06:33:01:168 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:173 	Trace			Expanding query expressions done
2018-08-15T06:33:01:174 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:176 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:177 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:177 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs done
2018-08-15T06:33:01:177 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs ...
2018-08-15T06:33:01:177 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:178 	Trace			Expanding query expressions done
2018-08-15T06:33:01:178 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:178 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:178 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs done
2018-08-15T06:33:01:178 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs ...
2018-08-15T06:33:01:180 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:181 	Trace			Expanding query expressions done
2018-08-15T06:33:01:182 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:184 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:185 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:185 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs done
2018-08-15T06:33:01:185 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs ...
2018-08-15T06:33:01:186 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:186 	Trace			Expanding query expressions done
2018-08-15T06:33:01:186 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:186 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:186 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs done
2018-08-15T06:33:01:187 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs ...
2018-08-15T06:33:01:187 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:187 	Trace			Expanding query expressions done
2018-08-15T06:33:01:187 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:187 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:188 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs done
2018-08-15T06:33:01:188 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AttackPreview.cs ...
2018-08-15T06:33:01:188 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:188 	Trace			Expanding query expressions done
2018-08-15T06:33:01:189 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:189 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:189 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:190 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AttackPreview.cs done
2018-08-15T06:33:01:190 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs ...
2018-08-15T06:33:01:194 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:199 	Trace			Expanding query expressions done
2018-08-15T06:33:01:201 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:207 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:208 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:208 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs done
2018-08-15T06:33:01:208 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs ...
2018-08-15T06:33:01:209 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:209 	Trace			Expanding query expressions done
2018-08-15T06:33:01:209 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:210 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:210 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs done
2018-08-15T06:33:01:210 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs ...
2018-08-15T06:33:01:211 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:211 	Trace			Expanding query expressions done
2018-08-15T06:33:01:211 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:212 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:213 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:213 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs done
2018-08-15T06:33:01:213 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs ...
2018-08-15T06:33:01:215 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:215 	Trace			Expanding query expressions done
2018-08-15T06:33:01:216 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:223 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:223 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:223 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs done
2018-08-15T06:33:01:224 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HelpScreen.cs ...
2018-08-15T06:33:01:225 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:225 	Trace			Expanding query expressions done
2018-08-15T06:33:01:225 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:226 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:226 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:226 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HelpScreen.cs done
2018-08-15T06:33:01:227 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs ...
2018-08-15T06:33:01:227 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:227 	Trace			Expanding query expressions done
2018-08-15T06:33:01:227 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:228 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:228 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:228 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs done
2018-08-15T06:33:01:229 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs ...
2018-08-15T06:33:01:229 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:229 	Trace			Expanding query expressions done
2018-08-15T06:33:01:229 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:229 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:230 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs done
2018-08-15T06:33:01:230 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MessageOnPosition.cs ...
2018-08-15T06:33:01:230 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:231 	Trace			Expanding query expressions done
2018-08-15T06:33:01:231 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:231 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:232 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:232 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MessageOnPosition.cs done
2018-08-15T06:33:01:232 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs ...
2018-08-15T06:33:01:233 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:233 	Trace			Expanding query expressions done
2018-08-15T06:33:01:233 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:234 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:234 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs done
2018-08-15T06:33:01:234 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs ...
2018-08-15T06:33:01:235 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:235 	Trace			Expanding query expressions done
2018-08-15T06:33:01:235 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:236 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:236 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:237 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs done
2018-08-15T06:33:01:237 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\PreviewSystem.cs ...
2018-08-15T06:33:01:238 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:238 	Trace			Expanding query expressions done
2018-08-15T06:33:01:238 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:239 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:239 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\PreviewSystem.cs done
2018-08-15T06:33:01:239 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ReflectionTest.cs ...
2018-08-15T06:33:01:239 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:240 	Trace			Expanding query expressions done
2018-08-15T06:33:01:240 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:240 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:240 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ReflectionTest.cs done
2018-08-15T06:33:01:241 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs ...
2018-08-15T06:33:01:241 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:241 	Trace			Expanding query expressions done
2018-08-15T06:33:01:242 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:242 	Trace			Accepting lambda fixer visitor done
2018-08-15T06:33:01:242 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:242 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs done
2018-08-15T06:33:01:243 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs ...
2018-08-15T06:33:01:243 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:243 	Trace			Expanding query expressions done
2018-08-15T06:33:01:243 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:243 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:244 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs done
2018-08-15T06:33:01:244 	Trace		Source file C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs ...
2018-08-15T06:33:01:244 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:244 	Trace			Expanding query expressions done
2018-08-15T06:33:01:244 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:245 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:245 	Trace		Source file C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs done
2018-08-15T06:33:01:245 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs ...
2018-08-15T06:33:01:245 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:245 	Trace			Expanding query expressions done
2018-08-15T06:33:01:246 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:246 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:246 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs done
2018-08-15T06:33:01:246 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs ...
2018-08-15T06:33:01:247 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:247 	Trace			Expanding query expressions done
2018-08-15T06:33:01:247 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:247 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:247 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs done
2018-08-15T06:33:01:247 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs ...
2018-08-15T06:33:01:248 	Trace			Parsing syntax tree done
2018-08-15T06:33:01:248 	Trace			Expanding query expressions done
2018-08-15T06:33:01:248 	Trace			Accepting lambda detector visitor done
2018-08-15T06:33:01:248 	Trace			Accepting type system convert visitor done
2018-08-15T06:33:01:248 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs done
2018-08-15T06:33:01:249 	Info		Building syntax tree done
2018-08-15T06:33:01:249 	Info		Assembly definition to references...
2018-08-15T06:33:01:249 	Trace			Loading AssemblyDefinition Bridge ...
2018-08-15T06:33:02:365 	Trace			Loading AssemblyDefinition done
2018-08-15T06:33:02:366 	Trace			Loading AssemblyDefinition Bridge.Html5 ...
2018-08-15T06:33:02:421 	Trace			Loading AssemblyDefinition done
2018-08-15T06:33:02:422 	Info		Assembly definition to references done
2018-08-15T06:33:02:425 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs
2018-08-15T06:33:02:429 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs
2018-08-15T06:33:02:430 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Debugger.cs
2018-08-15T06:33:02:433 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\DeepCloneHelper.cs
2018-08-15T06:33:02:445 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs
2018-08-15T06:33:02:448 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ICopyable.cs
2018-08-15T06:33:02:448 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ObjectCloner.cs
2018-08-15T06:33:02:453 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs
2018-08-15T06:33:02:459 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs
2018-08-15T06:33:02:462 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs
2018-08-15T06:33:02:531 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs
2018-08-15T06:33:02:536 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs
2018-08-15T06:33:02:541 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs
2018-08-15T06:33:02:586 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs
2018-08-15T06:33:02:609 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs
2018-08-15T06:33:02:611 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ClonedState.cs
2018-08-15T06:33:02:611 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs
2018-08-15T06:33:02:617 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs
2018-08-15T06:33:02:618 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs
2018-08-15T06:33:02:619 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs
2018-08-15T06:33:02:622 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs
2018-08-15T06:33:02:624 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs
2018-08-15T06:33:02:624 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs
2018-08-15T06:33:02:625 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs
2018-08-15T06:33:02:626 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs
2018-08-15T06:33:02:627 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\UnicodeRemap.cs
2018-08-15T06:33:02:628 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs
2018-08-15T06:33:02:628 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs
2018-08-15T06:33:02:629 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs
2018-08-15T06:33:02:654 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs
2018-08-15T06:33:02:660 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs
2018-08-15T06:33:02:671 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs
2018-08-15T06:33:02:672 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs
2018-08-15T06:33:02:673 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs
2018-08-15T06:33:02:673 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs
2018-08-15T06:33:02:675 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs
2018-08-15T06:33:02:684 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs
2018-08-15T06:33:02:686 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs
2018-08-15T06:33:02:687 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs
2018-08-15T06:33:02:695 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs
2018-08-15T06:33:02:697 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs
2018-08-15T06:33:02:706 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs
2018-08-15T06:33:02:707 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs
2018-08-15T06:33:02:729 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs
2018-08-15T06:33:02:732 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs
2018-08-15T06:33:02:734 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AttackPreview.cs
2018-08-15T06:33:02:737 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs
2018-08-15T06:33:02:770 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs
2018-08-15T06:33:02:772 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs
2018-08-15T06:33:02:777 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs
2018-08-15T06:33:02:806 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HelpScreen.cs
2018-08-15T06:33:02:816 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs
2018-08-15T06:33:02:822 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs
2018-08-15T06:33:02:822 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MessageOnPosition.cs
2018-08-15T06:33:02:824 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs
2018-08-15T06:33:02:826 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs
2018-08-15T06:33:02:827 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\PreviewSystem.cs
2018-08-15T06:33:02:835 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ReflectionTest.cs
2018-08-15T06:33:02:836 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs
2018-08-15T06:33:02:837 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs
2018-08-15T06:33:02:837 	Trace		Preconvert C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs
2018-08-15T06:33:02:838 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
2018-08-15T06:33:02:838 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
2018-08-15T06:33:02:838 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
2018-08-15T06:33:02:841 	Info		Inspecting types...
2018-08-15T06:33:02:841 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs
2018-08-15T06:33:02:842 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs
2018-08-15T06:33:02:843 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Debugger.cs
2018-08-15T06:33:02:843 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\DeepCloneHelper.cs
2018-08-15T06:33:02:844 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs
2018-08-15T06:33:02:844 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ICopyable.cs
2018-08-15T06:33:02:844 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\ObjectCloner.cs
2018-08-15T06:33:02:845 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs
2018-08-15T06:33:02:846 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs
2018-08-15T06:33:02:846 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs
2018-08-15T06:33:02:847 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs
2018-08-15T06:33:02:848 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs
2018-08-15T06:33:02:848 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs
2018-08-15T06:33:02:856 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs
2018-08-15T06:33:02:858 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs
2018-08-15T06:33:02:859 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ClonedState.cs
2018-08-15T06:33:02:859 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs
2018-08-15T06:33:02:860 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs
2018-08-15T06:33:02:861 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs
2018-08-15T06:33:02:861 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs
2018-08-15T06:33:02:862 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs
2018-08-15T06:33:02:862 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs
2018-08-15T06:33:02:863 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs
2018-08-15T06:33:02:863 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs
2018-08-15T06:33:02:864 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs
2018-08-15T06:33:02:864 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\UnicodeRemap.cs
2018-08-15T06:33:02:864 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs
2018-08-15T06:33:02:865 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs
2018-08-15T06:33:02:865 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs
2018-08-15T06:33:02:866 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs
2018-08-15T06:33:02:868 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs
2018-08-15T06:33:02:868 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs
2018-08-15T06:33:02:868 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs
2018-08-15T06:33:02:869 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs
2018-08-15T06:33:02:869 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs
2018-08-15T06:33:02:870 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs
2018-08-15T06:33:02:870 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs
2018-08-15T06:33:02:871 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs
2018-08-15T06:33:02:872 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs
2018-08-15T06:33:02:873 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs
2018-08-15T06:33:02:874 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs
2018-08-15T06:33:02:875 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs
2018-08-15T06:33:02:875 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs
2018-08-15T06:33:02:877 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs
2018-08-15T06:33:02:878 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs
2018-08-15T06:33:02:878 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AttackPreview.cs
2018-08-15T06:33:02:879 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs
2018-08-15T06:33:02:882 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs
2018-08-15T06:33:02:882 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs
2018-08-15T06:33:02:883 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs
2018-08-15T06:33:02:884 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HelpScreen.cs
2018-08-15T06:33:02:885 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs
2018-08-15T06:33:02:886 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs
2018-08-15T06:33:02:887 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MessageOnPosition.cs
2018-08-15T06:33:02:887 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs
2018-08-15T06:33:02:887 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs
2018-08-15T06:33:02:888 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\PreviewSystem.cs
2018-08-15T06:33:02:888 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ReflectionTest.cs
2018-08-15T06:33:02:889 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs
2018-08-15T06:33:02:889 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs
2018-08-15T06:33:02:890 	Trace		Visiting syntax tree C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs
2018-08-15T06:33:02:890 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
2018-08-15T06:33:02:890 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
2018-08-15T06:33:02:891 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
2018-08-15T06:33:02:891 	Info		Inspecting types done
2018-08-15T06:33:02:891 	Info		Creating emitter...
2018-08-15T06:33:02:891 	Trace		Initializing items for Bridge types...
2018-08-15T06:33:02:897 	Trace		Initializing items for Bridge types done
2018-08-15T06:33:02:898 	Trace		Sorting types infos by name...
2018-08-15T06:33:02:898 	Trace		Sorting types infos by name done
2018-08-15T06:33:02:899 	Trace		Sorting types by inheritance...
2018-08-15T06:33:02:899 	Trace		Topological sorting...
2018-08-15T06:33:02:899 	Trace			Topological sorting first iteration...
2018-08-15T06:33:02:901 	Trace				HitCounter0 = 137
2018-08-15T06:33:02:901 	Trace				HitCounter1 = 129
2018-08-15T06:33:02:901 	Trace				HitCounter2 = 34
2018-08-15T06:33:02:902 	Trace				HitCounter3 = 34
2018-08-15T06:33:02:902 	Trace				HitCounter4 = 39
2018-08-15T06:33:02:902 	Trace				HitCounter5 = 0
2018-08-15T06:33:02:902 	Trace				HitCounter6 = 0
2018-08-15T06:33:02:902 	Trace			Topological sorting first iteration done
2018-08-15T06:33:02:903 	Trace			Topological sorting third iteration...
2018-08-15T06:33:02:903 	Trace				Calculate sorting...
2018-08-15T06:33:02:903 	Trace				Calculate sorting done
2018-08-15T06:33:02:903 	Trace				Getting Reflection names for 137 types...
2018-08-15T06:33:02:904 	Trace				Got Enumerable<ISet<OrderedProcess>>
2018-08-15T06:33:02:904 	Trace				Got Enumerator<ISet<OrderedProcess>>
2018-08-15T06:33:02:905 	Trace				Getting Reflection names done
2018-08-15T06:33:02:905 	Trace				HitCounter0 = 4
2018-08-15T06:33:02:905 	Trace				HitCounter1 = 137
2018-08-15T06:33:02:906 	Trace				HitCounter2 = 137
2018-08-15T06:33:02:906 	Trace				HitCounter3 = 0
2018-08-15T06:33:02:906 	Trace				HitCounter4 = 0
2018-08-15T06:33:02:906 	Trace				HitCounter5 = 0
2018-08-15T06:33:02:906 	Trace				HitCounter6 = 0
2018-08-15T06:33:02:906 	Trace			Topological sorting third iteration done
2018-08-15T06:33:02:907 	Trace		Topological sorting done
2018-08-15T06:33:02:907 	Trace		Priority sorting...
2018-08-15T06:33:02:907 	Trace		Priority sorting done
2018-08-15T06:33:02:907 	Trace		Sorting types by inheritance done
2018-08-15T06:33:02:907 	Info		Creating emitter done
2018-08-15T06:33:02:908 	Trace		Sorting references...
2018-08-15T06:33:02:908 	Trace				Calculate sorting references...
2018-08-15T06:33:02:908 	Trace				Calculate sorting references done
2018-08-15T06:33:02:908 	Trace				Got Enumerable<ISet<OrderedProcess>>
2018-08-15T06:33:02:908 	Trace				Got Enumerator<ISet<OrderedProcess>>
2018-08-15T06:33:02:908 	Trace			Handling mscorlib
2018-08-15T06:33:02:909 	Trace			Handling Bridge
2018-08-15T06:33:02:909 	Trace			Handling Bridge.Html5
2018-08-15T06:33:02:909 	Trace		Sorting references done:
2018-08-15T06:33:02:909 	Trace			Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:02:909 	Trace			Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:02:909 	Info		Before emitting...
2018-08-15T06:33:02:909 	Info		Before emitting done
2018-08-15T06:33:02:910 	Info		Emitting...
2018-08-15T06:33:02:910 	Trace		Emitting block Bridge.Translator.EmitBlock
2018-08-15T06:33:03:861 	Info		Transforming outputs...
2018-08-15T06:33:03:863 	Trace		Wrapping to modules...
2018-08-15T06:33:03:863 	Trace		Wrapping to modules done
2018-08-15T06:33:03:864 	Trace		Combining outputs...
2018-08-15T06:33:03:864 	Trace		File name BridgeBuild.js
2018-08-15T06:33:03:865 	Trace		File name BridgeBuild.meta.js
2018-08-15T06:33:03:866 	Trace		Combining outputs done
2018-08-15T06:33:03:866 	Info		Transforming outputs done
2018-08-15T06:33:03:866 	Info		Emitting done
2018-08-15T06:33:03:866 	Info		After emitting...
2018-08-15T06:33:03:866 	Info		After emitting done
2018-08-15T06:33:03:867 	Info		Translating done
2018-08-15T06:33:03:867 	Info		Post processing...
2018-08-15T06:33:03:867 	Info		outputPath is C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-08-15T06:33:03:867 	Trace		Preparing resources config...
2018-08-15T06:33:03:868 	Trace		The resources config section has 0 non-default settings
2018-08-15T06:33:03:868 	Trace		CheckConsoleConfigSetting...
2018-08-15T06:33:03:868 	Trace		CheckConsoleConfigSetting done
2018-08-15T06:33:03:868 	Trace		Done preparing resources config
2018-08-15T06:33:03:868 	Info		projectPath is C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild
2018-08-15T06:33:03:868 	Info		Extracting core scripts...
2018-08-15T06:33:03:868 	Info		Extracting resources...
2018-08-15T06:33:03:869 	Trace		Checking if reference Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.json
2018-08-15T06:33:03:869 	Trace		Reading Bridge Resources List
2018-08-15T06:33:03:869 	Trace		Read Bridge Resources List: [
  {
    "FileName": "bridge.js",
    "Name": "bridge.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.console.js",
    "Name": "bridge.console.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.d.ts",
    "Name": "bridge.d.ts",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.meta.js",
    "Name": "bridge.meta.js",
    "Path": null,
    "Parts": null
  }
]
2018-08-15T06:33:03:869 	Trace		Extracting item bridge.js
2018-08-15T06:33:03:869 	Trace		Resource name bridge.js and file name: bridge.js
2018-08-15T06:33:03:869 	Trace		Did not find extract resource option for resource name bridge.js. Will use default embed behavior
2018-08-15T06:33:03:869 	Trace		Adding referenced output bridge.js
2018-08-15T06:33:03:873 	Trace		Extracting item bridge.console.js
2018-08-15T06:33:03:873 	Trace		Resource name bridge.console.js and file name: bridge.console.js
2018-08-15T06:33:03:874 	Trace		Did not find extract resource option for resource name bridge.console.js. Will use default embed behavior
2018-08-15T06:33:03:874 	Trace		Adding referenced output bridge.console.js
2018-08-15T06:33:03:874 	Trace		Extracting item bridge.d.ts
2018-08-15T06:33:03:874 	Trace		Resource name bridge.d.ts and file name: bridge.d.ts
2018-08-15T06:33:03:874 	Trace		Did not find extract resource option for resource name bridge.d.ts. Will use default embed behavior
2018-08-15T06:33:03:875 	Trace		Extracting item bridge.meta.js
2018-08-15T06:33:03:875 	Trace		Resource name bridge.meta.js and file name: bridge.meta.js
2018-08-15T06:33:03:875 	Trace		Did not find extract resource option for resource name bridge.meta.js. Will use default embed behavior
2018-08-15T06:33:03:875 	Trace		Adding referenced output bridge.meta.js
2018-08-15T06:33:03:877 	Trace		Checking if reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.json
2018-08-15T06:33:03:877 	Trace		Reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null does not contain Bridge Resources List
2018-08-15T06:33:03:877 	Trace		Checking if reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.list
2018-08-15T06:33:03:877 	Trace		Reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null does not contain Bridge Resources List
2018-08-15T06:33:03:877 	Info		Done extracting resources
2018-08-15T06:33:03:878 	Info		Skipping extracting Locales
2018-08-15T06:33:03:878 	Info		Done extracting core scripts
2018-08-15T06:33:03:878 	Trace		Minification...
2018-08-15T06:33:03:878 	Trace		No minification required as OutputFormatting = Formatted
2018-08-15T06:33:03:878 	Trace		Combining locales...
2018-08-15T06:33:03:878 	Trace		Skipping combining locales as CombineLocales and CombineScripts config oiptions are both switched off.
2018-08-15T06:33:03:878 	Trace		Combining project outputs...
2018-08-15T06:33:03:879 	Trace		Skipping project outputs as CombineScripts config option switched off.
2018-08-15T06:33:03:879 	Info		Starts Save with projectOutputPath = C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-08-15T06:33:03:879 	Trace		Output bridge.js
2018-08-15T06:33:03:879 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-08-15T06:33:03:879 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-08-15T06:33:03:884 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js ...
2018-08-15T06:33:03:884 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-08-15T06:33:03:884 	Trace		Output bridge.console.js
2018-08-15T06:33:03:885 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-08-15T06:33:03:885 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-08-15T06:33:03:885 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js ...
2018-08-15T06:33:03:885 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-08-15T06:33:03:885 	Trace		Output bridge.meta.js
2018-08-15T06:33:03:886 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-08-15T06:33:03:886 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-08-15T06:33:03:888 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js ...
2018-08-15T06:33:03:889 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-08-15T06:33:03:889 	Trace		Output BridgeBuild.js
2018-08-15T06:33:03:889 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:889 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:921 	Trace		SourceMap for C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:921 	Trace		{
  "version": 3,
  "file": "BridgeBuild.js",
  "sourceRoot": "",
  "sources": ["App.cs","../../ReusablePidrohVS/BaseUtils/ObjectCloner.cs","../../ReusablePidrohVS/BaseUtils/Debugger.cs","../../ReusablePidrohVS/BaseUtils/DeepCloneHelper.cs","../../ReusablePidrohVS/BaseUtils/Extensions.cs","../../ReusablePidrohVS/BaseUtils/Point.cs","../../ReusablePidrohVS/BaseUtils/RandomSupplier.cs","../../ReusablePidrohVS/BaseUtils/Rectangle.cs","../../ReusablePidrohVS/BaseUtils/TimeStamp.cs","../../ReusablePidrohVS/BaseUtils/Unicode.cs","../../ReusablePidrohVS/BaseUtils/Vector2D.cs","../../ReusablePidrohVS/BaseUtils/Vector3D.cs","../TurnBasedLogic/MoveData.cs","../TurnBasedTextRendering/AsyncTasks.cs","../TurnBasedLogic/BattleSetup.cs","../TurnBasedLogic/BattleMain.cs","../TurnBasedTextRendering/ColorStuff.cs","../TurnBasedLogic/DebugExtra/DebugEx.cs","../TurnBasedLogic/ECSIntegration.cs","../TurnBasedLogic/EnemyAI.cs","../TurnBasedLogic/SpawnFactory.cs","../TurnBasedLogic/EnemyDataCreator.cs","../TurnBasedLogic/StageData.cs","../TurnBasedLogic/MoveDataExecuter.cs","../TurnBasedLogic/Happs/Happ.cs","../TurnBasedLogic/InputHolder.cs","../TurnBasedLogic/MoveCreatorProg.cs","../../VisualStudioSolutionRmk/ECS/Accessor.cs","../../VisualStudioSolutionRmk/ECS/ClonedState.cs","../../VisualStudioSolutionRmk/ECS/ECSManager.cs","../../VisualStudioSolutionRmk/ECS/Entity.cs","../../VisualStudioSolutionRmk/ECS/ProcessorFlex.cs","../../ReusablePidrohVS/TextRenderingLogic/TextWorld.cs","../../ReusablePidrohVS/TextRenderingLogic/Palette.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/MouseHover.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/UnicodeRemap.cs","../../ReusablePidrohVS/TextRenderingLogic/TextBoard.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/ITextScreenN.cs","../TurnBasedTextRendering/AttackPreview.cs","../TurnBasedTextRendering/HappHandling.cs","../TurnBasedTextRendering/HelpScreen.cs","../TurnBasedTextRendering/InputHandling.cs","../TurnBasedTextRendering/MessageOnPosition.cs","../TurnBasedTextRendering/MouseHoverText.cs","../TurnBasedTextRendering/PreviewSystem.cs","../TurnBasedTextRendering/ReflectionTest.cs","../TurnBasedTextRendering/BattleRender.cs","../TurnBasedTextRendering/GameMain.cs","../TurnBasedTextRendering/ResultScreen.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/TestGame.cs","../TurnBasedTextRendering/ModeSelectionScreen.cs","../../ReusablePidrohVS/TextRenderingLogic/BlinkAnimation.cs","../../ReusablePidrohVS/TextRenderingLogic/CharByCharAnimation.cs"],
  "names": [""],
  "mappings": "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",
  "sourcesContent": ["using Bridge;\r\nusing Bridge.Html5;\r\n//using ECS;\r\nusing Newtonsoft.Json;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TurnBased.TextRendering;\r\n//using Pidroh.ConsoleApp.Turnbased;\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace BridgeBuild\r\n{\r\n    public class App\r\n    {\r\n        private static int buffer;\r\n        private static bool bufferOn;\r\n        //private static HTMLPreElement text;\r\n        private static GameMain gr;\r\n        private static TextBoard TextBoard;\r\n        //private static StringBuilder sb;\r\n        private static string[] colors;\r\n        private static int bufferUnicode = -1;\r\n        private static TextBoard aux;\r\n        static DateTime last = DateTime.Now;\r\n        private static bool CanDraw;\r\n\r\n        private static void SetupGame(out GameMain gr, out TextBoard TextBoard)\r\n        {\r\n\r\n            Random rnd = new Random();\r\n            RandomSupplier.Generate = () =>\r\n            {\r\n                return (float)rnd.NextDouble();\r\n            };\r\n\r\n            gr = new GameMain();\r\n            TextBoard = gr.GetBoard();\r\n            aux = new TextBoard(300, 300);\r\n\r\n\r\n       \r\n        }\r\n\r\n        public class Bla\r\n        {\r\n            public int i = 3;\r\n            public BridgeBuild.App.Vector pos = new BridgeBuild.App.Vector();\r\n        }\r\n        public struct Vector\r\n        {\r\n            public float x;\r\n            public float y;\r\n        }\r\n\r\n        public static void Main()\r\n        {\r\n            //DeepCloneHelper.debug.Active(false);\r\n            //new ReflectionTest();\r\n            TestEntitySystem();\r\n            //Console.WriteLine(\"Game Start\");\r\n            SetupGame(out gr, out TextBoard);\r\n            colors = new string[30];\r\n            for (int i = 0; i < ColorStuff.colors.Length; i++)\r\n            {\r\n\r\n                colors[i] = ColorStuff.colors[i];\r\n            }\r\n\r\n\r\n\r\n            var style = new HTMLStyleElement();\r\n            style.InnerHTML = \"html,body {font-family: Courier; background-color:#1f2526; height: 100%; color:#888;}\" + \"\\n #canvas-container {width: 100%; height: 100%; text-align:center; vertical-align: middle; } \";\r\n            Document.Head.AppendChild(style);\r\n            buffer = 9;\r\n            bufferOn = false;\r\n\r\n\r\n\r\n            Document.OnKeyPress += (KeyboardEvent a) =>\r\n            {\r\n\r\n                int code = a.KeyCode;\r\n                if (code == 0) code = a.CharCode;\r\n                int unicode = code;\r\n                bufferUnicode = unicode;\r\n                //Console.Write(unicode);\r\n                //buffer = a.CharCode;\r\n\r\n            };\r\n\r\n            UpdateGame();\r\n\r\n            // After building (Ctrl + Shift + B) this project, \r\n            // browse to the /bin/Debug or /bin/Release folder.\r\n\r\n            // A new bridge/ folder has been created and\r\n            // contains your projects JavaScript files. \r\n\r\n            // Open the bridge/index.html file in a browser by\r\n            // Right-Click > Open With..., then choose a\r\n            // web browser from the list\r\n\r\n            // This application will then run in a browser.\r\n        }\r\n\r\n        private static void TestEntitySystem()\r\n        {\r\n\r\n        }\r\n\r\n        private static void UpdateGame()\r\n        {\r\n            if (CanDraw)\r\n            {\r\n                DateTime now = DateTime.Now;\r\n                var secs = (now - last).TotalSeconds;\r\n                if (secs > 0.08)\r\n                {\r\n                    //Console.WriteLine(secs);\r\n                    secs = 0.08;\r\n                }\r\n\r\n                TextBoard = gr.GetBoard();\r\n                gr.Draw((float)secs);\r\n                last = now;\r\n                gr.InputUnicode = bufferUnicode;\r\n                bufferUnicode = -1;\r\n\r\n                var mouseX = Script.Call<int>(\"getMouseX\");\r\n                var mouseY = Script.Call<int>(\"getMouseY\");\r\n                gr.Mouse.pos = new Point2D(mouseX, mouseY);\r\n\r\n                //;;Script.Call(\"clear\");\r\n                for (int j = 0; j < TextBoard.Height; j++)\r\n                {\r\n                    for (int i = 0; i < TextBoard.Width; i++)\r\n                    {\r\n                        if (!aux.SameAs(TextBoard, x: i, y: j))\r\n                        {\r\n                            int tcI = TextBoard.TextColor[i, j];\r\n                            string color = colors[0];\r\n                            if (tcI < 0) { }\r\n                            else\r\n                                if (tcI >= colors.Length) { }\r\n                            else {\r\n                                color = colors[tcI];\r\n                            }\r\n                                \r\n\r\n                            \r\n                            string backColor = colors[TextBoard.BackColor[i, j]];\r\n                            char @char = TextBoard.CharAt(i, j);\r\n                            Script.Call(\"draw\", i, j, color, backColor, \"\" + @char);\r\n                            aux.Copy(TextBoard, x: i, y: j);\r\n                        }\r\n                        else\r\n                        {\r\n                            //Script.Call(\"draw\", i, j, colors[TextBoard.TextColor[i, j]], colors[TextBoard.BackColor[i, j]], \"x\");\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                CanDraw = Script.Call<bool>(\"isReadyToDraw\");\r\n            }\r\n\r\n\r\n            Window.SetTimeout((global::System.Action)UpdateGame, 15);\r\n        }\r\n    }\r\n}","using Pidroh.BaseUtils.ArrayExtensions;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Reflection;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public static class ObjectExtensions\r\n    {\r\n        private static readonly MethodInfo CloneMethod = typeof(Object).GetMethod(\"MemberwiseClone\", BindingFlags.NonPublic | BindingFlags.Instance);\r\n\r\n        public static bool IsPrimitiveMethod(this Type type)\r\n        {\r\n            if (type == typeof(String)) return true;\r\n            if (type == typeof(int)) return true;\r\n            if (type == typeof(float)) return true;\r\n            if (type == typeof(double)) return true;\r\n            if (type == typeof(char)) return true;\r\n            //bool isPrimitive = type.IsPrimitive;\r\n            bool isValueType = type.IsValueType;\r\n            return isValueType; //& isPrimitive;\r\n        }\r\n\r\n        public static Object Copy(this Object originalObject)\r\n        {\r\n            return InternalCopy(originalObject, new Dictionary<Object, Object>(new ReferenceEqualityComparer()));\r\n        }\r\n        private static Object InternalCopy(Object originalObject, IDictionary<Object, Object> visited)\r\n        {\r\n            if (originalObject == null) return null;\r\n            var typeToReflect = originalObject.GetType();\r\n            if (IsPrimitiveMethod(typeToReflect)) return originalObject;\r\n            if (visited.ContainsKey(originalObject)) return visited[originalObject];\r\n            if (typeof(Delegate).IsAssignableFrom(typeToReflect)) return null;\r\n            var cloneObject = CloneMethod.Invoke(originalObject, new object[] { });\r\n            if (typeToReflect.IsArray)\r\n            {\r\n                var arrayType = typeToReflect.GetElementType();\r\n                if (IsPrimitiveMethod(arrayType) == false)\r\n                {\r\n                    Array clonedArray = (Array)cloneObject;\r\n                    clonedArray.ForEach((global::System.Action<global::System.Array, int[]>)((array, indices) => array.SetValue(InternalCopy(clonedArray.GetValue(indices), visited), indices)));\r\n                }\r\n\r\n            }\r\n            visited.Add(originalObject, cloneObject);\r\n            CopyFields(originalObject, visited, cloneObject, typeToReflect);\r\n            RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect);\r\n            return cloneObject;\r\n        }\r\n\r\n        private static void RecursiveCopyBaseTypePrivateFields(object originalObject, IDictionary<object, object> visited, object cloneObject, Type typeToReflect)\r\n        {\r\n            if (typeToReflect.BaseType != null)\r\n            {\r\n                RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect.BaseType);\r\n                CopyFields(originalObject, visited, cloneObject, typeToReflect.BaseType, BindingFlags.Instance | BindingFlags.NonPublic, (global::System.Func<global::System.Reflection.FieldInfo, bool>)(info => info.IsPrivate));\r\n            }\r\n        }\r\n\r\n        private static void CopyFields(object originalObject, IDictionary<object, object> visited, object cloneObject, Type typeToReflect, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.FlattenHierarchy, Func<FieldInfo, bool> filter = null)\r\n        {\r\n            foreach (FieldInfo fieldInfo in typeToReflect.GetFields(bindingFlags))\r\n            {\r\n                if (filter != null && filter(fieldInfo) == false) continue;\r\n                if (IsPrimitiveMethod(fieldInfo.FieldType)) continue;\r\n                var originalFieldValue = fieldInfo.GetValue(originalObject);\r\n                var clonedFieldValue = InternalCopy(originalFieldValue, visited);\r\n                fieldInfo.SetValue(cloneObject, clonedFieldValue);\r\n            }\r\n        }\r\n        public static T Copy<T>(this T original)\r\n        {\r\n            return (T)Copy((Object)original);\r\n        }\r\n    }\r\n\r\n    public class ReferenceEqualityComparer : EqualityComparer<Object>\r\n    {\r\n        public override bool Equals(object x, object y)\r\n        {\r\n            return ReferenceEquals(x, y);\r\n        }\r\n        public override int GetHashCode(object obj)\r\n        {\r\n            if (obj == null) return 0;\r\n            return obj.GetHashCode();\r\n        }\r\n    }\r\n\r\n    namespace ArrayExtensions\r\n    {\r\n        public static class ArrayExtensions\r\n        {\r\n            public static void ForEach(this Array array, Action<Array, int[]> action)\r\n            {\r\n                if (array.Length == 0) return;\r\n                ArrayTraverse walker = new ArrayTraverse(array);\r\n                do action(array, walker.Position);\r\n                while (walker.Step());\r\n            }\r\n        }\r\n\r\n        internal class ArrayTraverse\r\n        {\r\n            public int[] Position;\r\n            private int[] maxLengths;\r\n\r\n            public ArrayTraverse(Array array)\r\n            {\r\n                maxLengths = new int[array.Rank];\r\n                for (int i = 0; i < array.Rank; ++i)\r\n                {\r\n                    maxLengths[i] = array.GetLength(i) - 1;\r\n                }\r\n                Position = new int[array.Rank];\r\n            }\r\n\r\n            public bool Step()\r\n            {\r\n                for (int i = 0; i < Position.Length; ++i)\r\n                {\r\n                    if (Position[i] < maxLengths[i])\r\n                    {\r\n                        Position[i]++;\r\n                        for (int j = 0; j < i; j++)\r\n                        {\r\n                            Position[j] = 0;\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Reflection;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public class Debugger\r\n    {\r\n        bool debugging;\r\n        int ident;\r\n        StringBuilder stringBuilder = new StringBuilder();\r\n\r\n        public Debugger(bool debugging)\r\n        {\r\n            this.debugging = debugging;\r\n        }\r\n\r\n        public void Print(string s)\r\n        {\r\n            if (!debugging) return;\r\n            for (int i = 0; i < ident; i++)\r\n            {\r\n                Console.Write(' ');\r\n            }\r\n            Console.WriteLine(s);\r\n        }\r\n\r\n        internal void Deident()\r\n        {\r\n            ident = ident - 2; ;\r\n        }\r\n\r\n        internal void Ident()\r\n        {\r\n            ident = ident+2;\r\n        }\r\n\r\n        internal void Active()\r\n        {\r\n            debugging = true;\r\n        }\r\n\r\n        internal void Active(bool v)\r\n        {\r\n            debugging = v;\r\n        }\r\n\r\n        public void Print(Object obj)\r\n        {\r\n            if (!debugging) return;\r\n            stringBuilder.Length = 0;\r\n            \r\n            var type = obj.GetType();\r\n            stringBuilder.Append(\"Type: \");\r\n            stringBuilder.Append(type.Name);\r\n            stringBuilder.AppendLine();\r\n            var fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\r\n            foreach (var f in fields)\r\n            {\r\n                stringBuilder.Append(' ');\r\n                stringBuilder.Append(' ');\r\n                stringBuilder.Append(f.GetValue(obj));\r\n                stringBuilder.Append(' ');\r\n                stringBuilder.Append(' ');\r\n                stringBuilder.Append(f.Name);\r\n                stringBuilder.AppendLine();\r\n            }\r\n            Console.WriteLine(stringBuilder.ToString());\r\n        }\r\n    }\r\n}\r\n","/****************************** Module Header ******************************\\\r\nModule Name:  DeepCloneHelper.cs\r\nProject:      CSDeepCloneObject\r\nCopyright (c) Microsoft Corporation.\r\n\r\nThe class contains the methods that implement deep clone using reflection.\r\n\r\nThis source is subject to the Microsoft Public License.\r\nSee http://www.microsoft.com/en-us/openness/licenses.aspx#MPL.\r\nAll other rights reserved.\r\n\r\nTHIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, \r\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED \r\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\r\n\\***************************************************************************/\r\n\r\nusing System;\r\nusing System.Reflection;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public static class DeepCloneHelper\r\n    {\r\n\r\n        public static Debugger debug = new Debugger(false);\r\n\r\n        /// <summary>\r\n        /// Get the deep clone of an object.\r\n        /// </summary>\r\n        /// <typeparam name=\"T\">The type of the obj.</typeparam>\r\n        /// <param name=\"obj\">It is the object used to deep clone.</param>\r\n        /// <returns>Return the deep clone.</returns>\r\n        public static T DeepClone<T>(T obj)\r\n        {\r\n            if (obj == null)\r\n            {\r\n                throw new ArgumentNullException(\"Object is null\");\r\n            }\r\n            return (T)CloneProcedure(obj);\r\n        }\r\n\r\n        public static void DeepCopyPartial(Object from, Object to)\r\n        {\r\n            if (from == null)\r\n            {\r\n                throw new ArgumentNullException(\"Object is null\");\r\n            }\r\n            CopyProcedurePartial(from, to);\r\n        }\r\n\r\n        /// <summary>\r\n        /// The method implements deep clone using reflection.\r\n        /// </summary>\r\n        /// <param name=\"obj\">It is the object used to deep clone.</param>\r\n        /// <returns>Return the deep clone.</returns>\r\n        private static object CloneProcedure(Object obj)\r\n        {\r\n            \r\n            if (obj == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            Type type = obj.GetType();\r\n            \r\n            debug.Print(\"Cloning: \" + type);\r\n            //debug.Print(type);\r\n\r\n            // If the type of object is the value type, we will always get a new object when \r\n            // the original object is assigned to another variable. So if the type of the \r\n            // object is primitive or enum, we just return the object. We will process the \r\n            // struct type subsequently because the struct type may contain the reference \r\n            // fields.\r\n            // If the string variables contain the same chars, they always refer to the same \r\n            // string in the heap. So if the type of the object is string, we also return the \r\n            // object.\r\n            if (type.IsEnum || type == typeof(string) || type == typeof(int) || type == typeof(char) || type == typeof(float) || type == typeof(double) || type == typeof(Boolean))\r\n            {\r\n                    debug.Print(type + \" \" + obj+ \" -V\");\r\n                \r\n                return obj;\r\n            }\r\n            // If the type of the object is the Array, we use the CreateInstance method to get\r\n            // a new instance of the array. We also process recursively this method in the \r\n            // elements of the original array because the type of the element may be the reference \r\n            // type.\r\n            else if (type.IsArray)\r\n            {\r\n                \r\n                //string typeName = type.FullName.Replace(\"[]\", string.Empty);\r\n                //debug.Print(typeName);\r\n                Type typeElement = type.GetElementType();\r\n                \r\n                //debug.Print(typeElement+\"ss\");\r\n                var array = obj as Array;\r\n                int length = array.Length;\r\n                Array copiedArray = Array.CreateInstance(typeElement, length);\r\n                for (int i = 0; i < array.Length; i++)\r\n                {\r\n                    // Get the deep clone of the element in the original array and assign the \r\n                    // clone to the new array.\r\n                    copiedArray.SetValue(CloneProcedure(array.GetValue(i)), i);\r\n\r\n                }\r\n                return copiedArray;\r\n            }\r\n            // If the type of the object is class or struct, it may contain the reference fields, \r\n            // so we use reflection and process recursively this method in the fields of the object \r\n            // to get the deep clone of the object. \r\n            // We use Type.IsValueType method here because there is no way to indicate directly whether \r\n            // the Type is a struct type.\r\n            else if (type.IsClass||type.IsValueType)\r\n            {\r\n                object copiedObject = Activator.CreateInstance(obj.GetType());\r\n\r\n                // Get all FieldInfo.\r\n                FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\r\n                foreach (FieldInfo field in fields)\r\n                {\r\n\r\n                        debug.Print(\"Field: \" + field.Name);\r\n                    object fieldValue = field.GetValue(obj);\r\n                    if (fieldValue != null)\r\n                    {\r\n                            debug.Print(\"Field: \" + field.Name + \" being set\");\r\n                        // Get the deep clone of the field in the original object and assign the \r\n                        // clone to the field in the new object.\r\n                        field.SetValue(copiedObject, CloneProcedure(fieldValue));\r\n                    }\r\n\r\n                }\r\n\r\n                return copiedObject;\r\n            }\r\n            else\r\n            {\r\n                throw new ArgumentException(\"The object is unknown type\");\r\n            }\r\n        }\r\n\r\n        private static object CopyProcedurePartial(Object from, Object to)\r\n        {\r\n            if (from == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            Type type = from.GetType();\r\n\r\n            debug.Print(\"Copying \"+type);\r\n            debug.Ident();\r\n\r\n            // If the type of object is the value type, we will always get a new object when \r\n            // the original object is assigned to another variable. So if the type of the \r\n            // object is primitive or enum, we just return the object. We will process the \r\n            // struct type subsequently because the struct type may contain the reference \r\n            // fields.\r\n            // If the string variables contain the same chars, they always refer to the same \r\n            // string in the heap. So if the type of the object is string, we also return the \r\n            // object.\r\n            if (type.IsEnum || type == typeof(string) || type == typeof(int) || type == typeof(char) || type == typeof(float) || type == typeof(double))\r\n            {\r\n\r\n                    debug.Print(type + \" \"+from + \" -V\");\r\n                debug.Deident();\r\n                return from;\r\n            }\r\n            // arrays not implemented\r\n            else if (type.IsArray)\r\n            {\r\n                debug.Deident();\r\n                return null;\r\n            }\r\n            // If the type of the object is class or struct, it may contain the reference fields, \r\n            // so we use reflection and process recursively this method in the fields of the object \r\n            // to get the deep clone of the object. \r\n            // We use Type.IsValueType method here because there is no way to indicate directly whether \r\n            // the Type is a struct type.\r\n            else if (type.IsClass || type.IsValueType)\r\n            {\r\n                object copiedObject = to;\r\n\r\n                // Get all FieldInfo.\r\n                FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\r\n                foreach (FieldInfo field in fields)\r\n                {\r\n\r\n                        debug.Print(\"Field: \" + field.Name);\r\n                    object fieldValue = field.GetValue(from);\r\n                    if (fieldValue != null)\r\n                    {\r\n                        debug.Print(\"Field: \" + field.Name + \" not null, being set\");\r\n                        // Get the deep clone of the field in the original object and assign the \r\n                        // clone to the field in the new object.\r\n                        debug.Ident();\r\n                        field.SetValue(copiedObject, CloneProcedure(fieldValue));\r\n                        debug.Deident();\r\n                    }\r\n\r\n                }\r\n                debug.Deident();\r\n                return copiedObject;\r\n            }\r\n            else\r\n            {\r\n                debug.Deident();\r\n                throw new ArgumentException(\"The object is unknown type\");\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    public static class Extensions\r\n    {\r\n        private static Random rng = new Random();\r\n\r\n        public static void Shuffle<T>(this IList<T> list)\r\n        {\r\n            int n = list.Count;\r\n            while (n > 1)\r\n            {\r\n                n--;\r\n                int k = rng.Next(n + 1);\r\n                T value = list[k];\r\n                list[k] = list[n];\r\n                list[n] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\n","#region License\r\n/*\r\nMIT License\r\nCopyright © 2006 The Mono.Xna Team\r\n\r\nAll rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n#endregion License\r\nusing System;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public struct Point2D : IEquatable<Point2D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Point2D zeroPoint = new Point2D();\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public int X;\r\n        public int Y;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Properties\r\n\r\n        public static Point2D Zero\r\n        {\r\n            get { return zeroPoint; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Point2D(int x, int y)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public methods\r\n\r\n        public static bool operator ==(Point2D a, Point2D b)\r\n        {\r\n            return a.Equals(b);\r\n        }\r\n\r\n        public static bool operator !=(Point2D a, Point2D b)\r\n        {\r\n            return !a.Equals(b);\r\n        }\r\n\r\n        public bool Equals(Point2D other)\r\n        {\r\n            return ((X == other.X) && (Y == other.Y));\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return (obj is Point2D) ? Equals((Point2D)obj) : false;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return X ^ Y;\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return string.Format(\"{{X:{0} Y:{1}}}\", X, Y);\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    static public class RandomSupplier\r\n    {\r\n        public static Func<float> Generate{ get; set; }\r\n\r\n        public static int Range(int min, int max) {\r\n            return (int) (Generate() * (max-min)+min);\r\n        }\r\n\r\n        public static T RandomElement<T>(T[] array)\r\n        {\r\n            return array[Range(0, array.Length)];\r\n        }\r\n    }\r\n}\r\n","#region License\r\n/*\r\nMIT License\r\nCopyright © 2006 The Mono.Xna Team\r\n\r\nAll rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n#endregion License\r\n\r\nusing System;\r\nusing System.Globalization;\r\nusing System.ComponentModel;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    public struct Rect : IEquatable<Rect>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Rect emptyRectangle = new Rect();\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public int X;\r\n        public int Y;\r\n        public int Width;\r\n        public int Height;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Public Properties\r\n\r\n        public static Rect Empty\r\n        {\r\n            get { return emptyRectangle; }\r\n        }\r\n\r\n        public int Left\r\n        {\r\n            get { return this.X; }\r\n        }\r\n\r\n        public int Right\r\n        {\r\n            get { return (this.X + this.Width); }\r\n        }\r\n\r\n        public int Top\r\n        {\r\n            get { return this.Y; }\r\n        }\r\n\r\n        public int Bottom\r\n        {\r\n            get { return (this.Y + this.Height); }\r\n        }\r\n\r\n        #endregion Public Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Rect(int x, int y, int width, int height)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n            this.Width = width;\r\n            this.Height = height;\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        public static bool operator ==(Rect a, Rect b)\r\n        {\r\n            return ((a.X == b.X) && (a.Y == b.Y) && (a.Width == b.Width) && (a.Height == b.Height));\r\n        }\r\n\r\n        public bool Contains(int x, int y)\r\n        {\r\n            return ((((this.X <= x) && (x < (this.X + this.Width))) && (this.Y <= y)) && (y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Vector2D value)\r\n        {\r\n            return ((((this.X <= value.X) && (value.X < (this.X + this.Width))) && (this.Y <= value.Y)) && (value.Y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Point2D value)\r\n        {\r\n            return ((((this.X <= value.X) && (value.X < (this.X + this.Width))) && (this.Y <= value.Y)) && (value.Y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Rect value)\r\n        {\r\n            return ((((this.X <= value.X) && ((value.X + value.Width) <= (this.X + this.Width))) && (this.Y <= value.Y)) && ((value.Y + value.Height) <= (this.Y + this.Height)));\r\n        }\r\n\r\n        public static bool operator !=(Rect a, Rect b)\r\n        {\r\n            return !(a == b);\r\n        }\r\n\r\n        public void Offset(Point2D offset)\r\n        {\r\n            X += offset.X;\r\n            Y += offset.Y;\r\n        }\r\n\r\n        public void Offset(int offsetX, int offsetY)\r\n        {\r\n            X += offsetX;\r\n            Y += offsetY;\r\n        }\r\n\r\n        public Point2D Center\r\n        {\r\n            get\r\n            {\r\n                return new Point2D((this.X + this.Width) / 2, (this.Y + this.Height) / 2);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        public void Inflate(int horizontalValue, int verticalValue)\r\n        {\r\n            X -= horizontalValue;\r\n            Y -= verticalValue;\r\n            Width += horizontalValue * 2;\r\n            Height += verticalValue * 2;\r\n        }\r\n\r\n        public bool IsEmpty\r\n        {\r\n            get\r\n            {\r\n                return ((((this.Width == 0) && (this.Height == 0)) && (this.X == 0)) && (this.Y == 0));\r\n            }\r\n        }\r\n\r\n        public bool Equals(Rect other)\r\n        {\r\n            return this == other;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return (obj is Rect) ? this == ((Rect)obj) : false;\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return string.Format(\"{{X:{0} Y:{1} Width:{2} Height:{3}}}\", X, Y, Width, Height);\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return (this.X ^ this.Y ^ this.Width ^ this.Height);\r\n        }\r\n\r\n        public bool Intersects(Rect r2)\r\n        {\r\n            return !(r2.Left > Right\r\n                     || r2.Right < Left\r\n                     || r2.Top > Bottom\r\n                     || r2.Bottom < Top\r\n                    );\r\n\r\n        }\r\n\r\n\r\n        public void Intersects(ref Rect value, out bool result)\r\n        {\r\n            result = !(value.Left > Right\r\n                     || value.Right < Left\r\n                     || value.Top > Bottom\r\n                     || value.Bottom < Top\r\n                    );\r\n\r\n        }\r\n\r\n        #endregion Public Methods\r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public class TimeStamp\r\n    {\r\n        public float CurrentSnap;\r\n\r\n        public TimeStampSnap GetSnap()\r\n        {\r\n            return new TimeStampSnap(CurrentSnap);\r\n        }\r\n        \r\n        public void Advance(float delta)\r\n        {\r\n            CurrentSnap += delta;\r\n        }\r\n    }\r\n\r\n    public struct TimeStampSnap\r\n    {\r\n        public readonly float TimeSnap;\r\n\r\n        public TimeStampSnap(float snap)\r\n        {\r\n            TimeSnap = snap;\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public static class Unicode\r\n    {\r\n        public const int Space = 32;\r\n\r\n        public const int keyDown = 40;\r\n        public const int keyLeft = 37;\r\n        public const int keyUp = 38;\r\n        public const int keyRight = 39;\r\n\r\n        public const char Uparrow2 = (char)24;\r\n        public const char Downarrow2 = (char)25;\r\n        public const char Rightarrow2 = (char)26;\r\n        public const char Leftarrow2 = (char)27;\r\n        public const char Uparrow = (char)30;\r\n        public const char Downarrow = (char)31;\r\n        public const char Leftarrow = (char)17;\r\n        public const char Rightarrow = (char)16;\r\n        public const char AsciiGridHor = (char)196;\r\n        public const char AsciiGridVer = (char)179;\r\n\r\n        public static readonly char[] grids = new char[] {\r\n            AsciiGridHor,\r\n            AsciiGridVer\r\n        };\r\n        public static readonly char AsciiGridUpLeft = (char)217;\r\n        public static readonly char AsciiGridUpRight = (char) 192;\r\n        public static readonly char AsciiGridUpRightLeft = (char)193;\r\n        public static readonly char AsciiGridDownLeft = (char)191;\r\n        public static readonly char AsciiGridDownRight = (char)218;\r\n        public static readonly char AsciiGridDownRightLeft = (char)194;\r\n    }\r\n}\r\n","using System;\r\nusing System.Text;\r\n//using System.Drawing;\r\nusing System.Globalization;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    [Serializable]\r\n    public struct Vector2D : IEquatable<Vector2D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Vector2D zeroVector = new Vector2D(0f, 0f);\r\n        private static Vector2D unitVector = new Vector2D(1f, 1f);\r\n        private static Vector2D unitXVector = new Vector2D(1f, 0f);\r\n        private static Vector2D unitYVector = new Vector2D(0f, 1f);\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public float X;\r\n        public float Y;\r\n\r\n        #endregion Public Fields\r\n\r\n        # region Public Properties\r\n\r\n        public int XInt { get { return (int)X; } }\r\n        public int YInt { get { return (int)Y; } }\r\n\r\n        #endregion Public Properties\r\n\r\n        #region Constants\r\n        #endregion\r\n\r\n\r\n        #region Properties\r\n\r\n        public static Vector2D Zero\r\n        {\r\n            get { return zeroVector; }\r\n        }\r\n\r\n        public static Vector2D One\r\n        {\r\n            get { return unitVector; }\r\n        }\r\n\r\n        public static Vector2D UnitX\r\n        {\r\n            get { return unitXVector; }\r\n        }\r\n\r\n        public static Vector2D UnitY\r\n        {\r\n            get { return unitYVector; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Vector2D(float x, float y)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n        }\r\n\r\n        public Vector2D(float value)\r\n        {\r\n            this.X = value;\r\n            this.Y = value;\r\n        }\r\n\r\n        public static Vector2D InterpolateRounded(Vector2D startPosition, Vector2D endPosition, float ratio)\r\n        {\r\n            return (startPosition * (1 - ratio) + endPosition * ratio).Round();\r\n        }\r\n\r\n        private Vector2D Round()\r\n        {\r\n            return new Vector2D((float)Math.Round(X), (float)Math.Round(Y));\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        public static Vector2D Add(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Add(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X + value2.X;\r\n            result.Y = value1.Y + value2.Y;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        public static float Distance(Vector2D value1, Vector2D value2)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            return (float)Math.Sqrt((v1 * v1) + (v2 * v2));\r\n        }\r\n\r\n        public static void Distance(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            result = (float)Math.Sqrt((v1 * v1) + (v2 * v2));\r\n        }\r\n\r\n        public static float DistanceSquared(Vector2D value1, Vector2D value2)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            return (v1 * v1) + (v2 * v2);\r\n        }\r\n\r\n        public static void DistanceSquared(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            result = (v1 * v1) + (v2 * v2);\r\n        }\r\n\r\n        public void Set(int x, int y)\r\n        {\r\n            X = x;\r\n            Y = y;\r\n\r\n        }\r\n\r\n        public static Vector2D Divide(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X / value2.X;\r\n            result.Y = value1.Y / value2.Y;\r\n        }\r\n\r\n        public static Vector2D Divide(Vector2D value1, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector2D value1, float divider, out Vector2D result)\r\n        {\r\n            float factor = 1 / divider;\r\n            result.X = value1.X * factor;\r\n            result.Y = value1.Y * factor;\r\n        }\r\n\r\n        public static float Dot(Vector2D value1, Vector2D value2)\r\n        {\r\n            return (value1.X * value2.X) + (value1.Y * value2.Y);\r\n        }\r\n\r\n        public static void Dot(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            result = (value1.X * value2.X) + (value1.Y * value2.Y);\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj is Vector2D)\r\n            {\r\n                return Equals((Vector2D)this);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public bool Equals(Vector2D other)\r\n        {\r\n            return (X == other.X) && (Y == other.Y);\r\n        }\r\n\r\n        public static Vector2D Reflect(Vector2D vector, Vector2D normal)\r\n        {\r\n            Vector2D result;\r\n            float val = 2.0f * ((vector.X * normal.X) + (vector.Y * normal.Y));\r\n            result.X = vector.X - (normal.X * val);\r\n            result.Y = vector.Y - (normal.Y * val);\r\n            return result;\r\n        }\r\n\r\n        public static void Reflect(ref Vector2D vector, ref Vector2D normal, out Vector2D result)\r\n        {\r\n            float val = 2.0f * ((vector.X * normal.X) + (vector.Y * normal.Y));\r\n            result.X = vector.X - (normal.X * val);\r\n            result.Y = vector.Y - (normal.Y * val);\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return X.GetHashCode() + Y.GetHashCode();\r\n        }\r\n\r\n\r\n        public float Length()\r\n        {\r\n            return (float)Math.Sqrt((X * X) + (Y * Y));\r\n        }\r\n\r\n        public float LengthSquared()\r\n        {\r\n            return (X * X) + (Y * Y);\r\n        }\r\n        \r\n        public static Vector2D Max(Vector2D value1, Vector2D value2)\r\n        {\r\n            return new Vector2D(value1.X > value2.X ? value1.X : value2.X,\r\n                               value1.Y > value2.Y ? value1.Y : value2.Y);\r\n        }\r\n\r\n        public static void Max(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X > value2.X ? value1.X : value2.X;\r\n            result.Y = value1.Y > value2.Y ? value1.Y : value2.Y;\r\n        }\r\n\r\n        public static Vector2D Min(Vector2D value1, Vector2D value2)\r\n        {\r\n            return new Vector2D(value1.X < value2.X ? value1.X : value2.X,\r\n                               value1.Y < value2.Y ? value1.Y : value2.Y);\r\n        }\r\n\r\n        public static void Min(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X < value2.X ? value1.X : value2.X;\r\n            result.Y = value1.Y < value2.Y ? value1.Y : value2.Y;\r\n        }\r\n\r\n        public static Vector2D Multiply(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector2D Multiply(Vector2D value1, float scaleFactor)\r\n        {\r\n            value1.X *= scaleFactor;\r\n            value1.Y *= scaleFactor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Multiply(ref Vector2D value1, float scaleFactor, out Vector2D result)\r\n        {\r\n            result.X = value1.X * scaleFactor;\r\n            result.Y = value1.Y * scaleFactor;\r\n        }\r\n\r\n        public static void Multiply(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X * value2.X;\r\n            result.Y = value1.Y * value2.Y;\r\n        }\r\n\r\n        public static Vector2D Negate(Vector2D value)\r\n        {\r\n            value.X = -value.X;\r\n            value.Y = -value.Y;\r\n            return value;\r\n        }\r\n\r\n        public static void Negate(ref Vector2D value, out Vector2D result)\r\n        {\r\n            result.X = -value.X;\r\n            result.Y = -value.Y;\r\n        }\r\n\r\n        public void Normalize()\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((X * X) + (Y * Y));\r\n            X *= val;\r\n            Y *= val;\r\n        }\r\n\r\n        public static Vector2D Normalize(Vector2D value)\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((value.X * value.X) + (value.Y * value.Y));\r\n            value.X *= val;\r\n            value.Y *= val;\r\n            return value;\r\n        }\r\n\r\n        public static void Normalize(ref Vector2D value, out Vector2D result)\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((value.X * value.X) + (value.Y * value.Y));\r\n            result.X = value.X * val;\r\n            result.Y = value.Y * val;\r\n        }\r\n\r\n\r\n\r\n        public static Vector2D Subtract(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Subtract(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X - value2.X;\r\n            result.Y = value1.Y - value2.Y;\r\n        }\r\n\r\n\r\n\r\n\r\n        public override string ToString()\r\n        {\r\n            CultureInfo currentCulture = CultureInfo.CurrentCulture;\r\n            return string.Format(currentCulture, \"{{X:{0} Y:{1}}}\", new object[] {\r\n                this.X.ToString(currentCulture), this.Y.ToString(currentCulture) });\r\n        }\r\n\r\n        #endregion Public Methods\r\n\r\n\r\n        #region Operators\r\n\r\n        public static Vector2D operator -(Vector2D value)\r\n        {\r\n            value.X = -value.X;\r\n            value.Y = -value.Y;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static bool operator ==(Vector2D value1, Vector2D value2)\r\n        {\r\n            return value1.X == value2.X && value1.Y == value2.Y;\r\n        }\r\n\r\n\r\n        public static bool operator !=(Vector2D value1, Vector2D value2)\r\n        {\r\n            return value1.X != value2.X || value1.Y != value2.Y;\r\n        }\r\n\r\n\r\n        public static Vector2D operator +(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator -(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(Vector2D value, float scaleFactor)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(float scaleFactor, Vector2D value)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static Vector2D operator /(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator /(Vector2D value1, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            return value1;\r\n        }\r\n\r\n        #endregion Operators\r\n    }\r\n}","// MIT License - Copyright (C) The Mono.Xna Team\r\n// This file is subject to the terms and conditions defined in\r\n// file 'LICENSE.txt', which is part of this source code package.\r\n\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusing System.Runtime.Serialization;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    \r\n    public struct Vector3D : IEquatable<Vector3D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Vector3D zero = new Vector3D(0f, 0f, 0f);\r\n        private static Vector3D one = new Vector3D(1f, 1f, 1f);\r\n        private static Vector3D unitX = new Vector3D(1f, 0f, 0f);\r\n        private static Vector3D unitY = new Vector3D(0f, 1f, 0f);\r\n        private static Vector3D unitZ = new Vector3D(0f, 0f, 1f);\r\n        private static Vector3D up = new Vector3D(0f, 1f, 0f);\r\n        private static Vector3D down = new Vector3D(0f, -1f, 0f);\r\n        private static Vector3D right = new Vector3D(1f, 0f, 0f);\r\n        private static Vector3D left = new Vector3D(-1f, 0f, 0f);\r\n        private static Vector3D forward = new Vector3D(0f, 0f, -1f);\r\n        private static Vector3D backward = new Vector3D(0f, 0f, 1f);\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        \r\n        public float X;\r\n\r\n        \r\n        public float Y;\r\n\r\n        \r\n        public float Z;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Properties\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 0, 0.\r\n        /// </summary>\r\n        public static Vector3D Zero\r\n        {\r\n            get { return zero; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 1, 1, 1.\r\n        /// </summary>\r\n        public static Vector3D One\r\n        {\r\n            get { return one; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 1, 0, 0.\r\n        /// </summary>\r\n        public static Vector3D UnitX\r\n        {\r\n            get { return unitX; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 1, 0.\r\n        /// </summary>\r\n        public static Vector3D UnitY\r\n        {\r\n            get { return unitY; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 0, 1.\r\n        /// </summary>\r\n        public static Vector3D UnitZ\r\n        {\r\n            get { return unitZ; }\r\n        }\r\n\r\n        public static Vector3D Up\r\n        {\r\n            get { return up; }\r\n        }\r\n\r\n        public static Vector3D Down\r\n        {\r\n            get { return down; }\r\n        }\r\n\r\n        public static Vector3D Right\r\n        {\r\n            get { return right; }\r\n        }\r\n\r\n        public static Vector3D Left\r\n        {\r\n            get { return left; }\r\n        }\r\n\r\n        public static Vector3D Forward\r\n        {\r\n            get { return forward; }\r\n        }\r\n\r\n        public static Vector3D Backward\r\n        {\r\n            get { return backward; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Vector3D(float x, float y, float z)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n            this.Z = z;\r\n        }\r\n\r\n\r\n        public Vector3D(float value)\r\n        {\r\n            this.X = value;\r\n            this.Y = value;\r\n            this.Z = value;\r\n        }\r\n\r\n\r\n        public Vector3D(Vector2D value, float z)\r\n        {\r\n            this.X = value.X;\r\n            this.Y = value.Y;\r\n            this.Z = z;\r\n        }\r\n\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        /// <summary>\r\n        /// Performs vector addition on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The first vector to add.</param>\r\n        /// <param name=\"value2\">The second vector to add.</param>\r\n        /// <returns>The result of the vector addition.</returns>\r\n        public static Vector3D Add(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            value1.Z += value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector addition on <paramref name=\"value1\"/> and\r\n        /// <paramref name=\"value2\"/>, storing the result of the\r\n        /// addition in <paramref name=\"result\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The first vector to add.</param>\r\n        /// <param name=\"value2\">The second vector to add.</param>\r\n        /// <param name=\"result\">The result of the vector addition.</param>\r\n        public static void Add(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X + value2.X;\r\n            result.Y = value1.Y + value2.Y;\r\n            result.Z = value1.Z + value2.Z;\r\n        }\r\n\r\n\r\n        public static Vector3D Cross(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            Cross(ref vector1, ref vector2, out vector1);\r\n            return vector1;\r\n        }\r\n\r\n        public static void Cross(ref Vector3D vector1, ref Vector3D vector2, out Vector3D result)\r\n        {\r\n            var x = vector1.Y * vector2.Z - vector2.Y * vector1.Z;\r\n            var y = -(vector1.X * vector2.Z - vector2.X * vector1.Z);\r\n            var z = vector1.X * vector2.Y - vector2.X * vector1.Y;\r\n            result.X = x;\r\n            result.Y = y;\r\n            result.Z = z;\r\n        }\r\n\r\n        public static float Distance(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            float result;\r\n            DistanceSquared(ref vector1, ref vector2, out result);\r\n            return (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public static void Distance(ref Vector3D value1, ref Vector3D value2, out float result)\r\n        {\r\n            DistanceSquared(ref value1, ref value2, out result);\r\n            result = (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public static float DistanceSquared(Vector3D value1, Vector3D value2)\r\n        {\r\n            float result;\r\n            DistanceSquared(ref value1, ref value2, out result);\r\n            return result;\r\n        }\r\n\r\n        public static void DistanceSquared(ref Vector3D value1, ref Vector3D value2, out float result)\r\n        {\r\n            result = (value1.X - value2.X) * (value1.X - value2.X) +\r\n                     (value1.Y - value2.Y) * (value1.Y - value2.Y) +\r\n                     (value1.Z - value2.Z) * (value1.Z - value2.Z);\r\n        }\r\n\r\n        public static Vector3D Divide(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            value1.Z /= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D Divide(Vector3D value1, float value2)\r\n        {\r\n            float factor = 1 / value2;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            value1.Z *= factor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector3D value1, float divisor, out Vector3D result)\r\n        {\r\n            float factor = 1 / divisor;\r\n            result.X = value1.X * factor;\r\n            result.Y = value1.Y * factor;\r\n            result.Z = value1.Z * factor;\r\n        }\r\n\r\n        public static void Divide(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X / value2.X;\r\n            result.Y = value1.Y / value2.Y;\r\n            result.Z = value1.Z / value2.Z;\r\n        }\r\n\r\n        public static float Dot(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            return vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z;\r\n        }\r\n\r\n        public static void Dot(ref Vector3D vector1, ref Vector3D vector2, out float result)\r\n        {\r\n            result = vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (!(obj is Vector3D))\r\n                return false;\r\n\r\n            var other = (Vector3D)obj;\r\n            return X == other.X &&\r\n                    Y == other.Y &&\r\n                    Z == other.Z;\r\n        }\r\n\r\n        public bool Equals(Vector3D other)\r\n        {\r\n            return X == other.X &&\r\n                    Y == other.Y &&\r\n                    Z == other.Z;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return (int)(this.X + this.Y + this.Z);\r\n        }\r\n\r\n\r\n        public float Length()\r\n        {\r\n            float result;\r\n            DistanceSquared(ref this, ref zero, out result);\r\n            return (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public float LengthSquared()\r\n        {\r\n            float result;\r\n            DistanceSquared(ref this, ref zero, out result);\r\n            return result;\r\n        }\r\n\r\n\r\n\r\n\r\n        public static Vector3D Multiply(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            value1.Z *= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D Multiply(Vector3D value1, float scaleFactor)\r\n        {\r\n            value1.X *= scaleFactor;\r\n            value1.Y *= scaleFactor;\r\n            value1.Z *= scaleFactor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Multiply(ref Vector3D value1, float scaleFactor, out Vector3D result)\r\n        {\r\n            result.X = value1.X * scaleFactor;\r\n            result.Y = value1.Y * scaleFactor;\r\n            result.Z = value1.Z * scaleFactor;\r\n        }\r\n\r\n        public static void Multiply(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X * value2.X;\r\n            result.Y = value1.Y * value2.Y;\r\n            result.Z = value1.Z * value2.Z;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> pointing in the opposite\r\n        /// direction of <paramref name=\"value\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value\">The vector to negate.</param>\r\n        /// <returns>The vector negation of <paramref name=\"value\"/>.</returns>\r\n        public static Vector3D Negate(Vector3D value)\r\n        {\r\n            value = new Vector3D(-value.X, -value.Y, -value.Z);\r\n            return value;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Stores a <see>Vector3</see> pointing in the opposite\r\n        /// direction of <paramref name=\"value\"/> in <paramref name=\"result\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value\">The vector to negate.</param>\r\n        /// <param name=\"result\">The vector that the negation of <paramref name=\"value\"/> will be stored in.</param>\r\n        public static void Negate(ref Vector3D value, out Vector3D result)\r\n        {\r\n            result.X = -value.X;\r\n            result.Y = -value.Y;\r\n            result.Z = -value.Z;\r\n        }\r\n\r\n        public void Normalize()\r\n        {\r\n            Normalize(ref this, out this);\r\n        }\r\n\r\n        public static Vector3D Normalize(Vector3D vector)\r\n        {\r\n            Normalize(ref vector, out vector);\r\n            return vector;\r\n        }\r\n\r\n        public static void Normalize(ref Vector3D value, out Vector3D result)\r\n        {\r\n            float factor;\r\n            Distance(ref value, ref zero, out factor);\r\n            factor = 1f / factor;\r\n            result.X = value.X * factor;\r\n            result.Y = value.Y * factor;\r\n            result.Z = value.Z * factor;\r\n        }\r\n\r\n        public static Vector3D Reflect(Vector3D vector, Vector3D normal)\r\n        {\r\n            // I is the original array\r\n            // N is the normal of the incident plane\r\n            // R = I - (2 * N * ( DotProduct[ I,N] ))\r\n            Vector3D reflectedVector;\r\n            // inline the dotProduct here instead of calling method\r\n            float dotProduct = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);\r\n            reflectedVector.X = vector.X - (2.0f * normal.X) * dotProduct;\r\n            reflectedVector.Y = vector.Y - (2.0f * normal.Y) * dotProduct;\r\n            reflectedVector.Z = vector.Z - (2.0f * normal.Z) * dotProduct;\r\n\r\n            return reflectedVector;\r\n        }\r\n\r\n        public static void Reflect(ref Vector3D vector, ref Vector3D normal, out Vector3D result)\r\n        {\r\n            // I is the original array\r\n            // N is the normal of the incident plane\r\n            // R = I - (2 * N * ( DotProduct[ I,N] ))\r\n\r\n            // inline the dotProduct here instead of calling method\r\n            float dotProduct = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);\r\n            result.X = vector.X - (2.0f * normal.X) * dotProduct;\r\n            result.Y = vector.Y - (2.0f * normal.Y) * dotProduct;\r\n            result.Z = vector.Z - (2.0f * normal.Z) * dotProduct;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector subtraction on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The vector to be subtracted from.</param>\r\n        /// <param name=\"value2\">The vector to be subtracted from <paramref name=\"value1\"/>.</param>\r\n        /// <returns>The result of the vector subtraction.</returns>\r\n        public static Vector3D Subtract(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            value1.Z -= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector subtraction on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The vector to be subtracted from.</param>\r\n        /// <param name=\"value2\">The vector to be subtracted from <paramref name=\"value1\"/>.</param>\r\n        /// <param name=\"result\">The result of the vector subtraction.</param>\r\n        public static void Subtract(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X - value2.X;\r\n            result.Y = value1.Y - value2.Y;\r\n            result.Z = value1.Z - value2.Z;\r\n        }\r\n\r\n        internal string DebugDisplayString\r\n        {\r\n            get\r\n            {\r\n                return string.Concat(\r\n                    this.X.ToString(), \"  \",\r\n                    this.Y.ToString(), \"  \",\r\n                    this.Z.ToString()\r\n                );\r\n            }\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            StringBuilder sb = new StringBuilder(32);\r\n            sb.Append(\"{X:\");\r\n            sb.Append(this.X);\r\n            sb.Append(\" Y:\");\r\n            sb.Append(this.Y);\r\n            sb.Append(\" Z:\");\r\n            sb.Append(this.Z);\r\n            sb.Append(\"}\");\r\n            return sb.ToString();\r\n        }\r\n\r\n\r\n\r\n        ///// <summary>\r\n        ///// Transforms a vector by a quaternion rotation.\r\n        ///// </summary>\r\n        ///// <param name=\"vec\">The vector to transform.</param>\r\n        ///// <param name=\"quat\">The quaternion to rotate the vector by.</param>\r\n        ///// <param name=\"result\">The result of the operation.</param>\r\n        //        public static void Transform(ref Vector3 vec, ref Quaternion quat, out Vector3 result)\r\n        //        {\r\n        //\t\t// Taken from the OpentTK implementation of Vector3\r\n        //            // Since vec.W == 0, we can optimize quat * vec * quat^-1 as follows:\r\n        //            // vec + 2.0 * cross(quat.xyz, cross(quat.xyz, vec) + quat.w * vec)\r\n        //            Vector3 xyz = quat.Xyz, temp, temp2;\r\n        //            Vector3.Cross(ref xyz, ref vec, out temp);\r\n        //            Vector3.Multiply(ref vec, quat.W, out temp2);\r\n        //            Vector3.Add(ref temp, ref temp2, out temp);\r\n        //            Vector3.Cross(ref xyz, ref temp, out temp);\r\n        //            Vector3.Multiply(ref temp, 2, out temp);\r\n        //            Vector3.Add(ref vec, ref temp, out result);\r\n        //        }\r\n\r\n\r\n\r\n\r\n        #endregion Public methods\r\n\r\n\r\n        #region Operators\r\n\r\n        public static bool operator ==(Vector3D value1, Vector3D value2)\r\n        {\r\n            return value1.X == value2.X\r\n                && value1.Y == value2.Y\r\n                && value1.Z == value2.Z;\r\n        }\r\n\r\n        public static bool operator !=(Vector3D value1, Vector3D value2)\r\n        {\r\n            return !(value1 == value2);\r\n        }\r\n\r\n        public static Vector3D operator +(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            value1.Z += value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator -(Vector3D value)\r\n        {\r\n            value = new Vector3D(-value.X, -value.Y, -value.Z);\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator -(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            value1.Z -= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator *(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            value1.Z *= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator *(Vector3D value, float scaleFactor)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            value.Z *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator *(float scaleFactor, Vector3D value)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            value.Z *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator /(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            value1.Z /= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator /(Vector3D value, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value.X *= factor;\r\n            value.Y *= factor;\r\n            value.Z *= factor;\r\n            return value;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n    public class MoveData\r\n    {\r\n        string label;\r\n        internal List<Tick> units = new List<Tick>();\r\n        internal List<int> tags = new List<int>();\r\n\r\n        public MoveData(string label)\r\n        {\r\n            this.label = label;\r\n        }\r\n\r\n        public MoveData()\r\n        {\r\n        }\r\n\r\n        public static int FindByLabel(List<MoveData> moveDatas, string label)\r\n        {\r\n            for (int i = 0; i < moveDatas.Count; i++)\r\n            {\r\n                if(moveDatas[i]!=null)\r\n                    if (moveDatas[i].label == label) return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        internal bool HasTag(int tag)\r\n        {\r\n            return tags.Contains(tag);\r\n        }\r\n    }\r\n\r\n    public class Tick \r\n    {\r\n        internal Condition condition;\r\n        internal List<object> thingsToHappen = new List<object>();\r\n\r\n        public Tick(object action)\r\n        {\r\n            thingsToHappen.Add(action);\r\n        }\r\n\r\n        public Tick()\r\n        {\r\n        }\r\n    }\r\n    public class Condition\r\n    {\r\n        internal readonly ConditionType type;\r\n        internal readonly Target target;\r\n        internal readonly BaseUtils.Vector2D vector;\r\n\r\n        public Condition(ConditionType type, Target target, BaseUtils.Vector2D vector)\r\n        {\r\n            this.type = type;\r\n            this.target = target;\r\n            this.vector = vector;\r\n        }\r\n    }\r\n\r\n    public enum ConditionType\r\n    {\r\n        CanMove\r\n    }\r\n\r\n    public class SummonEntity\r\n    {\r\n        public readonly int enemyWhich;\r\n        public readonly Vector2D preferentialRowColumn;\r\n\r\n        public SummonEntity(int enemyWhich, Vector2D preferentialRowColumn)\r\n        {\r\n            this.enemyWhich = enemyWhich;\r\n            this.preferentialRowColumn = preferentialRowColumn;\r\n        }\r\n\r\n        internal static SummonEntity Enemy(int v, Vector2D vector2D)\r\n        {\r\n            return new SummonEntity(v, vector2D);\r\n        }\r\n    }\r\n\r\n\r\n    public class Animation\r\n    {\r\n        public readonly Area area = null;\r\n        public readonly Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None;\r\n        public readonly Target target = Target.None;\r\n        \r\n\r\n        public Animation(Target target)\r\n        {\r\n            this.target = target;\r\n        }\r\n\r\n        //public Animation(Area area)\r\n        //{\r\n        //    this.area = area;\r\n        //}\r\n\r\n        public Animation(Target target, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.element = element;\r\n            this.target = target;\r\n        }\r\n\r\n        public Animation(Area area, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None, Target target = Target.None)\r\n        {\r\n            this.area = area;\r\n            this.element = element;\r\n            this.target = target;\r\n        }\r\n    }\r\n\r\n    public class MoveAction\r\n    {\r\n        public readonly Target target;\r\n        public readonly BaseUtils.Vector2D distance;\r\n\r\n        public MoveAction(Target target, BaseUtils.Vector2D amount)\r\n        {\r\n            this.target = target;\r\n            this.distance = amount;\r\n        }\r\n    }\r\n\r\n    public class DealDamageAction\r\n    {\r\n        public readonly Target target = Target.None;\r\n        public readonly Area area;\r\n        public readonly int damage;\r\n        public readonly Pidroh.ConsoleApp.Turnbased.BattleMain.Element element;\r\n\r\n        public DealDamageAction(Area area, int damage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.area = area;\r\n            this.damage = damage;\r\n            this.element = element;\r\n            target = Target.Area;\r\n        }\r\n\r\n        public DealDamageAction(Target target, int damage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.target = target;\r\n            this.damage = damage;\r\n            this.element = element;\r\n        }\r\n    }\r\n\r\n    public class Area\r\n    {\r\n        //public readonly Area area;\r\n        public readonly Target target;\r\n        public readonly List<Vector2D> points = new List<Vector2D>();\r\n\r\n        public Area(Target target)\r\n        {\r\n            this.target = target;\r\n        }\r\n    }\r\n\r\n    public enum Target\r\n    {\r\n        None,  Self, ClosestTarget, ClosestTargetX, Area   \r\n    }\r\n\r\n    \r\n\r\n}\r\n","using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class AsyncTasks\r\n    {\r\n\r\n    }\r\n\r\n    public class AsyncTrack\r\n    {\r\n\r\n    }\r\n\r\n    public abstract class DelayedActions\r\n    {\r\n        List<float> times = new List<float>();\r\n        List<IList> lists = new List<IList>();\r\n\r\n        public void Update(float delta)\r\n        {\r\n            for (int i = 0; i < times.Count; i++)\r\n            {\r\n                times[i] -= delta;\r\n                if (times[i] <= 0)\r\n                {\r\n                    Execute(i);\r\n                    EndTask(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        internal abstract void Execute(int i);\r\n\r\n        internal void Add(float time)\r\n        {\r\n            times.Add(time);\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            return times.Count == 0;\r\n        }\r\n\r\n        internal void EndTask(int i)\r\n        {\r\n            times.RemoveAt(i);\r\n            foreach (var l in lists)\r\n            {\r\n                l.RemoveAt(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class AsyncTaskSetter<T> : DelayedActions\r\n    {\r\n        List<T> ToValue = new List<T>();\r\n        List<Action<T>> setters = new List<Action<T>>();\r\n\r\n        public void Add(T e, Action<T> setter, float time)\r\n        {\r\n            ToValue.Add(e);\r\n            setters.Add((global::System.Action<T>)setter);\r\n            base.Add(time);\r\n        }\r\n\r\n        internal override void Execute(int i)\r\n        {\r\n            setters[i](ToValue[i]);\r\n            ToValue.RemoveAt(i);\r\n            setters.RemoveAt(i);\r\n            \r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class BattleSetup\r\n    {\r\n        public ECSManager ecs;\r\n        public BattleMain battleMain;\r\n        public MoveCreatorProg moveCreator;\r\n        public TimeStamp timeStamp;\r\n\r\n        public BattleSetup(int mode, int stageId, ECSManager ecs)\r\n        {\r\n            this.ecs = ecs;\r\n            timeStamp = new TimeStamp();\r\n            ecs.CreateEntityWithComponent(timeStamp);\r\n            battleMain = new BattleMain(mode, ecs, timeStamp);\r\n            moveCreator = new MoveCreatorProg(ecs);\r\n\r\n\r\n            var stages = ecs.QuickAccessor1<StageData>();\r\n\r\n            var fixedAttack = stages.Entity(stageId).GetComponent<FixedAttackStage>();\r\n            var playerHandPool = battleMain.playerHandPool;\r\n            if (fixedAttack != null)\r\n            {\r\n                \r\n                foreach (var item in fixedAttack.moves)\r\n                {\r\n                    playerHandPool.Add((BattleMain.MoveType)item);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                playerHandPool.Add(BattleMain.MoveType.Fire);\r\n                playerHandPool.Add(BattleMain.MoveType.Ice);\r\n                playerHandPool.Add(BattleMain.MoveType.Thunder);\r\n            }\r\n            var stage = stages.Comp1(stageId);\r\n            var enmys = stage.enemySpawns;\r\n            foreach (var item in enmys)\r\n            {\r\n                ecs.CreateEntityWithComponent(item);\r\n            }\r\n            \r\n            battleMain.MoveDataExecuter = new MoveDataExecuter(battleMain, moveCreator.moveDatas, ecs, timeStamp);\r\n\r\n            List<string> entityRenderTexts = new List<string>();\r\n\r\n            var enemyDatas = new EnemyDataCreator(entityRenderTexts,moveCreator).enemyDatas;\r\n            var battleState = battleMain.battleState;\r\n\r\n            battleMain.BattleConfigure(stage.battleConfig);\r\n\r\n            var enemyFactory = new SpawnEntityFactory(ecs, enemyDatas, battleMain);\r\n            battleMain.ecsInteg = new ECSIntegration(enemyFactory, ecs);\r\n            //battleMain.EnemyFactory = enemyFactory;\r\n\r\n            var enemyAis = ecs.QuickAccessor2<EnemyAI, BattleMain.BattleEntity>();\r\n            var enemyAiStateless = ecs.CreateAccessor(necessary: new Type[] { typeof(EnemyAI) }, not: new Type[] { typeof(EnemyAIState) });\r\n            battleMain.EnemyGenerateMoves = () =>\r\n            {\r\n                while (enemyAiStateless.Length > 0)\r\n                {\r\n                    enemyAiStateless.Get(0).AddComponent<EnemyAIState>();\r\n                }\r\n\r\n                for (int i = 0; i < enemyAis.Length; i++)\r\n                {\r\n                    var ai = enemyAis.Comp1(i);\r\n                    var battler = enemyAis.Comp2(i);\r\n                    var aiState = enemyAis.Entity(i).GetComponent<EnemyAIState>();\r\n                    var moves = ai.moves;\r\n                    for (int j = 0; j < battleState.turnsPerPhase; j++)\r\n                    {\r\n                        int aiPro = (j+ aiState.progress) % moves.Count;\r\n                        var move = moves[aiPro];\r\n                        if (move is MoveUse)\r\n                        {\r\n\r\n                            battler.moves[j] = (move as MoveUse).move;\r\n                        }\r\n                        //be.moves[j] = ;\r\n                    }\r\n                    aiState.progress += battleState.turnsPerPhase;\r\n                }\r\n            };\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// data that will be a part of stagedata so each stage can have it's config\r\n    /// It will also be contained in battlemain.\r\n    /// Should be static, once created.\r\n    /// </summary>\r\n    public class BattleConfig\r\n    {\r\n        public readonly List<int> enemiesToSummon =new List<int>();\r\n        public readonly bool needKillAllEnemies = true;\r\n\r\n        public BattleConfig()\r\n        {\r\n        }\r\n\r\n        public BattleConfig(int[] enemiesToSummon)\r\n        {\r\n            this.enemiesToSummon.AddRange(enemiesToSummon);\r\n        }\r\n\r\n        public BattleConfig(bool needKillAllEnemies)\r\n        {\r\n            this.needKillAllEnemies = needKillAllEnemies;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased.Happs;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n\r\n    public class BattleMain\r\n    {\r\n        public List<BattleEntity> entities = new List<BattleEntity>();\r\n        public BattleState battleState = new BattleState();\r\n        public HappManager happManager = new HappManager();\r\n        Dictionary<MoveType, Vector2D> movementMoves = new Dictionary<MoveType, Vector2D>();\r\n        //Dictionary<MoveType, Point> attackMoves = new Dictionary<MoveType, Point>();\r\n        MoveType[] enemyMoves;\r\n        //public List<Input> inputs = new List<Turnbased.Input>();\r\n        public InputHolder inputs = new InputHolder();\r\n        public List<MoveType> playerHandFixed = new List<MoveType>();\r\n        public List<MoveType> playerHandUnfixed = new List<MoveType>();\r\n        public List<MoveType> playerHandPool = new List<MoveType>();\r\n\r\n        public float timeToChooseMax = 15f;\r\n        public float timeToChoose = -1;\r\n\r\n        public BattleResult battleResult = new BattleResult();\r\n\r\n        internal void BattleConfigure(BattleConfig battleConfig)\r\n        {\r\n            if (battleConfig == null)\r\n            {\r\n                battleConfig = new BattleConfig(needKillAllEnemies: true);\r\n            }\r\n            this.BattleConfig = battleConfig;\r\n            battleState.turnsPerPhase.Val = 3;\r\n\r\n        }\r\n\r\n        int nEnemies;\r\n        public MoveDataExecuter MoveDataExecuter;\r\n        private readonly TimeStamp timeStamp;\r\n        private QuickAccessorTwo<BattleEntity, PickupInfo> pickupAccessor;\r\n        internal ECSIntegration ecsInteg;\r\n\r\n        public Action EnemyGenerateMoves;\r\n\r\n        public BattleConfig BattleConfig { get; private set; }\r\n        public int BoardWidth { get; internal set; }\r\n        public int BoardHeight { get; internal set; }\r\n\r\n        public BattleMain(int mode, ECSManager ecs, TimeStamp timeStamp)\r\n        {\r\n            //this.ecs = ecs;\r\n            this.timeStamp = timeStamp;\r\n            pickupAccessor = ecs.QuickAccessor2<BattleEntity, PickupInfo>();\r\n            movementMoves.Add(MoveType.MoveUp, Vector2D.UnitY);\r\n            movementMoves.Add(MoveType.MoveDown, -Vector2D.UnitY);\r\n            movementMoves.Add(MoveType.MoveLeft, -Vector2D.UnitX);\r\n            movementMoves.Add(MoveType.MoveRight, Vector2D.UnitX);\r\n\r\n            ecs.CreateEntityWithComponent(battleState);\r\n\r\n            playerHandFixed.Clear();\r\n            playerHandFixed.Add(MoveType.MoveRight);\r\n            playerHandFixed.Add(MoveType.MoveLeft);\r\n            playerHandFixed.Add(MoveType.MoveDown);\r\n            playerHandFixed.Add(MoveType.MoveUp);\r\n\r\n            if (mode == 0)\r\n            {\r\n                playerHandUnfixed.Add(MoveType.NormalShot);\r\n                enemyMoves = new MoveType[] {\r\n                    MoveType.MoveUp,\r\n                    MoveType.MoveLeft,\r\n                    MoveType.MoveDown,\r\n                    MoveType.MoveRight,\r\n                    MoveType.NormalShot,\r\n                };\r\n            }\r\n            else\r\n            {\r\n                //playerHandUnfixed.Add(MoveType.Fire);\r\n                //playerHandUnfixed.Add(MoveType.Ice);\r\n                //playerHandUnfixed.Add(MoveType.Thunder);\r\n\r\n\r\n                enemyMoves = new MoveType[] {\r\n                    MoveType.MoveDown,\r\n                    MoveType.MoveLeft,\r\n                    MoveType.MoveUp,\r\n                    MoveType.MoveRight,\r\n                    MoveType.Fire,\r\n                    MoveType.Ice,\r\n                    MoveType.Thunder,\r\n                };\r\n            }\r\n\r\n            //playerHand.Add(MoveType.NormalShot);\r\n\r\n        }\r\n\r\n        internal bool IsVictory()\r\n        {\r\n            return battleResult.result == 1;\r\n        }\r\n\r\n\r\n        public void Init()\r\n        {\r\n\r\n            BattleEntity hero = new BattleEntity();\r\n\r\n            hero.pos.Set(1, 1);\r\n            hero.minPos.Set(0, 0);\r\n            hero.maxPos.Set(2, 2);\r\n            hero.Type = EntityType.hero;\r\n            hero.life = 2;\r\n            for (int i = 0; i < hero.moves.Length; i++)\r\n            {\r\n                hero.moves[i] = -1;\r\n            }\r\n\r\n\r\n            entities.Add(hero);\r\n            ecsInteg.HeroCreated(hero);\r\n            ecsInteg.SpawnEnemies();\r\n\r\n            {\r\n                //GameEntity pickup = new GameEntity();\r\n                //pickup.Type = EntityType.pickup;\r\n                //pickup.pos.Set(0, 2);\r\n                //pickup.life = 2;\r\n                //pickup.graphic = 4;\r\n                //entities.Add(pickup);\r\n            }\r\n            //{\r\n            //    BattleEntity panelEffect = new BattleEntity();\r\n            //    panelEffect.Type = EntityType.paneleffect;\r\n            //    panelEffect.pos.Set(0, 2);\r\n            //    panelEffect.life = 5;\r\n            //    panelEffect.graphic = 5;\r\n            //    panelEffect.randomPosition = true;\r\n            //    panelEffect.drawLife = false;\r\n            //    panelEffect.drawTurn = false;\r\n            //    RandomPosition(panelEffect);\r\n            //    entities.Add(panelEffect);\r\n            //}\r\n\r\n            //{\r\n            //    BattleEntity panelEffect = new BattleEntity();\r\n            //    panelEffect.Type = EntityType.paneleffect;\r\n            //    panelEffect.pos.Set(0, 2);\r\n            //    panelEffect.life = 5;\r\n            //    panelEffect.graphic = 5;\r\n            //    panelEffect.randomPosition = true;\r\n            //    panelEffect.drawLife = false;\r\n            //    panelEffect.drawTurn = false;\r\n            //    RandomPosition(panelEffect);\r\n            //    entities.Add(panelEffect);\r\n            //}\r\n\r\n            Reset();\r\n            ExecutePhase();\r\n        }\r\n\r\n        public BattleEntity NewBattleEntity()\r\n        {\r\n            BattleEntity battleEntity = new BattleEntity();\r\n            entities.Add(battleEntity);\r\n            return battleEntity;\r\n        }\r\n\r\n        internal void Reset()\r\n        {\r\n            for (int i = 0; i < entities.Count; i++)\r\n            {\r\n                entities[i].life = entities[i].maxLife;\r\n            }\r\n            ChangePhase(BattlePhase.EnemyMoveChoice);\r\n            battleState.turn.Val = 0;\r\n            battleState.totalTurns = 0;\r\n            battleState.actingEntity = 0;\r\n            battleState.moveTick_Now.Val = 0;\r\n            battleState.moveTick_Total = 1;\r\n            battleResult.result = 0;\r\n        }\r\n\r\n        internal bool IsOver()\r\n        {\r\n            return battleResult.result != 0;\r\n        }\r\n\r\n        public void Tick()\r\n        {\r\n            FinishPreviousTick();\r\n            bool heroAlive = false;\r\n            bool enemyAlive = false;\r\n            bool pickupObligatoryExist = false;\r\n            foreach (var item in entities)\r\n            {\r\n                if (item.Type == EntityType.enemy)\r\n                {\r\n                    if (item.life > 0)\r\n                        enemyAlive = true;\r\n                }\r\n                if (item.Type == EntityType.hero)\r\n                {\r\n                    if (item.life > 0)\r\n                        heroAlive = true;\r\n                }\r\n            }\r\n            for (int i = 0; i < this.pickupAccessor.Length; i++)\r\n            {\r\n                var pickup = pickupAccessor.Comp2(i);\r\n                if (pickup.necessaryForVictory && pickupAccessor.Comp1(i).Alive)\r\n                {\r\n                    pickupObligatoryExist = true;\r\n                }\r\n            }\r\n            if (battleState.BattleEndActive)\r\n            {\r\n                if (!heroAlive)\r\n                {\r\n                    battleResult.result = 2;\r\n\r\n                }\r\n                else if ((!enemyAlive || !BattleConfig.needKillAllEnemies) && !pickupObligatoryExist)\r\n                {\r\n                    battleResult.result = 1;\r\n                }\r\n            }\r\n\r\n            if (battleResult.result == 0)\r\n            {\r\n                happManager.Tick();\r\n                timeStamp.Advance(1);\r\n                ExecutePhase();\r\n            }\r\n\r\n        }\r\n\r\n        public void Update(float delta)\r\n        {\r\n            if (timeToChoose > 0 && battleState.phase == BattlePhase.PickHands)\r\n            {\r\n                timeToChoose -= delta;\r\n                if (timeToChoose <= 0)\r\n                {\r\n                    Tick();\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        internal void FinishPreviousTick()\r\n        {\r\n            BattlePhase previousPhase = battleState.phase;\r\n            switch (previousPhase)\r\n            {\r\n                case BattlePhase.EnemyMoveChoice:\r\n                    ChangePhase(BattlePhase.HandRecharge);\r\n                    break;\r\n                case BattlePhase.HandRecharge:\r\n                    ChangePhase(BattlePhase.PickHands);\r\n                    break;\r\n                case BattlePhase.PickHands:\r\n                    ChangePhase(BattlePhase.ExecuteMove);\r\n                    break;\r\n                case BattlePhase.ExecuteMove:\r\n                    if (battleState.moveTick_Now >= battleState.moveTick_Total - 1)\r\n                    {\r\n                        battleState.moveTick_Now.Val = 0;\r\n                        battleState.moveTick_Total = 1;\r\n                        bool noMoreUnitsToActThisTurn = true;\r\n                        int i_initial = battleState.actingEntity + 1;\r\n                        if (i_initial < entities.Count)\r\n                        {\r\n                            for (int i = i_initial; i < entities.Count; i++)\r\n                            {\r\n                                if (entities[i].Alive)\r\n                                {\r\n                                    battleState.actingEntity = i;\r\n                                    noMoreUnitsToActThisTurn = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (noMoreUnitsToActThisTurn)\r\n                        {\r\n                            if (battleState.turn >= battleState.turnsPerPhase - 1)\r\n                            {\r\n                                ChangePhase(BattlePhase.EnemyMoveChoice);\r\n                                foreach (var e in entities)\r\n                                {\r\n                                    if (e.randomPosition)\r\n                                    {\r\n                                        //Console.WriteLine(\"RANDOM POS!!\");\r\n                                        RandomPosition(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                battleState.actingEntity = 0;\r\n                                battleState.turn = battleState.turn + 1;\r\n                                battleState.totalTurns += 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        battleState.moveTick_Now.Val += 1;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private static void RandomPosition(BattleEntity e)\r\n        {\r\n            e.pos.X = RandomSupplier.Range(0, 5);\r\n            e.pos.Y = RandomSupplier.Range(0, 2);\r\n        }\r\n\r\n        private void ChangePhase(BattlePhase phase)\r\n        {\r\n            BattlePhase previousPhase = battleState.phase;\r\n            if (phase == previousPhase) return;\r\n            if (phase == BattlePhase.PickHands)\r\n            {\r\n                if (previousPhase != BattlePhase.ConfirmInput)\r\n                {\r\nPidroh.BaseUtils.Extensions.Shuffle<global::Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType>(                    playerHandPool);\r\n                    playerHandUnfixed.Clear();\r\n                    int commandsToAdd = 3;\r\n                    if (commandsToAdd > playerHandPool.Count)\r\n                    {\r\n                        commandsToAdd = playerHandPool.Count;\r\n                    }\r\n                    for (int i = 0; i < commandsToAdd; i++)\r\n                    {\r\n                        playerHandUnfixed.Add(playerHandPool[i]);\r\n                    }\r\n\r\n\r\n                    timeToChoose = timeToChooseMax;\r\n                }\r\n\r\n            }\r\n            if (previousPhase == BattlePhase.ExecuteMove)\r\n            {\r\n                battleState.turn.Val = 0;\r\n                battleState.actingEntity = 0;\r\n                battleState.moveTick_Now.Val = 0;\r\n                battleState.moveTick_Total = 1;\r\n                foreach (var e in entities)\r\n                {\r\n                    for (int i = 0; i < e.moves.Length; i++)\r\n                    {\r\n                        e.moves[i] = -1;\r\n                    }\r\n                }\r\n            }\r\n            battleState.phase = phase;\r\n        }\r\n\r\n        internal void ConfirmInputStart()\r\n        {\r\n            ChangePhase(BattlePhase.ConfirmInput);\r\n            inputs.Clear();\r\n            inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Confirm), InputTags.MISC);\r\n            inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Cancel), InputTags.MISC);\r\n        }\r\n\r\n        private void ExecutePhase()\r\n        {\r\n            var phase = battleState.phase;\r\n            switch (phase)\r\n            {\r\n                case BattlePhase.EnemyMoveChoice:\r\n                    ecsInteg.SpawnEnemies();\r\n                    EnemyGenerateMoves();\r\n                    break;\r\n                case BattlePhase.HandRecharge:\r\n                    break;\r\n                case BattlePhase.PickHands:\r\n                    PickHandInput();\r\n                    break;\r\n                case BattlePhase.ExecuteMove:\r\n                    ecsInteg.SpawnEnemies();\r\n                    ExecuteMoves();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private void PickHandInput()\r\n        {\r\n            inputs.Clear();\r\n            inputs.inputForConfirmation = new Input(InputType.None, -1);\r\n            foreach (var hi in playerHandFixed)\r\n            {\r\n                inputs.Add(new Turnbased.Input(InputType.Move, (int)hi), InputTags.MOVEFIX);\r\n            }\r\n            foreach (var hi in playerHandUnfixed)\r\n            {\r\n                inputs.Add(new Turnbased.Input(InputType.Move, (int)hi), InputTags.MOVEUNFIX);\r\n            }\r\n            inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Redo), InputTags.MISC);\r\n            inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Done), InputTags.MISC);\r\n            inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Help), InputTags.MISC);\r\n            bool enemyExist = false;\r\n            foreach (var item in entities)\r\n            {\r\n                if (item.Type == EntityType.enemy)\r\n                {\r\n                    enemyExist = true;\r\n                }\r\n            }\r\n            //if (enemyExist)\r\n            //    inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Preview), InputTags.MISC);\r\n        }\r\n\r\n        public void InputDone(Input input)\r\n        {\r\n\r\n\r\n            \r\n            if (battleState.phase == BattlePhase.ConfirmInput)\r\n            {\r\n                ProcessInput(input);\r\n            }\r\n            else\r\n            {\r\n                inputs.inputForConfirmation = input;\r\n            }\r\n\r\n        }\r\n\r\n        public void InputConfirmed()\r\n        {\r\n            ChangePhase(BattlePhase.PickHands);\r\n            Input input = inputs.inputForConfirmation;\r\n            inputs.inputForConfirmation = new Input(InputType.None, -1);\r\n            ProcessInput(input);\r\n        }\r\n\r\n        private void ProcessInput(Input input)\r\n        {\r\n            //Console.Write(\"INPUT\");\r\n            if (input.type == InputType.Move)\r\n            {\r\n                MoveType arg1 = (MoveType)input.arg1;\r\n                //Console.Write(\"INPUTTED1\");\r\n                if (playerHandFixed.Contains(arg1) || playerHandUnfixed.Contains(arg1))\r\n                {\r\n\r\n                    //Console.Write(\"INPUTTED2\");\r\n                    MoveChosen(arg1);\r\n                }\r\n\r\n            }\r\n\r\n            if (input.type == InputType.MiscBattle)\r\n            {\r\n                MiscBattleInput misc = (MiscBattleInput)input.arg1;\r\n                //Console.Write(\"INPUT\"+misc);\r\n                if (misc == MiscBattleInput.Redo)\r\n                {\r\n                    foreach (var e in entities)\r\n                    {\r\n                        if (e.Type == EntityType.hero)\r\n                        {\r\n                            for (int i = 0; i < e.moves.Length; i++)\r\n                            {\r\n                                if (e.moves[i] == null)\r\n                                {\r\n                                    e.moves[i] = -1;\r\n                                }\r\n                                int value = e.moves[i];\r\n\r\n                                if (value == -1 || i == battleState.turnsPerPhase)\r\n                                {\r\n                                    if (i > 0)\r\n                                    {\r\n                                        e.moves[i - 1] = -1;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (misc == MiscBattleInput.Done)\r\n                {\r\n                    Tick();\r\n                }\r\n                if (misc == MiscBattleInput.Confirm)\r\n                {\r\n                    InputConfirmed();\r\n                    PickHandInput();\r\n                }\r\n                if (misc == MiscBattleInput.Cancel)\r\n                {\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        internal bool BattleDecided()\r\n        {\r\n            int heroes = 0;\r\n            int enemies = 0;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Type == EntityType.hero)\r\n                {\r\n                    if (e.Alive)\r\n                        heroes++;\r\n                }\r\n                if (e.Type == EntityType.enemy)\r\n                {\r\n                    if (e.Alive)\r\n                        enemies++;\r\n                }\r\n            }\r\n            return heroes == 0 || enemies == 0;\r\n        }\r\n\r\n        public void MoveChosen(MoveType moveType)\r\n        {\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Type == EntityType.hero)\r\n                {\r\n                    for (int i = 0; i < e.moves.Length; i++)\r\n                    {\r\n\r\n                        int value = e.moves[i];\r\n\r\n                        if (value == -1)\r\n                        {\r\n\r\n                            e.moves[i] = (int)moveType;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public void ExecuteMoves()\r\n        {\r\n\r\n            //Console.Write(\"bla\" + battleState.turn.Val);\r\n            //Console.Read();\r\n            BattleEntity attacker = entities[battleState.actingEntity];\r\n            int turn = battleState.turn;\r\n            ExecuteMove(attacker, turn);\r\n        }\r\n\r\n        public void ExecuteMove(BattleEntity actor, int turn)\r\n        {\r\n            MoveDataExecuter.ExecuteMove(actor, turn);\r\n\r\n        }\r\n\r\n        public float CalculateAttackMultiplier(BattleEntity actor)\r\n        {\r\n            var baseD = actor.damageMultiplier;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e != actor)\r\n                {\r\n                    if (e.pos == actor.pos)\r\n                    {\r\n                        if (e.Type == EntityType.paneleffect)\r\n                        {\r\n                            baseD *= 3;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return baseD;\r\n        }\r\n\r\n\r\n        public float CalculateDefenderMultiplier(BattleEntity actor)\r\n        {\r\n            var baseD = 1;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e != actor)\r\n                {\r\n                    if (e.pos == actor.pos)\r\n                    {\r\n                        if (e.Type == EntityType.paneleffect)\r\n                        {\r\n                            baseD *= 3;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return baseD;\r\n        }\r\n\r\n        public class BattleState\r\n        {\r\n            public Value turn = new Value();\r\n            public int totalTurns;\r\n            public Value turnsPerPhase = new Value();\r\n            public Value moveTick_Now = new Value();\r\n            public int moveTick_Total = 0;\r\n            public int actingEntity = 0;\r\n            public BattlePhase phase;\r\n            public bool BattleEndActive = true;\r\n        }\r\n\r\n        public class BattleEntity\r\n        {\r\n            public int life;\r\n            public Vector2D pos = new Vector2D();\r\n            public Vector2D minPos = new Vector2D();\r\n            public Vector2D maxPos = new Vector2D();\r\n            public int[] moves = new int[10];\r\n            public int graphic;\r\n            public int graphicRepeatedIndex;\r\n            public float damageMultiplier = 1;\r\n            public bool drawLife = true;\r\n            public bool drawTurn = true;\r\n            public bool randomPosition = false;\r\n            public Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None;\r\n            public int maxLife = 3;\r\n\r\n            public EntityType Type = Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero;\r\n            public Vector2D PositionV2D { get { return new BaseUtils.Vector2D(pos.X, pos.Y); } }\r\n\r\n            public bool Dead { get { return life <= 0; } }\r\n\r\n            public bool Alive { get { return !this.Dead; } }\r\n\r\n        }\r\n\r\n        public enum MoveType\r\n        {\r\n            DoNothing,\r\n            MoveUp,\r\n            MoveLeft,\r\n            MoveDown,\r\n            MoveRight,\r\n            NormalShot,\r\n            Fire,\r\n            Ice,\r\n            Thunder,\r\n            IceBomb,\r\n            ThunderBomb,\r\n            SummonEntity\r\n        }\r\n\r\n        public enum HappTag\r\n        {\r\n            AttackHit,\r\n            AttackMiss,\r\n            DamageTaken,\r\n            MovementFail\r\n        }\r\n\r\n        public enum BattlePhase\r\n        {\r\n            EnemyMoveChoice,\r\n            HandRecharge,\r\n            PickHands,\r\n            ConfirmInput,\r\n            ExecuteMove,\r\n\r\n        }\r\n\r\n        public enum EntityType\r\n        {\r\n            hero, enemy, pickup, paneleffect\r\n        }\r\n\r\n        public enum Element\r\n        {\r\n            Fire, Ice, Thunder,\r\n            None\r\n        }\r\n\n    \nprivate int __Property__Initializer__BoardWidth=6;private int __Property__Initializer__BoardHeight=3;}\r\n\r\n\r\n\r\n    public class Value\r\n    {\r\n        public float Val { get; set; }\r\n\r\n        public Enum valAsEnum { set { Val = Convert.ToSingle(value); } }\r\n\r\n        internal void Set(int v)\r\n        {\r\n            Val = v;\r\n        }\r\n\r\n        public static Value operator +(Value c1, float c2)\r\n        {\r\n            c1.Val += c2;\r\n            return c1;\r\n        }\r\n\r\n        public static float operator -(Value c1, float c2)\r\n        {\r\n            return c1.Val - c2;\r\n        }\r\n\r\n        public static bool operator ==(Value c1, Value c2)\r\n        {\r\n            bool c2null = object.ReferenceEquals(c2, null);\r\n            bool c1null = object.ReferenceEquals(c1, null);\r\n            if (c2null && c1null)\r\n                return true;\r\n            if (c1null || c2null)\r\n            {\r\n                return false;\r\n            }\r\n            return c1.Val == c2.Val;\r\n        }\r\n\r\n        public static bool operator !=(Value c1, Value c2)\r\n        {\r\n            bool c2null = object.ReferenceEquals(c2, null);\r\n            bool c1null = object.ReferenceEquals(c1, null);\r\n            if (c2null && c1null)\r\n                return false;\r\n            if (c1null || c2null)\r\n            {\r\n                return true;\r\n            }\r\n            return c1.Val != c2.Val;\r\n        }\r\n\r\n        public static implicit operator float(Value d)\r\n        {\r\n            return d.Val;\r\n        }\r\n\r\n        public static implicit operator int(Value d)\r\n        {\r\n            return (int)d.Val;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public class BattleResult\r\n    {\r\n        public int result;\r\n    }\r\n\r\n    public struct Input\r\n    {\r\n        public readonly InputType type;\r\n        public readonly int arg1;\r\n\r\n\r\n\r\n        public Input(InputType type, int arg1)\r\n        {\r\n            this.type = type;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        public Input(InputType type, Enum arg1)\r\n        {\r\n            this.type = type;\r\n            this.arg1 = Convert.ToInt32(arg1);\r\n        }\r\n    }\r\n\r\n    public enum InputType\r\n    {\r\n        None, Move, MiscBattle\r\n    }\r\n\r\n    public enum MiscBattleInput\r\n    {\r\n        Done,\r\n        Redo,\r\n        Preview,\r\n        Confirm,\r\n        Cancel,\r\n        Help\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class ColorStuff\r\n    {\r\n        private static readonly string GoodMain;\r\n        public static string neutralDark = \"#19013b\";\r\n        public static string neutralStrong = \"#2c3e43\";\r\n        private static readonly string GoodSub;\r\n        private static readonly string EvilMain;\r\n        public static string[] colors = new string[20];\r\n\r\n        static ColorStuff()\r\n        {\r\n            for (int i = 0; i < colors.Length; i++)\r\n            {\r\n                colors[i] = \"#400020\";\r\n            }\r\n            //colors[Colors.Hero] = \"#009c8d\";\r\n            //const string heroSub = \"#005f91\";\r\n            //colors[Colors.HeroTurn] = heroSub;\r\n            //colors[Colors.Enemy] = \"#ff0353\";\r\n            //colors[Colors.GridHero] = heroSub;\r\n            //colors[BattleRender.Colors.GridEnemy] = \"#8e0060\";\r\n            //colors[BattleRender.Colors.EnemyTurn] = \"#8e0060\";\r\n            //colors[BattleRender.Colors.Board] = \"#1e486e\";\r\n            //colors[BattleRender.Colors.inputKey] = \"#688690\";\r\n            //colors[BattleRender.Colors.WindowLabel] = \"#1e486e\";\r\n            //colors[BattleRender.Colors.FireAura] = \"#793100\";\r\n            //colors[BattleRender.Colors.IceAura] = \"#005590\";\r\n            //colors[BattleRender.Colors.ThunderAura] = \"#00583d\";\r\n\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero] = \"#8ad896\";\r\n            const string heroSub = \"#4c6d50\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn] = heroSub;\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy] = \"#ff7694\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero] = heroSub;\r\n            const string enemysub = \"#a7464f\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy] = enemysub;\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn] = enemysub;\r\n            colors[BattleRender.Colors.Board] = \"#1e486e\";\r\n            colors[BattleRender.Colors.inputKey] = \"#688690\";\r\n            colors[BattleRender.Colors.WindowLabel] = \"#1e486e\";\r\n            colors[BattleRender.Colors.FireAura] = \"#793100\";\r\n            colors[BattleRender.Colors.IceAura] = \"#005590\";\r\n            colors[BattleRender.Colors.ThunderAura] = \"#00583d\";\r\n            colors[BattleRender.Colors.FireShot] = \"#f82b36\";\r\n            colors[BattleRender.Colors.IceShot] = \"#007eff\";\r\n            colors[BattleRender.Colors.ThunderShot] = \"#a37c00\";\r\n            colors[BattleRender.Colors.BackgroundInput] = \"#080808\";\r\n\r\n\r\n            colors[BattleRender.Colors.inputKey] = \"#9E8664\";\r\n            colors[BattleRender.Colors.InputDescription] = \"#808080\";\r\n            colors[BattleRender.Colors.BackBattle] = \"#000000\";\r\n            colors[BattleRender.Colors.BackgroundInput] = \"#1A1A1A\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn] = \"#00B2B2\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn] = \"#FF0040\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero] = \"#00468C\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy] = \"#8C0023\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero] = \"#66FFFF\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy] = \"#D90036\";\r\n            \r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero] = \"#BFBFBF\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy] = colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero];\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn] = colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero];\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn] = colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero];\r\n            colors[BattleRender.Colors.WindowLabel] = \"#666666\";\r\n            colors[BattleRender.Colors.BackCommand] = \"#333333\";\r\n\r\n            colors[BattleRender.Colors.FireAura] = \"#FF8C66\";\r\n            colors[BattleRender.Colors.IceAura] = \"#66FFFF\";\r\n            colors[BattleRender.Colors.ThunderAura] = \"#FFFF66\";\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased.DebugExtra\r\n{\r\n    public static class DebugEx\r\n    {\r\n        static List<string> messages = new List<string>();\r\n\r\n        public static void Log(string v)\r\n        {\r\n            messages.Add(v);\r\n        }\r\n\r\n        public static void Show()\r\n        {\r\n            Console.Clear();\r\n            foreach (var item in messages)\r\n            {\r\n                Console.WriteLine(item);\r\n                \r\n            }\r\n            Console.Read();\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ECS;\r\nusing System;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    internal class ECSIntegration\r\n    {\r\n\r\n        SpawnEntityFactory enemyFactory;\r\n        ECSManager ecs;\r\n\r\n        public ECSIntegration(SpawnEntityFactory enemyFactory, ECSManager ecs)\r\n        {\r\n            this.enemyFactory = enemyFactory;\r\n            this.ecs = ecs;\r\n        }\r\n\r\n        internal void HeroCreated(BattleMain.BattleEntity hero)\r\n        {\r\n            ecs.CreateEntityWithComponent(hero);\r\n        }\r\n\r\n        internal void SpawnEnemies()\r\n        {\r\n            enemyFactory.Spawn();\r\n        }\r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class EnemyAI\r\n    {\r\n        public readonly List<object> moves = new List<object>();\r\n    }\r\n\r\n    public class EnemyAIState\r\n    {\r\n        public int progress;\r\n    }\r\n\r\n    public class MoveUse\r\n    {\r\n        public readonly int move;\r\n\r\n        public MoveUse()\r\n        {\r\n        }\r\n\r\n        public MoveUse(int move)\r\n        {\r\n            this.move = move;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class SpawnEntityFactory\r\n    {\r\n\r\n        ECSManager ecs;\r\n        List<EnemyData> enemyDatas;\r\n        private readonly BattleMain battleMain;\r\n        private QuickAccessorOne<SpawnData> spawns;\r\n\r\n        public SpawnEntityFactory(ECSManager ecs, List<EnemyData> enemyDatas, BattleMain battleMain)\r\n        {\r\n            this.ecs = ecs;\r\n            //ecs.QuickAccessor1<EnemyData>();\r\n            spawns = ecs.QuickAccessor1<SpawnData>();\r\n            this.enemyDatas = enemyDatas;\r\n            this.battleMain = battleMain;\r\n        }\r\n\r\n        public void Spawn()\r\n        {\r\n            int spawned = 0;\r\n            //for (int i = 0; i < spawns.Count; i++)\r\n            while (spawns.Count > 0)\r\n            {\r\n                SpawnData spawn = spawns.Comp1(0);\r\n                spawns.Entity(0).RemoveComponent(spawn);\r\n                var id = spawn.id;\r\n                BattleMain.EntityType entType = (BattleMain.EntityType)spawn.entityType;\r\n                if(entType == BattleMain.EntityType.pickup)\r\n                {\r\n                    var be = battleMain.NewBattleEntity();\r\n                    be.Type = entType;\r\n                    PickupInfo pickup = new PickupInfo(true);\r\n                    var pickupE = ecs.CreateEntityWithComponent(pickup);\r\n                    pickupE.AddComponent(be);\r\n                    be.pos = spawn.position;\r\n                    be.life = 1;\r\n                    be.maxLife = 1;\r\n                    be.drawLife = false;\r\n                    be.drawTurn = false;\r\n                    be.graphic = 4;\r\n                    \r\n                }\r\n                if (entType == BattleMain.EntityType.enemy)\r\n                {\r\n                    var enemyAI = enemyDatas[id].enemyAI;\r\n                    var enemy = ecs.CreateEntityWithComponent(enemyAI);\r\n                    var be = battleMain.NewBattleEntity();\r\n                    be.pos = spawn.position;\r\n                    be.life = enemyDatas[id].hp;\r\n                    be.maxLife = be.life;\r\n                    be.graphic = enemyDatas[id].render;\r\n                    var entities = battleMain.entities;\r\n                    foreach (var item in entities)\r\n                    {\r\n                        if (item != be && item.graphic == be.graphic)\r\n                        {\r\n                            be.graphicRepeatedIndex++;\r\n                        }\r\n                    }\r\n                    be.minPos = new Vector2D(3, 0);\r\n                    be.maxPos = new Vector2D(5, 2);\r\n                    be.Type = BattleMain.EntityType.enemy;\r\n                    enemy.AddComponent(be);\r\n                    EnemyAIState enemyAiState = new EnemyAIState();\r\n                    enemyAiState.progress = spawned;\r\n                    enemy.AddComponent(enemyAiState);\r\n                    //Console.Write(\"SPAWN\");\r\n                    spawned++;\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    public class PickupInfo\r\n    {\r\n        public bool necessaryForVictory;\r\n\r\n        public PickupInfo(bool necessaryForVictory)\r\n        {\r\n            this.necessaryForVictory = necessaryForVictory;\r\n        }\r\n\r\n        public PickupInfo()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class EnemyData\r\n    {\r\n        public readonly EnemyAI enemyAI;\r\n        public readonly int hp;\r\n        public readonly int render;\r\n\r\n        public EnemyData(EnemyAI enemyAI, int hp, int render)\r\n        {\r\n            this.enemyAI = enemyAI;\r\n            this.hp = hp;\r\n            this.render = render;\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class EnemyDataCreator\r\n    {\r\n        List<string> renderTexts;\r\n        public List<EnemyData> enemyDatas = new List<EnemyData>();\r\n        MoveCreatorProg moveCreatorProg;\r\n\r\n        public EnemyDataCreator(List<string> renderTexts, MoveCreatorProg moveCreatorProg)\r\n        {\r\n            renderTexts.Add(\"@\");\r\n            this.renderTexts = renderTexts;\r\n            this.moveCreatorProg = moveCreatorProg;\r\n            AddEnemy(ai: Actions(\r\n                Moves(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder)\r\n                ), hp:2, renderText:\"%\");\r\n            AddEnemy(ai: Actions(\r\n                Moves(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing)\r\n                ), hp: 3, renderText: \"#\");\r\n            AddEnemy(ai: Actions(\r\n               Moves(\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.MoveRight\r\n                   )\r\n               ), hp: 6, renderText: \"&\");\r\n            AddEnemy(ai: Actions(\r\n                   \r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb,\r\n                   \"Summon\",\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.Fire\r\n\r\n\r\n               ), hp: 45, renderText: \"$\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.MoveUp\r\n\r\n\r\n               ), hp: 3, renderText: \"H\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"J\");\r\n            AddEnemy(ai: Actions(\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"L\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"K\");\r\n            //AddEnemy(ai: Actions(), hp: 3, renderText: \"$\");\r\n            //AddEnemy(ai: Actions(), hp: 5, renderText: \"#\");\r\n\r\n        }\r\n\r\n        private EnemyAI Actions(params object[] obs)\r\n        {\r\n            var ai = new EnemyAI();\r\n            \r\n            foreach (var o in obs)\r\n            {\r\n                if (o is Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)\r\n                {\r\n                    ai.moves.Add(new MoveUse((int)o));\r\n                    continue;\r\n                }\r\n                if (o is string)\r\n                {   \r\n                    ai.moves.Add(new MoveUse(moveCreatorProg.GetMoveId(o as string)));\r\n                    continue;\r\n                }\r\n                if (o is Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[])\r\n                {\r\n                    foreach (var item in o as Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[])\r\n                    {\r\n                        ai.moves.Add(new MoveUse((int)item));\r\n                    }\r\n                    continue;\r\n                }\r\n                ai.moves.Add(o);\r\n            }\r\n            return ai;\r\n        }\r\n\r\n        private Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[] Moves(params Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[] moves)\r\n        {\r\n            return moves;\r\n        }\r\n\r\n        private void AddEnemy(EnemyAI ai, int hp, string renderText)\r\n        {\r\n            int render = renderTexts.Count;\r\n            renderTexts.Add(renderText);\r\n            enemyDatas.Add(new EnemyData(ai, hp, render));\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n    public class StageDataCreator\r\n    {\r\n        //public List<StageData> stages = new List<StageData>();\r\n        private readonly ECSManager ecs;\r\n\r\n        public StageDataCreator(ECSManager ecs)\r\n        {\r\n            this.ecs = ecs;\r\n\r\n            //Add(new StageData(\r\n            //    Enemy(0, new BaseUtils.Vector2D(3, 2)),\r\n            //    Enemy(2, new BaseUtils.Vector2D(3, 1)),\r\n            //    Enemy(2, new BaseUtils.Vector2D(5, 1))\r\n            //    ));\r\n\r\n            //Add(new StageData(\r\n            //  //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n            //  Enemy(5, new BaseUtils.Vector2D(4, 1)),\r\n            //  Enemy(7, new BaseUtils.Vector2D(3, 0))\r\n            //  ));\r\n\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 0)),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 2))\r\n                ).HideLifeUI(), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                new BattleConfig(needKillAllEnemies:false),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 1)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 2)),\r\n                Enemy(4, new BaseUtils.Vector2D(5, 1))\r\n                ).HideLifeUI(), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                new BattleConfig(needKillAllEnemies: false),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 2)),\r\n                Pickup(0, new BaseUtils.Vector2D(1, 2)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 2)),\r\n                Enemy(5, new BaseUtils.Vector2D(5, 2))\r\n                ), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                Enemy(6, new BaseUtils.Vector2D(5, 0))\r\n                ), new FixedAttackStage(\r\n                    (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n               //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n               Enemy(4, new BaseUtils.Vector2D(4, 1))\r\n               ), new FixedAttackStage(\r\n                   (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n               //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n               Enemy(5, new BaseUtils.Vector2D(4, 1))\r\n               ), new FixedAttackStage(\r\n                   (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n              //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n              Enemy(5, new BaseUtils.Vector2D(4, 1)),\r\n              Enemy(7, new BaseUtils.Vector2D(3, 0))\r\n              ), new FixedAttackStage(\r\n                  (int)BattleMain.MoveType.Fire, (int)BattleMain.MoveType.Thunder ));\r\n            Add(\r\n\r\n\r\n                new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(3, 0)),\r\n                Enemy(0, new BaseUtils.Vector2D(5, 2))\r\n                )\r\n                ,\r\n                new StageData(\r\n                Enemy(1, new BaseUtils.Vector2D(3, 2)),\r\n                Enemy(2, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                 new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(4, 1)),\r\n                Enemy(1, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(3, 2)),\r\n                Enemy(2, new BaseUtils.Vector2D(3, 1)),\r\n                Enemy(2, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                new StageData(\r\n                    new BattleConfig(new int[] { 1 }),\r\n                    Enemy(3, new BaseUtils.Vector2D(4, 1))\r\n                )\r\n\r\n                //,\r\n\r\n                //,\r\n                //new StageData(\r\n                //new EnemySpawnData(1, new BaseUtils.Vector2D(4, 1)),\r\n                //new EnemySpawnData(1, new BaseUtils.Vector2D(5, 1)))\r\n                );\r\n            \r\n        }\r\n\r\n        private void Add(params object[] comps)\r\n        {\r\n            \r\n            var e = ecs.CreateEntity();\r\n            foreach (var item in comps)\r\n            {\r\n                e.AddComponent(item);\r\n            }\r\n\r\n        }\r\n\r\n        private SpawnData Pickup(int v, Vector2D vector2D)\r\n        {\r\n            return new SpawnData(v, vector2D, (int)BattleMain.EntityType.pickup);\r\n        }\r\n\r\n        private SpawnData Enemy(int v, Vector2D vector2D)\r\n        {\r\n            return new SpawnData(v, vector2D, (int)BattleMain.EntityType.enemy);\r\n        }\r\n\r\n        private void Add(params StageData[] stageData1)\r\n        {\r\n            foreach (var item in stageData1)\r\n            {\r\n                ecs.CreateEntityWithComponent(item);\r\n            }\r\n            //stages.AddRange(stageData1);\r\n        }\r\n    }\r\n\r\n    public class StageData\r\n    {\r\n        public List<SpawnData> enemySpawns = new List<SpawnData>();\r\n        public BattleConfig battleConfig;\r\n        public bool hideLifeUI = false;\r\n\r\n        public StageData()\r\n        {\r\n        }\r\n\r\n        public StageData(params SpawnData[] spawns)\r\n        {\r\n            enemySpawns.AddRange(spawns);\r\n        }\r\n\r\n        public StageData(BattleConfig battleConfig, params SpawnData[] spawns)\r\n        {\r\n            enemySpawns.AddRange(spawns);\r\n            this.battleConfig = battleConfig;\r\n        }\r\n\r\n        public StageData HideLifeUI()\r\n        {\r\n            hideLifeUI = true;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    public class FixedAttackStage\r\n    {\r\n        public List<int> moves = new List<int>();\r\n        \r\n\r\n        public FixedAttackStage(int move)\r\n        {\r\n            moves.Add(move);\r\n        }\r\n\r\n        public FixedAttackStage(params int[] move)\r\n        {\r\n            moves.AddRange(move);\r\n        }\r\n\r\n        public FixedAttackStage()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class SpawnData\r\n    {\r\n        public readonly int id;\r\n        public readonly int entityType;\r\n        public readonly BaseUtils.Vector2D position;\r\n\r\n        public SpawnData()\r\n        {\r\n        }\r\n\r\n        public SpawnData(int id, Vector2D position, int type)\r\n        {\r\n            this.id = id;\r\n            this.position = position;\r\n            this.entityType = type;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased.Happs;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class MoveDataExecuter\r\n    {\r\n        BattleMain battleMain;\r\n        List<MoveData> moveDatas;\r\n        private HappManager happManager;\r\n        private List<BattleMain.BattleEntity> entities;\r\n        private readonly ECSManager ecs;\r\n        TimeStamp timeStamp;\r\n        List<Vector2D> aux = new List<Vector2D>();\r\n\r\n\r\n        public MoveDataExecuter(BattleMain turnBase, List<MoveData> moveDatas, ECSManager ecs, TimeStamp timeStamp)\r\n        {\r\n            this.battleMain = turnBase;\r\n            this.moveDatas = moveDatas;\r\n            this.ecs = ecs;\r\n            this.timeStamp = timeStamp;\r\n        }\r\n\r\n        public void ExecuteMove(BattleMain.BattleEntity actor, int turn)\r\n        {\r\n\r\n\r\n            var battleState = this.battleMain.battleState;\r\n            entities = this.battleMain.entities;\r\n            int userId = entities.IndexOf(actor);\r\n\r\n            var moveId = actor.moves[turn];\r\n            if (moveId < 0) return;\r\n            var md = moveDatas[moveId];\r\n            if (md == null) return;\r\n            if (md.units.Count == 0) return;\r\n            battleState.moveTick_Total = md.units.Count;\r\n            int moveTick = battleState.moveTick_Now;\r\n            var actions = md.units[moveTick].thingsToHappen;\r\n            happManager = battleMain.happManager;\r\n\r\n\r\n\r\n            foreach (var a in actions)\r\n            {\r\n\r\n                if (a is MoveAction)\r\n                {\r\n                    MoveAction ma = a as MoveAction;\r\n                    var p = ma.distance;\r\n                    actor.pos += p;\r\n                    bool invalidMove =\r\n                        actor.pos.X < actor.minPos.X\r\n                        || actor.pos.Y < actor.minPos.Y\r\n                        || actor.pos.Y > actor.maxPos.Y\r\n                        || actor.pos.X > actor.maxPos.X;\r\n                    foreach (var e in entities)\r\n                    {\r\n                        if (e != actor && e.Alive)\r\n                        {\r\n                            if (actor.pos == e.pos)\r\n                            {\r\n                                invalidMove = true;\r\n                                if (e.Type == BattleMain.EntityType.pickup)\r\n                                {\r\n                                    e.life = 0;\r\n                                    actor.damageMultiplier = 2;\r\n                                    invalidMove = false;\r\n                                }\r\n                                if (e.Type == BattleMain.EntityType.paneleffect)\r\n                                {\r\n                                    invalidMove = false;\r\n                                }\r\n                                if (invalidMove) break;\r\n\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (invalidMove)\r\n                    {\r\n                        //Console.WriteLine(\"Invalid move generate\" + battleState.moveTick_Now.Val);\r\n\r\n                        int actorId = entities.IndexOf(actor);\r\n                        CreateHapp(md, new HappMoveData(actorId), new HappMovementFail(actor.pos));\r\n\r\n\r\n                        battleMain.happManager\r\n                            .Add(new Happ(BattleMain.HappTag.MovementFail))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actorId))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actor.pos.X))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actor.pos.Y));\r\n\r\n                        battleState.moveTick_Total = 1;\r\n                        actor.pos -= p;\r\n                    }\r\n                }\r\n                if (a is DealDamageAction)\r\n                {\r\n                    var dda = a as DealDamageAction;\r\n                    var attackElement = dda.element;\r\n                    \r\n                    if (dda.target == Target.Area)\r\n                    {\r\n                        var area = dda.area;\r\n                        var referenceUserOfArea = ResolveTarget(actor, entities, area.target);\r\n                        int mirroringX = 1;\r\n                        if (actor.Type == BattleMain.EntityType.enemy) //enemies act on opposite side\r\n                        {\r\n                            mirroringX = -1;\r\n                        }\r\n                        foreach (var point in area.points)\r\n                        {\r\n                            var searchPos = point * new BaseUtils.Vector2D(mirroringX, 1) + referenceUserOfArea.pos;\r\n                            //Console.WriteLine(\"Search point \"+searchPos);\r\n                            for (int i = 0; i < entities.Count; i++)\r\n                            {\r\n                                if (entities[i].pos == searchPos)\r\n                                {\r\n                                    DealDamage(actor, dda, entities[i]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        //find target\r\n                        BattleMain.BattleEntity target = ResolveTarget(actor, entities, dda.target);\r\n                        if (target != null)\r\n                        {\r\n                            DealDamage(actor, dda, target);\r\n\r\n                        }\r\n                    }\r\n                }\r\n                if (a is SummonEntity)\r\n                {\r\n                    var se = a as SummonEntity;\r\n                    var enemyWhich = se.enemyWhich;\r\n                    var enemyId = battleMain.BattleConfig.enemiesToSummon[enemyWhich];\r\n                    var entities = battleMain.entities;\r\n                    var positions = GetEmptySpots(side:1);\r\n                    if (positions.Count == 0) return;\r\n\r\n                    Vector2D summonPos = se.preferentialRowColumn;\r\n                    if (!positions.Contains(summonPos))\r\n                    {\r\n                        summonPos = positions[0];\r\n                    }\r\n                    ecs.CreateEntityWithComponent(new SpawnData(enemyId, summonPos, (int)BattleMain.EntityType.enemy));\r\n                    \r\n                }\r\n                if (a is Animation)\r\n                {\r\n                    var anim = a as Animation;\r\n                    BattleMain.BattleEntity target = ResolveTarget(actor, entities, anim.target);\r\n                    var area = anim.area;\r\n                    HappArea happArea = null;\r\n                    if (area != null)\r\n                    {\r\n                        var referenceUserOfArea = ResolveTarget(actor, entities, area.target);\r\n\r\n                        int mirroringX = 1;\r\n                        if (actor.Type == BattleMain.EntityType.enemy) //enemies act on opposite side\r\n                        {\r\n                            mirroringX = -1;\r\n                        }\r\n                        happArea = new HappArea(area, referenceUserOfArea.pos, mirroringX);\r\n                    }\r\n                    int targetId = -1;\r\n                    if (target != null)\r\n                        targetId = entities.IndexOf(target);\r\n                    CreateHapp(md, happArea, new HappMoveData(userId, targetId, anim.element));\r\n\r\n                    if (anim.target != Target.None)\r\n                    {\r\n                        happManager\r\n.Add(new Happ(BattleMain.HappTag.AttackHit))\r\n                        .AddAttribute(new Happ.Attribute().SetValue(entities.IndexOf(target)))\r\n                        .AddAttribute(new Happ.Attribute().SetValue(userId))\r\n                        .AddAttribute(new Happ.Attribute().SetValue((int)anim.element));\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            if (moveTick == md.units.Count - 1)\r\n            {\r\n                foreach (var item in md.units)\r\n                {\r\n                    foreach (var act in item.thingsToHappen)\r\n                    {\r\n                        if (act is DealDamageAction)\r\n                        {\r\n                            ChangeElement(actor, (act as DealDamageAction).element);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        private List<Vector2D> GetEmptySpots(int side = -1)\r\n        {\r\n            aux.Clear();\r\n            int offX = 0;\r\n            if (side == 1) offX = 3;\r\n            int width = battleMain.BoardWidth / 2;\r\n            if (side == -1)\r\n                width = battleMain.BoardWidth;\r\n            for (int i = 0; i < width; i++)\r\n            {\r\n                for (int j = 0; j < battleMain.BoardHeight; j++)\r\n                {\r\n\r\n                    aux.Add(new Vector2D(i+offX,j));\r\n                }\r\n            }\r\n            var entities = battleMain.entities;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Alive && aux.Contains(e.pos))\r\n                {\r\n                    aux.Remove(e.pos);\r\n                }\r\n            }\r\n            return aux;\r\n            \r\n        }\r\n\r\n        private void ChangeElement(BattleMain.BattleEntity actor, BattleMain.Element element)\r\n        {\r\n            if (actor.element == element) return;\r\n            actor.element = element;\r\n            var th = new HappTags((int)MiscHappTags.ChangeElement);\r\n            ecs.CreateEntityWithComponent(th, new HappMoveData(entities.IndexOf(actor), -1, element)).AddComponent(timeStamp.GetSnap());\r\n        }\r\n\r\n        private void CreateHapp(MoveData md, object comp1, object comp2)\r\n        {\r\n            var th = new HappTags(md.tags);\r\n            var e = ecs.CreateEntityWithComponent(th, timeStamp.GetSnap());\r\n            if (comp1 != null) e.AddComponent(comp1);\r\n            if (comp2 != null) e.AddComponent(comp2);\r\n        }\r\n\r\n        private void CreateHapp(int tag, object comp1, object comp2)\r\n        {\r\n            var th = new HappTags(tag);\r\n            var e = ecs.CreateEntityWithComponent(th, timeStamp.GetSnap());\r\n            if (comp1 != null) e.AddComponent(comp1);\r\n            if (comp2 != null) e.AddComponent(comp2);\r\n        }\r\n\r\n        private void DealDamage(BattleMain.BattleEntity actor, DealDamageAction dda, BattleMain.BattleEntity target)\r\n        {\r\n            BattleMain.Element attackElement = dda.element;\r\n            bool elementalBlock = attackElement == target.element && attackElement != BattleMain.Element.None;\r\n            bool superEffective = false;\r\n            int damage = 0;\r\n            int targetId = entities.IndexOf(target);\r\n            if (elementalBlock)\r\n            {\r\n            }\r\n            {\r\n                if (!elementalBlock)\r\n                {\r\n                    var mul = battleMain.CalculateAttackMultiplier(actor);\r\n                    mul *= battleMain.CalculateDefenderMultiplier(target);\r\n                    if (attackElement == BattleMain.Element.Fire && target.element == BattleMain.Element.Ice\r\n                        || attackElement == BattleMain.Element.Thunder && target.element == BattleMain.Element.Fire\r\n                        || attackElement == BattleMain.Element.Ice && target.element == BattleMain.Element.Thunder)\r\n                    {\r\n                        mul *= 3;\r\n                        superEffective = true;\r\n                    }\r\n\r\n                    \r\n\r\n                    damage = dda.damage * (int)mul;\r\n                    target.life -= damage;\r\n                    \r\n                    actor.damageMultiplier = 1;\r\n                    \r\n                    happManager.Add(new Happ(BattleMain.HappTag.DamageTaken))\r\n                    .AddAttribute(new Happ.Attribute().SetValue(targetId));\r\n                }\r\n            }\r\n            this.CreateHapp((int)MiscHappTags.Damage, new HappDamageData(target.element, dda.element, entities.IndexOf(target), damage, superEffective, elementalBlock), null);\r\n            if (target.life <= 0 && !superEffective)\r\n            {\r\n                CreateHapp((int)MiscHappTags.Death, new HappMoveData(targetId), null);\r\n            }\r\n        }\r\n\r\n        private static BattleMain.BattleEntity ResolveTarget(BattleMain.BattleEntity actor, List<BattleMain.BattleEntity> entities, Target targetType)\r\n        {\r\n            if (targetType == Target.Self) return actor;\r\n            BattleMain.BattleEntity target = null;\r\n            float minDis = 10;\r\n            foreach (var e2 in entities)\r\n            {\r\n\r\n                if (e2.Dead) continue;\r\n                if (actor.Type != e2.Type\r\n                    && e2.Type != BattleMain.EntityType.paneleffect\r\n                    && e2.Type != BattleMain.EntityType.pickup)\r\n                {\r\n                    bool sameHeight = actor.pos.Y == e2.pos.Y;\r\n\r\n                    if (sameHeight)\r\n                    {\r\n                        float dis = actor.pos.X - e2.pos.X;\r\n                        if (dis < 0) dis *= -1;\r\n                        if (dis < minDis)\r\n                        {\r\n                            minDis = dis;\r\n                            target = e2;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n\r\n    public class HappTags\r\n    {\r\n        public List<int> tags = new List<int>();\r\n\r\n        public HappTags(List<int> tags)\r\n        {\r\n            this.tags.AddRange(tags);\r\n        }\r\n\r\n        public HappTags(int i)\r\n        {\r\n            tags.Add(i);\r\n        }\r\n\r\n        public HappTags()\r\n        {\r\n            \r\n        }\r\n    }\r\n\r\n    public enum MiscHappTags{\r\n        ChangeElement = 500,\r\n        Damage = 501,\r\n        Death = 502\r\n    }\r\n\r\n    public class HappDamageData\r\n    {\r\n        public readonly BattleMain.Element targetE, damageE;\r\n        public readonly int target;\r\n        public readonly int amount;\r\n        public readonly bool superEffective;\r\n        public readonly bool elementalBlock;\r\n\r\n        public HappDamageData()\r\n        {\r\n        }\r\n\r\n        public HappDamageData(BattleMain.Element targetE, BattleMain.Element damageE, int target, int amount, bool superEffective, bool elementalBlock)\r\n        {\r\n            this.targetE = targetE;\r\n            this.damageE = damageE;\r\n            this.target = target;\r\n            this.amount = amount;\r\n            this.superEffective = superEffective;\r\n            this.elementalBlock = elementalBlock;\r\n        }\r\n    }\r\n\r\n    public class HappMoveData\r\n    {\r\n        public readonly int user;\r\n        public readonly int target = -1;\r\n        public readonly BattleMain.Element element = BattleMain.Element.None;\r\n\r\n        public HappMoveData()\r\n        {\r\n        }\r\n\r\n        public HappMoveData(int user)\r\n        {\r\n            this.user = user;\r\n        }\r\n\r\n        public HappMoveData(int user, int target, BattleMain.Element element)\r\n        {\r\n            this.user = user;\r\n            this.target = target;\r\n            this.element = element;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    public class HappMovementFail\r\n    {\r\n        public readonly Vector2D moveTo;\r\n\r\n        public HappMovementFail(Vector2D moveTo)\r\n        {\r\n            this.moveTo = moveTo;\r\n        }\r\n\r\n        public HappMovementFail()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class HappArea\r\n    {\r\n        public readonly Area area;\r\n        public Vector2D offset = new Vector2D();\r\n        public readonly int mirroringX;\r\n\r\n        public HappArea(Area area)\r\n        {\r\n            this.area = area;\r\n        }\r\n\r\n        public HappArea()\r\n        {\r\n        }\r\n\r\n        public HappArea(Area area, Vector2D offset, int mirroringX)\r\n        {\r\n            this.area = area;\r\n            this.offset = offset;\r\n            this.mirroringX = mirroringX;\r\n        }\r\n    }\r\n\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased.DebugExtra;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased.Happs\r\n{\r\n\r\n    public class HappManager\r\n    {\r\n        public int CurrentTime { get; private set; }\r\n        List<Happ> Happs = new List<Happ>();\r\n        List<HappHandler> handlers = new List<HappHandler>();\r\n        int latestHandled = -1;\r\n\r\n        public void AddHandler(HappHandler hh)\r\n        {\r\n            handlers.Add(hh);\r\n        }\r\n\r\n        public void TryHandle()\r\n        {\r\n            if(latestHandled != CurrentTime)\r\n                Handle();\r\n        }\r\n\r\n        private void Handle()\r\n        {\r\n            latestHandled = CurrentTime;\r\n            foreach (var h in handlers)\r\n            {\r\n                for (int i = Happs.Count - 1; i >= 0; i--)\r\n                {\r\n                    //this check assumes happs are ordered by time stamp\r\n                    //which they should be automatically\r\n                    if (Happs[i].TimeStamp != CurrentTime)\r\n                    {\r\n                        DebugEx.Log(\"Happening not equal to current time\");\r\n                        break;\r\n                    }\r\n                    bool hasTags = true;\r\n                    foreach (var tagsNeeded in h.necessaryTags)\r\n                    {\r\n                        if (!Happs[i].HasTag(tagsNeeded))\r\n                        {\r\n                            hasTags = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (hasTags)\r\n                    {\r\n                        DebugEx.Log(\"Happening handled\");\r\n                        h.Handle(Happs[i]);\r\n                    }\r\n                    else\r\n                    {\r\n                        DebugEx.Log(\"Happening tag is different\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public Happ Add(Happ h)\r\n        {\r\n            h.TimeStamp = CurrentTime;\r\n            Happs.Add(h);\r\n            return h;\r\n        }\r\n\r\n        public void Tick()\r\n        {\r\n            CurrentTime++;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public class Happ\r\n    {\r\n        //public string MainTag;\r\n        public List<int> tags = new List<int>();\r\n        public int TimeStamp;\r\n        List<Attribute> attrs = new List<Attribute>();\r\n\r\n        //public Happ(IConvertible c)\r\n        //{\r\n        //    tags.Add(Convert.ToInt32(c));\r\n        //}\r\n\r\n        public Happ(object mainTag)\r\n        {\r\n            //MainTag = mainTag.ToString();\r\n            tags.Add(Convert.ToInt32(mainTag));\r\n        }\r\n\r\n        public class Attribute\r\n        {\r\n            public float Value { get; private set; }\r\n            public Attribute SetValue(float f)\r\n            {\r\n                Value = f;\r\n                return this;\r\n            }\r\n            public TagHolder tags = new TagHolder();\r\n        }\r\n\r\n        public Happ AddAttribute(Attribute a)\r\n        {\r\n            attrs.Add(a);\r\n            return this;\r\n        }\r\n\r\n        internal int GetAttribute_Int(int index)\r\n        {\r\n            return (int)attrs[index].Value;\r\n        }\r\n\r\n        internal bool HasTag(int tagsNeeded)\r\n        {\r\n            return tags.Contains(tagsNeeded);\r\n        }\r\n    }\r\n\r\n    public class HappHandler\r\n    {\r\n        public List<int> necessaryTags = new List<int>();\r\n        public Action<Happ> Handle;\r\n\r\n        public HappHandler(object mainTag, Action<Happ> handle)\r\n        {\r\n            this.necessaryTags.Add(Convert.ToInt32(mainTag));\r\n            Handle = handle;\r\n        }\r\n    }\r\n\r\n    public class TagHolder\r\n    {\r\n        public List<object> Tags { get; private set; }\r\n\r\n        public bool HasTag(object t)\r\n        {\r\n            return Tags.Contains(t);\r\n        }\r\n\r\n        internal void Add(object v)\r\n        {\r\n            Tags.Add(v);\r\n        }\r\n\n    \nprivate List<object> __Property__Initializer__Tags=new List<object>();}\r\n\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class InputHolder\r\n    {\r\n        public List<Input> inputs = new List<Input>();\r\n        List<InputTags> tags = new List<InputTags>();\r\n        public Input inputForConfirmation;\r\n\r\n        internal void Clear()\r\n        {\r\n            inputs.Clear();\r\n        }\r\n\r\n        internal void Add(Input input, InputTags tag)\r\n        {\r\n            inputs.Add(input);\r\n            tags.Add(tag);\r\n\r\n        }\r\n\r\n        internal bool TagIs(int i2, InputTags tag)\r\n        {\r\n            if (tags.Count <= i2) return false;\r\n            return tags[i2] == tag;\r\n        }\r\n\r\n        internal bool Contains(Input key)\r\n        {\r\n            foreach (var i in inputs)\r\n            {\r\n                if (i.arg1 == key.arg1 && i.type == key.type)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public enum InputTags{\r\n        NONE, MOVEFIX, MOVEUNFIX, MISC\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class MoveCreatorProg\r\n    {\r\n        internal List<MoveData> moveDatas = new List<MoveData>();\r\n        internal List<MoveRenderData> moveRenders = new List<MoveRenderData>();\r\n        AreaCreationUtils areaUtils = new AreaCreationUtils();\r\n        private readonly ECSManager ecs;\r\n\r\n        public MoveCreatorProg(ECSManager ecs)\r\n        {\r\n            this.ecs = ecs;\r\n            MoveData item = new MoveData(\"\");\r\n            moveDatas.Add(item); //do nothing\r\n            moveRenders.Add(new MoveRenderData(\"\", \"\"));\r\n            ecs.CreateEntityWithComponent(item);\r\n            BaseUtils.Vector2D[] directions = new BaseUtils.Vector2D[] {\r\n                \r\n                new BaseUtils.Vector2D(0, 1),\r\n                new BaseUtils.Vector2D(-1, 0),\r\n                new BaseUtils.Vector2D(0, -1),\r\n                new BaseUtils.Vector2D(1, 0), \r\n            };\r\n            string[] moveLabels = new string[] {\r\n                \"Move Up\",\r\n                \"Move Left\",\r\n                \"Move Down\",\r\n                \"Move Right\",\r\n            };\r\n            string[] moveAbrev = new string[] {\r\n                \"^\",\r\n                \"<\",\r\n                \"v\",\r\n                \">\",\r\n            };\r\n            for (int i = 0; i < directions.Length; i++)\r\n            {\r\n                NewMoveData(label:moveLabels[i], condition: new Condition(ConditionType.CanMove, Target.Self, directions[i]), action: new MoveAction(Target.Self, directions[i]), tags: TagArray(MoveDataTags.Movement,  MoveDataTags.HeroInitial));\r\n                NewMoveTextRenderData(name:moveLabels[i], abrev:moveAbrev[i]);\r\n            }\r\n            NewMoveData(\"Gun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.None)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Gun\", \"G\");\r\n\r\n            NewMoveData(\"Firegun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Fire), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Fire)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Firegun\", \"FG\");\r\n\r\n            NewMoveData(\"Icegun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Ice), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Ice)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Icegun\", \"IG\");\r\n\r\n            NewMoveData(\"Thundergun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Thunder), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Thunder)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Thundergun\", \"TG\");\r\n\r\n            Area area = AreaUser().RowForward(width: 1, XDis: 3);\r\n            NewMoveData(\"Icebomb\", ticks: OneTickPerAction(new Animation(area, BattleMain.Element.Ice), new DealDamageAction(area, 1, BattleMain.Element.Ice)), tags: TagArray(MoveDataTags.Bomb));\r\n            NewMoveTextRenderData(\"Icebomb\", \"IB\");\r\n\r\n            NewMoveData(\"Thunderbomb\", ticks: OneTickPerAction(new Animation(area, BattleMain.Element.Thunder), new DealDamageAction(area, 1, BattleMain.Element.Thunder)), tags: TagArray(MoveDataTags.Bomb));\r\n            NewMoveTextRenderData(\"Thunderbomb\", \"TB\");\r\n\r\n            NewMoveData(\"Summon\", ticks: OneTickPerAction(SummonEntity.Enemy(0, new Vector2D(5,0))), tags: TagArray(MoveDataTags.Summon));\r\n            NewMoveTextRenderData(\"Summon\", \"SU\");\r\n            \r\n        }\r\n\r\n        internal int GetMoveId(string v)\r\n        {\r\n            return MoveData.FindByLabel(moveDatas, v);\r\n        }\r\n\r\n        private AreaCreationUtils AreaUser()\r\n        {\r\n            areaUtils.target = Target.Self;\r\n            return areaUtils;\r\n        }\r\n\r\n        public class AreaCreationUtils\r\n        {\r\n            public Target target;\r\n            int height = 3;\r\n\r\n            internal Area RowForward(int width, int XDis)\r\n            {\r\n                var ra = new Area(target);\r\n                int offsetY = (int)Math.Floor((float)height / 2f);\r\n                for (int i = 0; i < width; i++)\r\n                {\r\n                    for (int j = 0; j < height; j++)\r\n                    {\r\n                        \r\n                        ra.points.Add(new Vector2D(i+XDis, j-offsetY));\r\n                    }\r\n                }\r\n                return ra;\r\n            }\r\n        }\r\n\r\n\r\n        private void NewMoveTextRenderData(string name, string abrev)\r\n        {\r\n            moveRenders.Add(new MoveRenderData(name, abrev));\r\n        }\r\n\r\n        private void NewMoveData(string label, Tick[] ticks, object[] tags)\r\n        {\r\n            var mv = new MoveData(label);\r\n            mv.units.AddRange(ticks);\r\n            foreach (var item in tags)\r\n            {\r\n                mv.tags.Add(Convert.ToInt32(item));\r\n            }\r\n            ecs.CreateEntityWithComponent(mv);\r\n            moveDatas.Add(mv);\r\n        }\r\n\r\n        private void NewMoveData(string label, Condition condition, object action, object[] tags)\r\n        {\r\n            var mv = new MoveData(label);\r\n            Tick tick = new Tick();\r\n            tick.condition = condition;\r\n            tick.thingsToHappen.Add(action);\r\n            mv.units.Add(tick);\r\n            foreach (var item in tags)\r\n            {\r\n                mv.tags.Add(Convert.ToInt32(item));\r\n            }\r\n            ecs.CreateEntityWithComponent(mv);\r\n            moveDatas.Add(mv);\r\n        }\r\n\r\n        private Tick[] OneTickPerAction(params object[] actions)\r\n        {\r\n            Tick[] ticks = new Tick[actions.Length];\r\n            for (int i = 0; i < ticks.Length; i++)\r\n            {\r\n                ticks[i] = new Tick(actions[i]);\r\n            }\r\n            return ticks;\r\n        }\r\n\r\n        private object[] TagArray(params object[] args)\r\n        {\r\n            return args;\r\n        }\r\n    }\r\n\r\n    public class MoveRenderData\r\n    {\r\n        public string Label;\r\n        public string Abrev;\r\n\r\n        public MoveRenderData(string label, string abrev)\r\n        {\r\n            this.Label = label;\r\n            this.Abrev = abrev;\r\n        }\r\n\r\n        public string Description { get; internal set; }\r\n    }\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n\r\n    public class Accessor\r\n    {\r\n        public int Length { get { return SelectedEntities.Count; } }\r\n\r\n        internal Type[] TypesProhibited { get; set; }\r\n\r\n        internal Type[] TypesNecessary;\r\n        internal List<Entity> SelectedEntities = new List<Entity>();\r\n\r\n        public Accessor(params Type[] s)\r\n        {\r\n            TypesNecessary = s;\r\n        }\r\n\r\n        internal bool EntityAdded(Entity e)\r\n        {\r\n            return SelectedEntities.Contains(e);\r\n        }\r\n\r\n        public Entity Get(int i)\r\n        {\r\n            return SelectedEntities[i];\r\n        }\r\n    }\r\n\r\n    public class QuickAccessorOne<T1>\r\n    {\r\n\r\n        public QuickAccessorOne()\r\n        {\r\n            accessor = new Accessor(typeof(T1));\r\n        }\r\n\r\n        internal Accessor accessor;\r\n        public int Count { get { return accessor.Length; } }\r\n        \r\n\r\n        public T1 Comp1(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T1>();\r\n        }\r\n\r\n        public Entity Entity(int i)\r\n        {\r\n            return accessor.SelectedEntities[i];\r\n        }\r\n    }\r\n    public class QuickAccessorTwo<T1, T2> \r\n    {\r\n\r\n        internal Accessor accessor;\r\n        public int Length { get { return accessor.Length; } }\r\n\r\n        public T1 Comp1(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T1>();\r\n        }\r\n\r\n        public Entity Entity(int i)\r\n        {\r\n            return accessor.SelectedEntities[i];\r\n        }\r\n\r\n        public QuickAccessorTwo()\r\n        {\r\n            accessor = new Accessor(typeof(T1), typeof(T2));\r\n        }\r\n\r\n        \r\n\r\n        public T2 Comp2(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T2>();\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public class ClonedState\r\n    {\r\n        internal Dictionary<Type, object[]> comps = new Dictionary<Type, object[]>();\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public class ECSManager\r\n    {\r\n\r\n        private static ECSManager[] managers = new ECSManager[20];\r\n        Dictionary<Type, object[]> comps = new Dictionary<Type, object[]>();\r\n        private int ECSId;\r\n        int entityIdMax = -1;\r\n        List<Accessor> accessors = new List<Accessor>();\r\n\r\n        Dictionary<Type, Action<Object, Object>> CopyMethods = new Dictionary<Type, Action<object, object>>();\r\n\r\n        private ECSManager() { }\r\n\r\n        public ProcessorAccessor CreateProcessor(Accessor accessor, Action<Accessor> action)\r\n        {\r\n\r\n            return new ProcessorAccessor(action, accessor);\r\n        }\r\n\r\n        public void AddCopyMethod(Type type, Action<object, object> copyMetho)\r\n        {\r\n            CopyMethods.Add(type, (global::System.Action<object, object>)copyMetho);\r\n        }\r\n\r\n        public Accessor CreateAccessor(Type[] necessary, Type[] not)\r\n        {\r\n            var acc = new Accessor(necessary);\r\n            acc.TypesProhibited = not;\r\n            AddAccessor(acc);\r\n            return acc;\r\n\r\n        }\r\n\r\n        public QuickAccessorTwo<T1, T2> QuickAccessor2<T1, T2>()\r\n        {\r\n            QuickAccessorTwo<T1, T2> accessor = new QuickAccessorTwo<T1, T2>();\r\n            AddAccessor(accessor.accessor);\r\n            return accessor;\r\n        }\r\n\r\n        public QuickAccessorOne<T1> QuickAccessor1<T1>()\r\n        {\r\n            QuickAccessorOne<T1> accessor = new QuickAccessorOne<T1>();\r\n            AddAccessor(accessor.accessor);\r\n            return accessor;\r\n        }\r\n\r\n\r\n\r\n        \r\n\r\n        #region static methods\r\n\r\n\r\n        internal static ECSManager GetInstance(Entity e)\r\n        {\r\n            return managers[e.ecs];\r\n        }\r\n\r\n        public static ECSManager Create()\r\n        {\r\n\r\n            for (int i = 0; i < managers.Length; i++)\r\n            {\r\n                if (managers[i] == null)\r\n                {\r\n                    managers[i] = new ECSManager();\r\n                    managers[i].ECSId = i;\r\n                    return managers[i];\r\n                }\r\n\r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n        #endregion\r\n\r\n        public Entity CreateEntityWithComponent(object v)\r\n        {\r\nEntity e;\n            CreateEntity(out e);\r\n            AddComponent(e, v);\r\n            return e;\r\n        }\r\n\r\n        public Entity CreateEntityWithComponent(object v, object v2)\r\n        {\r\nEntity e;\n            CreateEntity(out e);\r\n            AddComponent(e, v);\r\n            AddComponent(e, v2);\r\n            return e;\r\n        }\r\n\r\n        public Entity CreateEntity(out Entity e)\r\n        {\r\n            entityIdMax++;\r\n            Entity entity = new Entity(this.ECSId, entityIdMax);\r\n            e = entity;\r\n            return entity;\r\n        }\r\n\r\n        public Entity CreateEntity()\r\n        {\r\n            entityIdMax++;\r\n            Entity entity = new Entity(this.ECSId, entityIdMax);\r\n            return entity;\r\n        }\r\n\r\n\r\n        public ProcessorFlex<T1, T2> QuickProcessorFlex<T1, T2>(Action<QuickAccessorTwo<T1, T2>> p)\r\n        {\r\n            ProcessorFlex<T1, T2> processorFlex = new ProcessorFlex<T1, T2>(p);\r\n            QuickAccessorTwo<T1, T2> accessor = processorFlex.accessor;\r\n            Accessor accessor1 = accessor.accessor;\r\n            AddAccessor(accessor1);\r\n            return processorFlex;\r\n        }\r\n\r\n        private void AddAccessor(Accessor accessor1)\r\n        {\r\n            accessors.Add(accessor1);\r\n            for (int i = 0; i <= entityIdMax; i++)\r\n            {\r\n                UpdateAccessorEntity(accessor1, i);\r\n            }\r\n\r\n        }\r\n\r\n        private void UpdateAccessorEntity(Accessor accessor, int entityId)\r\n        {\r\n            Entity entity = new Entity(ECSId, entityId);\r\n            bool belong = HasAllComps(accessor.TypesNecessary, entityId) && HasNoneOfTheseComps(accessor.TypesProhibited, entityId);\r\n            bool member = accessor.EntityAdded(entity);\r\n\r\n            if (belong != member)\r\n            {\r\n                if (belong)\r\n                {\r\n                    accessor.SelectedEntities.Add(entity);\r\n                }\r\n                else\r\n                {\r\n                    //Console.WriteLine(\"REMOVED ENTITY \"+accessor.TypesNecessary[0]);\r\n                    accessor.SelectedEntities.Remove(entity);\r\n                    //Console.WriteLine(accessor.EntityAdded(entity)+\" BELONG\");\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        public void CloneState(ClonedState cs)\r\n        {\r\n            var comps = this.comps;\r\n            Dictionary<Type, object[]> comps2 = cs.comps;\r\n            Copy(comps, comps2);\r\n        }\r\n\r\n        public void RestoreState(ClonedState cs)\r\n        {\r\n            var comps = this.comps;\r\n            Dictionary<Type, object[]> comps2 = cs.comps;\r\n            Copy(comps2, comps);\r\n\r\n            for (int i = 0; i <=\r\n                \r\n                \r\n                entityIdMax; i++)\r\n            {\r\n                foreach (var item in accessors)\r\n                {\r\n                    UpdateAccessorEntity(item, i);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        List<Type> aux = new List<Type>();\r\n\r\n        private void Copy(Dictionary<Type, object[]> from, Dictionary<Type, object[]> to)\r\n        {\r\n            aux.Clear();\r\n\r\n            foreach (var c in from)\r\n            {\r\n                Type type = c.Key;\r\n                aux.Add(type);\r\n                if (!to.ContainsKey(type))\r\n                {\r\n                    to.Add(type, new object[300]);\r\n                }\r\n                var toArray = to[type];\r\n                var origin = c.Value;\r\n                Copy(to, type, toArray, origin);\r\n            }\r\n            foreach (var c in to) //checks types in to, so it can be through\r\n            {\r\n                Type type = c.Key;\r\n                if (!aux.Contains(type))\r\n                {\r\n                    aux.Add(type);\r\n                    var toArray = c.Value; //access inverted when compared to previous\r\n                    //var origin = from[type];\r\n                    for (int i = 0; i < toArray.Length; i++)\r\n                    {\r\n                        toArray[i] = null;\r\n                        //Console.WriteLine(\"Removing entity\");\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        private void Copy(Dictionary<Type, object[]> to, Type type, object[] toArray, object[] origin)\r\n        {\r\n            Action<Object, Object> copyMethod = null;\r\n            CopyMethods.TryGetValue(type, out copyMethod);\r\n\r\n            for (int i = 0; i < origin.Length; i++)\r\n            {\r\n                if (origin[i] == null)\r\n                {\r\n                    if (toArray[i] != null)\r\n                    {\r\n                        //Console.WriteLine(\"Removing entity\");\r\n                        toArray[i] = null;\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    //Console.WriteLine(type);\r\n                    if (toArray[i] == null)\r\n                        toArray[i] = Activator.CreateInstance(type);\r\n                    if(copyMethod != null)\r\n                        copyMethod(origin[i], toArray[i]);\r\n\r\n                    //DeepCloneHelper.DeepCopyPartial(origin[i], toArray[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        internal T AddComponent<T>(Entity e) where T : new()\r\n        {\r\n            T t = new T();\r\n            AddComponent(e, t);\r\n\r\n            return t;\r\n        }\r\n\r\n        public void AddComponent(Entity e, object t)\r\n        {\r\n            Type type = t.GetType();\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                comps.Add(type, new object[300]);\r\n            }\r\n            comps[type][e.id] = t;\r\n            foreach (var item in accessors)\r\n            {\r\n                UpdateAccessorEntity(item, e.id);\r\n\r\n            }\r\n        }\r\n\r\n        public void RemoveComponent(Entity e, object t)\r\n        {\r\n            Type type = t.GetType();\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                comps.Add(type, new object[300]);\r\n            }\r\n            comps[type][e.id] = null;\r\n            foreach (var item in accessors)\r\n            {\r\n                UpdateAccessorEntity(item, e.id);\r\n\r\n            }\r\n        }\r\n\r\n        private bool HasAllComponents(Entity e, Type[] typesNecessary)\r\n        {\r\n            int id = e.id;\r\n            return HasAllComps(typesNecessary, id);\r\n        }\r\n\r\n        private bool HasAllComps(Type[] typesNecessary, int id)\r\n        {\r\n            foreach (var type in typesNecessary)\r\n            {\r\n                if (!comps.ContainsKey(type))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                if (comps[type][id] == null)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        private bool HasNoneOfTheseComps(Type[] typesProhibited, int id)\r\n        {\r\n            if (typesProhibited == null) return true;\r\n            foreach (var type in typesProhibited)\r\n            {\r\n                if (comps.ContainsKey(type))\r\n                {\r\n                    if (comps[type][id] != null)\r\n                        return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        internal T GetComponent<T>(Entity e)\r\n        {\r\n            Type type = typeof(T);\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                //comps.Add(type, new object[300]);\r\n                return default(T);\r\n            }\r\n            return (T)comps[type][e.id];\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public struct Entity : IEquatable<Entity>\r\n    {\r\n        readonly internal int ecs;\r\n        readonly internal int id;\r\n\r\n        public Entity(int ecs, int id)\r\n        {\r\n            this.ecs = ecs;\r\n            this.id = id;\r\n        }\r\n\r\n        public bool Equals(Entity other)\r\n        {\r\n            return other.id == this.id && other.ecs == this.ecs;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static class ExtensionMethods\r\n    {\r\n\r\n        public static void RemoveComponent(this Entity e, object comp)\r\n        {\r\n            ECSManager.GetInstance(e).RemoveComponent(e, comp);\r\n        }\r\n\r\n        public static T AddComponent<T>(this Entity e) where T: new()\r\n        {\r\n            return ECSManager.GetInstance(e).AddComponent<T>(e);\r\n        }\r\n        public static void AddComponent(this Entity e, object comp)\r\n        {\r\n            ECSManager.GetInstance(e).AddComponent(e, comp);\r\n        }\r\n        public static T GetComponent<T>(this Entity e)\r\n        {\r\n            return ECSManager.GetInstance(e).GetComponent<T>(e);\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public class ProcessorFlex<T1, T2>\r\n    {\r\n        private Action<QuickAccessorTwo<T1, T2>> p;\r\n        internal QuickAccessorTwo<T1, T2> accessor;\r\n\r\n        public ProcessorFlex(Action<QuickAccessorTwo<T1, T2>> p)\r\n        {\r\n            this.p = p;\r\n            accessor = new QuickAccessorTwo<T1, T2>();\r\n        }\r\n\r\n        public void Run()\r\n        {\r\n            p(accessor);\r\n        }\r\n    }\r\n\r\n    public class ProcessorAccessor\r\n    {\r\n        private Action<Accessor> p;\r\n\r\n        Accessor a;\r\n\r\n        public ProcessorAccessor(Action<Accessor> p, Accessor a)\r\n        {\r\n            this.p = p;\r\n            this.a = a;\r\n        }\r\n\r\n        public void Run()\r\n        {\r\n            p(a);\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextWorld\r\n    {\r\n        public Palette palette = DefaultPalettes.C4KiroKaze;\r\n        List<TextEntity> activeAgents = new List<TextEntity>();\r\n        List<TextEntity> freeBoards = new List<TextEntity>();\r\n        List<TextAnimation> animations = new List<TextAnimation>();\r\n        public TextBoard mainBoard;\r\n        int latestId = -1;\r\n\r\n        public T AddAnimation<T>(T ta) where T : TextAnimation\r\n        {\r\n            animations.Add(ta);\r\n            ta.RegisterLists();\r\n            return ta;\r\n        }\r\n\r\n        public void Init(int width, int height)\r\n        {\r\n            mainBoard = new TextBoard(width, height);\r\n\r\n        }\r\n\r\n        public void Draw()\r\n        {\r\n            mainBoard.Reset();\r\n            DrawChildren();\r\n        }\r\n\r\n        public void DrawChildren()\r\n        {\r\n            for (int i = 0; i < activeAgents.Count; i++)\r\n            {\r\n                activeAgents[i].ResetAnimation();\r\n                foreach (var anim in animations)\r\n                {\r\n                    anim.Modify(activeAgents[i]);\r\n                }\r\n                if (activeAgents[i].freeIfIdle && !activeAgents[i].animating)\r\n                {\r\n                    freeBoards.Add(activeAgents[i]);\r\n                    activeAgents.Remove(activeAgents[i]);\r\n                    i--;\r\n                }\r\n                else\r\n                {\r\n                    mainBoard.Insert(activeAgents[i].Animation);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        public TextEntity GetFreeEntity(int w, int h)\r\n        {\r\n            TextEntity te;\r\n            if (freeBoards.Count > 0)\r\n            {\r\n                te = freeBoards[freeBoards.Count - 1];\r\n                freeBoards.RemoveAt(freeBoards.Count - 1);\r\n            }\r\n            else\r\n            {\r\n                te = new TextEntity();\r\n                te.id = ++latestId;\r\n\r\n            }\r\n\r\n            activeAgents.Add(te);\r\n            te.freeIfIdle = false;\r\n            te.SetSize(w, h);\r\n            te.ResetFull();\r\n            return te;\r\n        }\r\n\r\n        public TextEntity GetTempEntity(int w, int h)\r\n        {\r\n            var te = GetFreeEntity(w, h);\r\n            te.freeIfIdle = true;\r\n            return te;\r\n        }\r\n\r\n        public void AdvanceTime(float v)\r\n        {\r\n            foreach (var anim in animations)\r\n            {\r\n                anim.Update(v);\r\n            }\r\n        }\r\n\r\n        public void TryEndAnimations()\r\n        {\r\n            foreach (var anim in animations)\r\n            {\r\n                anim.TryEnd();\r\n            }\r\n        }\r\n\r\n        internal void Free(List<TextEntity> entities)\r\n        {\r\n            \r\n            freeBoards.AddRange(entities);\r\n            foreach (var item in entities)\r\n            {\r\n                activeAgents.Remove(item);\r\n            }\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            foreach (var anim in animations)\r\n            {\r\n                if (!anim.IsDone()) return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public class TextEntity\r\n    {\r\n        public int id;\r\n        public TextBoard Origin;\r\n        public TextBoard Animation;\r\n        public bool freeIfIdle = false;\r\n        internal bool animating;\r\n\r\n        public int Height { get { return Origin.Height; } }\r\n        public int Width { get { return Origin.Width; } }\r\n\r\n        public TextAnimation.BaseData AnimBase(float length)\r\n        {\r\n            return new TextAnimation.BaseData(length, 0, id);\r\n        }\r\n\r\n        internal Vector2D GetPosition()\r\n        {\r\n            return Origin.Position;\r\n        }\r\n\r\n        internal void ResetAnimation()\r\n        {\r\n            animating = false;\r\n            Animation.Set(Origin);\r\n        }\r\n\r\n        internal void ResetFull()\r\n        {\r\n            Origin.ResetInvisible();\r\n        }\r\n\r\n        internal void SetPosition(int x, int y)\r\n        {\r\n            Origin.Position = new Vector2D(x,y);\r\n        }\r\n\r\n        internal void SetPosition(Vector2D vector2D)\r\n        {\r\n            Origin.Position = vector2D;\r\n        }\r\n\r\n        internal void SetSize(int w, int h)\r\n        {\r\n            if (Origin == null)\r\n            {\r\n                Origin = new TextBoard(w, h);\r\n                Animation = new TextBoard(w, h);\r\n            }\r\n            Origin.Resize(w, h);\r\n            Animation.Resize(w, h);\r\n\r\n        }\r\n    }\r\n\r\n    public class DelaysAnimation : TextAnimation\r\n    {\r\n        protected override void RequestRegisterLists()\r\n        {\r\n            \r\n        }\r\n\r\n        internal void Delay(float v)\r\n        {\r\n            Add(new BaseData(v, 0, -1));\r\n        }\r\n    }\r\n\r\n\r\n    public class PositionAnimation : TextAnimation<PositionAnimation.PositionData>\r\n    {\r\n\r\n        public override void Modify(TextEntity entity, PositionData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            TextBoard target = entity.Animation;\r\n            if (mainData.permanent)\r\n                target = entity.Origin;\r\n            target.Position = Vector2D.InterpolateRounded(mainData.startPosition, mainData.endPosition, progress / length);\r\n\r\n        }\r\n\r\n        public struct PositionData\r\n        {\r\n            public readonly bool permanent;\r\n            public readonly Vector2D startPosition, endPosition;\r\n\r\n            public PositionData(Vector2D startPosition, Vector2D endPosition, bool perm = false)\r\n            {\r\n                this.startPosition = startPosition;\r\n                this.endPosition = endPosition;\r\n                this.permanent = perm;\r\n            }\r\n        }\r\n    }\r\n\r\n    public abstract class TextAnimation<T> : TextAnimation\r\n    {\r\n        protected List<T> mainData = new List<T>();\r\n        protected override void RequestRegisterLists()\r\n        {\r\n            base.RegisterList(mainData);\r\n        }\r\n\r\n        public void Add(BaseData baseData, T mainD)\r\n        {\r\n            base.Add(baseData);\r\n            mainData.Add(mainD);\r\n        }\r\n\r\n        public override void Modify(TextEntity entity, int index, float progress, float length)\r\n        {\r\n            Modify(entity, mainData[index], progress, length);\r\n        }\r\n\r\n        public virtual void Modify(TextEntity entity, T mainData, float progress, float length)\r\n        {\r\n        }\r\n\r\n        //internal override void Execute(int index, BaseData baseData)\r\n        //{\r\n        //    this.Execute(mainData[index], baseData);\r\n        //}\r\n\r\n        //public abstract void Execute(T mainData, BaseData baseData);\r\n    }\r\n\r\n    public abstract class TextAnimation\r\n    {\r\n\r\n        public struct BaseData\r\n        {\r\n            public readonly float length;\r\n            public readonly float progress;\r\n            public readonly int target;\r\n\r\n            public BaseData(float length, float progress, int target)\r\n            {\r\n                this.length = length;\r\n                this.progress = progress;\r\n                this.target = target;\r\n            }\r\n        }\r\n        List<float> length = new List<float>();\r\n        List<float> progress = new List<float>();\r\n        List<int> targets = new List<int>();\r\n        List<IList> lists = new List<IList>();\r\n\r\n        public void RegisterLists()\r\n        {\r\n            lists.Add(length);\r\n            lists.Add(progress);\r\n            lists.Add(targets);\r\n            RequestRegisterLists();\r\n        }\r\n\r\n        protected abstract void RequestRegisterLists();\r\n\r\n        public void Update(float delta)\r\n        {\r\n            for (int i = 0; i < progress.Count; i++)\r\n            {\r\n                progress[i] += delta;\r\n                if (progress[i] >= length[i])\r\n                {\r\n                    progress[i] = length[i];\r\n                }\r\n                else\r\n                {\r\n                    //Execute(i, new BaseData(length[i],progress[i], targets[i]));\r\n                }\r\n            }\r\n        }\r\n\r\n        //internal abstract void Execute(int index, BaseData baseData);\r\n\r\n        internal void Add(BaseData bd)\r\n        {\r\n            progress.Add(bd.progress);\r\n            targets.Add(bd.target);\r\n            length.Add(bd.length);\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            foreach (var item in lists)\r\n            {\r\n                if (item.Count != progress.Count)\r\n                {\r\n                    string s = null;\r\n                    s.Trim();\r\n                }\r\n            }\r\n            return progress.Count == 0;\r\n        }\r\n\r\n        internal void EndTask(int i)\r\n        {\r\n            foreach (var l in lists)\r\n            {\r\n\r\n                l.RemoveAt(i);\r\n            }\r\n        }\r\n\r\n        internal void RegisterList(IList mainData)\r\n        {\r\n            lists.Add(mainData);\r\n        }\r\n\r\n        internal void Modify(TextEntity a)\r\n        {\r\n            for (int i = 0; i < progress.Count; i++)\r\n            {\r\n                if (a.id == targets[i])\r\n                {\r\n                    Modify(a, i, progress[i], length[i]);\r\n                    a.animating = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        public virtual void Modify(TextEntity entity, int index, float progress, float length)\r\n        {\r\n        }\r\n\r\n        internal void TryEnd()\r\n        {\r\n            for (int i = 0; i < progress.Count; i++)\r\n            {\r\n                if (progress[i] >= length[i])\r\n                {\r\n                    EndTask(i);\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class Palette\r\n    {\r\n        public string[] HtmlColors;\r\n\r\n\r\n        public Palette(params string[] colors)\r\n        {\r\n            HtmlColors = colors;\r\n        }\r\n    }\r\n\r\n    public class DefaultPalettes\r\n    {\r\n        public static Palette C4KiroKaze = new Palette(\"#332c50\", \"#46878f\", \"#94e344\", \"#e2f3e4\");\r\n        public static Palette C4Reader = new Palette(\"#262626\", \"#8b8cba\", \"#8bba91\", \"#649f8d\");\r\n        public static Palette C4Novel = new Palette(\"#262626\", \"#342d41\", \"#b8b8b8\", \"#8b8cba\");\r\n        public const int C4Black = 0;\r\n        public const int C4BlackNeutral = 1;\r\n        public const int C4WhiteNeutral = 2;\r\n        public const int C4White = 3;\r\n\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.TurnBased.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering.GameScreen\r\n{\r\n    public struct MouseHover\r\n    {\r\n        public Rect rect;\r\n        public int type;\r\n        public int id;\r\n\r\n        public MouseHover(Rect rect, int type, int id)\r\n        {\r\n            this.rect = rect;\r\n            this.type = type;\r\n            this.id = id;\r\n        }\r\n    }\r\n\r\n    public class MouseHoverManager\r\n    {\r\n        public List<MouseHover> mouseHovers = new List<MouseHover>();\r\n        public List<MouseHover> mouseHoversActive = new List<MouseHover>();\r\n        public MouseIO mouseIO;\r\n\r\n        public MouseHoverManager(MouseIO mouseIO)\r\n        {\r\n            this.mouseIO = mouseIO;\r\n        }\r\n\r\n        public void Update()\r\n        {\r\n            mouseHoversActive.Clear();\r\n            foreach (var item in mouseHovers)\r\n            {\r\n                if (item.rect.Contains(mouseIO.pos))\r\n                {\r\n                    mouseHoversActive.Add(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering.GameScreen\r\n{\r\n    public class UnicodeRemap\r\n    {\r\n\r\n        Dictionary<int, int> remaps = new Dictionary<int, int>();\r\n\r\n        public UnicodeRemap()\r\n        {\r\n            remaps.Add(Unicode.keyUp, 'w');\r\n            remaps.Add(Unicode.keyDown, 's');\r\n            remaps.Add(Unicode.keyLeft, 'a');\r\n            remaps.Add(Unicode.keyRight, 'd');\r\n\r\n            remaps.Add('i', '1');\r\n\r\n        }\r\n\r\n        public int Remap(int unicode)\r\n        {\r\n            int result;\r\n            if (remaps.TryGetValue(unicode, out result))\r\n            {\r\n                return result;\r\n            }\r\n            return unicode;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextBoard\r\n    {\r\n        public const char NOCHANGECHAR = (char)1;\r\n        public const char INVISIBLECHAR = (char)2;\r\n        public const int NOCHANGECOLOR = -2;\r\n        public const int INVISIBLECOLOR = -1;\r\n        char[,] chars;\r\n        public int[,] TextColor { get; private set; }\r\n        public int[,] BackColor { get; private set; }\r\n        //StringBuilder stringBuilder = new StringBuilder();\r\n        int cursorX = 0;\r\n        int cursorY = 0;\r\n        public Vector2D Position { get; set; }\r\n\r\n\r\n        public TextBoard(int width, int height)\r\n        {\r\n            //SetMaxSize(width, height);\r\n            Resize(width, height);\r\n        }\r\n\r\n        public void DrawOnCenter(string message, int color, int xOff = 0, int yOff = 0, bool alignString = true)\r\n        {\r\n            int x = (Width) / 2;\r\n            if (alignString) x -= message.Length / 2;\r\n            int y = Height / 2;\r\n            Draw(message, x + xOff, y + yOff, color);\r\n        }\r\n\r\n        public void DrawOnCenterHorizontal(string message, int color, int xOff = 0, int y = 0, bool alignString = true)\r\n        {\r\n            int x = (Width) / 2;\r\n            if (alignString) x -= message.Length / 2;\r\n            Draw(message, x + xOff, y, color);\r\n        }\r\n\r\n\r\n        private void SetMaxSize(int width, int height)\r\n        {\r\n            chars = new char[width, height];\r\n            TextColor = new int[width, height];\r\n            BackColor = new int[width, height];\r\n        }\r\n\r\n        public void Reset()\r\n        {\r\n            DrawRepeated(' ', 0, 0, Width, Height, 0, 0);\r\n        }\r\n\r\n        public void ResetInvisible()\r\n        {\r\n            DrawRepeated(INVISIBLECHAR, 0, 0, Width, Height, INVISIBLECOLOR, INVISIBLECOLOR);\r\n        }\r\n\r\n\r\n        public int Width { get; private set; }\r\n\r\n        public void Insert(TextBoard secondBoard)\r\n        {\r\n            for (int i = 0; i < secondBoard.Width; i++)\r\n            {\r\n                for (int j = 0; j < secondBoard.Height; j++)\r\n                {\r\n                    int x = (int)secondBoard.Position.X + i;\r\n                    int y = (int)secondBoard.Position.Y + j;\r\n                    if (x < 0 || y < 0) continue;\r\n                    if (x >= Width || y >= Height) continue;\r\n                    if (secondBoard.chars[i, j] != INVISIBLECHAR)\r\n                        chars[x, y] = secondBoard.chars[i, j];\r\n                    if (secondBoard.TextColor[i, j] != INVISIBLECOLOR)\r\n                        TextColor[x, y] = secondBoard.TextColor[i, j];\r\n                    if (secondBoard.BackColor[i, j] != INVISIBLECOLOR)\r\n                        BackColor[x, y] = secondBoard.BackColor[i, j];\r\n                }\r\n            }\r\n        }\r\n\r\n        internal void DrawRect(char c, int x, int y, int w, int h, int textColor, int backColor)\r\n        {\r\n            DrawRepeated(c, x,      y,   1, h, textColor, backColor);\r\n            DrawRepeated(c, x+w-1,  y,   1, h, textColor, backColor);\r\n            DrawRepeated(c, x,      y,   w, 1, textColor, backColor);\r\n            DrawRepeated(c, x,      y+h-1, w, 1, textColor, backColor);\r\n        }\r\n\r\n        public int Height { get; private set; }\r\n        public int CursorX\r\n        {\r\n            get { return cursorX; }\r\n            set\r\n            {\r\n                cursorX = value;\r\n            }\r\n        }\r\n        public int CursorY { get { return cursorY; }\r\n            set\r\n            {\r\n                cursorY = value;\r\n            }\r\n        }\r\n\r\n        public void DrawOneDigit(int i, int x, int y, int color = NOCHANGECOLOR, int background = NOCHANGECOLOR)\r\n        {\r\n            char c = (char)(i + '0');\r\n            DrawChar(c, x, y, color, background);\r\n        }\r\n\r\n        public void DrawTwoDigits(int i, int x, int y, int color = NOCHANGECOLOR, int background = NOCHANGECOLOR)\r\n        {\r\n            DrawOneDigit(i/10,x,y,color,background);\r\n            DrawOneDigit(i %10, x+1, y, color, background);\r\n        }\r\n\r\n        internal bool SameAs(TextBoard textBoard, int x, int y)\r\n        {\r\n            return this.chars[x, y] == textBoard.chars[x, y]\r\n                && this.BackColor[x,y] == textBoard.BackColor[x,y]\r\n                && this.TextColor[x,y] == textBoard.TextColor[x,y];\r\n        }\r\n\r\n        internal void Copy(TextBoard textBoard, int x, int y)\r\n        {\r\n            this.chars[x, y] = textBoard.chars[x, y];\r\n            this.TextColor[x, y] = textBoard.TextColor[x, y];\r\n            this.BackColor[x, y] = textBoard.BackColor[x, y];\r\n        }\r\n\r\n        internal void Draw_Cursor_UnicodeLabel(int v, int color)\r\n        {\r\n            int len = DrawUnicodeLabel(v, cursorX, cursorY, color);\r\n            for (int i = 0; i < len; i++)\r\n            {\r\n                AdvanceCursor();\r\n            }\r\n            \r\n        }\r\n\r\n        internal int DrawUnicodeLabel(int unicode, int x, int y, int color)\r\n        {\r\n            if (unicode >= 'a' && unicode <= 'z') {\r\n                DrawChar((char)(unicode + 'A' - 'a'), x, y, color);\r\n                return 1;\r\n            }\r\n            if (unicode >= '0' && unicode <= '9')\r\n            {\r\n                DrawChar((char)(unicode), x, y, color);\r\n                return 1;\r\n            }\r\n            string label = \"\";\r\n            if (unicode == 32)\r\n            {\r\n                label = \"SPACE\";\r\n            }\r\n            Draw(label, x, y, color);\r\n            return label.Length;\r\n        }\r\n\r\n        internal void Set(TextBoard origin)\r\n        {\r\n            this.Position = origin.Position;\r\n            for (int i = 0; i < Width; i++)\r\n            {\r\n                for (int j = 0; j < Height; j++)\r\n                {\r\n                    this.chars[i, j] = origin.chars[i, j];\r\n                    this.BackColor[i, j] = origin.BackColor[i, j];\r\n                    this.TextColor[i, j] = origin.TextColor[i, j];\r\n                }\r\n            }\r\n        }\r\n\r\n        internal void Resize(int w, int h)\r\n        {\r\n            if (chars == null || w > chars.GetLength(0) || h > chars.GetLength(1))\r\n            {\r\n                SetMaxSize(w, h);\r\n            }\r\n            Width = w;\r\n            Height = h;\r\n\r\n        }\r\n\r\n        public char CharAt(int i, int j)\r\n        {\r\n            return chars[i, j];\r\n        }\r\n\r\n        public void SetCursorAt(int x, int y)\r\n        {\r\n            cursorX = x;\r\n            cursorY = y;\r\n        }\r\n\r\n        public void Draw_Cursor(string v)\r\n        {\r\n            foreach (var c in v)\r\n            {\r\n                Draw_Cursor(c);\r\n            }\r\n        }\r\n\r\n        public void Draw_Cursor(string v, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            foreach (var c in v)\r\n            {\r\n                Draw_Cursor(c, color, backColor);\r\n            }\r\n        }\r\n\r\n        internal bool CanDraw_Cursor_SmartLineBreak(string v)\r\n        {\r\n            int currentX = cursorX;\r\n            int currentY = cursorY;\r\n\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                bool lineBreak = false;\r\n                bool shouldCheckForLineBreaks = (i == 0 || v[i] == ' ') && i != v.Length - 1;\r\n                if (shouldCheckForLineBreaks)\r\n                {\r\n                    for (int j = 1; j < v.Length - i; j++)\r\n                    {\r\n                        if (j + currentX >= Width) //reach end of the line without ending the word, should line break\r\n                        {\r\n                            if (v[i] == ' ')\r\n                            {\r\n                                i++; //skip through the space if it's a new line\r\n                            }\r\n                            lineBreak = true;\r\n                            break;\r\n                        }\r\n                        if (v[i + j] == ' ') //new word begins so no need to line break\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lineBreak)\r\n                {\r\n                    currentY++;\r\n                    currentX = 0;\r\n                }\r\n                currentX++;\r\n                if (currentX >= Width)\r\n                {\r\n                    currentY++;\r\n                    currentX = 0;\r\n                }\r\n                if (currentX >= Width || currentY >= Height) return false;\r\n                \r\n                \r\n            }\r\n            return true;\r\n        }\r\n\r\n        public DrawCursorResult Draw_Cursor_SmartLineBreak(string v, int color)\r\n        {\r\n            int offStart = 0;\r\n            int offEnd = v.Length - 1;\r\n            return Draw_Cursor_SmartLineBreak(v, color, offStart, offEnd);\r\n        }\r\n\r\n        public DrawCursorResult Draw_Cursor_SmartLineBreak(string v, int color, int offStart, int offEnd)\r\n        {\r\n            \r\n            Vector2D start = new Vector2D(CursorX, CursorY);\r\n            int endIndex = offEnd + 1;\r\n            for (int i = offStart; i < endIndex; i++)\r\n            {\r\n                int originX = cursorX;\r\n                bool lineBreak = false;\r\n                bool shouldCheckForLineBreaks = (i == 0 || v[i] == ' ') && i != endIndex - 1;\r\n                if (shouldCheckForLineBreaks)\r\n                {\r\n                    for (int j = 1; j < endIndex - i; j++)\r\n                    {\r\n                        if (j + originX >= Width) //reach end of the line without ending the word, should line break\r\n                        {\r\n                            if (v[i] == ' ')\r\n                            {\r\n                                i++; //skip through the space if it's a new line\r\n                            }\r\n                            lineBreak = true;\r\n                            break;\r\n                        }\r\n                        if (v[i + j] == ' ') //new word begins so no need to line break\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lineBreak)\r\n                {\r\n                    CursorNewLine(0);\r\n                }\r\n                Draw_Cursor(v[i], color);\r\n            }\r\n            Vector2D end = new Vector2D(CursorX, CursorY);\r\n            return new DrawCursorResult(PositionToIndex(start), PositionToIndex(end), start, end);\r\n        }\r\n\r\n        internal void AutoFixGridding()\r\n        {\r\n            for (int i = 0; i < Width; i++)\r\n            {\r\n                for (int j = 0; j < Height; j++)\r\n                {\r\n                    if (IsGrid(i, j))\r\n                    {\r\n                        int mask = 0;\r\n                        if (IsGrid(i - 1, j))\r\n                        {\r\n                            mask += 1;\r\n                        }\r\n                        if (IsGrid(i + 1, j))\r\n                        {\r\n                            mask += 2;\r\n                        }\r\n                        if (IsGrid(i, j - 1))\r\n                        {\r\n                            mask += 4;\r\n                        }\r\n                        if (IsGrid(i, j + 1))\r\n                        {\r\n                            mask += 8;\r\n                        }\r\n                        switch (mask)\r\n                        {\r\n                            case 1:\r\n                            case 2:\r\n                            case 3:\r\n                                chars[i, j] = Unicode.AsciiGridHor;\r\n                                break;\r\n                            case 4:\r\n                            case 8:\r\n                            case 12:\r\n                                chars[i, j] = Unicode.AsciiGridVer;\r\n                                break;\r\n                            case 5:\r\n                                chars[i, j] = Unicode.AsciiGridUpLeft;\r\n                                break;\r\n                            case 6:\r\n                                chars[i, j] = Unicode.AsciiGridUpRight;\r\n                                break;\r\n                            case 7:\r\n                                chars[i, j] = Unicode.AsciiGridUpRightLeft;\r\n                                break;\r\n                            case 9:\r\n                                chars[i, j] = Unicode.AsciiGridDownLeft;\r\n                                break;\r\n                            case 10:\r\n                                chars[i, j] = Unicode.AsciiGridDownRight;\r\n                                break;\r\n                            case 11:\r\n                                chars[i, j] = Unicode.AsciiGridDownRightLeft;\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    \r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        private bool IsGrid(int x, int y)\r\n        {\r\n            if(x <0 || y <0 || x>= Width || y>= Height){\r\n                return false;\r\n            }\r\n            char c = chars[x, y];\r\n            foreach (var item in Unicode.grids)\r\n            {\r\n                if (c == item) return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        internal void DrawLines(int hero, params Vector2D[] points)\r\n        {\r\n            for (int i = 0; i < points.Length-1; i++)\r\n            {\r\n                DrawLine(points[i], points[i+1], hero);\r\n            }\r\n            \r\n        }\r\n\r\n        private void DrawLine(Vector2D pos1, Vector2D pos2, int color)\r\n        {\r\n            char c = Unicode.AsciiGridHor;\r\n            if (pos1.Y != pos2.Y) c = Unicode.AsciiGridVer;\r\n            int height = pos2.YInt - pos1.YInt;\r\n            //if (height <= 0) height = 1;\r\n            int width = pos2.XInt - pos1.XInt;\r\n            //if (width <= 0) width = 1;\r\n            DrawRepeated(c, pos1.XInt, pos1.YInt, width+1, height+1, color);\r\n        }\r\n\r\n        private int PositionToIndex(Vector2D start)\r\n        {\r\n            return (int)(start.X + start.Y * Width);\r\n        }\r\n\r\n        public void DrawOneDigit_Cursor(int i)\r\n        {\r\n            Draw_Cursor((char)(i + '0'));\r\n        }\r\n\r\n        public void Draw_Cursor(char c)\r\n        {\r\n\r\n            DrawChar(c, cursorX, cursorY);\r\n            AdvanceCursor();\r\n        }\r\n\r\n        public void Draw_Cursor(char c, int color, int backColor= NOCHANGECOLOR)\r\n        {\r\n\r\n            DrawChar(c, cursorX, cursorY, color, backColor);\r\n            AdvanceCursor();\r\n        }\r\n\r\n\r\n        public void AdvanceCursor()\r\n        {\r\n            cursorX++;\r\n            if (cursorX >= Width)\r\n            {\r\n                cursorX = 0;\r\n                cursorY++;\r\n            }\r\n        }\r\n\r\n        public void CursorNewLine(int x)\r\n        {\r\n            cursorY++;\r\n            cursorX = x;\r\n        }\r\n\r\n        public void DrawChar(char v, int x, int y)\r\n        {\r\n            \r\n            if (v != NOCHANGECHAR) {\r\n                chars[x, y] = v;\r\n\r\n            }\r\n                \r\n        }\r\n\r\n        public void DrawChar(char v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n\r\n            DrawChar(v, x, y);\r\n            SetColor(color, x, y);\r\n            SetBackColor(backColor, x, y);\r\n        }\r\n\r\n        internal void SetAll(char text, int textColor = NOCHANGECOLOR, int backColor= NOCHANGECOLOR)\r\n        {\r\n            DrawRepeated(text, 0, 0, Width, Height, textColor, backColor);\r\n        }\r\n\r\n        internal void SetAllIfVisible(char text, int textColor = NOCHANGECOLOR, int backColor = NOCHANGECOLOR)\r\n        {\r\n            DrawRepeatedIfVisible(text, 0, 0, Width, Height, textColor, backColor);\r\n        }\r\n\r\n\r\n\r\n        public void DrawWithGrid(string text, int x, int y, int gridColor, int textColor)\r\n        {\r\n            int width = text.Length;\r\n            DrawGrid(x, y, width + 2, 3, gridColor);\r\n            Draw(text, x + 1, y + 1, textColor);\r\n        }\r\n\r\n        public void Draw(string v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                int x2 = x + i;\r\n                int y2 = y;\r\n                if(x2 >= Width)\r\n                {\r\n                    x2 -= Width;\r\n                    y2++;\r\n                }\r\n                DrawChar(v[i], x2, y2, color, backColor);\r\n            }\r\n        }\r\n\r\n        public void DrawWithLinebreaks(string v, int x, int y, int newlineX, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            int linebreaks = 0;\r\n            int xOffsetnewlines = 0;\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                int x2 = x + i+ xOffsetnewlines;\r\n                int y2 = y;\r\n                \r\n                while (x2 >= Width)\r\n                {\r\n                    x2 = x2-Width+newlineX;\r\n                    y2++;\r\n                }\r\n\r\n                //\r\n                if (v[i] == '\\n')\r\n                {\r\n                    linebreaks++;\r\n                    xOffsetnewlines += newlineX - x2-1;\r\n                }\r\n                else{\r\n                    DrawChar(v[i], x2, y2 + linebreaks, color, backColor);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public void Draw(IEnumerable<char> v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = 0; i < System.Linq.Enumerable.Count<char>(v); i++)\r\n            {\r\n                DrawChar(System.Linq.Enumerable.ElementAt<char>(v,i), x + i, y, color, backColor);\r\n            }\r\n        }\r\n\r\n        public void DrawGrid(int x, int y, int width, int height, int color)\r\n        {\r\n\r\n            DrawRepeated(Unicode.AsciiGridVer, x, y, 1, height, color);\r\n            DrawRepeated(Unicode.AsciiGridVer, x + width - 1, y, 1, height, color);\r\n            DrawRepeated(Unicode.AsciiGridHor, x, y, width, 1, color);\r\n            DrawRepeated(Unicode.AsciiGridHor, x, y + height - 1, width, 1, color);\r\n\r\n            DrawRepeated((char)218, x, y, 1, 1, color);\r\n            DrawRepeated((char)192, x,              y+height-1, 1, 1, color);\r\n            DrawRepeated((char)217, x+width-1,      y+ height - 1, 1, 1, color);\r\n            DrawRepeated((char)191, x + width - 1,  y, 1, 1, color);\r\n        }\r\n\r\n        public void DrawRepeated(char c, int x, int y, int width, int height, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = x; i < x + width; i++)\r\n            {\r\n                for (int j = y; j < y + height; j++)\r\n                {\r\n                    DrawChar(c, i, j, color);\r\n\r\n                    SetBackColor(backColor, i, j);\r\n                }\r\n            }\r\n        }\r\n\r\n        public void DrawRepeatedIfVisible(char c, int x, int y, int width, int height, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = x; i < x + width; i++)\r\n            {\r\n                for (int j = y; j < y + height; j++)\r\n                {\r\n                    if (chars[i, j] != TextBoard.INVISIBLECHAR || TextColor[i,j] != INVISIBLECOLOR)\r\n                        DrawChar(c, i, j, color);\r\n                    if(BackColor[i,j] != TextBoard.INVISIBLECOLOR)\r\n                        SetBackColor(backColor, i, j);\r\n                }\r\n            }\r\n        }\r\n\r\n        public void SetColor(int color, int x, int y)\r\n        {\r\n            if (color != NOCHANGECOLOR)\r\n                TextColor[x, y] = color;\r\n        }\r\n\r\n        public void SetBackColor(int color, int x, int y)\r\n        {\r\n            if (color != NOCHANGECOLOR)\r\n            {\r\n                BackColor[x, y] = color;\r\n            }\r\n        }\r\n\r\n        public void Draw(string v, int x2, int y2, object input)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public void DrawGrid(int v1, int v2, int v3, int v4, object board)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public struct DrawCursorResult\r\n        {\r\n            public int StartIndex;\r\n            public int EndIndex;\r\n            public Vector2D StartPosition;\r\n            public Vector2D EndPosition;\r\n\r\n            public DrawCursorResult(int startIndex, int endIndex, Vector2D startPosition, Vector2D endPosition)\r\n            {\r\n                StartIndex = startIndex;\r\n                EndIndex = endIndex;\r\n                StartPosition = startPosition;\r\n                EndPosition = endPosition;\r\n            }\r\n        }\r\n    }\r\n}\r\n","using Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextScreenN : ITextScreen, IMouseInput, IKeyboardInput\r\n    {\r\n        public TextWorld TextWorld;\r\n\r\n        public virtual void Update(float f) { }\r\n\r\n        public TextScreenN()\r\n        {\r\n        }\r\n\r\n        public TextScreenN(TextWorld textWorld)\r\n        {\r\n            TextWorld = textWorld;\r\n        }\r\n\r\n        public  void Init(int w, int h)\r\n        {\r\n            TextWorld = new TextWorld();\r\n            TextWorld.Init(w, h);\r\n\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return TextWorld.mainBoard;\r\n        }\r\n\r\n\r\n\r\n        public void MouseEvent(MouseEvents mouseDown, int v1, int v2)\r\n        {\r\n            \r\n        }\r\n\r\n        public int InputUnicode { set; get; }\r\n        int InputAsNumber\r\n        {\r\n            get\r\n            {\r\n                return InputUnicode - 48;\r\n            }\r\n        }\r\n    }\r\n\r\n    public interface ITextScreen\r\n    {\r\n        \r\n        TextBoard GetBoard();\r\n        \r\n        void Update(float f);\r\n        \r\n    }\r\n\r\n    public interface IMouseInput\r\n    {\r\n        void MouseEvent(MouseEvents eventType, int v1, int v2);\r\n    }\r\n\r\n    public interface IKeyboardInput\r\n    {\r\n        int InputUnicode { set; }\r\n    }\r\n\r\n    public enum MouseEvents\r\n    { \r\n        MouseDown,\r\n        None\r\n    }\r\n\r\n    public class TextScreenHolder\r\n    {\r\n        public ITextScreen Screen { get; set; }\r\n        public IMouseInput Mouse { get; set; }\r\n        public IKeyboardInput Key { get; set; }\r\n\r\n        internal void SetAll(object dns)\r\n        {\r\n            Screen = dns as ITextScreen;\r\n            Mouse = dns as IMouseInput;\r\n            Key = dns as IKeyboardInput;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    class AttackPreview\r\n    {\r\n        ECSManager ecs;\r\n        private readonly BattleRender render;\r\n        private QuickAccessorOne<MoveData> moveDatas;\r\n        List<TextEntity> entities = new List<TextEntity>();\r\n        private int currentMoveId;\r\n\r\n        public AttackPreview(ECSManager ecs, BattleRender render)\r\n        {\r\n            this.ecs = ecs;\r\n            this.render = render;\r\n            this.render.attackPreview = this;\r\n            moveDatas = ecs.QuickAccessor1<MoveData>();\r\n            \r\n        }\r\n\r\n        public void ShowPreview(int user, int moveId)\r\n        {\r\n            if (moveId == currentMoveId) return;\r\n            End();\r\n            currentMoveId = moveId;\r\n            //Console.WriteLine(\"START\");\r\n\r\n            //Console.WriteLine(\"move \"+moveId);\r\n            var moveData = moveDatas.Comp1(moveId);\r\n            Vector2D pos = render.EntityScreenPosition(user);\r\n            Rect gridRect = render.GetGridRect();\r\n\r\n            foreach (var item in moveData.units)\r\n            {\r\n                var items = item.thingsToHappen;\r\n                foreach (var thing in items)\r\n                {\r\n                    if (thing is DealDamageAction)\r\n                    {\r\n                        var da = thing as DealDamageAction;\r\n                        var target = da.target;\r\n                        switch (target)\r\n                        {\r\n                            case Target.None:\r\n                                break;\r\n                            case Target.Self:\r\n                                break;\r\n                            case Target.ClosestTarget:\r\n                                break;\r\n                            case Target.ClosestTargetX:\r\n                                var freeEntity = render.textWorld.GetFreeEntity(gridRect.X+gridRect.Width - pos.XInt,1);\r\n                                entities.Add(freeEntity);\r\n                                freeEntity.SetPosition(pos);\r\n                                freeEntity.Origin.SetAll(TextBoard.INVISIBLECHAR, TextBoard.INVISIBLECOLOR, 1);\r\n                                break;\r\n                            case Target.Area:\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        internal void End()\r\n        {\r\n            \r\n            if (currentMoveId >= 0) {\r\n                //Console.WriteLine(\"END\");\r\n                currentMoveId = -1;\r\n                render.textWorld.Free(entities);\r\n            }\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class HappHandling\r\n    {\r\n        BattleRender battleRender;\r\n        ECSManager ecs;\r\n        public Action Handle;\r\n        List<HappHandler> handlers = new List<HappHandler>();\r\n        private QuickAccessorTwo<HappTags, TimeStampSnap> happs;\r\n        private float highestHandled\r\n        {\r\n            get { return handleState.highestHandled; }\r\n            set { handleState.highestHandled = value; }\r\n        }\r\n        private HappHandleState handleState = new HappHandleState();\r\n\r\n        public HappHandling(BattleRender battleRender, BattleSetup battleSetup)\r\n        {\r\n            this.battleRender = battleRender;\r\n            var world = battleRender.textWorld;\r\n            var posAnim = world.AddAnimation<global::Pidroh.TextRendering.PositionAnimation>(new PositionAnimation());\r\n            var blinkAnim = world.AddAnimation<global::Pidroh.TextRendering.BlinkAnim>(new BlinkAnim());\r\n            var delayAnim = world.AddAnimation<global::Pidroh.TextRendering.DelaysAnimation>(new DelaysAnimation());\r\n            this.ecs = battleSetup.ecs;\r\n            this.ecs.CreateEntityWithComponent(handleState);\r\n            var battleMain = battleSetup.battleMain;\r\n            var time = battleSetup.timeStamp;\r\n            battleRender.HappHandling = this;\r\n            happs = ecs.QuickAccessor2<HappTags, TimeStampSnap>();\r\n            highestHandled = -1;\r\n\r\n\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n\r\n\r\n\r\n                var damage = e.GetComponent<HappDamageData>();\r\n\r\n                var amount = damage.amount;\r\n\r\n\r\n                \r\n\r\n\r\n                string message;\r\n                if (damage.elementalBlock)\r\n                {\r\n\r\n                    {\r\n                        string text = damage.damageE.ToString().ToUpper() + \" BLOCK \" + damage.targetE.ToString().ToUpper();\r\n                        var message2 = battleRender.textWorld.GetTempEntity(text.Length, 1);\r\n                        int colorE = BattleRender.ElementToProjColor(damage.damageE);\r\n                        message2.Origin.Draw(text, 0, 0, colorE);\r\n\r\n                        blinkAnim.Add(message2.AnimBase(0.6f), BlinkAnim.BlinkData.FrontColor(colorE, 0.2f));\r\n                        int offset = (int)Math.Floor(-text.Length / 2f);\r\n                        message2.SetPosition(battleRender.battlerRenders[damage.target].GetPosition() + new Vector2D(+1 + offset, -3));\r\n                        delayAnim.Delay(0.65f);\r\n                    }\r\n                    {\r\n                        var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[damage.target].pos);\r\n                        var blast = battleRender.textWorld.GetTempEntity(5, 5);\r\n                        blast.SetPosition(pos + new Vector2D(-2, -2));\r\n\r\n                        blast.Origin.DrawRect(' ', 0, 0, 5, 5, TextBoard.INVISIBLECOLOR, BattleRender.ElementToProjColor(damage.damageE));\r\n                        //blast.Origin.DrawRepeated(' ', 1, 1, 3, 3, TextBoard.INVISIBLECOLOR, BattleRender.ElementToProjColor(damage.damageE));\r\n                        blinkAnim.Add(blast.AnimBase(0.2f), BlinkAnim.BlinkData.BackColor(BattleRender.Colors.inputKey, 0.05f, false));\r\n                    }\r\n                    message = damage.damageE + \" absorbs \" + damage.targetE + \"\\n\";\r\n                    message += battleRender.GetEntityName(damage.target) + \" is unafectted.\";\r\n                }\r\n                else\r\n                {\r\n\r\n                    //message = battleRender.GetEntityName(damage.target) + \" gets hit!\";\r\n                    if (damage.superEffective)\r\n                    {\r\n\r\n                        {\r\n                            string text = damage.damageE.ToString().ToUpper() + \" BREAK \" + damage.targetE.ToString().ToUpper();\r\n                            var message2 = battleRender.textWorld.GetTempEntity(text.Length, 1);\r\n                            int colorE = BattleRender.ElementToProjColor(damage.damageE);\r\n                            message2.Origin.Draw(text, 0, 0, colorE);\r\n\r\n                            blinkAnim.Add(message2.AnimBase(0.45f), BlinkAnim.BlinkData.FrontColor(colorE, 0.2f));\r\n                            int offset = (int)Math.Floor(-text.Length / 2f);\r\n                            message2.SetPosition(battleRender.battlerRenders[damage.target].GetPosition() + new Vector2D(+1 + offset, -2));\r\n                            delayAnim.Delay(0.65f);\r\n                        }\r\n\r\n                        message = null;\r\n                        //message = damage.damageE + \" ravages \" + damage.targetE + \"\\n\";\r\n                        //message += battleRender.GetEntityName(damage.target)+\" takes a heavy hit!\";\r\n                        {\r\n                            var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[damage.target].pos);\r\n                            var blast = battleRender.textWorld.GetTempEntity(5, 5);\r\n                            blast.SetPosition(pos + new Vector2D(-2, -2));\r\n\r\n                            blast.Origin.DrawRepeated(' ', 1, 1, 3, 3, TextBoard.INVISIBLECOLOR, BattleRender.Colors.Enemy);\r\n                            blinkAnim.Add(blast.AnimBase(0.2f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(damage.damageE), 0.05f));\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //message = battleRender.GetEntityName(damage.target) + \" gets hurt\";\r\n                        message = null;\r\n                    }\r\n                }\r\n\r\n                {\r\n                    var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[damage.target].pos);\r\n                    var number = battleRender.textWorld.GetTempEntity(1, 1);\r\n\r\n                    Vector2D initialPos = pos + new Vector2D(0, 0);\r\n                    number.SetPosition(initialPos);\r\n\r\n                    number.Origin.DrawOneDigit(amount, 0, 0, BattleRender.Colors.Hero);\r\n                    posAnim.Add(number.AnimBase(0.6f), new PositionAnimation.PositionData(initialPos, initialPos + new Vector2D(0, -3)));\r\n                    //blinkAnim.Add(number.AnimBase(1f), BlinkAnim.BlinkData.Char(' ', 5f));\r\n                }\r\n\r\n                if (message != null)\r\n                    battleRender.ShowMessage(message);\r\n\r\n                var defender = battleRender.battlerRenders[damage.target];\r\n\r\n                //var fe = battleRender.textWorld.GetTempEntity(defender.Width, defender.Height);\r\n                if (!damage.superEffective && !damage.elementalBlock && battleMain.entities[damage.target].Alive)\r\n                {\r\n                    var fe = battleRender.textWorld.GetTempEntity(3, 3);\r\n                    var backColor = BattleRender.ElementToProjColor(damage.damageE);\r\n                    backColor = 0;\r\n                    int xColor = BattleRender.ElementToProjColor(damage.damageE);\r\n                    const char damageChar = 'X';\r\n                    fe.Origin.DrawChar(damageChar, 1, 0, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 1, 1, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 1, 2, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 0, 1, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 2, 1, xColor, backColor);\r\n                    //fe.Origin.DrawChar(TextBoard.NOCHANGECHAR, 0, 0);\r\n                    fe.Origin.Position = defender.GetPosition() + new Vector2D(-1, -1);\r\n\r\n                    blinkAnim.Add(fe.AnimBase(0.35f), BlinkAnim.BlinkData.Char('Z', 0.05f));\r\n                    //blinkAnim.Add(fe.AnimBase(0.35f), BlinkAnim.BlinkData.BackColor(BattleRender.Colors.Hero, 0.05f));\r\n                }\r\n\r\n                //Console.Write(\"CHANGE ELE\");\r\n\r\n            }, MiscHappTags.Damage));\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n\r\n\r\n                string text = hmd.element.ToString();\r\n                var message = battleRender.textWorld.GetTempEntity(text.Length, 1);\r\n                message.Origin.Draw(text, 0, 0, BattleRender.Colors.Hero);\r\n                blinkAnim.Add(message.AnimBase(0.5f), BlinkAnim.BlinkData.FrontColor(BattleRender.Colors.InputDescription, 0.15f));\r\n                int offset = (int)Math.Floor(-text.Length / 2f);\r\n                message.SetPosition(battleRender.battlerRenders[hmd.user].GetPosition() + new Vector2D(+1 + offset, -1));\r\n\r\n            }, MiscHappTags.ChangeElement));\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                //var defender = battleRender.battlerRenders[hmd.target];\r\n                var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[hmd.user].pos);\r\n                var blast = battleRender.textWorld.GetTempEntity(3, 3);\r\n                blast.SetPosition(pos + new Vector2D(-1, -1));\r\n\r\n                blast.Origin.DrawRepeated(' ', 1, 1, 1, 1, TextBoard.INVISIBLECOLOR, BattleRender.Colors.Enemy);\r\n                blinkAnim.Add(blast.AnimBase(0.2f), BlinkAnim.BlinkData.BackColor(BattleRender.Colors.Hero, 0.05f));\r\n                //delayAnim.Delay(5);\r\n                //Console.Write(\"DEATH\");\r\n                //Console.Write(\"CHANGE ELE\");\r\n\r\n            }, MiscHappTags.Death));\r\n            Action<Entity> moveMiss = (e) =>\r\n            {\r\n                //Console.WriteLine(\"HANDLE!3\");\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                var hmf = e.GetComponent<HappMovementFail>();\r\n                int eId = hmd.user;\r\n                var mover = battleMain.entities[eId];\r\n\r\n                var pos = mover.PositionV2D;\r\n                var pos2 = hmf.moveTo;\r\n                var posF = (pos + pos2) / 2;\r\n\r\n                var fe = battleRender.battlerRenders[eId];\r\n                //Console.WriteLine(\"Move fail\");\r\n                posAnim.Add(fe.AnimBase(0.2f), new PositionAnimation.PositionData(\r\n                    battleRender.BattleEntityToScreenPosition(mover.PositionV2D),\r\n                    battleRender.BattleEntityToScreenPosition(posF)));\r\n            };\r\n            handlers.Add(new HappHandler(moveMiss, MoveDataTags.Movement));\r\n\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var ha = e.GetComponent<HappArea>();\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                int eId = hmd.user;\r\n                var mover = battleMain.entities[eId];\r\n                //var userRender = battleRender.battlerEntities[eId];\r\n                var area = ha.area;\r\n                var points = area.points;\r\n\r\n                var useEffect = world.GetTempEntity(1, 1);\r\n                useEffect.SetPosition(battleRender.BattleEntityToScreenPosition(mover.pos));\r\n                blinkAnim.Add(useEffect.AnimBase(0.5f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(hmd.element), 0.15f));\r\n                foreach (var item in points)\r\n                {\r\n                    var entity = world.GetTempEntity(1, 1);\r\n                    var finalPos = item * new Vector2D(ha.mirroringX, 1) + ha.offset;\r\n                    if (finalPos.X < 0) continue;\r\n                    if (finalPos.Y < 0) continue;\r\n                    if (finalPos.X > 5) continue;\r\n                    if (finalPos.Y > 2) continue;\r\n                    //Console.Write(finalPos.XInt);\r\n                    //Console.Write(finalPos.YInt);\r\n                    var pos = battleRender.BattleEntityToScreenPosition(finalPos);\r\n                    entity.SetPosition(pos.XInt, pos.YInt);\r\n                    blinkAnim.Add(entity.AnimBase(0.5f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(hmd.element), 0.15f));\r\n                }\r\n            }, MoveDataTags.Bomb));\r\n            Handle = () =>\r\n            {\r\n                //Console.WriteLine(\"HANDLE!\");\r\n                float newHighestHandled = highestHandled;\r\n                for (int i = 0; i < happs.Length; i++)\r\n                {\r\n                    //Console.Write(\"ADV\"+battleRender.CanAdvanceGraphics());\r\n                    if (!battleRender.CanAdvanceGraphics()) break;\r\n                    var tags = happs.Comp1(i);\r\n                    //if (happs.Comp2(i).TimeSnap > highestHandled)\r\n                    if (i > highestHandled)\r\n                    {\r\n                        //newHighestHandled = happs.Comp2(i).TimeSnap;\r\n                        newHighestHandled = i;\r\n                        //Console.WriteLine(\"HANDLE!\");\r\n                        foreach (var han in handlers)\r\n                        {\r\n                            //Console.WriteLine(\"HANDLE!x\");\r\n                            if (han.CanHandle(tags.tags))\r\n                            {\r\n                                //Console.WriteLine(happs.Comp2(i).TimeSnap + \" - \" + time.CurrentSnap);\r\n                                //Console.WriteLine(\"HANDLE!2\");\r\n                                han.Handler(happs.Entity(i));\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //Console.WriteLine(happs.Comp2(i).TimeSnap+\" - \"+ time.CurrentSnap);\r\n                    }\r\n                }\r\n                highestHandled = newHighestHandled;\r\n            };\r\n\r\n        }\r\n\r\n        public class HappHandleState\r\n        {\r\n            public float highestHandled;\r\n        }\r\n\r\n        public class HappHandler\r\n        {\r\n            internal List<int> necessaryTags = new List<int>();\r\n            internal Action<Entity> Handler;\r\n\r\n            public HappHandler(Action<Entity> handler, params object[] tags)\r\n            {\r\n                foreach (var t in tags)\r\n                {\r\n                    necessaryTags.Add(Convert.ToInt32(t));\r\n                }\r\n                this.Handler = handler;\r\n            }\r\n\r\n            internal bool CanHandle(List<int> tags)\r\n            {\r\n                foreach (var item in necessaryTags)\r\n                {\r\n                    if (!tags.Contains(item))\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        internal bool IsDone()\r\n        {\r\n            return highestHandled >= happs.Length - 1;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    class HelpScreen : ITextScreen_\r\n    {\r\n        public int Input { set; get; }\r\n        public int InputUnicode { set; get; }\r\n        public MouseIO Mouse { set; get; }\r\n        TextWorld textWorld;\r\n        private readonly HelpScreenModel model;\r\n        private readonly List<MoveRenderData> moveRenders;\r\n        private readonly List<MoveData> moveDatas;\r\n        char LeaveButton;\r\n        public bool wannaLeave;\r\n        private TextEntity explanationEntity;\r\n\r\n        public HelpScreen(HelpScreenModel helpModel, List<MoveRenderData> moveRenders, List<MoveData> moveDatas)\r\n        {\r\n            this.textWorld = new TextWorld();\r\n            textWorld.Init(GameMain.Width, GameMain.Height);\r\n            model = helpModel;\r\n            this.moveRenders = moveRenders;\r\n            this.moveDatas = moveDatas;\r\n            textWorld.mainBoard.SetAll(TextBoard.INVISIBLECHAR, BattleRender.Colors.BackCommand, BattleRender.Colors.BackCommand);\r\n            explanationEntity = textWorld.GetFreeEntity(GameMain.Width-4, 35);\r\n            explanationEntity.SetPosition(2, 4);\r\n            //explanationEntity.Origin.Draw(\"SSS__SSSSDASDASDAS\", 0,0, BattleRender.Colors.InputDescription);\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            var input = InputUnicode;\r\n            if (input == LeaveButton) wannaLeave = true;\r\n            \r\n            //textWorld.mainBoard.Reset();\r\n            int pos = 0;\r\n            //textWorld.mainBoard.DrawWithLinebreaks(\"Input your commands and watch the turn play out. You can see everything your enemies will do\\n\\nAttacks have three elements, Fire, Thunder and Ice. Fire beats Ice, Ice beats Thunder, Thunder beats Fire.\\nThe element of the attacker changes upon attacking. Attackers are immune to attacks of the same element!\", 2, pos, 0, BattleRender.Colors.inputKey, TextBoard.INVISIBLECOLOR);\r\n\r\n            explanationEntity.Origin.SetCursorAt(0, 0);\r\n            if (!model.battleIntroMode){\r\n                explanationEntity.Origin.Draw_Cursor_SmartLineBreak(\"Input your commands and watch the turn play out. Plan your moves based on what the enemy will do!\", BattleRender.Colors.InputDescription);\r\n                explanationEntity.Origin.CursorNewLine(0);\r\n                explanationEntity.Origin.CursorNewLine(0);\r\n                explanationEntity.Origin.Draw_Cursor_SmartLineBreak(\"Attacks have three elements, Fire, Thunder and Ice. Fire beats Ice, Ice beats Thunder, Thunder beats Fire.\", BattleRender.Colors.InputDescription);\r\n                explanationEntity.Origin.CursorNewLine(0);\r\n                explanationEntity.Origin.CursorNewLine(0);\r\n\r\n                explanationEntity.Origin.Draw_Cursor_SmartLineBreak(\"The element of the attacker changes upon attacking. Attackers are immune to attacks of the same element!\", BattleRender.Colors.InputDescription);\r\n                pos += 15;\r\n            }\r\n            else{\r\n                pos = 5;\r\n            }\r\n\r\n            textWorld.Draw();\r\n\r\n            //textWorld.mainBoard.DrawWithLinebreaks(\"Input your commands and watch the turn play out. You can see everything your enemies will do\\n\", 2, pos, 2, BattleRender.Colors.InputDescription);\r\n            \r\n            \r\n            textWorld.mainBoard.Draw(\"YOUR COMMANDS\", 2, pos-2, BattleRender.Colors.inputKey);\r\n            string menuTitle = \"HELP\";\r\n            string leaveLabel = \"EXIT\";\r\n            if (model.battleIntroMode)\r\n            {\r\n                leaveLabel = \"START\";\r\n                menuTitle = \"BATTLE INTRO\";\r\n                LeaveButton = (char)Unicode.Space;\r\n            }\r\n            else\r\n            {\r\n                LeaveButton = 'x';\r\n            }\r\n            textWorld.mainBoard.DrawOnCenterHorizontal(menuTitle, BattleRender.Colors.WindowLabel, 0, 1);\r\n\r\n            List<int> commandList = model.commandsHero;\r\n            pos = ShowCommands(pos, commandList);\r\n            pos += 4;\r\n            textWorld.mainBoard.Draw(\"ENEMY COMMANDS\", 2, pos, BattleRender.Colors.inputKey);\r\n            pos += 2;\r\n            pos = ShowCommands(pos, model.commandsEnemy);\r\n\r\n            GameMain.DrawInput(1, pos + 3, LeaveButton, leaveLabel, textWorld.mainBoard);\r\n            \r\n\r\n        }\r\n\r\n        private int ShowCommands(int pos, List<int> commandList)\r\n        {\r\n            for (int i = 0; i < commandList.Count; i++)\r\n            {\r\n                //Console.Write(\"DRAWWW\");\r\n\r\n                int command = commandList[i];\r\n                bool drawFlag = CheckDrawCommand(command);\r\n                if (drawFlag)\r\n                {\r\n                    textWorld.mainBoard.Draw(moveRenders[command].Abrev, 2, pos, BattleRender.Colors.HeroTurn);\r\n                    textWorld.mainBoard.Draw(moveRenders[command].Label.ToUpper(), 5, pos, BattleRender.Colors.HeroTurn);\r\n                    textWorld.mainBoard.Draw(moveRenders[command].Description, 3, pos + 1, BattleRender.Colors.InputDescription);\r\n                    pos += 3;\r\n                }\r\n\r\n            }\r\n\r\n            return pos;\r\n        }\r\n\r\n        private bool IsShowingCommandInList(List<int> commandList)\r\n        {\r\n            for (int i = 0; i < commandList.Count; i++)\r\n            {\r\n                //Console.Write(\"DRAWWW\");\r\n\r\n                int command = commandList[i];\r\n                if (CheckDrawCommand(command)) return true;\r\n\r\n\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        private bool CheckDrawCommand(int command)\r\n        {\r\n            bool drawFlag = false;\r\n            if (command >= 0)\r\n            {\r\n                //Console.WriteLine(command);\r\n                //Console.WriteLine();\r\n                var md = moveDatas[command];\r\n                if (!md.HasTag((int)MoveDataTags.Movement))\r\n                {\r\n                    drawFlag = moveRenders[command].Label.Length != 0;\r\n                }\r\n\r\n\r\n            }\r\n\r\n            return drawFlag;\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return textWorld.mainBoard;\r\n        }\r\n\r\n        internal void Show()\r\n        {\r\n            model.RefreshData();\r\n        }\r\n\r\n        internal void HelpMode()\r\n        {\r\n            model.battleIntroMode = false;\r\n        }\r\n\r\n        internal bool IsWannaShowIntro()\r\n        {\r\n            model.RefreshData();\r\n            return IsShowingCommandInList(model.commandsEnemy) || IsShowingCommandInList(model.commandsHero);\r\n            //return model.commandsEnemy.Count != 0 || model.commandsHero.Count != 0;\r\n        }\r\n\n    \nprivate MouseIO __Property__Initializer__Mouse=new MouseIO();}\r\n\r\n    public class HelpScreenModel\r\n    {\r\n        BattleMain battleMain;\r\n        public List<int> commandsHero = new List<int>();\r\n        public List<int> commandsEnemy = new List<int>();\r\n        public bool battleIntroMode = false;\r\n\r\n        public HelpScreenModel(BattleMain battleMain)\r\n        {\r\n            this.battleMain = battleMain;\r\n\r\n        }\r\n\r\n        public void RefreshData()\r\n        {\r\n            commandsHero.Clear();\r\n            AddAll(battleMain.playerHandFixed, commandsHero);\r\n            AddAll(battleMain.playerHandUnfixed, commandsHero);\r\n            AddAll(battleMain.playerHandPool, commandsHero);\r\n            foreach (var item in battleMain.entities)\r\n            {\r\n                AddAllArray(item.moves, commandsEnemy);\r\n            }\r\n\r\n        }\r\n\r\n        private void AddAll(List<BattleMain.MoveType> moves, List<int> commands)\r\n        {\r\n            foreach (var m in moves)\r\n            {\r\n                int a = (int) m;\r\n                if (a < 0) continue;\r\n                if (!commands.Contains(a))\r\n                {\r\n                    commands.Add(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        private void AddAllArray(int[] moves, List<int> commands)\r\n        {\r\n            foreach (var a in moves)\r\n            {\r\n                if (a < 0) continue;\r\n                if (!commands.Contains(a))\r\n                {\r\n                    commands.Add(a);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class InputHandling\r\n    {\r\n        int[] unfixedCommandKeys = {'1', '2','3','4' };\r\n        Dictionary<Input, int> fixedMoveButtons = global::Bridge.Script.CallFor(new Dictionary<Input, int>(),(_o1)=>{_o1.Add(new Input(InputType.Move, BattleMain.MoveType.NormalShot),'g');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Fire),'f');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Ice),'i');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.IceBomb),'b');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.ThunderBomb),'y');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Thunder),'t');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveRight),'d');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveUp),'w');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveDown),'s');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveLeft),'a');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Done),Unicode.Space);_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Redo),'r');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Preview),'p');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Help),'h');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Cancel),'r');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Confirm),Unicode.Space);return _o1;});\r\n\r\n        public int GetFixedMoveUnicode(Input input)\r\n        {\r\n            int value;\r\n            if (fixedMoveButtons.TryGetValue(input, out value))\r\n            {\r\n\r\n            }\r\n            else\r\n            {\r\n                value = -1;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        public Input Inputted(int unicodeKey, InputHolder input)\r\n        {\r\n            //Console.WriteLine(\" input + \"+(char)unicodeKey);\r\n            foreach (var item in fixedMoveButtons)\r\n            {\r\n                if (item.Value == unicodeKey)\r\n                {\r\n                    if(input.Contains(item.Key))\r\n                        return item.Key;\r\n                }\r\n            }\r\n            for (int i = 0; i < unfixedCommandKeys.Length; i++)\r\n            {\r\n                if (unfixedCommandKeys[i] == unicodeKey)\r\n                {\r\n                    int unfixedCommandPos = 0;\r\n                    for (int i2 = 0; i2 < input.inputs.Count; i2++)\r\n                    {\r\n                        if (input.TagIs(i2, InputTags.MOVEUNFIX))\r\n                        {\r\n                            if (unfixedCommandPos == i)\r\n                            {\r\n                                return input.inputs[i2];\r\n                            }\r\n                            unfixedCommandPos++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return default(Input);\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class MessageOnPosition\r\n    {\r\n        BattleRender battleRender;\r\n        private TextWorld textWorld;\r\n        private BlinkAnim blinkAnim;\r\n\r\n        public MessageOnPosition(BattleRender battleRender)\r\n        {\r\n            textWorld = battleRender.textWorld;\r\n            blinkAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.BlinkAnim>(new BlinkAnim());\r\n        }\r\n\r\n        public void MessageOnPos(Vector2D pos, string v)\r\n        {\r\n            var entity = textWorld.GetTempEntity(v.Length + 2, 6);\r\n            blinkAnim.Add(entity.AnimBase(2f), new BlinkAnim.BlinkData(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, TextBoard.NOCHANGECOLOR, 0.35f, 0.35f));\r\n            var xOff = (v.Length - 3) / 2;\r\n            if (xOff < 0) xOff = 0;\r\n            var lineStart = new Vector2D(xOff, 0);\r\n            entity.SetPosition(pos + new Vector2D(1 - xOff, 0));\r\n            //Console.Write(pos);\r\n            //entity.Origin.Draw(v, 1, 5);\r\n            entity.Origin.DrawWithGrid(v, 0, 3, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero);\r\n\r\n            entity.Origin.DrawLines(Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero, lineStart, lineStart + new Vector2D(2, 0), lineStart + new Vector2D(2, 2));\r\n            entity.Origin.AutoFixGridding();\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class MouseHoverText\r\n    {\r\n        public string[][] texts = new string[3][];\r\n        public MouseHoverManager hoverManager;\r\n        public TextEntity entity;\r\n\r\n        public MouseHoverText(MouseHoverManager hoverManager, TextEntity entity, string[] moveDescriptions)\r\n        {\r\n            this.hoverManager = hoverManager;\r\n            this.entity = entity;\r\n            //texts[0] = new string[Enum.GetValues(typeof(BattleMain.MoveType)).Length];\r\n\r\n            texts[0] = moveDescriptions;\r\n            //Done,\r\n        //    Redo,\r\n        //Preview,\r\n        //Confirm,\r\n        //Cancel\r\n            texts[1] = new string[] {\r\n                \"Starts command execution\",\r\n                \"Removes the last inputted command\",\r\n                \"Preview moves of the opponents\",\r\n                \"Inputs move\",\r\n                \"Returns\",\r\n                \"Shows helpful information\",\r\n            };\r\n            texts[2] = new string[] {\r\n                \"Moves in the corresponding direction\",\r\n            };\r\n        }\r\n\r\n\r\n        public void Update()\r\n        {\r\n            entity.ResetFull();\r\n            hoverManager.Update();\r\n            var active = hoverManager.mouseHoversActive;\r\n            if (active.Count > 0)\r\n            {\r\n                //Console.Write(\"HOVER\");\r\n                int id = active[0].id;\r\n                if(id >= 0)\r\n                {\r\n                    string text = texts[active[0].type][id];\r\n                    entity.Origin.Draw(text, 0, 0, 2, BattleRender.Colors.BackBattle);\r\n                    \r\n                    int x = active[0].rect.X + 1 - text.Length/2;\r\n                    if (x < 0) x = 1;\r\n                    entity.SetPosition(x, active[0].rect.Y -2);\r\n                }\r\n\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.ECS;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class PreviewSystem\r\n    {\r\n        private ECSManager ecs;\r\n        private BattleMain battleMain;\r\n        public bool previewActive;\r\n        private ClonedState clonedState;\r\n        private QuickAccessorOne<BattleMain.BattleEntity> battleEntity;\r\n        Debugger debug = new Debugger(true);\r\n\r\n        public PreviewSystem(ECSManager ecs, BattleMain battleMain)\r\n        {\r\n            this.ecs = ecs;\r\n            ecs.AddCopyMethod(typeof(BattleMain.BattleEntity), (global::System.Action<object, object>)((o1, o2)=> {\r\n                var to = o2 as BattleMain.BattleEntity;\r\n                var from = o1 as BattleMain.BattleEntity;\r\n                to.pos = from.pos;\r\n                to.life = from.life;\r\n                to.maxLife = from.maxLife;\r\n                to.element = from.element;\r\n                for (int i = 0; i < to.moves.Length; i++)\r\n                {\r\n                    to.moves[i] = from.moves[i];\r\n                }\r\n            }));\r\n            ecs.AddCopyMethod(typeof(BattleMain.BattleState), (global::System.Action<object, object>)((o1, o2) => {\r\n                var to = o2 as BattleMain.BattleState;\r\n                var from = o1 as BattleMain.BattleState;\r\n                to.actingEntity = from.actingEntity;\r\n                to.BattleEndActive = from.BattleEndActive;\r\n                to.moveTick_Now = from.moveTick_Now;\r\n                to.moveTick_Total = from.moveTick_Total;\r\n                to.phase = from.phase;\r\n                to.turn = from.turn;\r\n                to.turnsPerPhase = from.turnsPerPhase;\r\n                to.totalTurns = from.totalTurns;\r\n            }));\r\n            ecs.AddCopyMethod(typeof(TimeStamp), (global::System.Action<object, object>)((o1, o2) => {\r\n                var to = o2 as TimeStamp;\r\n                var from = o1 as TimeStamp;\r\n                to.CurrentSnap = from.CurrentSnap;\r\n            }));\r\n            ecs.AddCopyMethod(typeof(HappHandling.HappHandleState), (global::System.Action<object, object>)((o1, o2) => {\r\n                var to = o2 as HappHandling.HappHandleState;\r\n                var from = o1 as HappHandling.HappHandleState;\r\n                to.highestHandled = from.highestHandled;\r\n            }));\r\n            this.battleMain = battleMain;\r\n            clonedState = new ClonedState();\r\n            battleEntity = ecs.QuickAccessor1<BattleMain.BattleEntity>();\r\n        }\r\n\r\n        internal void StartPreview()\r\n        {\r\n            foreach (var item in battleMain.entities)\r\n            {\r\n                debug.Print(\"ALL ENTITIES BEFORE PREVIEW\");\r\n                debug.Print(item);\r\n                debug.Print(item.randomPosition + \" RANDOM POS\");\r\n                debug.Print(item.Type + \" type\");\r\n                debug.Print(item.drawTurn + \" draw turn\");\r\n                debug.Print(\"END\");\r\n            }\r\n            ecs.CloneState(clonedState);\r\n            battleMain.battleState.BattleEndActive = false;\r\n            previewActive = true;\r\n            \r\n            foreach (var item in battleMain.entities)\r\n            {\r\n                if (item.Type == BattleMain.EntityType.hero)\r\n                {\r\n                    item.life = 0;\r\n                    for (int i = 0; i < item.moves.Length; i++)\r\n                    {\r\n                        item.moves[i] = -1;\r\n                    }\r\n                }\r\n            }\r\n            battleMain.Tick();\r\n\r\n        }\r\n\r\n        internal void EndPreview()\r\n        {\r\n            //Console.Write(\"End preview\");\r\n            //   Console.ReadKey();\r\n            previewActive = false;\r\n            //Console.WriteLine(battleMain.entities.Contains(battleEntity.Comp1(0))+\"XXXS\");\r\n            \r\n            ecs.RestoreState(clonedState);\r\n            battleMain.battleState.phase = BattleMain.BattlePhase.PickHands;\r\n\r\n            foreach (var item in battleMain.entities)\r\n            {\r\n                debug.Print(\"ALL ENTITIES AFTER PREVIEW\");\r\n                debug.Print(item);\r\n                debug.Print(item.randomPosition+\" RANDOM POS\");\r\n                debug.Print(item.Type + \" type\");\r\n                debug.Print(item.drawTurn + \" draw turn\");\r\n                debug.Print(\"END\");\r\n            }\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class ReflectionTest\r\n    {\r\n\r\n        public ReflectionTest() {\r\n            var debug = new Debugger(true);\r\n            \r\n            BattleMain.BattleEntity be = new ConsoleApp.Turnbased.BattleMain.BattleEntity();\r\n            var type = be.GetType();\r\n            BattleMain.BattleEntity be2 = new BattleMain.BattleEntity();\r\n            be2.randomPosition = true;\r\n            debug.Print(type.GetField(\"randomPosition\").GetValue(be2).ToString());\r\n            debug.Print(be2.randomPosition + \"\");\r\n            debug.Print(be);\r\n            DeepCloneHelper.DeepCopyPartial(be, be2);\r\n            DeepCloneHelper.DeepCopyPartial(be2, be);\r\n            debug.Print(be);\r\n            debug.Print(be2);\r\n            \r\n\r\n            debug.Print(type.GetField(\"randomPosition\").GetValue(be2).ToString());\r\n            debug.Print(be2.randomPosition+\"\");\r\n\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing Pidroh.TurnBased.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class BattleRender : ITextScreen_\r\n    {\r\n        internal AttackPreview attackPreview;\r\n        private BattleMain turnBaseTry;\r\n        private readonly StageData stageData;\r\n        private readonly PreviewSystem previewSystem;\r\n        private PositionAnimation posAnim;\r\n        private CharByCharAnimation charByCharAnim;\r\n        private DelaysAnimation delayAnim;\r\n\r\n        public TextWorld textWorld;\r\n        public TextBoard TextBoard { get; set; }\r\n        List<Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase> inputPhases = global::Bridge.Script.CallFor(new List<Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase>(),(_o1)=>{_o1.Add(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands);_o1.Add(Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase .ConfirmInput);return _o1;});\r\n\r\n        internal Vector2D EntityScreenPosition(int user)\r\n        {\r\n            return BattleEntityToScreenPosition(turnBaseTry.entities[user].pos);\r\n        }\r\n\r\n        internal Rect GetGridRect()\r\n        {\r\n            return new Rect(gridOffsetx, gridOffsety, gridScale * 6, gridScale * 3);\r\n        }\r\n\r\n        int input;\r\n        public int Input\r\n        {\r\n            get { return input; }\r\n            set\r\n            {\r\n                input = value; //Console.WriteLine(value);\r\n            }\r\n        }\r\n\r\n        public HappHandling HappHandling { get; internal set; }\r\n        public int InputUnicode { set; get; }\r\n        public MouseIO Mouse { set; get; }\r\n        public MouseHoverManager mouseHover;\r\n\r\n        //public List<DelayedActions> tasks = new List<DelayedActions>();\r\n        Dictionary<object, string> moveChars;\r\n        Dictionary<object, string> moveDescriptions = new Dictionary<object, string>();\r\n        Dictionary<MiscBattleInput, string> miscDescriptions = global::Bridge.Script.CallFor(new Dictionary<MiscBattleInput, string>(),(_o2)=>{_o2.Add(MiscBattleInput.Done,\"DONE\");_o2.Add(MiscBattleInput.Redo,\"REDO\");_o2.Add(MiscBattleInput.Help,\"HELP\");_o2.Add(MiscBattleInput.Preview,\"PREVIEW\");_o2.Add(MiscBattleInput.Confirm,\"CONFIRM\");_o2.Add(MiscBattleInput.Cancel,\"CANCEL\");return _o2;});\r\n        private Dictionary<Input, string> moveButtons;\r\n\r\n        private bool debugOn = true;\r\n        private int gridScale = 5;\r\n        private int gridOffsetx = 2;\r\n        private int gridOffsety = 1;\r\n        internal List<TextEntity> battlerRenders;\r\n\r\n        char[][] entitiesChars;\r\n        private bool MessageDoNotHide;\r\n        string message = null;\r\n        private bool waitingForMessageInput;\r\n        private Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase lastPhase;\r\n        private TextEntity messageEnt;\r\n\r\n        public InputHandling inputH = new InputHandling();\r\n        public bool helpVisualizeRequest;\r\n\r\n        public BattleRender(BattleMain battleLogic, StageData stageData, PreviewSystem PreviewSystem)\r\n        {\r\n\r\n\r\n            string[] entityTexts = { \"@\", \"&\", \"%\", \"$\", \"O\", \"X\", \"J\", \"Y\", \"Z\" };\r\n            entitiesChars = new char[entityTexts.Length][];\r\n            for (int i = 0; i < entityTexts.Length; i++)\r\n            {\r\n                entitiesChars[i] = entityTexts[i].ToCharArray();\r\n            }\r\n\r\n            turnBaseTry = battleLogic;\r\n            this.stageData = stageData;\r\n            previewSystem = PreviewSystem;\r\n            textWorld = new TextWorld();\r\n            posAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.PositionAnimation>(new PositionAnimation());\r\n            charByCharAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.CharByCharAnimation>(new CharByCharAnimation());\r\n            delayAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.DelaysAnimation>(new DelaysAnimation());\r\n            textWorld.Init(GameMain.Width, GameMain.Height);\r\n            TextBoard = textWorld.mainBoard;\r\n            //TextBoard = new TextBoard(70, 25);\r\n\r\n            //var posAnim = textWorld.AddAnimation(new PositionAnimation());\r\n            var blinkAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.BlinkAnim>(new BlinkAnim());\r\n\r\n            battlerRenders = new List<TextEntity>();\r\n            UpdateBattleRenderCount();\r\n\r\n\r\n\r\n\r\n            messageEnt = textWorld.GetFreeEntity(40, 4);\r\n\r\n            turnBaseTry.happManager.AddHandler(new Happs.HappHandler(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag.AttackHit, (h) =>\r\n            {\r\n                var attacker = turnBaseTry.entities[h.GetAttribute_Int(1)];\r\n                int defenderEID = h.GetAttribute_Int(0);\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity defender = null;\r\n                if (defenderEID >= 0)\r\n                    defender = turnBaseTry.entities[defenderEID];\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = (Pidroh.ConsoleApp.Turnbased.BattleMain.Element)h.GetAttribute_Int(2);\r\n                TextEntity fe = GetProjTextEntity(element);\r\n\r\n                if (defender != null)\r\n                {\r\n                    var pos = attacker.PositionV2D;\r\n                    var pos2 = defender.PositionV2D;\r\n                    var xDis = Math.Abs(pos.X - pos2.X);\r\n                    float time = (float)xDis * 0.1f;\r\n\r\n\r\n                    posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                        BattleEntityToScreenPosition(attacker.PositionV2D),\r\n                        BattleEntityToScreenPosition(defender.PositionV2D)));\r\n                }\r\n                else\r\n                {\r\n                    var pos = attacker.PositionV2D;\r\n                    var pos2 = pos;\r\n                    if (attacker.Type == BattleMain.EntityType.enemy)\r\n                        pos2.X = -1;\r\n                    else\r\n                        pos2.X = 6;\r\n                    var xDis = Math.Abs(pos.X - pos2.X);\r\n                    float time = (float)xDis * 0.1f;\r\n                    posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                        BattleEntityToScreenPosition(pos),\r\n                        BattleEntityToScreenPosition(pos2)));\r\n                }\r\n\r\n\r\n\r\n\r\n            }));\r\n\r\n            turnBaseTry.happManager.AddHandler(new Happs.HappHandler(BattleMain.HappTag.AttackMiss, (h) =>\r\n            {\r\n\r\n                var attacker = turnBaseTry.entities[h.GetAttribute_Int(0)];\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = (Pidroh.ConsoleApp.Turnbased.BattleMain.Element)h.GetAttribute_Int(1);\r\n                TextEntity fe = GetProjTextEntity(element);\r\n                var pos = attacker.PositionV2D;\r\n                var pos2 = pos;\r\n                if (attacker.Type == BattleMain.EntityType.enemy)\r\n                    pos2.X = -1;\r\n                else\r\n                    pos2.X = 6;\r\n                var xDis = Math.Abs(pos.X - pos2.X);\r\n                float time = (float)xDis * 0.1f;\r\n                posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                    BattleEntityToScreenPosition(pos),\r\n                    BattleEntityToScreenPosition(pos2)));\r\n            }));\r\n\r\n\r\n            moveChars = global::Bridge.Script.CallFor(new Dictionary<object, string>(),(_o3)=>{_o3.Add(BattleMain.MoveType.Fire,\"F\");_o3.Add(BattleMain.MoveType.Ice,\"I\");_o3.Add(BattleMain.MoveType.Thunder,\"T\");_o3.Add(BattleMain.MoveType.NormalShot,\"G\");_o3.Add(BattleMain.MoveType.MoveRight,Unicode.Rightarrow2+\"\");_o3.Add(BattleMain.MoveType.MoveUp,Unicode.Uparrow2+\"\");_o3.Add(BattleMain.MoveType.MoveDown,Unicode.Downarrow2+\"\");_o3.Add(BattleMain.MoveType.MoveLeft,Unicode.Leftarrow2+\"\");_o3.Add(BattleMain.MoveType.IceBomb,\"IB\");_o3.Add(BattleMain.MoveType.ThunderBomb,\"TB\");_o3.Add(BattleMain.MoveType.SummonEntity,\"SU\");_o3.Add(BattleMain.MoveType.DoNothing,\" \");return _o3;});\r\n\r\n            moveDescriptions = global::Bridge.Script.CallFor(new Dictionary<object, string>(),(_o4)=>{_o4.Add(BattleMain.MoveType.Ice,\"Ice Shot\");_o4.Add(BattleMain.MoveType.Fire,\"Fire Shot\");_o4.Add(BattleMain.MoveType.Thunder,\"Thunder Shot\");_o4.Add(BattleMain.MoveType.IceBomb,\"Ice Bomb\");_o4.Add(BattleMain.MoveType.NormalShot,\"Gun\");_o4.Add(BattleMain.MoveType.MoveRight,Unicode.Rightarrow2+\"\");_o4.Add(BattleMain.MoveType.MoveUp,Unicode.Uparrow2+\"\");_o4.Add(BattleMain.MoveType.MoveDown,Unicode.Downarrow2+\"\");_o4.Add(BattleMain.MoveType.MoveLeft,Unicode.Leftarrow2+\"\");_o4.Add(BattleMain.MoveType.ThunderBomb,\"Thunder Bomb\");_o4.Add(BattleMain.MoveType.SummonEntity,\"Summon\");return _o4;});\r\n\r\n            var mesOnPos = new MessageOnPosition(this);\r\n\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n                var e = turnBaseTry.entities[i];\r\n                if (e.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.hero)\r\n                {\r\n                    var pos = battlerRenders[i].GetPosition();\r\n                    //mesOnPos.MessageOnPos(BattleEntityToScreenPosition(turnBaseTry.entities[i].pos), \"YOU\");\r\n                    //MessageOnPos(Vector2D.Zero, \"YOU\");\r\n                }\r\n            }\r\n\r\n\r\n            //Console.ReadLine();\r\n        }\r\n\r\n\r\n\r\n        private void UpdateBattleRenderCount()\r\n        {\r\n            while (battlerRenders.Count < this.turnBaseTry.entities.Count)\r\n            {\r\n                TextEntity item = textWorld.GetFreeEntity(2, 2);\r\n                battlerRenders.Add(item);\r\n                item.SetPosition(BattleEntityToScreenPosition(turnBaseTry.entities[battlerRenders.Count - 1].pos));\r\n\r\n            }\r\n        }\r\n\r\n        internal string GetEntityName(int user)\r\n        {\r\n            Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity gameEntity = turnBaseTry.entities[user];\r\n            var chars = GetChar(gameEntity);\r\n            string name = new string(chars);\r\n            if (gameEntity.graphicRepeatedIndex > 0)\r\n            {\r\n                return name + (gameEntity.graphicRepeatedIndex + 1);\r\n            }\r\n            else\r\n            {\r\n                return name;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        private TextEntity GetProjTextEntity(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            var fe = textWorld.GetTempEntity(1, 1);\r\n            fe.Origin.DrawChar(TextBoard.INVISIBLECHAR, 0, 0);\r\n            int elementColor = ElementToProjColor(element);\r\n            fe.Origin.SetBackColor(elementColor, 0, 0);\r\n            return fe;\r\n        }\r\n\r\n        public void Draw(float delta)\r\n        {\r\n\r\n            InputKey input = (InputKey)Input;\r\n            if (input != InputKey.NONE && waitingForMessageInput)\r\n            {\r\n                waitingForMessageInput = false;\r\n                message = null;\r\n            }\r\n            //if (input != InputKey.NONE) Console.WriteLine(input);\r\n            //int inputNumber = input - '0';\r\n            //if (debugOn && input == 'k')\r\n            //{\r\n            //    DebugExtra.DebugEx.Show();\r\n            //}\r\n\r\n            if (lastPhase != turnBaseTry.battleState.phase)\r\n            {\r\n                if (turnBaseTry.battleState.phase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                {\r\n                    //ShowMessage(\"Pick your commands\", false, true);\r\n                    //TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, Colors.FireAura);\r\n\r\n                }\r\n                if (lastPhase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                {\r\n                    //Console.Write(\"X__X\");\r\n                    HideMessage();\r\n                    //TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, 0);\r\n                }\r\n            }\r\n            lastPhase = turnBaseTry.battleState.phase;\r\n            if (inputPhases.Contains(turnBaseTry.battleState.phase))\r\n            {\r\n                if (InputUnicode >= 0)\r\n                {\r\n                    if (InputUnicode == 'p')\r\n                    {\r\n                        //Console.WriteLine(\"PREVIEW\");\r\n                        previewSystem.StartPreview();\r\n                        return;\r\n                    }\r\n                    var inputX = inputH.Inputted(InputUnicode, turnBaseTry.inputs);\r\n                    if (inputX.type == InputType.MiscBattle && inputX.arg1 == (int) MiscBattleInput.Help)\r\n                    {\r\n                        helpVisualizeRequest = true;\r\n                    }\r\n\r\n                    if (inputX.type != InputType.None)\r\n                        turnBaseTry.InputDone(inputX);\r\n                }\r\n                if (turnBaseTry.inputs.inputForConfirmation.type != InputType.None)\r\n                {\r\n                    if (false)\r\n                    //if (turnBaseTry.inputs.inputForConfirmation.type == InputType.Move)\r\n                    {\r\n                        attackPreview.ShowPreview(0, turnBaseTry.inputs.inputForConfirmation.arg1);\r\n                        turnBaseTry.ConfirmInputStart();\r\n                    }\r\n                    else\r\n                    {\r\n                        attackPreview.End();\r\n                        turnBaseTry.InputConfirmed();\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    attackPreview.End();\r\n                }\r\n\r\n\r\n                //foreach (var item in moveKeys)\r\n                //{\r\n                //    if (item.Value == input)\r\n                //    {\r\n                //        turnBaseTry.InputDone(item.Key);\r\n                //    }\r\n                //}\r\n            }\r\n            UpdateBattleRenderCount();\r\n            DrawGraphics(delta);\r\n            if (CanAdvance_Logic())\r\n            {\r\n                if (turnBaseTry.battleState.phase != Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase .ExecuteMove && previewSystem.previewActive)\r\n                {\r\n                    previewSystem.EndPreview();\r\n                }\r\n                switch (turnBaseTry.battleState.phase)\r\n                {\r\n                    case BattleMain.BattlePhase.EnemyMoveChoice:\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    case BattleMain.BattlePhase.HandRecharge:\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    case BattleMain.BattlePhase.PickHands:\r\n\r\n                        break;\r\n                    case BattleMain.BattlePhase.ExecuteMove:\r\n                        //System.Threading.Thread.Sleep(300);\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    default:\r\n\r\n                        break;\r\n                }\r\n            }\r\n            //UpdateBattleRenderCount();\r\n            //DrawGraphics(delta);\r\n\r\n        }\r\n\r\n        public bool CanAdvanceGraphics()\r\n        {\r\n            return textWorld.IsDone() && !waitingForMessageInput;\r\n        }\r\n\r\n        private bool CanAdvance_Logic()\r\n        {\r\n            return CanAdvanceGraphics() && HappHandling.IsDone();\r\n        }\r\n\r\n        public void ShowMessage(string s, bool waitForInput = true, bool doNotHide = false)\r\n        {\r\n            this.MessageDoNotHide = doNotHide;\r\n            message = s;\r\n            messageEnt.Origin.ResetInvisible();\r\n            float timeToWrite = message.Length * 0.015f;\r\n            if (timeToWrite > 0.4f) timeToWrite = 0.4f;\r\n            charByCharAnim.Add(messageEnt.AnimBase(timeToWrite), new CharByCharAnimation.CharByCharData(0, message.Length + 1));\r\n            delayAnim.Delay(timeToWrite + 0.8f);\r\n\r\n            //waitingForMessageInput = waitForInput;\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void HideMessage()\r\n        {\r\n            message = null;\r\n            waitingForMessageInput = false;\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void ShowBattleMessage(string s)\r\n        {\r\n            if (!turnBaseTry.BattleDecided())\r\n                ShowMessage(s);\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void DrawGraphics(float delta)\r\n        {\r\n            mouseHover.mouseHovers.Clear();\r\n            turnBaseTry.Update(delta);\r\n            //clear grid\r\n            TextBoard.Reset();\r\n\r\n            if (inputPhases.Contains(turnBaseTry.battleState.phase))\r\n            {\r\n                TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, Colors.BackgroundInput);\r\n            }\r\n\r\n            int controlsY = gridScale * 3 + 10 + 3 + 2;\r\n\r\n            int enemyGridOffX = gridScale * 3;\r\n            bool drawDot = false;\r\n            TextBoard.DrawRepeated(' ', gridOffsetx, gridOffsety, gridScale * 6, gridScale * 3, TextBoard.NOCHANGECOLOR, Colors.BackBattle);\r\n            for (int i = 0; i < 3 * gridScale; i++)\r\n            {\r\n                for (int j = 0; j < 3 * gridScale; j++)\r\n                {\r\n                    if (drawDot)\r\n                    {\r\n                        TextBoard.DrawChar(\r\n                        '.',\r\n                        gridOffsetx + i,\r\n                        gridOffsety + j, Colors.GridHero);\r\n                        TextBoard.DrawChar(\r\n                            '.',\r\n                            gridOffsetx + i + enemyGridOffX,\r\n                            gridOffsety + j, Colors.GridEnemy);\r\n                    }\r\n                    if (i % gridScale == 0 && j % gridScale == 0)\r\n                    {\r\n\r\n                        TextBoard.DrawGrid(i + gridOffsetx + enemyGridOffX, j + gridOffsety, gridScale, gridScale, Colors.GridEnemy);\r\n                        TextBoard.DrawGrid(i + gridOffsetx, j + gridOffsety, gridScale, gridScale, Colors.GridHero);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n\r\n                BattleMain.BattleEntity gameEntity = turnBaseTry.entities[i];\r\n\r\n                var ec = GetChar(gameEntity);\r\n\r\n                var pos = gameEntity.PositionV2D;\r\n                var screenPos = BattleEntityToScreenPosition((BaseUtils.Vector2D)pos);\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect)\r\n                {\r\n                    screenPos.Y = screenPos.Y + 1;\r\n                    screenPos.X = screenPos.X - 1;\r\n                }\r\n                //battlerEntities[i].origin.Position = screenPos;\r\n                if (battlerRenders[i].Origin.Position != screenPos && textWorld.IsDone())\r\n                {\r\n                    //battlerRenders[i].Origin.Position = screenPos;\r\n                    float time = 0.15f;\r\n                    //time = 5;\r\n                    posAnim.Add(battlerRenders[i].AnimBase(time), new PositionAnimation.PositionData(battlerRenders[i].Origin.Position, screenPos, true));\r\n                }\r\n\r\n                var c = Colors.Hero;\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) c = Colors.Enemy;\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) c = Colors.inputKey;\r\n                if (gameEntity.Dead)\r\n                    c = TextBoard.INVISIBLECOLOR;\r\n                int bc = TextBoard.INVISIBLECOLOR;\r\n\r\n                if (gameEntity.Alive)\r\n                {\r\n                    Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = gameEntity.element;\r\n                    if (element != Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None)\r\n                        c = ElementToAuraColor(element);\r\n\r\n                }\r\n                if (gameEntity.Dead)\r\n                {\r\n                    for (int j = 0; j < ec.Length + 1; j++)\r\n                    {\r\n                        battlerRenders[i].Origin.DrawChar(TextBoard.INVISIBLECHAR, j, 0, c, bc);\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    battlerRenders[i].Origin.Draw(ec, 0, 0, c, bc);\r\n                    if (gameEntity.graphicRepeatedIndex > 0)\r\n                        battlerRenders[i].Origin.DrawOneDigit(gameEntity.graphicRepeatedIndex + 1, 0 + ec.Length, 0, c, bc);\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            int textBoardHeight = 3 * gridScale;\r\n\r\n            {\r\n                //int y = 2;\r\n                //int x = 6 * gridScale + 20;\r\n\r\n                int x = 3;\r\n\r\n                if (inputPhases.Contains(turnBaseTry.battleState.phase))\r\n                {\r\n                    DrawControls(controlsY, x);\r\n                    if (turnBaseTry.timeToChoose > 0)\r\n                    {\r\n                        float ratio = turnBaseTry.timeToChoose / turnBaseTry.timeToChooseMax;\r\n                        TextBoard.DrawRepeated(' ', x, controlsY + 16, (int)(ratio * 15), 1, Colors.Board, Colors.GridHero);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    TextBoard.DrawRepeated(' ', x - 1, controlsY - 1, 15, 15, Colors.Board);\r\n                }\r\n            }\r\n\r\n            int turnOrderX = 6 * gridScale + 5;\r\n            int turnOrderY = 2;\r\n            turnOrderX = 2;\r\n            turnOrderY = 3 * gridScale + 1;\r\n            if (inputPhases.Contains(turnBaseTry.battleState.phase))\r\n                turnOrderY += 5;\r\n\r\n            DrawTurnOrder(turnOrderX, turnOrderY);\r\n            if (!stageData.hideLifeUI)\r\n            {\r\n                DrawLife(turnOrderX + 25, turnOrderY);\r\n            }\r\n\r\n            {\r\n                const int X = 2;\r\n                //const int Y = 16;\r\n                messageEnt.SetPosition(X, controlsY - 2);\r\n                if (message != null && (!CanAdvanceGraphics()))\r\n                {\r\n                    //TextBoard.DrawGrid(\r\n                    //    messageEnt.Origin.Position.XInt, messageEnt.Origin.Position.YInt, \r\n                    //    messageEnt.Width, messageEnt.Height, Colors.Board);\r\n                    //messageEnt.Origin.DrawGrid(0, 0, 40, 4, Colors.Board);\r\n                    messageEnt.Origin.DrawWithLinebreaks(message, 1, 0, 1, Colors.HeroTurn);\r\n                }\r\n                else\r\n                {\r\n                    if (!MessageDoNotHide)\r\n                    {\r\n                        message = null;\r\n                        messageEnt.Origin.SetAll(TextBoard.INVISIBLECHAR);\r\n                    }\r\n\r\n                    //TextBoard.DrawRepeated(' ',X, Y, 40, 4, Colors.Board);\r\n                }\r\n            }\r\n            TextBoard.CursorNewLine(1);\r\n            TextBoard.CursorNewLine(1);\r\n            //textBoard.Draw_Cursor(turnBaseTry.battleState.phase.ToString());\r\n\r\n\r\n            textWorld.DrawChildren();\r\n            textWorld.TryEndAnimations();\r\n            textWorld.AdvanceTime(delta);\r\n\r\n            if (CanAdvanceGraphics())\r\n            {\r\n                HappHandling.Handle();\r\n                if (CanAdvanceGraphics())\r\n                {\r\n                    turnBaseTry.happManager.TryHandle();\r\n                }\r\n            }\r\n            //if (CanAdvance())\r\n            //{\r\n\r\n            //}\r\n        }\r\n\r\n        public static int ElementToAuraColor(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            int bc = TextBoard.INVISIBLECOLOR;\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)\r\n            {\r\n                bc = Colors.FireAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)\r\n            {\r\n                bc = Colors.IceAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)\r\n            {\r\n                bc = Colors.ThunderAura;\r\n            }\r\n\r\n            return bc;\r\n        }\r\n\r\n        public static int ElementToProjColor(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            int bc = Colors.inputKey;\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)\r\n            {\r\n                bc = Colors.FireShot;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)\r\n            {\r\n                bc = Colors.IceAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)\r\n            {\r\n                bc = Colors.ThunderAura;\r\n            }\r\n\r\n            return bc;\r\n        }\r\n\r\n        public Vector2D BattleEntityToScreenPosition(BaseUtils.Vector2D pos)\r\n        {\r\n            var x = pos.X;\r\n            var y = pos.Y;\r\n            var screenPos = new BaseUtils.Vector2D(x * gridScale + gridScale / 2 + gridOffsetx, 2 * gridScale - y * gridScale + gridScale / 2 + gridOffsety);\r\n            return screenPos;\r\n        }\r\n\r\n        private void DrawControls(int y, int x)\r\n        {\r\n            //TextBoard.DrawGrid(x - 2, y - 1, 20, 15, Colors.Board);\r\n            TextBoard.SetCursorAt(x, y);\r\n            //TextBoard.Draw_Cursor(\"Controls\", Colors.WindowLabel);\r\n\r\n            //InputTags inputTag = InputTags.MOVEFIX;\r\n            int yOff = 0;\r\n            yOff = DrawInputs_Fix(y, x, InputTags.MOVEFIX, yOff);\r\n            //yOff++;\r\n            yOff = DrawInputs_Fix(y, x, InputTags.MISC, yOff);\r\n            //yOff++;\r\n            //yOff = DrawInputs_Fix(y, x, InputTags.MOVEUNFIX, yOff);\r\n\r\n            int attackNumber = 1;\r\n            for (int i = 0; i < turnBaseTry.inputs.inputs.Count; i++)\r\n            {\r\n                int x2 = x;\r\n                int y2 = y + 2 + yOff;\r\n                var input = turnBaseTry.inputs.inputs[i];\r\n\r\n                if (turnBaseTry.inputs.TagIs(i, InputTags.MOVEUNFIX))\r\n                {\r\n                    yOff++;\r\n                    yOff++;\r\n                    int unicode = '0' + attackNumber;\r\n                    attackNumber++;\r\n                    mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 0, input.arg1));\r\n                    //TextBoard.DrawChar('[', x2 - 1, y2, Colors.HeroTurn);\r\n\r\n                    //TextBoard.DrawChar(']', x2 + lengthBname, y2, Colors.HeroTurn);\r\n\r\n                    string description = string.Empty;\r\n                    if (input.type == InputType.Move)\r\n                    {\r\n                        Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType m = (Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)input.arg1;\r\n                        moveDescriptions.TryGetValue(m, out description);\r\n                        if (description == null)\r\n                        {\r\n                            description = m.ToString();\r\n                        }\r\n\r\n                    }\r\n                    if (input.type == InputType.MiscBattle)\r\n                    {\r\n                        MiscBattleInput arg1 = (MiscBattleInput)input.arg1;\r\n                        description = miscDescriptions[arg1];\r\n                    }\r\n                    var TextBoard = this.TextBoard;\r\n                    GameMain.DrawInput(x2, y2, unicode, description, TextBoard);\r\n\r\n                }\r\n\r\n                //var c = moveChars[move];\r\n                //DrawMove(move, Colors.HeroTurn);\r\n                //TextBoard.Draw(c, x2 + 3, y2, Colors.HeroTurn);\r\n                //TextBoard.DrawWithGrid(c+\"\", x2, y + 2, Colors.HeroTurn);\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        private int DrawInputs_Fix(int y, int x, InputTags inputTag, int yOff)\r\n        {\r\n\r\n            for (int i = 0; i < turnBaseTry.inputs.inputs.Count; i++)\r\n            {\r\n                int x2 = x;\r\n                int y2 = y + 2 + yOff;\r\n                var input = turnBaseTry.inputs.inputs[i];\r\n\r\n                if (turnBaseTry.inputs.TagIs(i, inputTag))\r\n                {\r\n                    var unicode = inputH.GetFixedMoveUnicode(input);\r\n                    string forceInputLabel = null;\r\n                    string forceCommandLabel = null;\r\n                    bool movementCommand = unicode == 'w';\r\n                    if (movementCommand)\r\n                    {\r\n                        forceInputLabel = \"WASD\";\r\n                        forceCommandLabel = \"\" + Unicode.Uparrow2 + Unicode.Leftarrow2 + Unicode.Downarrow2 + Unicode.Rightarrow2;\r\n                    }\r\n                    if (unicode == 'a' || unicode == 's' || unicode == 'd')\r\n                    {\r\n                        continue;\r\n                    }\r\n                    yOff++;\r\n                    yOff++;\r\n\r\n\r\n\r\n                    //TextBoard.DrawChar('[', x2 - 1, y2, Colors.HeroTurn);\r\n                    int lengthBname = 0;\r\n                    if (forceInputLabel == null)\r\n                        lengthBname = TextBoard.DrawUnicodeLabel(unicode, x2, y2, Colors.inputKey);\r\n                    else\r\n                    {\r\n                        TextBoard.Draw(forceInputLabel, x2, y2, Colors.inputKey);\r\n                        lengthBname = forceInputLabel.Length;\r\n                    }\r\n                    //TextBoard.DrawChar(']', x2 + lengthBname, y2, Colors.HeroTurn);\r\n\r\n                    string description = string.Empty;\r\n                    if (input.type == InputType.Move)\r\n                    {\r\n                        if (forceCommandLabel != null)\r\n                        {\r\n                            description = forceCommandLabel;\r\n                        }\r\n                        else\r\n                        {\r\n                            Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType m = (Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)input.arg1;\r\n                            moveDescriptions.TryGetValue(m, out description);\r\n                            if (description == null)\r\n                            {\r\n                                description = m.ToString();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    if (input.type == InputType.MiscBattle)\r\n                    {\r\n                        MiscBattleInput arg1 = (MiscBattleInput)input.arg1;\r\n                        description = miscDescriptions[arg1];\r\n                        mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 1, input.arg1));\r\n                    }\r\n                    else\r\n                    {\r\n                        if (movementCommand)\r\n                            mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 2, 0));\r\n                        else\r\n                            mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 0, input.arg1));\r\n                    }\r\n                    TextBoard.Draw(description, x2 + 2 + 5, y2, Colors.InputDescription);\r\n                }\r\n\r\n                //var c = moveChars[move];\r\n                //DrawMove(move, Colors.HeroTurn);\r\n                //TextBoard.Draw(c, x2 + 3, y2, Colors.HeroTurn);\r\n                //TextBoard.DrawWithGrid(c+\"\", x2, y + 2, Colors.HeroTurn);\r\n            }\r\n\r\n            return yOff;\r\n        }\r\n\r\n        private void DrawLife(int turnOrderX, int turnOrderY)\r\n        {\r\n            //TextBoard.DrawGrid(turnOrderX - 1, turnOrderY - 1, 20, 9, Colors.WindowLabel);\r\n            TextBoard.SetCursorAt(turnOrderX + 1, turnOrderY);\r\n            if (turnBaseTry.battleState.phase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                TextBoard.Draw_Cursor(\"Life\", Colors.WindowLabel);\r\n            TextBoard.SetCursorAt(turnOrderX + 8, turnOrderY);\r\n            if (turnBaseTry.battleState.phase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                TextBoard.Draw_Cursor(\"Element\", Colors.WindowLabel);\r\n            int index = -1; //using this because not all units get drawn\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n                //Console\r\n\r\n                BattleMain.BattleEntity e = turnBaseTry.entities[i];\r\n                if (!e.drawLife)\r\n                {\r\n                    continue;\r\n                }\r\n                if (!e.Dead)\r\n                {\r\n                    index++;\r\n                    int color = Colors.HeroTurn;\r\n                    if (e.Type == BattleMain.EntityType.enemy)\r\n                    {\r\n                        color = Colors.EnemyTurn;\r\n                    }\r\n                    if (e.element != Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None)\r\n                        color = ElementToAuraColor(e.element);\r\n                    //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n                    int xOff = turnOrderX + 1;\r\n                    int yOff = turnOrderY + 2 + index * 2;\r\n                    //DrawEntityChar(e, color, xOff, yOff);\r\n                    //TextBoard.DrawChar(GetChar(e), xOff, turnOrderY + 2, color);\r\n                    TextBoard.DrawTwoDigits((int)e.life, xOff, yOff, color);\r\n                    string element = string.Empty;\r\n                    switch (e.element)\r\n                    {\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire:\r\n                            element = \"Fire\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice:\r\n                            element = \"Ice\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder:\r\n                            element = \"Thunder\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None:\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    var eColor = ElementToAuraColor(e.element);\r\n\r\n                    TextBoard.Draw(element, xOff + 7, yOff, eColor);\r\n                }\r\n\r\n                //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n\r\n                //TextBoard.CursorNewLine(x: 1);\r\n            }\r\n        }\r\n\r\n        private void DrawTurnOrder(int turnOrderX, int turnOrderY, bool horizontal = true)\r\n        {\r\n            Value turnsPerPhase = turnBaseTry.battleState.turnsPerPhase;\r\n            TextBoard.SetCursorAt(turnOrderX + 3, turnOrderY);\r\n            if (turnBaseTry.battleState.phase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                TextBoard.Draw_Cursor(\"Commands\", Colors.WindowLabel);\r\n\r\n            int drawingId = -1;\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n\r\n                BattleMain.BattleEntity e = turnBaseTry.entities[i];\r\n                if (!e.drawTurn)\r\n                {\r\n                    continue;\r\n                }\r\n                if (!e.Dead)\r\n                {\r\n                    drawingId++;\r\n                    int color = Colors.HeroTurn;\r\n                    if (e.Type == BattleMain.EntityType.enemy)\r\n                    {\r\n                        color = Colors.EnemyTurn;\r\n                    }\r\n                    if (e.element != Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None)\r\n                        color = ElementToAuraColor(e.element);\r\n\r\n                    //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n                    int xOff = turnOrderX + 1 + drawingId * 3;\r\n                    int yEntity = turnOrderY + 2;\r\n                    int yFirstMove = turnOrderY + 3;\r\n                    int xFirstMove = xOff;\r\n                    if (horizontal)\r\n                    {\r\n                        xOff = turnOrderX;\r\n                        yEntity = turnOrderY + 2 + drawingId * 2;\r\n                        yFirstMove = yEntity;\r\n                        xFirstMove = turnOrderX + 3;\r\n                    }\r\n                    DrawEntityChar(e, color, xOff, yEntity);\r\n\r\n                    TextBoard.SetCursorAt(xFirstMove, yFirstMove);\r\n\r\n                    for (int i2 = 0; i2 < turnsPerPhase; i2++)\r\n                    {\r\n                        int color2 = color;\r\n                        int backColor = Colors.BackCommand;\r\n                        if (turnBaseTry.battleState.phase == BattleMain.BattlePhase.ExecuteMove)\r\n                        {\r\n                            if (drawingId == turnBaseTry.battleState.actingEntity && i2 == turnBaseTry.battleState.turn)\r\n                            {\r\n                            }\r\n                            //color2 = Colors.Hero;\r\n                            else\r\n                            {\r\n                                backColor = Colors.BackBattle;\r\n                                color2 = Colors.InputDescription;\r\n                            }\r\n\r\n                        }\r\n\r\n                        if (i2 < turnsPerPhase)\r\n                        {\r\n                            string c = GetCharOfMove(e, i2);\r\n                            mouseHover.mouseHovers.Add(new MouseHover(new Rect(\r\n                                TextBoard.CursorX,\r\n                                TextBoard.CursorY,\r\n                                c.Length,\r\n                                1\r\n                                ),\r\n                                0, e.moves[i2])); //add here...? @_@\r\n\r\n                            TextBoard.Draw_Cursor(c, color2, backColor);\r\n                            if (horizontal)\r\n                            {\r\n                                for (int j = c.Length; j < 3; j++)\r\n                                {\r\n                                    TextBoard.AdvanceCursor();\r\n                                }\r\n\r\n\r\n\r\n\r\n                            }\r\n\r\n                            //TextBoard.Draw_Cursor(' ');\r\n                        }\r\n                        else\r\n                        {\r\n                            TextBoard.Draw_Cursor(' ', color, Colors.BackCommand);\r\n                        }\r\n                        if (horizontal)\r\n                        {\r\n\r\n                        }\r\n                        else\r\n                        {\r\n                            TextBoard.CursorNewLine(x: xFirstMove);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //TextBoard.CursorNewLine(x: 1);\r\n            }\r\n        }\r\n\r\n        private void DrawEntityChar(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity e, int color, int x, int y)\r\n        {\r\n            char[] chars = GetChar(e);\r\n\r\n            TextBoard.Draw(chars, x, y, color);\r\n            if (e.graphicRepeatedIndex > 0)\r\n            {\r\n                TextBoard.DrawOneDigit(e.graphicRepeatedIndex + 1, x + chars.Length, y, color);\r\n            }\r\n        }\r\n\r\n        private string GetCharOfMove(BattleMain.BattleEntity e, int i2)\r\n        {\r\n\r\n\r\n            float val = e.moves[i2];\r\n            if (val >= 0)\r\n                return moveChars[(BattleMain.MoveType)val];\r\n            else\r\n                return \" \";\r\n        }\r\n\r\n        public char[] GetChar(BattleMain.BattleEntity gameEntity)\r\n        {\r\n            return entitiesChars[gameEntity.graphic];\r\n\r\n        }\r\n\r\n        private void DrawMove(Value move, int color)\r\n        {\r\n            if (move.Val >= 0)\r\n            {\r\n                BattleMain.MoveType m = (BattleMain.MoveType)move.Val;\r\n                DrawMove(m, color);\r\n            }\r\n            else\r\n            {\r\n                TextBoard.Draw_Cursor(' ');\r\n            }\r\n\r\n        }\r\n\r\n        private void DrawMove(BattleMain.MoveType move, int color)\r\n        {\r\n            var c = moveChars[move];\r\n            TextBoard.Draw_Cursor(c, color);\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return TextBoard;\r\n        }\r\n\r\n        public static class Colors\r\n        {\r\n            public const int GridHero = 1;\r\n            public const int GridEnemy = 2;\r\n            public const int Hero = 3;\r\n            public const int Enemy = 4;\r\n            public const int HeroTurn = 5;\r\n            public const int EnemyTurn = 6;\r\n            public const int inputKey = 7;\r\n            public const int Board = 8;\r\n            public const int WindowLabel = 9;\r\n            internal static int FireAura = 10;\r\n            internal static int IceAura = 11;\r\n            internal static int ThunderAura = 12;\r\n            internal static int FireShot = 13;\r\n            internal static int IceShot = 14;\r\n            internal static int ThunderShot = 15;\r\n            public const int BackgroundInput = 16;\r\n            public const int InputDescription = 17;\r\n            internal static int BackBattle = 18;\r\n            internal static int BackCommand = 19;\r\n        }\r\n\r\n        public enum InputKey\r\n        {\r\n            NONE, LEFT, RIGHT, DOWN, UP, FIRE, REDO, DONE,\r\n            ICE,\r\n            THUNDER,\r\n            NORMALSHOT\r\n        }\r\n\n\r\n\r\n    \nprivate int __Property__Initializer__InputUnicode=-1;}\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing Pidroh.TurnBased.TextRendering;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class GameMain : ITextScreen_\r\n    {\r\n        private BattleMain battleMain;\r\n        private BattleRender battleRender;\r\n        private ModeSelectionScreen modeSelectionScreen;\r\n        ITextScreen_ mainDraw;\r\n        private HelpScreen helpScreen;\r\n        private ResultScreen resultScreen;\r\n        //ITextScreen[] screens = new ITextScreen[5];\r\n        int stageId;\r\n        int[] enemyAmount = new int[]   { 1, 1, 2, 1, 2, 3, 2, 3, 1, 2, 3, 3 };\r\n        int[] turnAmount = new int[] { 2, 4, 2, 6, 4, 2, 6, 4, 8, 8, 6, 8 };\r\n        private MouseHoverText mouseHover;\r\n\r\n        public GameMain()\r\n        {\r\n            modeSelectionScreen = new ModeSelectionScreen();\r\n            \r\n            Reset();\r\n            modeSelectionScreen.mode = 1;\r\n            modeSelectionScreen.wannaLeave = 1;\r\n            mainDraw = modeSelectionScreen;\r\n            \r\n            //Reset();\r\n        }\r\n\r\n        private void Reset()\r\n        {\r\n            //var moveRenderInfo = new MoveRenderInfo();\r\n            //moveRenderInfo.AddMoveNames();\r\n            string[] moveDescriptions = new string[] {\r\n                \"\",\r\n                \"Move up\",\r\n                \"Move left\",\r\n                \"Move down\",\r\n                \"Move right\",\r\n                \"Shoots forward\",\r\n                \"Shoots fire forward\",\r\n                \"Shoots ice forward\",\r\n                \"Shoots thunder forward\",\r\n                \"Throws ice bomb three squares forward\",\r\n                \"Throws thunder bomb three squares forward\",\r\n                \"Summons another enemy\",\r\n                \"\",\r\n            };\r\n\r\n            int mode = modeSelectionScreen.mode;\r\n            bool timeAttack = modeSelectionScreen.timeAttack;\r\n\r\n            var ecs = ECSManager.Create();\r\n\r\n            StageDataCreator sdc = new StageDataCreator(ecs);\r\n            var stages = ecs.QuickAccessor1<StageData>();\r\n            //var stages = sdc.stages;\r\n\r\n            int d = stageId;\r\n            if (stages.Count <= d)\r\n            {\r\n                mainDraw = modeSelectionScreen;\r\n                modeSelectionScreen.Reset();\r\n                stageId = 0;\r\n                return;\r\n            }\r\n            //d = 200;\r\n            if (d >= enemyAmount.Length) d = enemyAmount.Length - 1;\r\n            int nEnemies = enemyAmount[d];\r\n\r\n            BattleSetup battleSetup = new BattleSetup(mode, stageId, ecs);\r\n            var moveCreator = battleSetup.moveCreator;\r\n            battleMain = battleSetup.battleMain;\r\n            List<MoveRenderData> moveRenders = moveCreator.moveRenders;\r\n            for (int i = 0; i < moveRenders.Count; i++)\r\n            {\r\n                moveRenders[i].Description = moveDescriptions[i];\r\n                //Console.WriteLine(\"{0} {1}\", moveRenders[i].Label, moveRenders[i].Description);\r\n            }\r\n            HelpScreenModel helpModel = new HelpScreenModel(battleMain);\r\n            helpScreen = new HelpScreen(helpModel, moveRenders, moveCreator.moveDatas);\r\n\r\n            var ps = new PreviewSystem(ecs, battleMain);\r\n\r\n\r\n\r\n            //ecs.CreateEntityWithComponent(new EnemySpawnData(0, new BaseUtils.Vector2D(4, 1)));\r\n            //ecs.CreateEntityWithComponent(new EnemySpawnData(1, new BaseUtils.Vector2D(5, 1)));\r\n\r\n\r\n            float timeToChoose = -1;\r\n            if (timeAttack)\r\n            {\r\n                timeToChoose = (5f * turnAmount[d]) * nEnemies;\r\n                \r\n            }\r\n            battleMain.timeToChooseMax = timeToChoose;\r\n            battleMain.Init();\r\n            battleRender = new BattleRender(battleMain, stageData:stages.Comp1(stageId), PreviewSystem:ps);\r\n            new AttackPreview(ecs, battleRender);\r\n            new HappHandling(battleRender, battleSetup);\r\n            //\r\n            \r\n            if (helpScreen.IsWannaShowIntro()) {\r\n                helpScreen.Show();\r\n                mainDraw = helpScreen;\r\n                helpModel.battleIntroMode = true;\r\n            }\r\n            else{\r\n                mainDraw = battleRender;\r\n            }\r\n            \r\n            //helpScreen.\r\n            resultScreen = new ResultScreen();\r\n            \r\n            resultScreen.battleResult = battleMain.battleResult;\r\n            \r\n            MouseHoverManager hoverManager = new MouseHoverManager(Mouse);\r\n            hoverManager.mouseHovers.Add(new MouseHover(new BaseUtils.Rect(5,5,5,5), 0,0));\r\n\r\n            \r\n            mouseHover = new MouseHoverText(hoverManager, battleRender.textWorld.GetFreeEntity(50, 1), moveDescriptions);\r\n\r\n            battleRender.mouseHover = hoverManager;\r\n        }\r\n\r\n        public int Input { set { mainDraw.Input = value; } get { return 'c'; } }\r\n        public int InputUnicode { set { value = remap.Remap(value); mainDraw.InputUnicode = value; } get { return 'c'; } }\r\n\r\n        public MouseIO Mouse { set; get; }\r\n        UnicodeRemap remap = new UnicodeRemap();\r\n        internal static readonly int Width = 68;\r\n        internal static readonly int Height = 46;\r\n\r\n        public static void DrawInput(int x2, int y2, int unicode, string description, TextBoard TextBoard)\r\n        {\r\n            TextBoard.DrawUnicodeLabel(unicode, x2, y2, BattleRender.Colors.inputKey);\r\n            TextBoard.Draw(description, x2 + 2 + 5, y2, BattleRender.Colors.InputDescription);\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            mouseHover.Update();\r\n            mainDraw.Draw(f);\r\n            mainDraw.Mouse = Mouse;\r\n            if (helpScreen.wannaLeave == true)\r\n            {\r\n                helpScreen.wannaLeave = false;\r\n                mainDraw = battleRender;\r\n\r\n            }\r\n            if (mainDraw == battleRender)\r\n            {\r\n                if (battleRender.helpVisualizeRequest) {\r\n                    helpScreen.Show();\r\n                    mainDraw = helpScreen;\r\n                    battleRender.helpVisualizeRequest = false;\r\n                    helpScreen.HelpMode();\r\n                }\r\n                if (battleMain.IsOver())\r\n                {\r\n                    if (battleMain.IsVictory())\r\n                    {\r\n                        stageId++;\r\n                    }\r\n                    resultScreen.Enter();\r\n                    mainDraw = resultScreen;\r\n                }\r\n            }\r\n            if (mainDraw == resultScreen)\r\n            {\r\n                if (resultScreen.wannaLeave == 1)\r\n                {\r\n                    Reset();\r\n                }\r\n            }\r\n            if (mainDraw == modeSelectionScreen) {\r\n                if (modeSelectionScreen.wannaLeave == 1)\r\n                {\r\n                    Reset();\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return mainDraw.GetBoard();\r\n        }\r\n\n    \nprivate MouseIO __Property__Initializer__Mouse=new MouseIO();}\r\n}\r\n","using Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class ResultScreen : ITextScreen_\r\n    {\r\n        private TextWorld textWorld;\r\n        string youWin = \"You Win\";\r\n        public MouseIO Mouse { set; get; }\r\n        string youLose = \"You lose\";\r\n        public BattleResult battleResult;\r\n        public ResultScreen()\r\n        {\r\n            textWorld = new TextWorld();\r\n            textWorld.Init(60, 25);\r\n        }\r\n        public int wannaLeave;\r\n\r\n        public int Input { set; get; }\r\n        public int InputUnicode { set; get; }\r\n\r\n        public void Enter()\r\n        {\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            if (InputUnicode > 0)\r\n            {\r\n                wannaLeave = 1;\r\n            }\r\n            string message = youWin;\r\n            if (battleResult.result == 2) message = youLose;\r\n            textWorld.mainBoard.DrawOnCenter(message, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.ThunderShot);\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return textWorld.mainBoard;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TestGame : ITextGame\r\n    {\r\n        public TextScreenHolder ScreenHolder { get; private set; }\r\n\r\n        public Palette GetPalette()\r\n        {\r\n            return DefaultPalettes.C4Novel;\r\n        }\r\n\r\n        public void Init(int w, int h)\r\n        {\r\n            TextScreenN screen = new TestScreen();\r\n            ScreenHolder.SetAll(screen);\r\n            screen.Init(w, h);\r\n            screen.GetBoard().Draw(\"Test\", 0,0, 1);\r\n        }\r\n\r\n        public void Update(float delta)\r\n        {\r\n            \r\n        }\r\n\n    \nprivate TextScreenHolder __Property__Initializer__ScreenHolder=new TextScreenHolder();}\r\n\r\n    public class TestScreen : TextScreenN\r\n    {\r\n        public override void Update(float f)\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class ModeSelectionScreen : ITextScreen_\r\n    {\r\n        private TextWorld textWorld;\r\n        string youWin = \"You Win\";\r\n        string youLose = \"You lose\";\r\n        public MouseIO Mouse { set; get; }\r\n        int selection;\r\n        public BattleResult battleResult;\r\n        public ModeSelectionScreen()\r\n        {\r\n            textWorld = new TextWorld();\r\n            textWorld.Init(70, 25);\r\n        }\r\n        public int wannaLeave;\r\n        public int mode;\r\n        public bool timeAttack = false;\r\n        public int screenStage;\r\n\r\n        public int Input { set; get; }\r\n        public int InputUnicode { set; get; }\r\n\r\n        public void Enter()\r\n        {\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            textWorld.mainBoard.Reset();\r\n            Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey ik = (Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey) Input;\r\n            mode = -1;\r\n            textWorld.mainBoard.Draw(\"ProgBattle Prototype v0.3\", 1, 1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);\r\n            textWorld.mainBoard.Draw(\"A game by Pidroh\", 1, 2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);\r\n            if (screenStage == 0)\r\n            {\r\n                switch (ik)\r\n                {\r\n\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.LEFT:\r\n                        screenStage = 1;\r\n                        timeAttack = false;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.RIGHT:\r\n                        screenStage = 1;\r\n                        timeAttack = true;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN:\r\n                        timeAttack = true;\r\n                        mode = 0;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP:\r\n                        mode = 0;\r\n                        timeAttack = false;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                textWorld.mainBoard.DrawOnCenter(\"[w] Vanilla\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 4, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[a] Elemental\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 5, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[s] Vanilla Time Attack\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 6, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[d] Elemental Time Attack\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 7, alignString: false);\r\n            }\r\n            if (screenStage == 1)\r\n            {\r\n                if (ik == Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP)\r\n                {\r\n                    mode = 1;\r\n                    \r\n                }\r\n                if (ik == Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN)\r\n                {\r\n                    screenStage = 0;\r\n                }\r\n                textWorld.mainBoard.DrawOnCenter(\"Elemental Mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: -5);\r\n                textWorld.mainBoard.DrawOnCenter(\"Fire beats Ice, Ice beats Thunder, Thunder beats fire\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: -2);\r\n                textWorld.mainBoard.DrawOnCenter(\"Same element = no damage\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 0);\r\n                textWorld.mainBoard.DrawOnCenter(\"It is best to have had some experience with vanilla mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 1);\r\n                textWorld.mainBoard.DrawOnCenter(\"[w] Start Elemental Mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 4, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[s] Go back\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 5, alignString: false);\r\n            }\r\n\r\n\r\n            if (mode >= 0)\r\n            {\r\n                wannaLeave = 1;\r\n            }\r\n\r\n            \r\n            \r\n\r\n            //string message = youWin;\r\n            //if (battleResult.result == 2) message = youLose;\r\n            //textWorld.mainBoard.DrawOnCenter(message, Colors.Board);\r\n        }\r\n\r\n        internal void Reset()\r\n        {\r\n            mode = -1;\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return textWorld.mainBoard;\r\n        }\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class BlinkAnim : TextAnimation<BlinkAnim.BlinkData>\r\n    {\r\n        public override void Modify(TextEntity entity, BlinkData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            float aux = progress;\r\n            bool blink = true;\r\n            while (true)\r\n            {\r\n                if (blink)\r\n                {\r\n                    aux -= mainData.blinkActiveTime;\r\n                }\r\n                else\r\n                {\r\n                    aux -= mainData.blinkInactive;\r\n                }\r\n                if (aux < 0)\r\n                {\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    blink = !blink;\r\n                }\r\n            }\r\n            if (!blink)\r\n            {\r\n                if (mainData.changeInvisible)\r\n                {\r\n                    entity.Animation.SetAll(mainData.text, mainData.textColor, mainData.backColor);\r\n                }\r\n                else {\r\n                    entity.Animation.SetAllIfVisible(mainData.text, mainData.textColor, mainData.backColor);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n\r\n        public struct BlinkData\r\n        {\r\n            public readonly char text;\r\n            public readonly int backColor, textColor;\r\n            public readonly float blinkActiveTime;\r\n            public readonly float blinkInactive;\r\n            public readonly bool changeInvisible;\r\n\r\n            public BlinkData(char text, int backColor, int textColor, float blinkActiveTime, float blinkInactive, bool changeNoChangeColor = true)\r\n            {\r\n                this.text = text;\r\n                this.backColor = backColor;\r\n                this.textColor = textColor;\r\n                this.blinkActiveTime = blinkActiveTime;\r\n                this.blinkInactive = blinkInactive;\r\n                this.changeInvisible = true;\r\n            }\r\n\r\n            public static BlinkData BackColor(int backColor, float blinkDuration, bool changeNoChangeColor = true)\r\n            {\r\n                return new BlinkData(TextBoard.NOCHANGECHAR, backColor, TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration, changeNoChangeColor);\r\n            }\r\n\r\n            public static BlinkData FrontColor(int frontColor, float blinkDuration)\r\n            {\r\n                return new BlinkData(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, frontColor,  blinkDuration, blinkDuration);\r\n            }\r\n\r\n            public static BlinkData Char(char c, float blinkDuration)\r\n            {\r\n                return new BlinkData(c, TextBoard.NOCHANGECOLOR, TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration);\r\n            }\r\n        }\r\n    }\r\n}\r\n","namespace Pidroh.TextRendering\r\n{\r\n    public class CharByCharAnimation : TextAnimation<CharByCharAnimation.CharByCharData>\r\n    {\r\n        public override void Modify(TextEntity entity, CharByCharData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            float ratio = progress / length;\r\n            float lengthText = mainData.charEnd - mainData.charStart;\r\n            int lineBreaks = 0;\r\n            int offsetedPerm = 0;\r\n            for (int i = mainData.charStart; i < mainData.charEnd; i++)\r\n            {\r\n                int offseted = i + offsetedPerm;\r\n                int line = 0;\r\n                var tb = entity.Animation;\r\n                \r\n\r\n                while (offseted >= tb.Width)\r\n                {\r\n                    line++;\r\n                    offseted -= tb.Width;\r\n                }\r\n                if (entity.Origin.CharAt(offseted, line + lineBreaks) == '\\n')\r\n                {\r\n                    lineBreaks++;\r\n                    offsetedPerm -= offseted;\r\n                    offseted = 0;\r\n                }\r\n                if (i > ((lengthText * ratio) + mainData.charStart))\r\n                {\r\n                    tb.DrawChar(' ', offseted, line + lineBreaks);\r\n                    //tb.Draw(\"\" + i, 6, 5, 1);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public class CharByCharData\r\n        {\r\n            internal int charStart;\r\n            internal int charEnd;\r\n\r\n            public CharByCharData(int charStart, int charEnd)\r\n            {\r\n                this.charStart = charStart;\r\n                this.charEnd = charEnd;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]
}

2018-08-15T06:33:03:926 	Trace		Base64 SourceMap for C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:927 	Trace		//# sourceMappingURL=data:application/json;base64,
2018-08-15T06:33:03:937 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js ...
2018-08-15T06:33:03:937 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:937 	Trace		Output BridgeBuild.meta.js
2018-08-15T06:33:03:938 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-08-15T06:33:03:938 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-08-15T06:33:03:940 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js ...
2018-08-15T06:33:03:940 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-08-15T06:33:03:940 	Info		Done Save path = C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-08-15T06:33:03:940 	Info		Injecting resources...
2018-08-15T06:33:03:941 	Trace		PrepareResourcesForEmbedding...
2018-08-15T06:33:03:941 	Trace		Preparing outputs for resources
2018-08-15T06:33:03:941 	Trace		Getting output C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-08-15T06:33:03:941 	Trace		Reading content file as the output has HasGeneratedSourceMap
2018-08-15T06:33:03:942 	Trace		Read 917812 bytes for BridgeBuild.js
2018-08-15T06:33:03:942 	Trace		Embedding resource BridgeBuild.js (fileName: BridgeBuild.js)
2018-08-15T06:33:03:942 	Trace		Added resource BridgeBuild.js (fileName: BridgeBuild.js)
2018-08-15T06:33:03:942 	Trace		Getting output C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-08-15T06:33:03:942 	Trace		The output item does not have HasGeneratedSourceMap so we use it right from the Outputs
2018-08-15T06:33:03:943 	Trace		The output is of content 195195 length
2018-08-15T06:33:03:943 	Trace		Embedding resource BridgeBuild.meta.js (fileName: BridgeBuild.meta.js)
2018-08-15T06:33:03:944 	Trace		Added resource BridgeBuild.meta.js (fileName: BridgeBuild.meta.js)
2018-08-15T06:33:03:944 	Trace		Done preparing output files for resources
2018-08-15T06:33:03:944 	Trace		PrepareResourcesForEmbedding done
2018-08-15T06:33:03:944 	Trace		Embedding resources...
2018-08-15T06:33:03:944 	Trace		Added resource list Bridge.Resources.json
2018-08-15T06:33:03:944 	Trace		[
  {
    "FileName": "BridgeBuild.js",
    "Name": "BridgeBuild.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "BridgeBuild.meta.js",
    "Name": "BridgeBuild.meta.js",
    "Path": null,
    "Parts": null
  }
]
2018-08-15T06:33:03:945 	Trace		Removing mscorlib reference
2018-08-15T06:33:03:945 	Trace		Writing resources into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
2018-08-15T06:33:03:945 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:946 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference, ReaderParameters) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null, Deferred
2018-08-15T06:33:03:955 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:955 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:956 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:956 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:956 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:957 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:957 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:957 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:958 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:958 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:958 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:958 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:958 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:959 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:959 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:959 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:959 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:960 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:960 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:960 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:961 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:961 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:961 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:961 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:961 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:963 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:963 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:963 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:963 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:964 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:964 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:964 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:964 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:966 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:966 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:966 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:970 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:971 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:971 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:972 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:972 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:973 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:973 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:974 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:974 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:974 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:975 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:975 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:976 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:976 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:976 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:976 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:977 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:977 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:977 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:977 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:978 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:978 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:978 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:978 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:979 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:979 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:979 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:979 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:979 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:980 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:981 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:03:981 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.1.0.0, Culture=neutral, PublicKeyToken=null
2018-08-15T06:33:04:034 	Trace		Wrote resources into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
2018-08-15T06:33:04:035 	Trace		Done embedding resources
2018-08-15T06:33:04:035 	Info		Done injecting resources
2018-08-15T06:33:04:035 	Info		Checking AfterBuild event...
2018-08-15T06:33:04:035 	Trace		No AfterBuild event specified
2018-08-15T06:33:04:036 	Info		Done checking AfterBuild event...
2018-08-15T06:33:04:036 	Info		Run plugins AfterOutput...
2018-08-15T06:33:04:036 	Info		Done plugins AfterOutput
2018-08-15T06:33:04:036 	Trace		GenerateHtml...
2018-08-15T06:33:04:037 	Trace		GenerateHtml skipped as disabled in config.
2018-08-15T06:33:04:038 	Trace		Report...
2018-08-15T06:33:04:038 	Trace		Report skipped as disabled in config.
2018-08-15T06:33:04:038 	Info		Done post processing
