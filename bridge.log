Executing Bridge.Build.Task...
Reading configuration file bridge.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj for configuration Debug ...
Getting configuration by file path bridge.Debug.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
Skipping bridge.Debug.json (not found)
Getting configuration by file path bridge.json at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
Found configuration file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bridge.json
Reading base configuration at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bridge.json ...
Setting translator properties...
Translator properties:
	BridgeLocation:bin\Debug\Bridge.dll
	BuildArguments:
	DefineConstants:BRIDGE DEBUG TRACE
	Rebuild:False
	ProjectProperties:$(AssemblyName):BridgeBuild, $(CheckForOverflowUnderflow):, $(Configuration):Debug, $(DefineConstants):DEBUG;TRACE, $(OutDir):bin\Debug\, $(OutputPath):bin\Debug\, $(OutputType):Library, $(Platform):AnyCPU, $(RootNamespace):BridgeBuild
EnsureProjectProperties at C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\BuildBridge.csproj ...
DefaultNamespace:BridgeBuild
BuildAssemblyLocation...
    FullOutputPath:C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\
    OutDir:bin\Debug\
    OutputPath:bin\Debug\
    AssemblyLocation:C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
BuildAssemblyLocation done
Getting source files by xml...
Getting source files by location...
Getting source files by location done (found 53 items)
Getting source files by xml done
EnsureDefineConstants...
EnsureDefineConstants done
EnsureProjectProperties done
ApplyProjectPropertiesToConfig...
ApplyTokens ...
Properties:$(AssemblyName):BridgeBuild, $(CheckForOverflowUnderflow):, $(Configuration):Debug, $(DefineConstants):DEBUG;TRACE, $(OutDir):bin\Debug\, $(OutputPath):bin\Debug\, $(OutputType):Library, $(Platform):AnyCPU, $(RootNamespace):BridgeBuild
ApplyTokens done
ApplyProjectPropertiesToConfig done
Setting translator properties done
Applying logger configuration parameters...
Logger level: Trace
Read config file: {"FileName":null,"Output":"bin\\Debug\\bridge\\","OutputBy":"Project","FileNameCasing":"None","OutputFormatting":"Formatted","StartIndexInName":0,"Module":null,"Dependencies":[],"BeforeBuild":null,"AfterBuild":null,"AutoPropertyToField":false,"PluginsPath":null,"GenerateTypeScript":false,"GenerateDocumentation":"Basic","BuildArguments":null,"CleanOutputFolderBeforeBuild":null,"CleanOutputFolderBeforeBuildPattern":null,"Configuration":null,"DefineConstants":[],"Locales":null,"LocalesOutput":null,"LocalesFileName":null,"CombineLocales":false,"CombineScripts":false,"UseTypedArrays":false,"IgnoreCast":false,"Logging":{"Level":"Trace","TimeStamps":null,"MaxSize":null,"Folder":null,"FileName":null},"OverflowMode":null,"NoLoggerTimeStamps":null,"StrictNullChecks":false,"Reflection":{"Disabled":false,"memberAccessibility":null,"TypeAccessibility":null,"Filter":null,"Output":null,"Target":0},"Assembly":{"DisableInitAssembly":false,"EnableReservedNamespaces":false,"FullName":null},"Resources":[],"Loader":{"Type":0,"FunctionName":null,"ManualLoading":false,"ManualLoadingMask":null,"SkipManualVariables":false},"NamedFunctions":0,"SourceMap":true,"Html":true,"Console":true,"Report":false,"Rules":{"Lambda":1,"Boxing":0,"ArrayIndex":0,"Integer":0,"AnonymousType":1,"AutoProperty":1,"InlineComment":null,"ExternalCast":null,"Level":0},"ReferencesPath":null,"References":null}
2018-06-17T07:51:57:569 	Trace		Setting logger configuration parameters done
2018-06-17T07:51:57:577 	Info		Translating...
2018-06-17T07:51:57:580 	Info		Inspecting references...
2018-06-17T07:51:57:584 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll ...
2018-06-17T07:51:57:606 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll ...
2018-06-17T07:51:57:616 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.dll done
2018-06-17T07:51:57:616 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.Html5.dll ...
2018-06-17T07:51:57:618 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\Bridge.Html5.dll done
2018-06-17T07:51:57:619 	Trace		Assembly definition loading C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll done
2018-06-17T07:51:57:620 	Trace		Reading types for assembly BridgeBuild ...
2018-06-17T07:51:57:674 	Trace		Reading types for assembly done
2018-06-17T07:51:57:675 	Trace		Reading types for assembly Bridge ...
2018-06-17T07:51:57:688 	Trace		Reading types for assembly done
2018-06-17T07:51:57:688 	Trace		Reading types for assembly Bridge.Html5 ...
2018-06-17T07:51:57:703 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:51:57:704 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference, ReaderParameters) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null, Deferred
2018-06-17T07:51:57:738 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:51:57:739 	Trace		Reading types for assembly done
2018-06-17T07:51:57:740 	Info		Inspecting references done
2018-06-17T07:51:57:743 	Info		Product info:
2018-06-17T07:51:57:744 	Info			Bridge.Compiler version 17.0.0
2018-06-17T07:51:57:744 	Info			[Bridge Framework, version 17.0.0]
2018-06-17T07:51:57:744 	Info			Copyright 2008-2018 Object.NET, Inc.
2018-06-17T07:51:57:751 	Info		Discovering plugins...
2018-06-17T07:51:57:751 	Trace		Set assembly Resolve and Load events for domain MSBuild.exe
2018-06-17T07:51:57:752 	Trace		Current domain MSBuild.exe
2018-06-17T07:51:57:752 	Trace		Application base: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\
2018-06-17T07:51:57:752 	Trace		Loaded assemblies:
2018-06-17T07:51:57:752 	Trace			mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\Windows\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll True
2018-06-17T07:51:57:753 	Trace			MSBuild, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe False
2018-06-17T07:51:57:753 	Trace			System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll True
2018-06-17T07:51:57:753 	Trace			System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Core\v4.0_4.0.0.0__b77a5c561934e089\System.Core.dll True
2018-06-17T07:51:57:754 	Trace			System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Configuration\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll True
2018-06-17T07:51:57:754 	Trace			Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Framework.dll False
2018-06-17T07:51:57:755 	Trace			Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.dll False
2018-06-17T07:51:57:755 	Trace			System.Runtime.InteropServices.RuntimeInformation, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\System.Runtime.InteropServices.RuntimeInformation.dll False
2018-06-17T07:51:57:755 	Trace			System.Runtime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.dll True
2018-06-17T07:51:57:756 	Trace			System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.dll True
2018-06-17T07:51:57:756 	Trace			System.Threading.Tasks.Dataflow, Version=4.5.24.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading.Tasks.Dataflow\v4.0_4.5.24.0__b03f5f7f11d50a3a\System.Threading.Tasks.Dataflow.dll True
2018-06-17T07:51:57:756 	Trace			System.Threading.Tasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading.Tasks\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Threading.Tasks.dll True
2018-06-17T07:51:57:757 	Trace			System.Diagnostics.Tracing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Diagnostics.Tracing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Diagnostics.Tracing.dll True
2018-06-17T07:51:57:757 	Trace			System.Collections.Concurrent, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Collections.Concurrent\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Collections.Concurrent.dll True
2018-06-17T07:51:57:757 	Trace			System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\System.Collections.Immutable.dll False
2018-06-17T07:51:57:758 	Trace			Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Utilities.Core.dll False
2018-06-17T07:51:57:758 	Trace			System.Collections, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Collections\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Collections.dll True
2018-06-17T07:51:57:759 	Trace			Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Microsoft.Build.Tasks.Core.dll False
2018-06-17T07:51:57:759 	Trace			NuGet.Build.Tasks, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Build.Tasks.dll False
2018-06-17T07:51:57:759 	Trace			NuGet.Commands, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Commands.dll False
2018-06-17T07:51:57:760 	Trace			Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\Microsoft.Build.Utilities.v4.0\v4.0_4.0.0.0__b03f5f7f11d50a3a\Microsoft.Build.Utilities.v4.0.dll True
2018-06-17T07:51:57:760 	Trace			NuGet.Common, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Common.dll False
2018-06-17T07:51:57:760 	Trace			NuGet.Frameworks, Version=4.5.0.4, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.Frameworks.dll False
2018-06-17T07:51:57:761 	Trace			Microsoft.NET.Build.Extensions.Tasks, Version=15.5.0.1015, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Microsoft\Microsoft.NET.Build.Extensions\tools\net46\Microsoft.NET.Build.Extensions.Tasks.dll False
2018-06-17T07:51:57:761 	Trace			System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Xml.Linq\v4.0_4.0.0.0__b77a5c561934e089\System.Xml.Linq.dll True
2018-06-17T07:51:57:761 	Trace			Microsoft.Build.Tasks.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\Microsoft.Build.Tasks.CodeAnalysis.dll False
2018-06-17T07:51:57:762 	Trace			System.Text.Encoding, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Text.Encoding\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Text.Encoding.dll True
2018-06-17T07:51:57:762 	Trace			System.Reflection, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Reflection\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Reflection.dll True
2018-06-17T07:51:57:762 	Trace			System.Resources.ResourceManager, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Resources.ResourceManager\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Resources.ResourceManager.dll True
2018-06-17T07:51:57:763 	Trace			System.Globalization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Globalization\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Globalization.dll True
2018-06-17T07:51:57:763 	Trace			System.Runtime.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Extensions\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.Extensions.dll True
2018-06-17T07:51:57:763 	Trace			System.IO.FileSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.FileSystem\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.FileSystem.dll True
2018-06-17T07:51:57:764 	Trace			System.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Linq\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Linq.dll True
2018-06-17T07:51:57:764 	Trace			System.Security.Principal.Windows, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\System.Security.Principal.Windows.dll False
2018-06-17T07:51:57:765 	Trace			System.Security.Cryptography.Algorithms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Security.Cryptography.Algorithms\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Security.Cryptography.Algorithms.dll True
2018-06-17T07:51:57:765 	Trace			System.Security.Cryptography.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Security.Cryptography.Primitives\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Security.Cryptography.Primitives.dll True
2018-06-17T07:51:57:765 	Trace			System.IO, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.dll True
2018-06-17T07:51:57:766 	Trace			System.IO.FileSystem.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.FileSystem.Primitives\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.FileSystem.Primitives.dll True
2018-06-17T07:51:57:766 	Trace			System.Threading, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Threading\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Threading.dll True
2018-06-17T07:51:57:766 	Trace			System.IO.Pipes, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.IO.Pipes\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.IO.Pipes.dll True
2018-06-17T07:51:57:767 	Trace			System.Runtime.InteropServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.InteropServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Runtime.InteropServices.dll True
2018-06-17T07:51:57:767 	Trace			System.Security.AccessControl, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\System.Security.AccessControl.dll False
2018-06-17T07:51:57:767 	Trace			System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Runtime.Serialization\v4.0_4.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll True
2018-06-17T07:51:57:768 	Trace			SMDiagnostics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\SMDiagnostics\v4.0_4.0.0.0__b77a5c561934e089\SMDiagnostics.dll True
2018-06-17T07:51:57:768 	Trace			System.ServiceModel.Internals, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.ServiceModel.Internals\v4.0_4.0.0.0__31bf3856ad364e35\System.ServiceModel.Internals.dll True
2018-06-17T07:51:57:769 	Trace			Bridge.Build, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Bridge.Builder.v16.dll False
2018-06-17T07:51:57:769 	Trace			Bridge.Contract, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Bridge.Contract.dll False
2018-06-17T07:51:57:769 	Trace			Bridge.Translator, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Bridge.Translator.dll False
2018-06-17T07:51:57:770 	Trace			Mono.Cecil, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Mono.Cecil.dll False
2018-06-17T07:51:57:770 	Trace			ICSharpCode.NRefactory.CSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\ICSharpCode.NRefactory.CSharp.dll False
2018-06-17T07:51:57:770 	Trace			ICSharpCode.NRefactory, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\ICSharpCode.NRefactory.dll False
2018-06-17T07:51:57:771 	Trace			Newtonsoft.Json, Version=11.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Newtonsoft.Json.dll False
2018-06-17T07:51:57:771 	Trace			System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.Numerics\v4.0_4.0.0.0__b77a5c561934e089\System.Numerics.dll True
2018-06-17T07:51:57:771 	Trace			System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_32\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll True
2018-06-17T07:51:57:772 	Trace			Mono.Cecil.Rocks, Version=0.9.6.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756 C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\packages\Bridge.Min.17.0.0\tools\Mono.Cecil.Rocks.dll False
2018-06-17T07:51:57:772 	Trace			System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089 C:\windows\Microsoft.Net\assembly\GAC_MSIL\System.ComponentModel.Composition\v4.0_4.0.0.0__b77a5c561934e089\System.ComponentModel.Composition.dll True
2018-06-17T07:51:57:773 	Info		Will use the following plugin path "C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Bridge\plugins"
2018-06-17T07:51:57:773 	Info		The plugin path does not exist. Skipping searching test framework plugins in the plugin folder.
2018-06-17T07:51:57:774 	Trace		Will search all translator references to find resource(s) with names starting from "Bridge.Plugins." ...
2018-06-17T07:51:57:774 	Trace		Searching plugins in reference Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null ...
2018-06-17T07:51:57:775 	Trace		skipPluginAssemblies is not set
2018-06-17T07:51:57:777 	Trace		The reference contains 0 resource(s) needed
2018-06-17T07:51:57:778 	Trace		Searching plugins in reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null ...
2018-06-17T07:51:57:778 	Trace		skipPluginAssemblies is not set
2018-06-17T07:51:57:779 	Trace		The reference contains 0 resource(s) needed
2018-06-17T07:51:57:779 	Info		No AssemblyCatalogs found
2018-06-17T07:51:57:779 	Info		Reading plugin configs...
2018-06-17T07:51:57:780 	Info		Reading plugin configs done
2018-06-17T07:51:57:781 	Info		Building syntax tree...
2018-06-17T07:51:57:786 	Trace		Loaded assembly: Microsoft.CodeAnalysis.CSharp, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
2018-06-17T07:51:57:792 	Trace		Loaded assembly: Microsoft.CodeAnalysis, Version=2.7.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
2018-06-17T07:51:57:809 	Trace		Loaded assembly: System.ValueTuple, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
2018-06-17T07:51:57:813 	Trace		Loaded assembly: System.Reflection.Metadata, Version=1.4.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:57:819 	Trace		Loaded assembly: System.Threading.Tasks.Parallel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:57:924 	Trace		Loaded assembly: System.Runtime.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:58:228 	Trace		Domain MSBuild.exe resolving assembly System.Collections.Immutable, Version=1.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a requested by none ...
2018-06-17T07:51:58:231 	Trace		Resolved for System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a in the loaded domain assemblies
2018-06-17T07:51:58:265 	Trace		Loaded assembly: System.Reflection.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:58:787 	Trace		Loaded assembly: System.Text.Encoding.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:58:818 	Trace		Loaded assembly: System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:51:59:721 	Trace		Loaded assembly: Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs ...
2018-06-17T07:52:00:275 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs ...
2018-06-17T07:52:00:275 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs ...
2018-06-17T07:52:00:274 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs ...
2018-06-17T07:52:00:276 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs ...
2018-06-17T07:52:00:277 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs ...
2018-06-17T07:52:00:281 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs ...
2018-06-17T07:52:00:281 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs ...
2018-06-17T07:52:00:280 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs ...
2018-06-17T07:52:00:284 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs ...
2018-06-17T07:52:00:276 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs ...
2018-06-17T07:52:00:278 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs ...
2018-06-17T07:52:00:286 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs ...
2018-06-17T07:52:00:278 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs ...
2018-06-17T07:52:00:286 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs ...
2018-06-17T07:52:00:288 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs ...
2018-06-17T07:52:00:279 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs ...
2018-06-17T07:52:00:290 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs ...
2018-06-17T07:52:00:278 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs ...
2018-06-17T07:52:00:278 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs ...
2018-06-17T07:52:00:273 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs ...
2018-06-17T07:52:00:296 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs ...
2018-06-17T07:52:00:504 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:520 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:524 	Trace			Expanding query expressions done
2018-06-17T07:52:00:527 	Trace			Expanding query expressions done
2018-06-17T07:52:00:528 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:529 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:529 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:534 	Trace			Expanding query expressions done
2018-06-17T07:52:00:536 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:538 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:546 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:548 	Trace			Expanding query expressions done
2018-06-17T07:52:00:549 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:571 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:573 	Trace			Expanding query expressions done
2018-06-17T07:52:00:574 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:574 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:575 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs done
2018-06-17T07:52:00:574 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:576 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs ...
2018-06-17T07:52:00:574 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs done
2018-06-17T07:52:00:576 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs ...
2018-06-17T07:52:00:574 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:578 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs done
2018-06-17T07:52:00:578 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs ...
2018-06-17T07:52:00:574 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:579 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs done
2018-06-17T07:52:00:580 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs ...
2018-06-17T07:52:00:581 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:587 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:587 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:588 	Trace			Expanding query expressions done
2018-06-17T07:52:00:589 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:589 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:589 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs done
2018-06-17T07:52:00:590 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs ...
2018-06-17T07:52:00:590 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:591 	Trace			Expanding query expressions done
2018-06-17T07:52:00:592 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:591 	Trace			Expanding query expressions done
2018-06-17T07:52:00:593 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:593 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs done
2018-06-17T07:52:00:593 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs ...
2018-06-17T07:52:00:594 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:593 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:594 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs done
2018-06-17T07:52:00:595 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs ...
2018-06-17T07:52:00:597 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:598 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:598 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs done
2018-06-17T07:52:00:598 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs ...
2018-06-17T07:52:00:620 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:620 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:620 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:621 	Trace			Expanding query expressions done
2018-06-17T07:52:00:621 	Trace			Expanding query expressions done
2018-06-17T07:52:00:621 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:622 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:622 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:622 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:623 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs done
2018-06-17T07:52:00:622 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:633 	Trace			Expanding query expressions done
2018-06-17T07:52:00:634 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:622 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:635 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs done
2018-06-17T07:52:00:623 	Trace			Expanding query expressions done
2018-06-17T07:52:00:634 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:636 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs done
2018-06-17T07:52:00:636 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs ...
2018-06-17T07:52:00:635 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs ...
2018-06-17T07:52:00:623 	Trace			Expanding query expressions done
2018-06-17T07:52:00:637 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:636 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:637 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:638 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs done
2018-06-17T07:52:00:638 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs ...
2018-06-17T07:52:00:633 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs ...
2018-06-17T07:52:00:634 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:640 	Trace			Expanding query expressions done
2018-06-17T07:52:00:642 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:642 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:643 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs done
2018-06-17T07:52:00:643 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs ...
2018-06-17T07:52:00:643 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:644 	Trace			Expanding query expressions done
2018-06-17T07:52:00:644 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:645 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:645 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs done
2018-06-17T07:52:00:645 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs ...
2018-06-17T07:52:00:646 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:646 	Trace			Expanding query expressions done
2018-06-17T07:52:00:646 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:646 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:647 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs done
2018-06-17T07:52:00:647 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs ...
2018-06-17T07:52:00:645 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:641 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:648 	Trace			Expanding query expressions done
2018-06-17T07:52:00:649 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:649 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:650 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs done
2018-06-17T07:52:00:650 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs ...
2018-06-17T07:52:00:650 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:651 	Trace			Expanding query expressions done
2018-06-17T07:52:00:652 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:652 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:652 	Trace			Expanding query expressions done
2018-06-17T07:52:00:653 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:653 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:654 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs done
2018-06-17T07:52:00:653 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:655 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs done
2018-06-17T07:52:00:655 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs ...
2018-06-17T07:52:00:654 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs ...
2018-06-17T07:52:00:653 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:656 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs done
2018-06-17T07:52:00:657 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs ...
2018-06-17T07:52:00:669 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:671 	Trace			Expanding query expressions done
2018-06-17T07:52:00:672 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:673 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:673 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:674 	Trace			Expanding query expressions done
2018-06-17T07:52:00:674 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:674 	Trace			Expanding query expressions done
2018-06-17T07:52:00:675 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:675 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs done
2018-06-17T07:52:00:676 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs ...
2018-06-17T07:52:00:675 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:677 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:677 	Trace			Expanding query expressions done
2018-06-17T07:52:00:678 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:678 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:678 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs done
2018-06-17T07:52:00:678 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:679 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs done
2018-06-17T07:52:00:679 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs ...
2018-06-17T07:52:00:679 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs ...
2018-06-17T07:52:00:678 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:681 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:682 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs done
2018-06-17T07:52:00:682 	Trace		Source file C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs ...
2018-06-17T07:52:00:688 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:688 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:688 	Trace			Expanding query expressions done
2018-06-17T07:52:00:689 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:689 	Trace			Expanding query expressions done
2018-06-17T07:52:00:690 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:688 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:689 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:691 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs done
2018-06-17T07:52:00:691 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs ...
2018-06-17T07:52:00:689 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:690 	Trace			Expanding query expressions done
2018-06-17T07:52:00:692 	Trace			Expanding query expressions done
2018-06-17T07:52:00:692 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:693 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:693 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:693 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs done
2018-06-17T07:52:00:694 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs ...
2018-06-17T07:52:00:694 	Trace			Expanding query expressions done
2018-06-17T07:52:00:693 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:695 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:694 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:695 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:696 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs done
2018-06-17T07:52:00:696 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:696 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs ...
2018-06-17T07:52:00:696 	Trace			Expanding query expressions done
2018-06-17T07:52:00:697 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:697 	Trace			Expanding query expressions done
2018-06-17T07:52:00:698 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:699 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:699 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:700 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs done
2018-06-17T07:52:00:699 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:699 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:692 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:695 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs done
2018-06-17T07:52:00:701 	Trace			Expanding query expressions done
2018-06-17T07:52:00:689 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:723 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:724 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:722 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:725 	Trace			Expanding query expressions done
2018-06-17T07:52:00:725 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:734 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:722 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs done
2018-06-17T07:52:00:735 	Trace			Expanding query expressions done
2018-06-17T07:52:00:736 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:725 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:725 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs done
2018-06-17T07:52:00:735 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:736 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:724 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:739 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:741 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs done
2018-06-17T07:52:00:737 	Trace			Expanding query expressions done
2018-06-17T07:52:00:724 	Trace			Expanding query expressions done
2018-06-17T07:52:00:730 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:737 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs done
2018-06-17T07:52:00:741 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:742 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:738 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs done
2018-06-17T07:52:00:744 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:743 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:745 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs done
2018-06-17T07:52:00:743 	Trace			Expanding query expressions done
2018-06-17T07:52:00:746 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:746 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:753 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:754 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs done
2018-06-17T07:52:00:731 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:755 	Trace			Expanding query expressions done
2018-06-17T07:52:00:756 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:756 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:756 	Trace			Expanding query expressions done
2018-06-17T07:52:00:757 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs done
2018-06-17T07:52:00:757 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:758 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:758 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:758 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:759 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs done
2018-06-17T07:52:00:759 	Trace			Expanding query expressions done
2018-06-17T07:52:00:760 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:761 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:761 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs done
2018-06-17T07:52:00:770 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:771 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:772 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs done
2018-06-17T07:52:00:779 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:780 	Trace			Expanding query expressions done
2018-06-17T07:52:00:781 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:781 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:782 	Trace			Expanding query expressions done
2018-06-17T07:52:00:782 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:782 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:783 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:781 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:783 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs done
2018-06-17T07:52:00:782 	Trace			Expanding query expressions done
2018-06-17T07:52:00:784 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:784 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:784 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs done
2018-06-17T07:52:00:781 	Trace			Expanding query expressions done
2018-06-17T07:52:00:785 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:785 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:786 	Trace			Expanding query expressions done
2018-06-17T07:52:00:787 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:784 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:787 	Trace			Expanding query expressions done
2018-06-17T07:52:00:788 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:788 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:788 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:791 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:791 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:784 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:804 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:804 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs done
2018-06-17T07:52:00:789 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs done
2018-06-17T07:52:00:805 	Trace			Expanding query expressions done
2018-06-17T07:52:00:804 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:806 	Trace			Expanding query expressions done
2018-06-17T07:52:00:807 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:807 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:807 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs done
2018-06-17T07:52:00:790 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:806 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:810 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:811 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:814 	Trace			Expanding query expressions done
2018-06-17T07:52:00:814 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:818 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:814 	Trace			Expanding query expressions done
2018-06-17T07:52:00:818 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs done
2018-06-17T07:52:00:808 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:819 	Trace			Expanding query expressions done
2018-06-17T07:52:00:819 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:820 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:820 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs done
2018-06-17T07:52:00:816 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:808 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:805 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs done
2018-06-17T07:52:00:808 	Trace			Parsing syntax tree done
2018-06-17T07:52:00:822 	Trace			Expanding query expressions done
2018-06-17T07:52:00:821 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:813 	Trace			Expanding query expressions done
2018-06-17T07:52:00:813 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:823 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:818 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:824 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:824 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs done
2018-06-17T07:52:00:823 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs done
2018-06-17T07:52:00:821 	Trace			Expanding query expressions done
2018-06-17T07:52:00:822 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs done
2018-06-17T07:52:00:822 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:827 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:827 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs done
2018-06-17T07:52:00:824 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:828 	Trace		Source file C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs done
2018-06-17T07:52:00:826 	Trace			Accepting lambda detector visitor done
2018-06-17T07:52:00:829 	Trace			Accepting lambda fixer visitor done
2018-06-17T07:52:00:830 	Trace			Accepting type system convert visitor done
2018-06-17T07:52:00:830 	Trace		Source file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs done
2018-06-17T07:52:00:830 	Info		Building syntax tree done
2018-06-17T07:52:00:832 	Trace		Loaded assembly: ICSharpCode.NRefactory.Cecil, Version=5.0.0.0, Culture=neutral, PublicKeyToken=d4bfe873e7598c49
2018-06-17T07:52:00:833 	Info		Assembly definition to references...
2018-06-17T07:52:00:834 	Trace			Loading AssemblyDefinition Bridge ...
2018-06-17T07:52:01:999 	Trace			Loading AssemblyDefinition done
2018-06-17T07:52:02:001 	Trace			Loading AssemblyDefinition Bridge.Html5 ...
2018-06-17T07:52:02:054 	Trace			Loading AssemblyDefinition done
2018-06-17T07:52:02:054 	Info		Assembly definition to references done
2018-06-17T07:52:02:076 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs
2018-06-17T07:52:02:328 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs
2018-06-17T07:52:02:329 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs
2018-06-17T07:52:02:332 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs
2018-06-17T07:52:02:342 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs
2018-06-17T07:52:02:344 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs
2018-06-17T07:52:02:356 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs
2018-06-17T07:52:02:357 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs
2018-06-17T07:52:02:358 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs
2018-06-17T07:52:02:393 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs
2018-06-17T07:52:02:405 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs
2018-06-17T07:52:02:418 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs
2018-06-17T07:52:02:424 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs
2018-06-17T07:52:02:426 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs
2018-06-17T07:52:02:427 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs
2018-06-17T07:52:02:429 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs
2018-06-17T07:52:02:430 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs
2018-06-17T07:52:02:431 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs
2018-06-17T07:52:02:432 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs
2018-06-17T07:52:02:439 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs
2018-06-17T07:52:02:440 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs
2018-06-17T07:52:02:440 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs
2018-06-17T07:52:02:441 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs
2018-06-17T07:52:02:452 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs
2018-06-17T07:52:02:460 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs
2018-06-17T07:52:02:470 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs
2018-06-17T07:52:02:471 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs
2018-06-17T07:52:02:471 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs
2018-06-17T07:52:02:471 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs
2018-06-17T07:52:02:473 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs
2018-06-17T07:52:02:475 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs
2018-06-17T07:52:02:477 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs
2018-06-17T07:52:02:477 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs
2018-06-17T07:52:02:481 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs
2018-06-17T07:52:02:482 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs
2018-06-17T07:52:02:496 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs
2018-06-17T07:52:02:497 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs
2018-06-17T07:52:02:507 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs
2018-06-17T07:52:02:509 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs
2018-06-17T07:52:02:511 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs
2018-06-17T07:52:02:556 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs
2018-06-17T07:52:02:557 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs
2018-06-17T07:52:02:560 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs
2018-06-17T07:52:02:580 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs
2018-06-17T07:52:02:582 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs
2018-06-17T07:52:02:583 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs
2018-06-17T07:52:02:584 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs
2018-06-17T07:52:02:584 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs
2018-06-17T07:52:02:585 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs
2018-06-17T07:52:02:585 	Trace		Preconvert C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs
2018-06-17T07:52:02:586 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
2018-06-17T07:52:02:586 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
2018-06-17T07:52:02:586 	Trace		Preconvert C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
2018-06-17T07:52:02:588 	Info		Inspecting types...
2018-06-17T07:52:02:589 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\App.cs
2018-06-17T07:52:02:608 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\Properties\AssemblyInfo.cs
2018-06-17T07:52:02:620 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Extensions.cs
2018-06-17T07:52:02:621 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Point.cs
2018-06-17T07:52:02:627 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\RandomSupplier.cs
2018-06-17T07:52:02:627 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Rectangle.cs
2018-06-17T07:52:02:628 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\TimeStamp.cs
2018-06-17T07:52:02:629 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Unicode.cs
2018-06-17T07:52:02:629 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector2D.cs
2018-06-17T07:52:02:631 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\BaseUtils\Vector3D.cs
2018-06-17T07:52:02:633 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Accessor.cs
2018-06-17T07:52:02:633 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ECSManager.cs
2018-06-17T07:52:02:634 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\Entity.cs
2018-06-17T07:52:02:635 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolutionRmk\ECS\ProcessorFlex.cs
2018-06-17T07:52:02:635 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\CharByCharAnimation.cs
2018-06-17T07:52:02:635 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\BlinkAnimation.cs
2018-06-17T07:52:02:636 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextGame.cs
2018-06-17T07:52:02:636 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\ITextScreenN.cs
2018-06-17T07:52:02:638 	Trace		Loaded assembly: Object.Net.Utilities, Version=2.5.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:02:648 	Trace		Loaded assembly: Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:02:649 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseHover.cs
2018-06-17T07:52:02:650 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\MouseIO.cs
2018-06-17T07:52:02:650 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\Palette.cs
2018-06-17T07:52:02:651 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\GameScreen\TestGame.cs
2018-06-17T07:52:02:652 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextBoard.cs
2018-06-17T07:52:02:653 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\ReusablePidrohVS\TextRenderingLogic\TextWorld.cs
2018-06-17T07:52:02:654 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleSetup.cs
2018-06-17T07:52:02:655 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\DebugExtra\DebugEx.cs
2018-06-17T07:52:02:655 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\ECSIntegration.cs
2018-06-17T07:52:02:656 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyAI.cs
2018-06-17T07:52:02:656 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\EnemyDataCreator.cs
2018-06-17T07:52:02:657 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\SpawnFactory.cs
2018-06-17T07:52:02:657 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\Happs\Happ.cs
2018-06-17T07:52:02:658 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\InputHolder.cs
2018-06-17T07:52:02:658 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveCreatorProg.cs
2018-06-17T07:52:02:659 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveData.cs
2018-06-17T07:52:02:661 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataExecuter.cs
2018-06-17T07:52:02:662 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\MoveDataTags.cs
2018-06-17T07:52:02:663 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\BattleMain.cs
2018-06-17T07:52:02:673 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedLogic\StageData.cs
2018-06-17T07:52:02:674 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\AsyncTasks.cs
2018-06-17T07:52:02:675 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\BattleRender.cs
2018-06-17T07:52:02:676 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ColorStuff.cs
2018-06-17T07:52:02:677 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\GameMain.cs
2018-06-17T07:52:02:678 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\HappHandling.cs
2018-06-17T07:52:02:678 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\InputHandling.cs
2018-06-17T07:52:02:680 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ITextScreen.cs
2018-06-17T07:52:02:680 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ModeSelectionScreen.cs
2018-06-17T07:52:02:682 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\MouseHoverText.cs
2018-06-17T07:52:02:682 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ResultScreen.cs
2018-06-17T07:52:02:683 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\TurnBasedTextRendering\ScreenUtils.cs
2018-06-17T07:52:02:683 	Trace		Visiting syntax tree C:\Users\Pedro\AppData\Local\Temp\.NETFramework,Version=v4.6.1.AssemblyAttributes.cs
2018-06-17T07:52:02:685 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs
2018-06-17T07:52:02:686 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs
2018-06-17T07:52:02:686 	Trace		Visiting syntax tree C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\obj\Debug\TemporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs
2018-06-17T07:52:02:686 	Info		Inspecting types done
2018-06-17T07:52:02:687 	Info		Creating emitter...
2018-06-17T07:52:02:691 	Trace		Initializing items for Bridge types...
2018-06-17T07:52:02:700 	Trace		Initializing items for Bridge types done
2018-06-17T07:52:02:700 	Trace		Sorting types infos by name...
2018-06-17T07:52:02:701 	Trace		Sorting types infos by name done
2018-06-17T07:52:02:702 	Trace		Sorting types by inheritance...
2018-06-17T07:52:02:703 	Trace		Loaded assembly: TopologicalSorting, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:02:707 	Trace		Topological sorting...
2018-06-17T07:52:02:707 	Trace			Topological sorting first iteration...
2018-06-17T07:52:02:713 	Trace				HitCounter0 = 121
2018-06-17T07:52:02:713 	Trace				HitCounter1 = 113
2018-06-17T07:52:02:714 	Trace				HitCounter2 = 33
2018-06-17T07:52:02:714 	Trace				HitCounter3 = 33
2018-06-17T07:52:02:714 	Trace				HitCounter4 = 38
2018-06-17T07:52:02:715 	Trace				HitCounter5 = 0
2018-06-17T07:52:02:715 	Trace				HitCounter6 = 0
2018-06-17T07:52:02:715 	Trace			Topological sorting first iteration done
2018-06-17T07:52:02:715 	Trace			Topological sorting third iteration...
2018-06-17T07:52:02:716 	Trace				Calculate sorting...
2018-06-17T07:52:02:719 	Trace				Calculate sorting done
2018-06-17T07:52:02:719 	Trace				Getting Reflection names for 121 types...
2018-06-17T07:52:02:719 	Trace				Got Enumerable<ISet<OrderedProcess>>
2018-06-17T07:52:02:720 	Trace				Got Enumerator<ISet<OrderedProcess>>
2018-06-17T07:52:02:721 	Trace				Getting Reflection names done
2018-06-17T07:52:02:721 	Trace				HitCounter0 = 4
2018-06-17T07:52:02:722 	Trace				HitCounter1 = 121
2018-06-17T07:52:02:722 	Trace				HitCounter2 = 121
2018-06-17T07:52:02:722 	Trace				HitCounter3 = 0
2018-06-17T07:52:02:722 	Trace				HitCounter4 = 0
2018-06-17T07:52:02:722 	Trace				HitCounter5 = 0
2018-06-17T07:52:02:723 	Trace				HitCounter6 = 0
2018-06-17T07:52:02:723 	Trace			Topological sorting third iteration done
2018-06-17T07:52:02:723 	Trace		Topological sorting done
2018-06-17T07:52:02:723 	Trace		Priority sorting...
2018-06-17T07:52:02:726 	Trace		Priority sorting done
2018-06-17T07:52:02:726 	Trace		Sorting types by inheritance done
2018-06-17T07:52:02:728 	Info		Creating emitter done
2018-06-17T07:52:02:731 	Trace		Sorting references...
2018-06-17T07:52:02:732 	Trace				Calculate sorting references...
2018-06-17T07:52:02:732 	Trace				Calculate sorting references done
2018-06-17T07:52:02:732 	Trace				Got Enumerable<ISet<OrderedProcess>>
2018-06-17T07:52:02:733 	Trace				Got Enumerator<ISet<OrderedProcess>>
2018-06-17T07:52:02:733 	Trace			Handling mscorlib
2018-06-17T07:52:02:733 	Trace			Handling Bridge
2018-06-17T07:52:02:734 	Trace			Handling Bridge.Html5
2018-06-17T07:52:02:734 	Trace		Sorting references done:
2018-06-17T07:52:02:734 	Trace			Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:02:735 	Trace			Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:02:735 	Info		Before emitting...
2018-06-17T07:52:02:735 	Info		Before emitting done
2018-06-17T07:52:02:736 	Info		Emitting...
2018-06-17T07:52:02:738 	Trace		Emitting block Bridge.Translator.EmitBlock
2018-06-17T07:52:04:010 	Info		Transforming outputs...
2018-06-17T07:52:04:012 	Trace		Wrapping to modules...
2018-06-17T07:52:04:015 	Trace		Wrapping to modules done
2018-06-17T07:52:04:018 	Trace		Combining outputs...
2018-06-17T07:52:04:018 	Trace		File name BridgeBuild.js
2018-06-17T07:52:04:026 	Trace		File name BridgeBuild.meta.js
2018-06-17T07:52:04:029 	Trace		Combining outputs done
2018-06-17T07:52:04:030 	Info		Transforming outputs done
2018-06-17T07:52:04:031 	Info		Emitting done
2018-06-17T07:52:04:032 	Info		After emitting...
2018-06-17T07:52:04:033 	Info		After emitting done
2018-06-17T07:52:04:033 	Info		Translating done
2018-06-17T07:52:04:033 	Info		Post processing...
2018-06-17T07:52:04:034 	Info		outputPath is C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-06-17T07:52:04:036 	Trace		Preparing resources config...
2018-06-17T07:52:04:036 	Trace		The resources config section has 0 non-default settings
2018-06-17T07:52:04:038 	Trace		CheckConsoleConfigSetting...
2018-06-17T07:52:04:039 	Trace		CheckConsoleConfigSetting done
2018-06-17T07:52:04:040 	Trace		Done preparing resources config
2018-06-17T07:52:04:040 	Info		projectPath is C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild
2018-06-17T07:52:04:040 	Info		Extracting core scripts...
2018-06-17T07:52:04:043 	Info		Extracting resources...
2018-06-17T07:52:04:046 	Trace		Checking if reference Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.json
2018-06-17T07:52:04:047 	Trace		Reading Bridge Resources List
2018-06-17T07:52:04:047 	Trace		Read Bridge Resources List: [
  {
    "FileName": "bridge.js",
    "Name": "bridge.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.console.js",
    "Name": "bridge.console.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.d.ts",
    "Name": "bridge.d.ts",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "bridge.meta.js",
    "Name": "bridge.meta.js",
    "Path": null,
    "Parts": null
  }
]
2018-06-17T07:52:04:055 	Trace		Extracting item bridge.js
2018-06-17T07:52:04:055 	Trace		Resource name bridge.js and file name: bridge.js
2018-06-17T07:52:04:056 	Trace		Did not find extract resource option for resource name bridge.js. Will use default embed behavior
2018-06-17T07:52:04:061 	Trace		Adding referenced output bridge.js
2018-06-17T07:52:04:067 	Trace		Extracting item bridge.console.js
2018-06-17T07:52:04:068 	Trace		Resource name bridge.console.js and file name: bridge.console.js
2018-06-17T07:52:04:068 	Trace		Did not find extract resource option for resource name bridge.console.js. Will use default embed behavior
2018-06-17T07:52:04:069 	Trace		Adding referenced output bridge.console.js
2018-06-17T07:52:04:069 	Trace		Extracting item bridge.d.ts
2018-06-17T07:52:04:069 	Trace		Resource name bridge.d.ts and file name: bridge.d.ts
2018-06-17T07:52:04:069 	Trace		Did not find extract resource option for resource name bridge.d.ts. Will use default embed behavior
2018-06-17T07:52:04:070 	Trace		Extracting item bridge.meta.js
2018-06-17T07:52:04:070 	Trace		Resource name bridge.meta.js and file name: bridge.meta.js
2018-06-17T07:52:04:070 	Trace		Did not find extract resource option for resource name bridge.meta.js. Will use default embed behavior
2018-06-17T07:52:04:070 	Trace		Adding referenced output bridge.meta.js
2018-06-17T07:52:04:073 	Trace		Checking if reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.json
2018-06-17T07:52:04:074 	Trace		Reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null does not contain Bridge Resources List
2018-06-17T07:52:04:076 	Trace		Checking if reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null contains Bridge Resources List Bridge.Resources.list
2018-06-17T07:52:04:076 	Trace		Reference Bridge.Html5, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null does not contain Bridge Resources List
2018-06-17T07:52:04:077 	Info		Done extracting resources
2018-06-17T07:52:04:079 	Trace		Loaded assembly: AjaxMin, Version=5.14.5506.26196, Culture=neutral, PublicKeyToken=21ef50ce11b5d80f
2018-06-17T07:52:04:081 	Info		Skipping extracting Locales
2018-06-17T07:52:04:081 	Info		Done extracting core scripts
2018-06-17T07:52:04:082 	Trace		Minification...
2018-06-17T07:52:04:083 	Trace		No minification required as OutputFormatting = Formatted
2018-06-17T07:52:04:083 	Trace		Combining locales...
2018-06-17T07:52:04:084 	Trace		Skipping combining locales as CombineLocales and CombineScripts config oiptions are both switched off.
2018-06-17T07:52:04:086 	Trace		Combining project outputs...
2018-06-17T07:52:04:086 	Trace		Skipping project outputs as CombineScripts config option switched off.
2018-06-17T07:52:04:088 	Info		Starts Save with projectOutputPath = C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-06-17T07:52:04:092 	Trace		Output bridge.js
2018-06-17T07:52:04:093 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-06-17T07:52:04:094 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-06-17T07:52:04:101 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js ...
2018-06-17T07:52:04:102 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.js
2018-06-17T07:52:04:102 	Trace		Output bridge.console.js
2018-06-17T07:52:04:103 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-06-17T07:52:04:103 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-06-17T07:52:04:104 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js ...
2018-06-17T07:52:04:105 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.console.js
2018-06-17T07:52:04:105 	Trace		Output bridge.meta.js
2018-06-17T07:52:04:106 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-06-17T07:52:04:107 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-06-17T07:52:04:110 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js ...
2018-06-17T07:52:04:111 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\bridge.meta.js
2018-06-17T07:52:04:111 	Trace		Output BridgeBuild.js
2018-06-17T07:52:04:111 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:112 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:157 	Trace		SourceMap for C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:158 	Trace		{
  "version": 3,
  "file": "BridgeBuild.js",
  "sourceRoot": "",
  "sources": ["App.cs","../../ReusablePidrohVS/BaseUtils/Extensions.cs","../../ReusablePidrohVS/BaseUtils/Point.cs","../../ReusablePidrohVS/BaseUtils/RandomSupplier.cs","../../ReusablePidrohVS/BaseUtils/Rectangle.cs","../../ReusablePidrohVS/BaseUtils/TimeStamp.cs","../../ReusablePidrohVS/BaseUtils/Unicode.cs","../../ReusablePidrohVS/BaseUtils/Vector2D.cs","../../ReusablePidrohVS/BaseUtils/Vector3D.cs","../TurnBasedLogic/MoveData.cs","../TurnBasedTextRendering/AsyncTasks.cs","../TurnBasedLogic/BattleMain.cs","../TurnBasedLogic/BattleSetup.cs","../TurnBasedTextRendering/ColorStuff.cs","../TurnBasedLogic/DebugExtra/DebugEx.cs","../TurnBasedLogic/ECSIntegration.cs","../TurnBasedLogic/EnemyAI.cs","../TurnBasedLogic/SpawnFactory.cs","../TurnBasedLogic/EnemyDataCreator.cs","../TurnBasedLogic/StageData.cs","../TurnBasedLogic/MoveDataExecuter.cs","../TurnBasedLogic/Happs/Happ.cs","../TurnBasedLogic/InputHolder.cs","../TurnBasedLogic/MoveCreatorProg.cs","../../VisualStudioSolutionRmk/ECS/Accessor.cs","../../VisualStudioSolutionRmk/ECS/ECSManager.cs","../../VisualStudioSolutionRmk/ECS/Entity.cs","../../VisualStudioSolutionRmk/ECS/ProcessorFlex.cs","../../ReusablePidrohVS/TextRenderingLogic/TextWorld.cs","../../ReusablePidrohVS/TextRenderingLogic/Palette.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/MouseHover.cs","../../ReusablePidrohVS/TextRenderingLogic/TextBoard.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/ITextScreenN.cs","../TurnBasedTextRendering/HappHandling.cs","../TurnBasedTextRendering/InputHandling.cs","../TurnBasedTextRendering/MouseHoverText.cs","../TurnBasedTextRendering/BattleRender.cs","../TurnBasedTextRendering/GameMain.cs","../TurnBasedTextRendering/ResultScreen.cs","../../ReusablePidrohVS/TextRenderingLogic/GameScreen/TestGame.cs","../TurnBasedTextRendering/ModeSelectionScreen.cs","../../ReusablePidrohVS/TextRenderingLogic/BlinkAnimation.cs","../../ReusablePidrohVS/TextRenderingLogic/CharByCharAnimation.cs"],
  "names": [""],
  "mappings": ";;;;;;;;;;;YA4CYA;;YAEAA,qCAAcA,mCAAQA;YACtBA,yBAASA;YACTA,KAAKA,WAAWA,IAAIA,+BAAeA;gBAE/BA,0CAAOA,GAAPA,2BAAYA,iEAAkBA,GAAlBA;;;;;YAKhBA,YAAYA;YACZA,kBAAkBA;YAClBA,0BAA0BA;YAC1BA;YACAA;;;;YAIAA,6DAAuBA,UAACA;;gBAGpBA,WAAWA;gBACXA,IAAIA;oBAAWA,OAAOA;;gBACtBA,cAAcA;gBACdA,gCAAgBA;;;;;;YAMpBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCArD+BA;gCAEZA;;;;qCAEOA,IAAiBA;;oBAG3CA,UAAaA,IAAIA;oBACjBA,2CAA0BA;wBAEtBA,OAAOA,AAAOA;;oBAElBA,OAAKA,IAAIA;oBACTA,cAAYA;oBACZA,sBAAMA,IAAIA;;;;;;;oBA6DVA,UAAeA;oBACfA,WAAWA,CAACA,2BAAMA;oBAClBA,IAAIA;wBACAA,8CAAkBA;wBAClBA;;;oBAGJA,4BAAYA;oBACZA,wBAAQA,AAAOA;oBACfA,uBAAOA;oBACPA,kCAAkBA;oBAClBA,gCAAgBA;;oBAEhBA,aAAaA;oBACbA,aAAaA;oBACbA,+BAAeA,IAAIA,gCAAQA,QAAQA;;;oBAGnCA,KAAKA,WAAWA,IAAIA,kCAAkBA;wBAElCA,KAAKA,WAAWA,IAAIA,iCAAiBA;4BAEjCA,IAAIA,CAACA,2BAAWA,2BAAcA,GAAMA;gCAEhCA,KAAoBA,GAAGA,GAAGA,0CAAOA,yCAAoBA,GAAGA,KAA9BA,0BAAmCA,0CAAOA,yCAAoBA,GAAGA,KAA9BA,0BAAmCA,yBAAKA,iCAAiBA,GAAGA;gCACzHA,yBAASA,2BAAcA,GAAMA;;;;;;;;;oBAWzCA,kBAAkBA,AAAuBA;;;;;;;;;;;;;+BC5HjBA,IAAIA;;;;mCAELA,GAAGA;oBAE1BA,QAAQA;oBACRA,OAAOA;wBAEHA;wBACAA,QAAQA,uCAASA;wBACjBA,YAAUA,2BAAKA;wBACfA,2BAAKA,GAAKA,2BAAKA;wBACfA,2BAAKA,GAAKA;;;;;;;;;;;;;;;;;wBC+BRA,OAAOA;;;;;;;;;;uCAmBcA,GAAWA;oBAEtCA,OAAOA,UAASA;;yCAGWA,GAAWA;oBAEtCA,OAAOA,CAACA,UAASA;;;;;;;;;;;8BAlBNA,GAAOA;;gBAElBA,SAASA;gBACTA,SAASA;;;;;;;+BAkBMA;gBAEfA,OAAOA,CAACA,CAACA,WAAKA,YAAYA,CAACA,WAAKA;;8BAGRA;gBAExBA,OAAOA,CAACA,4CAAkBA,aAAOA,qCAASA;;;gBAK1CA,OAAOA,SAAIA;;;gBAKXA,OAAOA,wCAAiCA,kCAAGA;;;;;;;;;;;;;;;;;iCCtFvBA,KAASA;oBAC7BA,OAAOA,kBAAMA,AAACA,6CAAaA,CAACA,QAAIA,aAAKA;;yCAGXA,GAAGA;oBAE7BA,OAAOA,yBAAMA,yCAASA,eAAfA;;;;;;;;;;;;;;;;wBCwCDA,OAAOA;;;;;;;;;;uCAyCcA,GAAQA;oBAEnCA,OAAOA,CAACA,CAACA,QAAOA,QAAQA,CAACA,QAAOA,QAAQA,CAACA,YAAWA,YAAYA,CAACA,aAAYA;;yCAuBlDA,GAAQA;oBAEnCA,OAAOA,CAACA,CAACA,8CAAKA;;;;;;;;;;;;;;oBA/DRA,OAAOA;;;;;oBAKPA,OAAOA,CAACA,WAASA;;;;;oBAKjBA,OAAOA;;;;;oBAKPA,OAAOA,CAACA,WAASA;;;;;oBAmEnBA,OAAOA,IAAIA,gCAAQA,kBAACA,WAASA,6BAAiBA,kBAACA,WAASA;;;;;oBAmBxDA,OAAOA,CAACA,CAACA,CAACA,CAACA,qBAAoBA,CAACA,uBAAsBA,CAACA,kBAAiBA,CAACA;;;;;;8BA9ErEA,GAAOA,GAAOA,OAAWA;;gBAEjCA,SAASA;gBACTA,SAASA;gBACTA,aAAaA;gBACbA,cAAcA;;;;;;;kCAaGA,GAAOA;gBAExBA,OAAOA,CAACA,CAACA,CAACA,CAACA,UAAUA,MAAMA,CAACA,IAAIA,CAACA,WAASA,uBAAiBA,CAACA,UAAUA,OAAOA,CAACA,IAAIA,CAACA,WAASA;;kCAG3EA;gBAEjBA,OAAOA,CAACA,CAACA,CAACA,CAACA,UAAUA,YAAYA,CAACA,UAAUA,CAACA,WAASA,uBAAiBA,CAACA,UAAUA,aAAaA,CAACA,UAAUA,CAACA,WAASA;;gCAGnGA;gBAEjBA,OAAOA,CAACA,CAACA,CAACA,CAACA,UAAUA,YAAYA,CAACA,UAAUA,CAACA,WAASA,uBAAiBA,CAACA,UAAUA,aAAaA,CAACA,UAAUA,CAACA,WAASA;;kCAGnGA;gBAEjBA,OAAOA,CAACA,CAACA,CAACA,CAACA,UAAUA,YAAYA,CAACA,CAACA,YAAUA,sBAAgBA,CAACA,WAASA,uBAAiBA,CAACA,UAAUA,aAAaA,CAACA,CAACA,YAAUA,uBAAiBA,CAACA,WAASA;;8BAQxIA;gBAEfA,mBAAKA;gBACLA,mBAAKA;;gCAGUA,SAAaA;gBAE5BA,mBAAKA;gBACLA,mBAAKA;;+BAcWA,iBAAqBA;gBAErCA,mBAAKA;gBACLA,mBAAKA;gBACLA,2BAASA;gBACTA,6BAAUA;;+BAWKA;gBAEfA,OAAOA,wCAAQA;;8BAGSA;gBAExBA,OAAOA,CAACA,yCAAeA,wCAAQA,AAACA,qCAAMA;;;gBAKtCA,OAAOA,6DAAsDA,kCAAGA,kCAAGA,sCAAOA;;;gBAK1EA,OAAOA,CAACA,SAASA,SAASA,aAAaA;;kCAGpBA;gBAEnBA,OAAOA,CAACA,CAACA,UAAUA,cACPA,WAAWA,aACXA,SAASA,eACTA,YAAYA;;;oCAMLA,OAAgBA;gBAEnCA,WAASA,CAACA,CAACA,eAAaA,cACZA,gBAAcA,aACdA,cAAYA,eACZA,iBAAeA;;;;;;;;;;;;;;;;;;;;gBC/L3BA,OAAOA,IAAIA,sCAAcA;;+BAGPA;gBAElBA,oBAAeA;;;;;;;;;;;;;;;;8BAQEA;;gBAEjBA,gBAAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCCjBcA;sCACEA;uCACCA;sCACDA;mCACHA;qCACEA;qCACAA;sCACCA;;;;;;;;;;;;;;;;;;;wBCyBrBA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;;;;;;sCA7CoBA,IAAIA;sCACJA,IAAIA;uCACHA,IAAIA;uCACJA,IAAIA;;;;8CA8DAA,eAAwBA,aAAsBA;oBAEpFA,OAAOA,CAACA,sGAAgBA,CAACA,IAAIA,SAASA,8DAAcA;;+BAa7BA,QAAiBA;oBAExCA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;iCAGYA,QAAqBA,QAAqBA;oBAE7DA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;oCAOGA,QAAiBA;oBAE1CA,SAAWA,WAAWA,eAAeA,WAAWA;oBAChDA,OAAOA,AAAOA,UAAUA,CAACA,KAAKA,MAAMA,CAACA,KAAKA;;sCAGlBA,QAAqBA,QAAqBA;oBAElEA,SAAWA,aAAWA,iBAAeA,aAAWA;oBAChDA,WAASA,AAAOA,UAAUA,CAACA,KAAKA,MAAMA,CAACA,KAAKA;;2CAGZA,QAAiBA;oBAEjDA,SAAWA,WAAWA,eAAeA,WAAWA;oBAChDA,OAAOA,CAACA,KAAKA,MAAMA,CAACA,KAAKA;;6CAGMA,QAAqBA,QAAqBA;oBAEzEA,SAAWA,aAAWA,iBAAeA,aAAWA;oBAChDA,WAASA,CAACA,KAAKA,MAAMA,CAACA,KAAKA;;kCAUDA,QAAiBA;oBAE3CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;oCAGeA,QAAqBA,QAAqBA;oBAEhEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;oCAGIA,QAAiBA;oBAE3CA,aAAeA,IAAIA;oBACnBA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;oCAGeA,QAAqBA,SAAeA;oBAE1DA,aAAeA,IAAIA;oBACnBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;+BAGFA,QAAiBA;oBAErCA,OAAOA,CAACA,WAAWA,YAAYA,CAACA,WAAWA;;iCAGxBA,QAAqBA,QAAqBA;oBAE7DA,WAASA,CAACA,aAAWA,cAAYA,CAACA,aAAWA;;mCAkBlBA,QAAiBA;oBAE5CA;oBACAA,UAAYA,MAAOA,CAACA,CAACA,WAAWA,YAAYA,CAACA,WAAWA;oBACxDA,WAAWA,WAAWA,CAACA,WAAWA;oBAClCA,WAAWA,WAAWA,CAACA,WAAWA;oBAClCA,OAAOA;;qCAGgBA,QAAqBA,QAAqBA;oBAEjEA,UAAYA,MAAOA,CAACA,CAACA,aAAWA,cAAYA,CAACA,aAAWA;oBACxDA,aAAWA,aAAWA,CAACA,aAAWA;oBAClCA,aAAWA,aAAWA,CAACA,aAAWA;;+BAmBXA,QAAiBA;oBAExCA,OAAOA,IAAIA,iCAASA,WAAWA,WAAWA,WAAWA,UAClCA,WAAWA,WAAWA,WAAWA;;iCAGjCA,QAAqBA,QAAqBA;oBAE7DA,aAAWA,aAAWA,aAAWA,aAAWA;oBAC5CA,aAAWA,aAAWA,aAAWA,aAAWA;;+BAGrBA,QAAiBA;oBAExCA,OAAOA,IAAIA,iCAASA,WAAWA,WAAWA,WAAWA,UAClCA,WAAWA,WAAWA,WAAWA;;iCAGjCA,QAAqBA,QAAqBA;oBAE7DA,aAAWA,aAAWA,aAAWA,aAAWA;oBAC5CA,aAAWA,aAAWA,aAAWA,aAAWA;;oCAGhBA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;sCAGqBA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;sCAGiBA,QAAqBA,aAAmBA;oBAEhEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;sCAGEA,QAAqBA,QAAqBA;oBAElEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;kCAGIA;oBAE1BA,UAAUA,CAACA;oBACXA,UAAUA,CAACA;oBACXA,OAAOA;;oCAGeA,OAAoBA;oBAE1CA,aAAWA,CAACA;oBACZA,aAAWA,CAACA;;qCAUiBA;oBAE7BA,UAAYA,MAAOA,AAAOA,UAAUA,CAACA,UAAUA,WAAWA,CAACA,UAAUA;oBACrEA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;uCAGkBA,OAAoBA;oBAE7CA,UAAYA,MAAOA,AAAOA,UAAUA,CAACA,YAAUA,aAAWA,CAACA,YAAUA;oBACrEA,aAAWA,YAAUA;oBACrBA,aAAWA,YAAUA;;oCAKOA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;sCAGiBA,QAAqBA,QAAqBA;oBAElEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;4CAkBQA;oBAE9BA,UAAUA,CAACA;oBACXA,UAAUA,CAACA;oBACXA,OAAOA;;uCAIoBA,QAAiBA;oBAE5CA,OAAOA,aAAYA,YAAYA,aAAYA;;yCAIhBA,QAAiBA;oBAE5CA,OAAOA,aAAYA,YAAYA,aAAYA;;uCAIbA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;0CAIuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;uCAIuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;yCAIuBA,OAAgBA;oBAE9CA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;yCAIuBA,aAAmBA;oBAEjDA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;uCAIuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;yCAIuBA,QAAiBA;oBAE/CA,aAAeA,IAAIA;oBACnBA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;;;;;;;;;;;oBAhYaA,OAAOA,kBAAKA;;;;;oBACZA,OAAOA,kBAAKA;;;;;;8BAmCpBA,GAASA;;gBAErBA,SAASA;gBACTA,SAASA;;8BAGGA;;gBAEZA,SAASA;gBACTA,SAASA;;;;;;;;gBAUTA,OAAOA,IAAIA,iCAASA,AAAOA,kBAAWA,eAAIA,AAAOA,kBAAWA;;2BAiD9CA,GAAOA;gBAErBA,SAAIA;gBACJA,SAAIA;;;8BA0CoBA;gBAExBA,IAAIA;oBAEAA,OAAOA,aAAOA,AAAUA;;;gBAG5BA;;+BAGeA;gBAEfA,OAAOA,CAACA,WAAKA,YAAYA,CAACA,WAAKA;;;gBAqB/BA,OAAOA,sCAAkBA;;;gBAMzBA,OAAOA,AAAOA,UAAUA,CAACA,SAAIA,UAAKA,CAACA,SAAIA;;;gBAKvCA,OAAOA,CAACA,SAAIA,UAAKA,CAACA,SAAIA;;;gBAoEtBA,UAAYA,MAAOA,AAAOA,UAAUA,CAACA,SAAIA,UAAKA,CAACA,SAAIA;gBACnDA,UAAKA;gBACLA,UAAKA;;;gBAsCLA,qBAA6BA;gBAC7BA,OAAOA,mDAAcA,0CAAmCA,mBACpDA,kCAAgBA,iBAAiBA,kCAAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBCvR/CA,OAAOA;;;;;;;;;;;;;;;wBAQPA,OAAOA;;;;;;;;;;;;;;;wBAQPA,OAAOA;;;;;;;;;;;;;;;wBAQPA,OAAOA;;;;;;;;;;;;;;;wBAQPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;wBAKPA,OAAOA;;;;;;;;;;;;;;;;;gCAlGcA,IAAIA;+BACLA,IAAIA;iCACFA,IAAIA;iCACJA,IAAIA;iCACJA,IAAIA;8BACPA,IAAIA;gCACFA,IAAIA,sCAAaA;iCAChBA,IAAIA;gCACLA,IAAIA,iCAASA;mCACVA,IAAIA,2CAAiBA;oCACpBA,IAAIA;;;;;;;;;;;;;;;+BAmIZA,QAAiBA;oBAExCA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;;;;;;;;;;;;;;;iCAWYA,QAAqBA,QAAqBA;oBAE7DA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;iCAIGA,SAAkBA;;;oBAE3CA,kCAAUA,SAAaA,SAAaA;oBACpCA,OAAOA;;mCAGcA,SAAsBA,SAAsBA;oBAEjEA,QAAQA,cAAYA,cAAYA,cAAYA;oBAC5CA,QAAQA,CAACA,CAACA,cAAYA,cAAYA,cAAYA;oBAC9CA,QAAQA,cAAYA,cAAYA,cAAYA;oBAC5CA,aAAWA;oBACXA,aAAWA;oBACXA,aAAWA;;oCAGcA,SAAkBA;;;oBAE3CA;oBACAA,4CAAoBA,SAAaA,SAAaA;oBAC9CA,OAAOA,AAAOA,UAAUA;;sCAGAA,QAAqBA,QAAqBA;oBAElEA,4CAAoBA,QAAYA,QAAYA;oBAC5CA,WAASA,AAAOA,UAAUA;;2CAGMA,QAAiBA;;;oBAEjDA;oBACAA,4CAAoBA,QAAYA,QAAYA;oBAC5CA,OAAOA;;6CAGwBA,QAAqBA,QAAqBA;oBAEzEA,WAASA,CAACA,aAAWA,cAAYA,CAACA,aAAWA,cACpCA,CAACA,aAAWA,cAAYA,CAACA,aAAWA,cACpCA,CAACA,aAAWA,cAAYA,CAACA,aAAWA;;kCAGnBA,QAAiBA;oBAE3CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;oCAGmBA,QAAiBA;oBAE3CA,aAAeA,IAAIA;oBACnBA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;oCAGeA,QAAqBA,SAAeA;oBAE1DA,aAAeA,IAAIA;oBACnBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;oCAGAA,QAAqBA,QAAqBA;oBAEhEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;+BAGFA,SAAkBA;oBAEtCA,OAAOA,YAAYA,YAAYA,YAAYA,YAAYA,YAAYA;;iCAGhDA,SAAsBA,SAAsBA;oBAE/DA,WAASA,cAAYA,cAAYA,cAAYA,cAAYA,cAAYA;;oCA4CzCA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;sCAGqBA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;sCAGiBA,QAAqBA,aAAmBA;oBAEhEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;sCAGEA,QAAqBA,QAAqBA;oBAElEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;;;;;;;;;;;;kCASIA;oBAE1BA,QAAQA,IAAIA,iCAASA,CAACA,SAASA,CAACA,SAASA,CAACA;oBAC1CA,OAAOA;;;;;;;;;;;;;;oCASeA,OAAoBA;oBAE1CA,aAAWA,CAACA;oBACZA,aAAWA,CAACA;oBACZA,aAAWA,CAACA;;qCAQiBA;;oBAE7BA,sCAAcA,QAAYA;oBAC1BA,OAAOA;;uCAGkBA,OAAoBA;oBAE7CA;oBACAA,qCAAaA,kBAAWA,oCAAUA;oBAClCA,WAASA,MAAKA;oBACdA,aAAWA,YAAUA;oBACrBA,aAAWA,YAAUA;oBACrBA,aAAWA,YAAUA;;mCAGMA,QAAiBA;;;;oBAK5CA;;oBAEAA,iBAAmBA,CAACA,CAACA,WAAWA,YAAYA,CAACA,WAAWA,aAAaA,CAACA,WAAWA;oBACjFA,oBAAoBA,WAAWA,CAACA,MAAOA,YAAYA;oBACnDA,oBAAoBA,WAAWA,CAACA,MAAOA,YAAYA;oBACnDA,oBAAoBA,WAAWA,CAACA,MAAOA,YAAYA;;oBAEnDA,OAAOA;;qCAGgBA,QAAqBA,QAAqBA;;;;;;oBAOjEA,iBAAmBA,CAACA,CAACA,aAAWA,cAAYA,CAACA,aAAWA,eAAaA,CAACA,aAAWA;oBACjFA,aAAWA,aAAWA,CAACA,MAAOA,cAAYA;oBAC1CA,aAAWA,aAAWA,CAACA,MAAOA,cAAYA;oBAC1CA,aAAWA,aAAWA,CAACA,MAAOA,cAAYA;;;;;;;;;;;;;oCASdA,QAAiBA;oBAE7CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;;;;;;;;;;;;;sCASiBA,QAAqBA,QAAqBA;oBAElEA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;oBACtBA,aAAWA,aAAWA;;;;;;;;;;;;;;uCA0DKA,QAAiBA;oBAE5CA,OAAOA,aAAYA,YACZA,aAAYA,YACZA,aAAYA;;yCAGQA,QAAiBA;oBAE5CA,OAAOA,CAACA,CAACA,uDAAUA;;uCAGWA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;4CAGuBA;oBAE9BA,QAAQA,IAAIA,iCAASA,CAACA,SAASA,CAACA,SAASA,CAACA;oBAC1CA,OAAOA;;0CAGuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;uCAGuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;yCAGuBA,OAAgBA;oBAE9CA,WAAWA;oBACXA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;yCAGuBA,aAAmBA;oBAEjDA,WAAWA;oBACXA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;uCAGuBA,QAAiBA;oBAE/CA,YAAYA;oBACZA,YAAYA;oBACZA,YAAYA;oBACZA,OAAOA;;yCAGuBA,OAAgBA;oBAE9CA,aAAeA,IAAIA;oBACnBA,WAAWA;oBACXA,WAAWA;oBACXA,WAAWA;oBACXA,OAAOA;;;;;;;;;;;;;oBA3HHA,OAAOA,sBACHA,oCACAA,oCACAA;;;;;;8BAnUIA,GAASA,GAASA;;gBAE9BA,SAASA;gBACTA,SAASA;gBACTA,SAASA;;8BAIGA;;gBAEZA,SAASA;gBACTA,SAASA;gBACTA,SAASA;;8BAIGA,OAAgBA;;gBAE5BA,SAASA;gBACTA,SAASA;gBACTA,SAASA;;;;;;;8BA4HeA;gBAExBA,IAAIA,CAACA,CAACA;oBACFA;;;gBAEJA,YAAYA,qCAAUA;gBACtBA,OAAOA,WAAKA,WACJA,WAAKA,WACLA,WAAKA;;+BAGEA;gBAEfA,OAAOA,WAAKA,WACJA,WAAKA,WACLA,WAAKA;;;gBAKbA,OAAOA,kBAAKA,AAACA,SAASA,SAASA;;;gBAM/BA;gBACAA,uDAAoBA,kBAAUA,oCAAUA;gBACxCA,OAAOA,AAAOA,UAAUA;;;gBAKxBA;gBACAA,uDAAoBA,kBAAUA,oCAAUA;gBACxCA,OAAOA;;;gBA+DPA,iDAAcA,kBAAUA;;;gBAwFxBA,SAAmBA;gBACnBA;gBACAA,UAAUA;gBACVA;gBACAA,UAAUA;gBACVA;gBACAA,UAAUA;gBACVA;gBACAA,OAAOA;;;;;;;;;;;;;;kBC1XiBA;;;;;;+BAC6CA;8BACzCA;;8BAGfA;;gBAEbA,cAAcA;;8BAQDA,QAAeA;;gBAE5BA,eAAeA;gBACfA,cAAcA;;4BAGDA,MAAWA,SAA8GA;;;;;gBAEtIA,YAAYA;gBACZA,eAAeA;gBACfA,cAAcA;;;;;;;;;;;;8BA2CsBA,KAAIA;;4BAEhCA;;gBAERA,cAAcA;;;;;;;;;;;;;;6BCvIEA,KAAIA;6BACJA,KAAIA;;;;8BAELA;gBAEfA,KAAKA,WAAWA,IAAIA,kBAAaA;oBAE7BA,mBAAMA,GAANA,mBAAMA,IAAMA;oBACZA,IAAIA,mBAAMA;wBAENA,aAAQA;wBACRA,aAAQA;;;;2BAOFA;gBAEdA,eAAUA;;;gBAKVA,OAAOA;;+BAGWA;;gBAElBA,oBAAeA;gBACfA,0BAAkBA;;;;wBAEdA,oCAAWA;;;;;;;;;;;;;;;;;;;;;;;;8BC4oBMA,UAAcA;;gBAEnCA,gBAAgBA;gBAChBA,cAAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCC9lByBA,KAAIA;;;8BAG3BA;;gBAEhBA,8BAA8BA;;4BAGdA;;gBAEhBA,0BAA0BA;;;;;;;;0CDoNKA;oBAE/BA,UAAUA;oBACVA,UAAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAxTuBA,KAAIA;mCACRA,IAAIA;mCACJA,IAAIA;qCACUA,KAAIA;8BAIvBA,IAAIA;uCACQA,KAAIA;yCACFA,KAAIA;sCACPA,KAAIA;;oCAGfA;oCAEOA,IAAIA;;;;4BAwBrBA,MAAUA,KAAgBA;;;gBAGxCA,iBAAiBA;gBACjBA,sBAAiBA;gBACjBA,uBAAkBA,wDAAiBA;gBACnCA,uBAAkBA,0DAAmBA,2CAACA;gBACtCA,uBAAkBA,0DAAmBA,2CAACA;gBACtCA,uBAAkBA,2DAAoBA;;gBAEtCA;gBACAA,yBAAoBA;gBACpBA,yBAAoBA;gBACpBA,yBAAoBA;gBACpBA,yBAAoBA;;gBAEpBA,IAAIA;oBAEAA,2BAAsBA;oBACtBA,kBAAaA,mBACTA,wDACAA,0DACAA,0DACAA,2DACAA;;oBAKJA,2BAAsBA;oBACtBA,2BAAsBA;oBACtBA,2BAAsBA;;;oBAGtBA,kBAAaA,mBACTA,0DACAA,0DACAA,wDACAA,2DACAA,sDACAA,qDACAA;;;;;;;;uCA/DkBA;gBAE1BA,IAAIA,gBAAgBA;oBAEhBA,eAAeA,IAAIA;;gBAEvBA,oBAAoBA;;;;gBAmEpBA,OAAOA;;mCAGaA;gBAEpBA,qCAAgCA;gBAChCA,gBAAWA;;;;gBAMXA,WAAoBA,IAAIA;;gBAExBA;gBACAA;gBACAA;gBACAA,YAAYA;gBACZA;gBACAA,KAAKA,WAAWA,IAAIA,mBAAmBA;oBAEnCA,8BAAWA,GAAXA,eAAgBA;;;;gBAIpBA,kBAAaA;gBACbA,0BAAqBA;gBACrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAoCAA;gBACAA;;;gBAKAA,mBAA4BA,IAAIA;gBAChCA,kBAAaA;gBACbA,OAAOA;;;gBAKPA,KAAKA,WAAWA,IAAIA,qBAAgBA;oBAEhCA,sBAASA,UAAUA,sBAASA;;gBAEhCA,iBAAYA;gBACZA;gBACAA;gBACAA;gBACAA;gBACAA;gBACAA;;;gBAKAA,OAAOA;;;;gBAKPA;gBACAA;gBACAA;gBACAA;gBACAA,0BAAqBA;;;;wBAEjBA,IAAIA,cAAaA;4BAEbA,IAAIA;gCACAA;;;wBAERA,IAAIA,cAAaA;4BAEbA,IAAIA;gCACAA;;;;;;;;iBAGZA,KAAKA,WAAWA,IAAIA,4BAA4BA;oBAE5CA,aAAaA,0BAAqBA;oBAClCA,IAAIA,8BAA8BA,0BAAqBA;wBAEnDA;;;gBAGRA,IAAIA,CAACA;oBAEDA;;uBAGCA,IAAIA,CAACA,CAACA,cAAaA,CAACA,yCAAoCA,CAACA;oBAE1DA;;gBAEJA,IAAIA;oBAEAA;oBACAA;oBACAA;;;;8BAKWA;gBAEfA,IAAIA,yBAAoBA,2BAAqBA;oBAEzCA,qBAAgBA;oBAChBA,IAAIA;wBAEAA;;;;;;;;gBASRA,oBAA4BA;gBAC5BA,QAAQA;oBAEJA,KAAKA;wBACDA,iBAAYA;wBACZA;oBACJA,KAAKA;wBACDA,iBAAYA;wBACZA;oBACJA,KAAKA;wBACDA,iBAAYA;wBACZA;oBACJA,KAAKA;wBACDA,IAAIA,gFAA4BA;4BAE5BA;4BACAA;4BACAA;4BACAA,gBAAgBA;4BAChBA,IAAIA,YAAYA;gCAEZA,KAAKA,QAAQA,WAAWA,IAAIA,qBAAgBA;oCAExCA,IAAIA,sBAASA;wCAETA,gCAA2BA;wCAC3BA;wCACAA;;;;;;4BAMZA,IAAIA;gCAEAA,IAAIA,0EAAoBA;oCAEpBA,iBAAYA;oCACZA,0BAAkBA;;;;4CAEdA,IAAIA;gDAEAA,sDAAeA;;;;;;;;oCAMvBA;oCACAA,wBAAmBA;oCACnBA;;;;4BAMRA;;;wBAEJA;oBACJA;wBACIA;;;mCAUaA;;gBAErBA,oBAA4BA;gBAC5BA,IAAIA,UAASA;oBAAeA;;gBAC5BA,IAAIA,UAASA;oBAEzBA,mGAA6GA;oBAC7FA;oBACAA;oBACAA,IAAIA,gBAAgBA;wBAEhBA,gBAAgBA;;oBAEpBA,KAAKA,WAAWA,IAAIA,eAAeA;wBAE/BA,2BAAsBA,4BAAeA;;;;oBAIzCA,oBAAeA;;gBAEnBA,IAAIA,kBAAiBA;oBAEjBA;oBACAA;oBACAA;oBACAA;oBACAA,0BAAkBA;;;;4BAEdA,KAAKA,YAAWA,KAAIA,gBAAgBA;gCAEhCA,2BAAQA,IAARA,YAAaA;;;;;;;;gBAIzBA,yBAAoBA;;;;gBAKpBA,YAAYA;gBACZA,QAAQA;oBAEJA,KAAKA;wBACDA;wBACAA;wBACAA;oBACJA,KAAKA;wBACDA;oBACJA,KAAKA;wBACDA;wBACAA,0BAAmBA;;;;gCAEfA,gBAAWA,IAAIA,yCAAgBA,4CAAgBA,AAAKA,KAAKA;;;;;;yBAE7DA,2BAAmBA;;;;gCAEfA,gBAAWA,IAAIA,yCAAgBA,4CAAgBA,AAAKA,MAAKA;;;;;;yBAE7DA,gBAAWA,IAAIA,yCAAgBA,kDAAsBA,iLAAuBA;wBAC5EA,gBAAWA,IAAIA,yCAAgBA,kDAAsBA,iLAAuBA;wBAC5EA;oBACJA,KAAKA;wBACDA;wBACAA;wBACAA;oBACJA;wBACIA;;;iCAKUA;;gBAElBA,IAAIA,eAAcA;oBAEdA,WAAgBA,AAAUA;;oBAE1BA,IAAIA,8BAAyBA,SAASA,gCAA2BA;;;wBAG7DA,gBAAWA;;;;;gBAKnBA,IAAIA,eAAcA;oBAEdA,WAAuBA,AAAiBA;oBACxCA,IAAIA,SAAQA;wBAERA,0BAAkBA;;;;gCAEdA,IAAIA,WAAUA;oCAEVA,KAAKA,WAAWA,IAAIA,gBAAgBA;wCAEhCA,IAAIA,2BAAQA,GAARA,aAAcA;4CAEdA,2BAAQA,GAARA,YAAaA;;wCAEjBA,YAAYA,2BAAQA,GAARA;;wCAEZA,IAAIA,UAASA,MAAMA,MAAKA;4CAEpBA,IAAIA;gDAEAA,2BAAQA,eAARA,YAAiBA;;;;;;;;;;;oBAOzCA,IAAIA,SAAQA;wBAERA;;;;;;gBAORA;gBACAA;gBACAA,0BAAkBA;;;;wBAEdA,IAAIA,WAAUA;4BAEVA,IAAIA;gCACAA;;;wBAERA,IAAIA,WAAUA;4BAEVA,IAAIA;gCACAA;;;;;;;;iBAGZA,OAAOA,gBAAeA;;kCAGHA;;gBAEnBA,0BAAkBA;;;;wBAEdA,IAAIA,WAAUA;4BAEVA,KAAKA,WAAWA,IAAIA,gBAAgBA;;gCAGhCA,YAAYA,2BAAQA,GAARA;;gCAEZA,IAAIA,UAASA;;oCAGTA,2BAAQA,GAARA,YAAaA,AAAMA;oCACnBA;;;;;;;;;;;;;;gBAahBA,eAAwBA,sBAASA;gBACjCA,WAAWA;gBACXA,iBAAYA,UAAUA;;mCAGFA,OAAoBA;gBAExCA,kCAA6BA,OAAOA;;;iDAIDA;;gBAEnCA,YAAYA;gBACZA,0BAAkBA;;;;wBAEdA,IAAIA,2BAAKA;4BAELA,IAAIA,sDAASA;gCAETA,IAAIA,WAAUA;oCAEVA;;;;;;;;;iBAKhBA,OAAOA;;mDAI8BA;;gBAErCA;gBACAA,0BAAkBA;;;;wBAEdA,IAAIA,2BAAKA;4BAELA,IAAIA,sDAASA;gCAETA,IAAIA,WAAUA;oCAEVA;;;;;;;;;iBAKhBA,OAAOA;;;;;;;;;;;;;;;;;;;;;;;;;;oBA+B6BA,OAAOA,IAAIA,iCAAmBA,YAAOA;;;;;oBAEhDA,OAAOA;;;;;oBAENA,OAAOA,CAACA;;;;;;;;;6BAfbA;;;;;+BAOIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAtBLA,IAAIA;qCAEKA,IAAIA;oCACLA,IAAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BC5hBjBA,MAAUA,mBAAqCA,YAAgBA;;;gBAE9EA,WAAWA;gBACXA,iBAAYA,IAAIA;gBAChBA,kBAAaA,IAAIA,uCAAWA,MAAMA,KAAKA;gBACvCA,UAAUA,IAAIA;;gBAEdA,aAAaA;;gBAEbA,kBAAkBA,qGAAcA;gBAChCA,qBAAqBA;gBACrBA,IAAIA,eAAeA;;oBAGfA,0BAAqBA;;;;4BAEjBA,mBAAmBA,AAAqBA;;;;;;;oBAK5CA,mBAAmBA;oBACnBA,mBAAmBA;oBACnBA,mBAAmBA;;gBAEvBA,YAAYA,aAAaA;gBACzBA,YAAYA;gBACZA,2BAAqBA;;;;wBAEjBA,8BAA8BA;;;;;;;gBAGlCA,mCAA8BA,IAAIA,6CAAiBA,iBAAYA,eAAeA,KAAKA;;gBAEnFA,wBAAiCA,KAAIA;;gBAErCA,iBAAiBA,IAAIA,6CAAiBA,mBAAkBA;gBACxDA,kBAAkBA;;gBAElBA,4BAAmCA;gBACnCA,gCAA2BA;;gBAE3BA,mBAAmBA,IAAIA,+CAAmBA,KAAKA,YAAYA;gBAC3DA,2BAAsBA,IAAIA,2CAAeA,cAAcA;;;gBAGvDA,eAAeA;gBACfA,uBAAuBA,mBAA8BA,mBAAaA,AAAOA,iDAAiBA,mBAAaA,AAAOA;gBAC9GA,qCAAgCA;oBAE5BA,OAAOA;wBAEHA;;;oBAGJA,KAAKA,WAAWA,IAAIA,iBAAiBA;wBAEjCA,SAASA,eAAeA;wBACxBA,cAAcA,eAAeA;wBAC7BA,cAAcA,mGAAgBA;wBAC9BA,YAAYA;wBACZA,KAAKA,WAAWA,IAAIA,0EAA2BA;4BAE3CA,YAAYA,CAACA,MAAGA,0BAAoBA;4BACpCA,WAAWA,cAAMA;4BACjBA,IAAIA;;gCAGAA,iCAAcA,GAAdA,kBAAmBA,CAACA;;;;wBAI5BA,uCAAoBA;;;;;;;;;;;;;;;;;;;;;;;kCCzEAA;;;oBAI5BA,KAAKA,WAAWA,IAAIA,sDAAeA;wBAE/BA,iEAAOA,GAAPA;;;;;;;;;;;;;;;;oBAgBJA,iEAAOA,sDAAPA;oBACAA;oBACAA,iEAAOA,0DAAPA,kDAAmEA;oBACnEA,iEAAOA,uDAAPA;oBACAA,iEAAOA,0DAAPA,kDAAmEA;oBACnEA;oBACAA,iEAAOA,2DAAPA,kDAAoEA;oBACpEA,iEAAOA,2DAAPA,kDAAoEA;oBACpEA,iEAAOA,uDAAPA;oBACAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,6DAAPA;oBACAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,yDAAPA;oBACAA,iEAAOA,6DAAPA;oBACAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,yDAAPA;oBACAA,iEAAOA,6DAAPA;oBACAA,iEAAOA,iEAAPA;;;oBAGAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,kEAAPA;oBACAA,iEAAOA,4DAAPA;oBACAA,iEAAOA,iEAAPA;oBACAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,2DAAPA;oBACAA,iEAAOA,2DAAPA;oBACAA,iEAAOA,0DAAPA;oBACAA,iEAAOA,sDAAPA;oBACAA,iEAAOA,uDAAPA;oBACAA,iEAAOA,6DAAPA;;;;;;;;;;;;;;;;4BJfaA,MAAoBA,QAAeA;;gBAEhDA,YAAYA;gBACZA,cAAcA;gBACdA,cAAcA;;;;;;;;;;;;;;;;;;;;;;;8BAwEcA;;4BAKRA,MAAWA,QAAYA;;gBAE3CA,YAAYA;gBACZA,cAAcA;gBACdA,eAAeA;gBACfA,cAASA;;8BAGWA,QAAeA,QAAYA;;gBAE/CA,cAAcA;gBACdA,cAAcA;gBACdA,eAAeA;;;;;;;;;;;;oCKxIYA,KAAIA;;;;+BAEZA;oBAEnBA,4DAAaA;;;;oBAKbA;oBACAA,0BAAqBA;;;;4BAEjBA,yBAAkBA;;;;;;;qBAGtBA;;;;;;;;;;;;4BCXkBA,cAAiCA;;gBAEnDA,oBAAoBA;gBACpBA,WAAWA;;;;mCAGWA;;;;gBAOtBA;;;;;;;;;;;6BChBiCA,KAAIA;;;;;;;;;;;;;;;;;;4BC2FxBA,SAAiBA,IAAQA;;gBAEtCA,eAAeA;gBACfA,UAAUA;gBACVA,cAAcA;;;;;;;;;;;;;kCC/FkBA,KAAIA;;4BAGhBA,aAA0BA;;gBAE9CA,mBAAmBA;gBACnBA,uBAAuBA;gBACvBA,cAAaA,cACTA,YAAMA,0DAAyDA,0DAA0DA,sDAAsDA,2DAA2DA,wDAAwDA;gBAEtSA,cAAaA,cACTA,YAAMA,yDAAyDA,2DAA2DA;gBAE9HA,cAAaA,cACVA,YACIA,yDACAA,0DACAA,6DACAA;gBAIPA,cAAaA,cAENA,yMAEAA,gMACAA,mMACAA,iMACAA;gBAKPA,cAAaA,cAENA,8LACAA,gMACAA,iMACAA,gMACAA,gMACAA,gMACAA;gBAKPA,cAAaA,cAETA,2LACGA,iMACAA;gBAMPA,cAAaA,cACNA,iMACAA;gBAMPA,cAAaA,cAETA,4LACGA,iMACAA;;;;;;;+BAWaA;;;gBAEpBA,SAASA,IAAIA;;gBAEbA,0BAAkBA;;;;wBAEdA,IAAIA;4BAEAA,aAAaA,IAAIA,oCAAQA,qCAAKA;4BAC9BA;;wBAEJA,IAAIA;4BAEAA,aAAaA,IAAIA,oCAAQA,+BAA0BA;4BACnDA;;wBAEJA,IAAIA;4BAEAA,2BAAqBA;;;;oCAEjBA,aAAaA,IAAIA,oCAAQA,AAAKA;;;;;;6BAElCA;;wBAEJA,aAAaA;;;;;;iBAEjBA,OAAOA;;6BAGqDA;;gBAE5DA,OAAOA;;gCAGWA,IAAYA,IAAQA;gBAEtCA,aAAaA;gBACbA,qBAAgBA;gBAChBA,oBAAeA,IAAIA,sCAAUA,IAAIA,IAAIA;;;;;;;;;;;6BC4BhBA,KAAIA;;8BAGLA;;gBAEpBA,eAAUA;;8BAGUA;;;;gBAEpBA,oBAAeA;;;;;;;;;;;;;;;;;;4BCwPHA;;gBAEZA,YAAYA;;8BAGAA,MAAWA,QAAiBA;;gBAExCA,YAAYA;gBACZA,cAAcA;gBACdA,kBAAkBA;;;;;;;;;;;;;;;4BAzDAA,SAA4BA,SAA4BA,QAAYA,QAAYA,gBAAqBA;;gBAEvHA,eAAeA;gBACfA,eAAeA;gBACfA,cAAcA;gBACdA,cAAcA;gBACdA,sBAAsBA;gBACtBA,sBAAsBA;;;;;;;;;;;;;8BAOGA;+BACgBA;;4BAEzBA;;gBAEhBA,YAAYA;;8BAGIA,MAAUA,QAAYA;;gBAEtCA,YAAYA;gBACZA,cAAcA;gBACdA,eAAeA;;;;;;;;;;;;;4BAUKA;;gBAEpBA,cAAcA;;;;;;;;;;;;;4BChUMA,KAAIA;6BAEJA,KAAIA;;4BAOhBA;;;gBAGRA,cAASA,uBAAgBA;;;;oCAcJA;gBAErBA,eAAUA;gBACVA,OAAOA;;wCAGmBA;gBAE1BA,OAAOA,kBAAKA,mBAAMA;;8BAGDA;gBAEjBA,OAAOA,mBAAcA;;;;;;;;;;;;;4BAhBGA,IAAIA;;;;gCALFA;gBAEtBA,aAAQA;gBACRA,OAAOA;;;;;;;;;;;;qCAwBkBA,KAAIA;;4BAGlBA,SAAgBA;;gBAE/BA,uBAAuBA,uBAAgBA;gBACvCA,cAASA;;;;;;;;;;;;;;6BAzHMA,KAAIA;gCACMA,KAAIA;qCACbA;;;;kCAEGA;gBAEnBA,kBAAaA;;;gBAKbA,IAAGA,uBAAiBA;oBAChBA;;;;;gBAKJA,qBAAgBA;gBAChBA,0BAAkBA;;;;wBAEdA,KAAKA,QAAQA,4BAAiBA,QAAQA;;;4BAIlCA,IAAIA,mBAAMA,iBAAgBA;gCAEtBA;gCACAA;;4BAEJA;4BACAA,2BAA2BA;;;;oCAEvBA,IAAIA,CAACA,mBAAMA,UAAUA;wCAEjBA;wCACAA;;;;;;;6BAGRA,IAAIA;gCAEAA;gCACAA,SAASA,mBAAMA;;gCAIfA;;;;;;;;;2BAMAA;gBAEZA,cAAcA;gBACdA,eAAUA;gBACVA,OAAOA;;;gBAKPA;;;;;;;;;;;4BAgFuCA,KAAIA;;;;8BAX5BA;gBAEfA,OAAOA,mBAAcA;;2BAGPA;gBAEdA,cAASA;;;;;;;;;;;4BD6LWA,KAAIA;;4BAEZA;;gBAEZA,mBAAmBA;;8BAGPA;;gBAEZA,cAASA;;;;;;;;;;;;;;;;;8BTqXAA,MAAgBA;;gBAEzBA,YAAYA;gBACZA,YAAYA;;8BAGHA,MAAgBA;;gBAEzBA,YAAYA;gBACZA,YAAYA,uBAAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BWhtBJA,KAAIA;4BACTA,KAAIA;;;;;gBAKvBA;;2BAGcA,OAAaA;gBAE3BA,gBAAWA;gBACXA,cAASA;;;6BAIOA,IAAQA;gBAExBA,IAAIA,mBAAcA;oBAAIA;;gBACtBA,OAAOA,kBAAKA,QAAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BNTOA,KAAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BPmGhBA,QAAeA;;gBAE7BA,cAAcA;gBACdA,gBAAgBA;;;;;;;;;;;;;iCc/GgBA,KAAIA;mCACIA,KAAIA;iCAClBA,IAAIA;;;;gBAK9BA,mBAAcA;gBACdA,iBAAkCA,mBAE9BA,IAAIA,wCACJA,IAAIA,iCAAmBA,QACvBA,IAAIA,oCAAsBA,KAC1BA,IAAIA;gBAERA,iBAAsBA;gBAMtBA,gBAAqBA;gBAMrBA,KAAKA,WAAWA,IAAIA,mBAAmBA;oBAEnCA,iBAAkBA,8BAAWA,GAAXA,cAA0BA,IAAIA,sCAAUA,mDAAuBA,yCAAaA,8BAAWA,GAAXA,wBAAwBA,IAAIA,uCAAWA,yCAAaA,8BAAWA,GAAXA,wBAAsBA,eAASA,2KAAwBA;oBACzMA,2BAA2BA,8BAAWA,GAAXA,cAAqBA,6BAAUA,GAAVA;;gBAEpDA,0BAA0BA,uBAAiBA,IAAIA,6CAAUA,oDAAwBA,IAAIA,oDAAiBA,sDAA0BA,wDAAiCA,eAASA;gBAC1KA;;gBAEAA,8BAA8BA,uBAAiBA,IAAIA,6CAAUA,mDAAuBA,sDAA0BA,IAAIA,oDAAiBA,sDAA0BA,wDAAiCA,eAASA;gBACvMA;;gBAEAA,6BAA6BA,uBAAiBA,IAAIA,6CAAUA,mDAAuBA,qDAAyBA,IAAIA,oDAAiBA,sDAA0BA,uDAAgCA,eAASA;gBACpMA;;gBAEAA,iCAAiCA,uBAAiBA,IAAIA,6CAAUA,mDAAuBA,yDAA6BA,IAAIA,oDAAiBA,sDAA0BA,2DAAoCA,eAASA;gBAChNA;;gBAEAA,WAAYA;gBACZA,8BAA8BA,uBAAiBA,IAAIA,2CAAUA,MAAMA,qDAAyBA,IAAIA,kDAAiBA,SAASA,uDAAgCA,eAASA;gBACnKA;;gBAEAA,kCAAkCA,uBAAiBA,IAAIA,2CAAUA,MAAMA,yDAA6BA,IAAIA,kDAAiBA,SAASA,2DAAoCA,eAASA;gBAC/KA;;gBAEAA,6BAA6BA,uBAAiBA,kDAAsBA,IAAIA,2CAAuBA,eAASA;gBACxGA;;;;iCAGmBA;gBAEnBA,OAAOA,iDAAqBA,gBAAWA;;;gBAKvCA,wBAAmBA;gBACnBA,OAAOA;;6CAyBwBA,MAAaA;gBAE5CA,qBAAgBA,IAAIA,2CAAeA,MAAMA;;qCAGpBA,OAAcA,OAAcA;;gBAEjDA,SAASA,IAAIA,qCAASA;gBACtBA,kBAAkBA;gBAClBA,0BAAqBA;;;;wBAEjBA,YAAYA,uBAAgBA;;;;;;;gBAGhCA,mBAAcA;;mCAGOA,OAAcA,WAAqBA,QAAeA;;gBAEvEA,SAASA,IAAIA,qCAASA;gBACtBA,WAAYA,IAAIA;gBAChBA,iBAAiBA;gBACjBA,wBAAwBA;gBACxBA,aAAaA;gBACbA,0BAAqBA;;;;wBAEjBA,YAAYA,uBAAgBA;;;;;;iBAEhCA,mBAAcA;;wCAGcA;;gBAE5BA,YAAeA,kBAASA;gBACxBA,KAAKA,WAAWA,IAAIA,cAAcA;oBAE9BA,yBAAMA,GAANA,UAAWA,IAAIA,wCAAKA,2BAAQA,GAARA;;gBAExBA,OAAOA;;gCAGeA;;gBAEtBA,OAAOA;;;;;;;;;;;;;;;;;kCA5DkBA,OAAWA;gBAEhCA,SAASA,IAAIA,iCAAKA;gBAClBA,cAAcA,kBAAKA,WAAWA,AAAOA;gBACrCA,KAAKA,WAAWA,IAAIA,OAAOA;oBAEvBA,KAAKA,WAAWA,IAAIA,aAAQA;;wBAGxBA,cAAcA,IAAIA,iCAASA,MAAEA,YAAMA,MAAEA;;;gBAG7CA,OAAOA;;;;;;;;uCdzEeA,WAA0BA;oBAEpDA,KAAKA,WAAWA,IAAIA,iBAAiBA;wBAEjCA,IAAGA,kBAAUA,MAAIA;4BACbA,IAAIA,yCAAUA,UAAYA;gCAAOA,OAAOA;;;;oBAEhDA,OAAOA;;;;;;;;;;;6BAfiBA,KAAIA;4BACNA,KAAIA;;4BAEdA;;gBAEZA,aAAaA;;;;;;;;yCW8RoCA,OAA+BA,UAAwCA;;oBAExHA,IAAIA,eAAcA;wBAAaA,OAAOA;;oBACtCA,aAAiCA;oBACjCA;oBACAA,0BAAmBA;;;;;4BAGfA,IAAIA;gCAASA;;4BACbA,IAAIA,eAAcA,WACXA,YAAWA,iEACXA,YAAWA;gCAEdA,iBAAkBA,gBAAeA;;gCAEjCA,IAAIA;oCAEAA,UAAYA,cAAcA;oCAC1BA,IAAIA;wCAASA,OAAOA;;oCACpBA,IAAIA,MAAMA;wCAENA,SAASA;wCACTA,SAASA;;;;;;;;;;;oBAOzBA,OAAOA;;;;;;;;;;;;;;;2BAzTUA,KAAIA;;4BAGDA,UAAqBA,WAA0BA,KAAgBA;;gBAEnFA,kBAAkBA;gBAClBA,iBAAiBA;gBACjBA,WAAWA;gBACXA,iBAAiBA;;;;mCAGGA,OAA+BA;;;;gBAInDA,kBAAkBA;gBAClBA,gBAAWA;gBACXA,aAAaA,sBAAiBA;;gBAE9BA,aAAaA,+BAAYA,MAAZA;gBACbA,IAAIA;oBAAYA;;gBAChBA,SAASA,uBAAUA;gBACnBA,IAAIA,MAAMA;oBAAMA;;gBAChBA,6BAA6BA;gBAC7BA,eAAeA;gBACfA,cAAcA,iBAASA;gBACvBA,mBAAcA;;;;gBAIdA,0BAAkBA;;;;;wBAGdA,IAAIA;4BAEAA,SAAgBA;4BAChBA,QAAQA;4BACRA,sEAAaA;4BACbA,kBACIA,cAAcA,kBACXA,cAAcA,kBACdA,cAAcA,kBACdA,cAAcA;4BACrBA,2BAAkBA;;;;oCAEdA,IAAIA,2BAAKA,UAASA;wCAEdA,IAAIA,0DAAaA;4CAEbA;4CACAA,IAAIA,WAAUA;gDAEVA;gDACAA;gDACAA;;4CAEJA,IAAIA,WAAUA;gDAEVA;;4CAEJA,IAAIA;gDAAaA;;;;;;;;;;;6BAM7BA,IAAIA;;;gCAIAA,cAAcA,sBAAiBA;gCAC/BA,gBAAWA,IAAIA,IAAIA,8CAAaA,UAAUA,IAAIA,6CAAiBA;;;gCAG/DA,gCACSA,IAAIA,uCAAKA,+MACAA,IAAIA,4DAA0BA,uBAC9BA,IAAIA,4DAA0BA,2BAC9BA,IAAIA,4DAA0BA;;gCAEhDA;gCACAA,yEAAaA;;;wBAGrBA,IAAIA;4BAEAA,UAAUA;4BACVA,oBAAoBA;;4BAEpBA,IAAIA,eAAcA;gCAEdA,WAAWA;gCACXA,0BAA0BA,2DAAcA,OAAOA,eAAUA;gCACzDA;gCACAA,IAAIA,eAAcA;oCAEdA,aAAaA;;gCAEjBA,2BAAsBA;;;;wCAElBA,gBAAgBA,4FAAQA,IAAIA,iCAAmBA,iBAAiBA;;wCAEhEA,KAAKA,WAAWA,IAAIA,qBAAgBA;4CAEhCA,IAAIA,4DAASA,iBAAUA;gDAEnBA,gBAAWA,OAAOA,KAAKA,sBAASA;;;;;;;;;;;gCAS5CA,aAAiCA,2DAAcA,OAAOA,eAAUA;gCAChEA,IAAIA,UAAUA;oCAEVA,gBAAWA,OAAOA,KAAKA;;;;;wBAKnCA,IAAIA;4BAEAA,SAASA;4BACTA,iBAAiBA;4BACjBA,cAAcA,qDAAwCA;4BACtDA,eAAeA;4BACfA,gBAAgBA;4BAChBA,IAAIA;gCAAsBA;;;4BAE1BA,gBAAqBA;4BACrBA,IAAIA,CAACA,mBAAmBA;gCAEpBA,YAAYA;;4BAEhBA,mCAA8BA,IAAIA,sCAAUA,SAASA,oBAAWA,AAAKA;;;wBAGzEA,IAAIA;4BAEAA,WAAWA;4BACXA,cAAiCA,2DAAcA,OAAOA,eAAUA;4BAChEA,YAAWA;4BACXA,eAAoBA;4BACpBA,IAAIA,SAAQA;gCAERA,2BAA0BA,2DAAcA,OAAOA,eAAUA;;gCAEzDA;gCACAA,IAAIA,eAAcA;oCAEdA,cAAaA;;gCAEjBA,WAAWA,IAAIA,4CAASA,OAAMA,mCAAyBA;;4BAE3DA,eAAeA;4BACfA,IAAIA,WAAUA;gCACVA,WAAWA,sBAAiBA;;4BAChCA,gBAAWA,IAAIA,UAAUA,IAAIA,gDAAaA,QAAQA,UAAUA;;4BAE5DA,IAAIA,gBAAeA;gCAEfA,qBACnBA,IAAIA,uCAAKA,4MACwBA,IAAIA,4DAA0BA,sBAAiBA,wBAC/CA,IAAIA,4DAA0BA,sBAC9BA,IAAIA,4DAA0BA,AAAKA;;;;;;;;;;;gBAO7DA,IAAIA,aAAYA;oBAEZA,2BAAqBA;;;;4BAEjBA,2BAAoBA;;;;oCAEhBA,IAAIA;wCAEAA,mBAAcA,OAAOA,CAACA;;;;;;;;;;;;;;;;qCAQLA;;;gBAEjCA;gBACAA;gBACAA,IAAIA;oBAAWA;;gBACfA,YAAYA;gBACZA,IAAIA,SAAQA;oBACRA,QAAQA;;gBACZA,KAAKA,WAAWA,IAAIA,OAAOA;oBAEvBA,KAAKA,WAAWA,IAAIA,6BAAwBA;;wBAGxCA,aAAQA,IAAIA,iCAASA,MAAEA,YAAKA;;;gBAGpCA,eAAeA;gBACfA,0BAAkBA;;;;wBAEdA,IAAIA,WAAWA,kBAAaA;4BAExBA,gBAAWA;;;;;;;iBAGnBA,OAAOA;;;qCAIgBA,OAA+BA;gBAEtDA,IAAIA,kBAAiBA;oBAASA;;gBAC9BA,gBAAgBA;gBAChBA,SAASA,IAAIA,4CAASA,AAAKA;gBAC3BA,gFAA8BA,IAAIA,IAAIA,gDAAaA,sBAAiBA,QAAQA,IAAIA,WAAuBA;;kCAGnFA,IAAaA,OAAcA;gBAE/CA,SAASA,IAAIA,0CAASA;gBACtBA,QAAQA,qCAA8BA,IAAIA;gBAC1CA,IAAIA,SAASA;oBAAMA,8CAAeA;;gBAClCA,IAAIA,SAASA;oBAAMA,8CAAeA;;;oCAGdA,KAASA,OAAcA;gBAE3CA,SAASA,IAAIA,4CAASA;gBACtBA,QAAQA,qCAA8BA,IAAIA;gBAC1CA,IAAIA,SAASA;oBAAMA,8CAAeA;;gBAClCA,IAAIA,SAASA;oBAAMA,8CAAeA;;;kCAGdA,OAA+BA,KAAsBA;gBAEzEA,oBAAmCA;gBACnCA,qBAAsBA,kBAAiBA,kBAAkBA,kBAAiBA;gBAC1EA;gBACAA;gBACAA,eAAeA,sBAAiBA;gBAChCA,IAAIA;;;oBAIAA,IAAIA,CAACA;wBAEDA,UAAUA,0CAAqCA;wBAC/CA,OAAOA,4CAAuCA;wBAC9CA,IAAIA,kBAAiBA,uDAA2BA,mBAAkBA,sDAC3DA,kBAAiBA,0DAA8BA,mBAAkBA,uDACjEA,kBAAiBA,sDAA0BA,mBAAkBA;4BAEhEA;4BACAA;;;;;wBAKJA,SAASA,2BAAaA,kBAAKA;wBAC3BA,6BAAeA;;wBAEfA;;wBAEAA,qBAAgBA,IAAIA,uCAAKA,8MACXA,IAAIA,4DAA0BA;;;gBAGpDA,kBAAgBA,AAAKA,iDAAqBA,IAAIA,2CAAeA,gBAAgBA,aAAaA,sBAAiBA,SAASA,QAAQA,gBAAgBA,iBAAiBA;gBAC7JA,IAAIA,oBAAoBA,CAACA;oBAErBA,kBAAWA,AAAKA,gDAAoBA,IAAIA,8CAAaA,WAAWA;;;;;;;;;;;;;;;;;;;;;;;;;4BGrJlDA,OAAcA;;gBAEhCA,aAAaA;gBACbA,aAAaA;;;;;;;;;;4BP/HFA;;gBAEXA,YAAYA;;;;;;;;;;4BC4DEA;;gBAEdA,2BAA2BA;;;;;;;;;;;;;;;4BEyFdA,IAAQA,UAAmBA;;gBAExCA,UAAUA;gBACVA,gBAAgBA;gBAChBA,kBAAkBA;;;;;;;;;;;;;4BFtKIA,KAAgBA,YAA4BA;;gBAElEA,WAAWA;;gBAEXA,cAASA;gBACTA,kBAAkBA;gBAClBA,kBAAkBA;;;;;;gBAKlBA;;gBAEAA,OAAOA;oBAEHA,YAAkBA;oBAClBA,mEAAiCA;oBACjCA,SAASA;oBACTA,cAAgCA,AAAuBA;oBACvDA,IAAGA,YAAWA;wBAEVA,SAASA;wBACTA,UAAUA;wBACVA,aAAoBA,IAAIA;wBACxBA,cAAcA,mCAA8BA;wBAC5CA,oDAAqBA;wBACrBA,SAASA;wBACTA;wBACAA;wBACAA;wBACAA;wBACAA;;;oBAGJA,IAAIA,YAAWA;wBAEXA,cAAcA,wBAAWA;wBACzBA,YAAYA,mCAA8BA;wBAC1CA,UAASA;wBACTA,UAASA;wBACTA,WAAUA,wBAAWA;wBACrBA,cAAaA;wBACbA,cAAaA,wBAAWA;wBACxBA,eAAeA;wBACfA,0BAAqBA;;;;gCAEjBA,IAAIA,8BAAQA,QAAMA,iBAAgBA;oCAE9BA;;;;;;;yBAGRA,aAAYA,IAAIA;wBAChBA,aAAYA,IAAIA;wBAChBA,WAAUA;wBACVA,kDAAmBA;wBACnBA,mBAA4BA,IAAIA;wBAChCA,wBAAwBA;wBACxBA,kDAAmBA;;wBAEnBA;;;;;;;;;;;;;;;;;mCEuDyBA,KAAIA;;;8BAIxBA;;;;gBAEbA,0BAAqBA;;4BAGRA,cAA2BA;;;;gBAExCA,0BAAqBA;gBACrBA,oBAAoBA;;;;;gBAKpBA;gBACAA,OAAOA;;;;;;;;;;4BAtIaA;;gBAEpBA,WAAWA;gBACXA,YAAIA,IAAIA,8CAEJA,eAAUA,IAAIA,yCACdA,eAAUA,IAAIA,wDACEA,IAAIA;gBACxBA,YAAIA,IAAIA,2CAEJA,IAAIA,uDACJA,eAAUA,IAAIA,yCACdA,eAAUA,IAAIA,yCACdA,cAASA,IAAIA,wDACGA,IAAIA;gBACxBA,YAAIA,IAAIA,2CAEJA,IAAIA,uDACJA,eAAUA,IAAIA,yCACdA,eAAUA,IAAIA,yCACdA,eAAUA,IAAIA,yCACdA,cAASA,IAAIA,2CACVA,IAAIA;gBACXA,YAAIA,IAAIA,8CAEJA,cAASA,IAAIA,2CACVA,IAAIA,oDACHA,AAAKA;gBACbA,YAAIA,IAAIA,8CAELA,cAASA,IAAIA,2CACVA,IAAIA,oDACHA,AAAKA;gBACZA,YAAIA,IAAIA,8CAELA,cAASA,IAAIA,2CACVA,IAAIA,oDACHA,AAAKA;gBACZA,YAAIA,IAAIA,8CAENA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,2CACVA,IAAIA,qDACHA,AAAKA,sDAA0BA,AAAKA;gBAC1CA,UAGIA,IAAIA,8CACJA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,2CAGbA,IAAIA,8CACJA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,2CAGZA,IAAIA,8CACLA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,2CAGbA,IAAIA,8CACJA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,yCACbA,cAASA,IAAIA,2CAGbA,IAAIA,2CACAA,IAAIA,gDAAaA,wCACjBA,cAASA,IAAIA;;;;;6BAaRA;;;;gBAGbA,QAAQA;gBACRA,0BAAqBA;;;;wBAEjBA,8CAAeA;;;;;;;;2BAeNA;;;gBAEbA,0BAAqBA;;;;wBAEjBA,mCAA8BA;;;;;;;;8BAdbA,GAAOA;gBAE5BA,OAAOA,IAAIA,sCAAUA,GAAGA,mBAAUA,AAAKA;;6BAGnBA,GAAOA;gBAE3BA,OAAOA,IAAIA,sCAAUA,GAAGA,mBAAUA,AAAKA;;;;;;;;iCVzCRA,GAAOA;oBAEtCA,OAAOA,IAAIA,yCAAaA,GAAGA;;;;;;;;;;;;4BARXA,YAAgBA;;gBAEhCA,kBAAkBA;gBAClBA,6BAA6BA;;;;;;;;;;;;;;;;;;;;;;;;;sCAtCMA,KAAIA;;8BAE/BA;;gBAERA,wBAAmBA;;;;;;;;;;;uCE+lBQA,IAAUA;oBAErCA,UAAUA;oBACVA,OAAOA;;0CAGoBA,IAAUA;oBAErCA,OAAOA,SAASA;;uCAGWA,IAAUA;oBAErCA,aAAcA,uBAAuBA,IAAIA;oBACzCA,aAAcA,uBAAuBA,IAAIA;oBACzCA,IAAIA,UAAUA;wBACVA;;oBACJA,IAAIA,UAAUA;wBAEVA;;oBAEJA,OAAOA,WAAUA;;yCAGUA,IAAUA;oBAErCA,aAAcA,uBAAuBA,IAAIA;oBACzCA,aAAcA,uBAAuBA,IAAIA;oBACzCA,IAAIA,UAAUA;wBACVA;;oBACJA,IAAIA,UAAUA;wBAEVA;;oBAEJA,OAAOA,WAAUA;;yCAGiBA;oBAElCA,OAAOA;;uCAGyBA;oBAEhCA,OAAOA,kBAAKA;;;;;;;;;;oBAnDcA,WAAMA,wBAAiBA;;;;;2BAEnCA;gBAEdA,WAAMA;;;;;;;;;;;;;;oBaxnBgBA,OAAOA;;;;;;wCAKQA,KAAIA;;4BAE7BA;;;;gBAEZA,sBAAiBA;;;;mCAGKA;gBAEtBA,OAAOA,+BAA0BA;;2BAGnBA;gBAEdA,OAAOA,8BAAiBA;;;;;;;;;;;;oCCnBWA;;;;uCAyCAA;oBAEnCA,OAAOA,kDAASA,OAATA;;;;oBAMPA,KAAKA,WAAWA,IAAIA,uCAAiBA;wBAEjCA,IAAIA,kDAASA,GAATA,oCAAeA;4BACfA,kDAASA,GAATA,mCAAcA,IAAIA;4BAClBA,kDAASA,GAATA,yCAAoBA;4BACpBA,OAAOA,kDAASA,GAATA;;;;oBAIfA,OAAOA;;;;;;;;;;;;6BAzDwBA,KAAIA;mCAkCrBA;iCACSA,KAAIA;;;;;;;uCA9BUA,UAAmBA;;gBAGxDA,OAAOA,IAAIA,6BAAkBA,QAAQA;;sCAGVA,WAAkBA;gBAE7CA,UAAUA,IAAIA,oBAASA;gBACvBA,sBAAsBA;gBACtBA,iBAAYA;gBACZA,OAAOA;;;sCAImCA,IAAIA;gBAE9CA,eAAoCA,KAAIA;gBACxCA,iBAAYA;gBACZA,OAAOA;;sCAGgCA;gBAEvCA,eAAgCA,KAAIA;gBACpCA,iBAAYA;gBACZA,OAAOA;;iDAgC6BA;gBAEhDA;gBACYA,oBAAiBA;gBACjBA,kBAAaA,KAAGA;gBAChBA,OAAOA;;mDAG6BA,GAAUA;gBAE1DA;gBACYA,oBAAiBA;gBACjBA,kBAAaA,KAAGA;gBAChBA,kBAAaA,KAAGA;gBAChBA,OAAOA;;sCAGgBA;gBAEvBA;gBACAA,aAAgBA,IAAIA,yBAAOA,YAAYA;gBACvCA,MAAIA;gBACJA,OAAOA;;;gBAKPA;gBACAA,aAAgBA,IAAIA,yBAAOA,YAAYA;gBACvCA,OAAOA;;0CAIoCA,IAAIA,IAAIA;gBAEnDA,oBAAsCA,KAAIA,mCAAsBA;gBAChEA,eAAoCA;gBACpCA,gBAAqBA;gBACrBA,iBAAYA;gBACZA,OAAOA;;mCAGcA;gBAErBA,mBAAcA;gBACdA,KAAKA,WAAWA,KAAKA,kBAAaA;oBAE9BA,0BAAqBA,WAAWA;;;;4CAKNA,UAAmBA;gBAEjDA,aAAgBA,IAAIA,yBAAOA,YAAOA;gBAClCA,aAAcA,iBAAYA,yBAAyBA,aAAaA,yBAAoBA,0BAA0BA;gBAC9GA,aAAcA,qBAAqBA;;gBAEnCA,IAAIA,WAAUA;oBACVA,IAAIA;wBAEAA,8BAA8BA;;wBAI9BA,iCAAiCA;;;;;;;;;;;;;;;;;;sCAqBrBA,GAAGA;gBAEvBA,QAAMA;gBACNA,kBAAaA,GAAGA;;gBAEhBA,OAAOA;;oCAGcA,GAAUA;;gBAE/BA,WAAYA;gBACZA,IAAIA,CAACA,uBAAkBA;oBAEnBA,eAAUA,MAAMA;;gBAEpBA,qBAAMA,0BAAMA,aAAQA;gBACpBA,2BAAqBA;;;;wBAEjBA,0BAAqBA,MAAMA;;;;;;;;uCAKPA,GAAUA;;gBAElCA,WAAYA;gBACZA,IAAIA,CAACA,uBAAkBA;oBAEnBA,eAAUA,MAAMA;;gBAEpBA,qBAAMA,0BAAMA,aAAQA;gBACpBA,2BAAqBA;;;;wBAEjBA,0BAAqBA,MAAMA;;;;;;;;wCAKLA,GAAUA;gBAEpCA,SAASA;gBACTA,OAAOA,iBAAYA,gBAAgBA;;mCAGdA,gBAAuBA;;gBAE5CA,0BAAqBA;;;;wBAEjBA,IAAIA,CAACA,uBAAkBA;4BAEnBA;;;wBAGJA,IAAIA,sBAAMA,0BAAMA,aAAOA;4BACnBA;;;;;;;iBAERA;;2CAG6BA,iBAAwBA;;gBAErDA,IAAIA,mBAAmBA;oBAAMA;;gBAC7BA,0BAAqBA;;;;wBAEjBA,IAAIA,uBAAkBA;4BAElBA,IAAIA,sBAAMA,0BAAMA,aAAOA;gCACnBA;;;;;;;;iBAGZA;;oCAGoBA,GAAGA;;gBAEvBA,WAAYA,AAAOA;gBACnBA,IAAIA,CAACA,uBAAkBA;;oBAGnBA,OAAOA;;gBAEXA,OAAOA,YAAIA,kCAAMA,0BAAMA;;;;;;;;;;;;;;;;;;;8BCrObA,KAASA;;gBAEnBA,WAAWA;gBACXA,UAAUA;;;;;;;+BAGKA;gBAEfA,OAAOA,aAAYA,WAAWA,cAAaA;;;;;;;;;;;;;;;;;;2CASZA,GAAeA;oBAE9CA,kCAAuBA,mBAAmBA,GAAGA;;wCAGpBA,GAAGA;oBAE5BA,OAAOA,kCAAuBA,qBAAmBA;;0CAErBA,GAAeA;oBAE3CA,kCAAuBA,gBAAgBA,GAAGA;;wCAEjBA,GAAGA;oBAE5BA,OAAOA,kCAAuBA,mBAAmBA;;;;;;;;;;;;4BCd5BA,GAAoBA;;gBAEzCA,SAASA;gBACTA,SAASA;;;;;gBAKTA,OAAEA;;;;;;;;;;;4BA1BeA;;gBAEjBA,SAASA;gBACTA,gBAAWA,KAAIA;;;;;gBAKfA,OAAEA;;;;;;;;;;;;oBHsBmBA,OAAOA;;;;;;;gBAJ5BA,gBAAWA,IAAIA,qBAASA,AAAOA;;;;6BAOnBA;gBAEZA,OAAOA,oFAA0BA;;8BAGhBA;gBAEjBA,OAAOA,uCAA0BA;;;;;;;;;;;;oBAOXA,OAAOA;;;;;;;gBAc7BA,gBAAWA,IAAIA,qBAASA,AAAOA,IAAKA,AAAOA;;;;6BAZ/BA;gBAEZA,OAAOA,oFAA0BA;;8BAGhBA;gBAEjBA,OAAOA,uCAA0BA;;6BAUrBA;gBAEZA,OAAOA,oFAA0BA;;;;;;;;;;;;;;8BI2KhBA,KAAIA;gCACFA,KAAIA;+BACPA,KAAIA;6BACJA,KAAIA;;;;;gBAIpBA,eAAUA;gBACVA,eAAUA;gBACVA,eAAUA;gBACVA;;8BAKeA;gBAEfA,KAAKA,WAAWA,IAAIA,qBAAgBA;oBAEhCA,sBAASA,GAATA,sBAASA,IAAMA;oBACfA,IAAIA,sBAASA,MAAMA,oBAAOA;wBAEtBA,aAAQA;;;;;;2BAWFA;gBAEdA,kBAAaA;gBACbA,iBAAYA;gBACZA,gBAAWA;;;;gBAKXA,0BAAqBA;;;;wBAEjBA,IAAIA,gCAAcA;4BAEdA,QAAWA;4BACXA;;;;;;;iBAGRA,OAAOA;;+BAGWA;;gBAElBA,0BAAkBA;;;;;wBAGdA,oCAAWA;;;;;;;oCAIQA;gBAEvBA,eAAUA;;gCAGOA;gBAEjBA,KAAKA,WAAWA,IAAIA,qBAAgBA;oBAEhCA,IAAIA,SAAQA,qBAAQA;wBAEhBA,YAAOA,GAAGA,GAAGA,sBAASA,IAAIA,oBAAOA;wBACjCA;;;;8BAKeA,QAAmBA,OAAWA,UAAgBA;;;;;;;;;;;;;;;;;sCCtTtCA,IAAIA;oCACNA,IAAIA;mCACLA,IAAIA;;;;;;;;;;;;;;;;;;;;;;;;;;8BCPlBA,MAAWA,MAAUA;;gBAEnCA,YAAYA;gBACZA,YAAYA;gBACZA,UAAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAMwBA,KAAIA;yCACEA,KAAIA;;4BAGvBA;;gBAErBA,eAAeA;;;;;;gBAKfA;gBACAA,0BAAqBA;;;;wBAEjBA,IAAIA,mBAAmBA;4BAEnBA,2BAAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BD7BnBA;;;;gBAEXA,kBAAaA;;;;;;;;;;;;;;;;;;8BDsOGA,QAAcA,UAAgBA;;gBAE1CA,cAAcA;gBACdA,gBAAgBA;gBAChBA,cAAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCG7OWA;yCACCA;yCACDA;0CACCA;;;;;;;;;;;;;;;;;oBAuExBA,OAAOA;;;oBAGTA,eAAUA;;;;;oBAGSA,OAAOA;;;oBAG1BA,eAAUA;;;;;;;;;;4BAtEDA,OAAWA;;;gBAGxBA,YAAOA,OAAOA;;;;oCAGOA,SAAgBA,OAAWA,MAAcA,MAAcA;;;;gBAE5EA,QAAQA,iBAACA;gBACTA,IAAIA;oBAAaA,SAAKA;;gBACtBA,QAAQA;gBACRA,YAAKA,SAASA,MAAIA,YAAMA,MAAIA,YAAMA;;kCAKdA,OAAWA;gBAE/BA,aAAQA,0CAASA,OAAOA;gBACxBA,iBAAYA,2CAAQA,OAAOA;gBAC3BA,iBAAYA,2CAAQA,OAAOA;;;gBAK3BA,4BAAwBA,YAAOA;;;gBAK/BA,kBAAaA,oDAAqBA,YAAOA,aAAQA,+CAAgBA;;8BAMlDA;gBAEfA,KAAKA,WAAWA,IAAIA,mBAAmBA;oBAEnCA,KAAKA,WAAWA,IAAIA,oBAAoBA;wBAEpCA,QAAQA,mBAAKA,0BAAyBA;wBACtCA,QAAQA,mBAAKA,0BAAyBA;wBACtCA,IAAIA,uBAAkBA,GAAGA,QAAMA;4BAC3BA,gBAAMA,GAAGA,IAAKA,uBAAkBA,GAAGA;;wBACvCA,IAAIA,2BAAsBA,GAAGA,QAAMA;4BAC/BA,oBAAUA,GAAGA,IAAKA,2BAAsBA,GAAGA;;wBAC/CA,IAAIA,2BAAsBA,GAAGA,QAAMA;4BAC/BA,oBAAUA,GAAGA,IAAKA,2BAAsBA,GAAGA;;;;;oCAyBlCA,GAAOA,GAAOA,GAAOA,OAA2BA;;;gBAErEA,QAASA,CAAMA,AAACA;gBAChBA,gBAASA,GAAGA,GAAGA,GAAGA,OAAOA;;qCAGHA,GAAOA,GAAOA,GAAOA,OAA2BA;;;gBAEtEA,kBAAaA,+BAAKA,GAAEA,GAAEA,OAAMA;gBAC5BA,kBAAaA,QAAOA,eAAKA,GAAGA,OAAOA;;8BAGlBA,WAAqBA,GAAOA;gBAE7CA,OAAOA,gBAAWA,GAAGA,QAAMA,qBAAgBA,GAAGA,OACvCA,oBAAeA,GAAEA,QAAMA,yBAAoBA,GAAEA,OAC7CA,oBAAeA,GAAEA,QAAMA,yBAAoBA,GAAEA;;4BAGrCA,WAAqBA,GAAOA;gBAE3CA,gBAAWA,GAAGA,IAAKA,qBAAgBA,GAAGA;gBACtCA,oBAAeA,GAAGA,IAAKA,yBAAoBA,GAAGA;gBAC9CA,oBAAeA,GAAGA,IAAKA,yBAAoBA,GAAGA;;gDAGXA,GAAOA;gBAE1CA,UAAUA,sBAAiBA,GAAGA,cAASA,cAASA;gBAChDA,KAAKA,WAAWA,IAAIA,KAAKA;oBAErBA;;;;wCAKsBA,SAAaA,GAAOA,GAAOA;gBAErDA,IAAIA,iBAAkBA;oBAClBA,gBAASA,EAAMA,AAACA,6CAAsBA,GAAGA,GAAGA;oBAC5CA;;gBAEJA,IAAIA,iBAAkBA;oBAElBA,gBAASA,CAAMA,AAACA,kBAAUA,GAAGA,GAAGA;oBAChCA;;gBAEJA;gBACAA,IAAIA;oBAEAA;;gBAEJA,YAAKA,OAAOA,GAAGA,GAAGA;gBAClBA,OAAOA;;2BAGOA;gBAEdA,gBAAgBA;gBAChBA,KAAKA,WAAWA,IAAIA,YAAOA;oBAEvBA,KAAKA,WAAWA,IAAIA,aAAQA;wBAExBA,gBAAWA,GAAGA,IAAKA,kBAAaA,GAAGA;wBACnCA,oBAAeA,GAAGA,IAAKA,sBAAiBA,GAAGA;wBAC3CA,oBAAeA,GAAGA,IAAKA,sBAAiBA,GAAGA;;;;8BAKlCA,GAAOA;gBAExBA,IAAIA,cAASA,QAAQA,IAAIA,yCAAsBA,IAAIA;oBAE/CA,gBAAWA,GAAGA;;gBAElBA,aAAQA;gBACRA,cAASA;;;8BAIMA,GAAOA;gBAEtBA,OAAOA,gBAAMA,GAAGA;;mCAGIA,GAAOA;gBAE3BA,eAAUA;gBACVA,eAAUA;;qCAGUA;;gBAEpBA,0BAAkBA;;;;wBAEdA,iBAAYA;;;;;;;qCAIIA,GAAUA;;gBAE9BA,0BAAkBA;;;;wBAEdA,mBAAYA,GAAGA;;;;;;;mCA0GCA;;gBAGpBA,cAASA,GAAGA,cAASA;gBACrBA;;qCAGoBA,GAAQA;;gBAG5BA,gBAASA,GAAGA,cAASA,cAASA;gBAC9BA;;qDAjHwCA;gBAExCA,eAAeA;gBACfA,eAAeA;;gBAEfA,KAAKA,WAAWA,IAAIA,UAAUA;oBAE1BA;oBACAA,+BAAgCA,CAACA,WAAUA,aAAEA,cAAcA,MAAKA;oBAChEA,IAAIA;wBAEAA,KAAKA,WAAWA,IAAIA,aAAWA,SAAGA;4BAE9BA,IAAIA,MAAIA,kBAAYA;gCAEhBA,IAAIA,aAAEA;oCAEFA;;gCAEJA;gCACAA;;4BAEJA,IAAIA,aAAEA,MAAIA;gCAENA;;;;oBAIZA,IAAIA;wBAEAA;wBACAA;;oBAEJA;oBACAA,IAAIA,YAAYA;wBAEZA;wBACAA;;oBAEJA,IAAIA,YAAYA,cAASA,YAAYA;wBAAQA;;;;;gBAIjDA;;kDAG+CA,GAAUA;gBAEzDA;gBACAA,aAAaA;gBACbA,OAAOA,kCAA2BA,GAAGA,OAAOA,UAAUA;;oDAGPA,GAAUA,OAAWA,UAAcA;;gBAGlFA,YAAiBA,IAAIA,iCAASA,cAASA;gBACvCA,eAAeA;gBACfA,KAAKA,QAAQA,UAAUA,IAAIA,UAAUA;oBAEjCA,cAAcA;oBACdA;oBACAA,+BAAgCA,CAACA,WAAUA,aAAEA,cAAcA,MAAKA;oBAChEA,IAAIA;wBAEAA,KAAKA,WAAWA,IAAIA,aAAWA,SAAGA;4BAE9BA,IAAIA,MAAIA,iBAAWA;gCAEfA,IAAIA,aAAEA;oCAEFA;;gCAEJA;gCACAA;;4BAEJA,IAAIA,aAAEA,MAAIA;gCAENA;;;;oBAIZA,IAAIA;wBAEAA;;oBAEJA,mBAAYA,aAAEA,IAAIA;;gBAEtBA,UAAeA,IAAIA,iCAASA,cAASA;gBACrCA,OAAOA,IAAIA,uDAAiBA,qBAAgBA,iBAAQA,qBAAgBA,eAAMA,gBAAOA;;uCAGzDA;gBAExBA,OAAOA,kBAAKA,AAACA,UAAUA,UAAUA;;2CAGLA;gBAE5BA,iBAAYA,EAAMA,AAACA;;;gBAmBnBA;gBACAA,IAAIA,gBAAWA;oBAEXA;oBACAA;;;qCAIkBA;gBAEtBA;gBACAA,eAAUA;;gCAGOA,GAAQA,GAAOA;;gBAGhCA,IAAIA,MAAKA;oBACLA,gBAAMA,GAAGA,IAAKA;;;;;kCAMDA,GAAQA,GAAOA,GAAOA,OAAWA;;;gBAGlDA,cAASA,GAAGA,GAAGA;gBACfA,cAASA,OAAOA,GAAGA;gBACnBA,kBAAaA,WAAWA,GAAGA;;8BAGVA,MAAWA,WAA+BA;;;gBAE3DA,kBAAaA,YAAYA,YAAOA,aAAQA,WAAWA;;oCAG9BA,MAAaA,GAAOA,GAAOA,WAAeA;gBAE/DA,YAAYA;gBACZA,cAASA,GAAGA,GAAGA,sBAAcA;gBAC7BA,YAAKA,MAAMA,eAAOA,eAAOA;;8BAGZA,GAAUA,GAAOA,GAAOA,OAAWA;;gBAEhDA,KAAKA,WAAWA,IAAIA,UAAUA;oBAE1BA,SAASA,KAAIA;oBACbA,SAASA;oBACTA,IAAGA,MAAMA;wBAELA,WAAMA;wBACNA;;oBAEJA,gBAASA,aAAEA,IAAIA,IAAIA,IAAIA,OAAOA;;;4BA4BrBA,GAAqBA,GAAOA,GAAOA,OAAWA;;gBAE3DA,KAAKA,WAAWA,IAAIA,4BAAmCA,YAAIA;oBAEvDA,gBAASA,4BAAuCA,aAAEA,IAAIA,MAAIA,SAAGA,GAAGA,OAAOA;;;8BA6C9DA,GAAUA,IAAQA,IAAQA;gBAEvCA,MAAMA,IAAIA;;0CA3EiBA,GAAUA,GAAOA,GAAOA,UAAcA,OAAWA;;gBAE5EA;gBACAA;gBACAA,KAAKA,WAAWA,IAAIA,UAAUA;oBAE1BA,SAASA,OAAIA,UAAGA;oBAChBA,SAASA;;oBAETA,IAAIA,MAAMA;wBAENA,WAAMA,gBAAMA;wBACZA;;oBAEJA,gBAASA,aAAEA,IAAIA,IAAIA,OAAGA,kBAAYA,OAAOA;oBACzCA,IAAIA,aAAEA;wBAEFA;wBACAA,qCAAmBA,gBAAWA;;;;gCAcrBA,GAAOA,GAAOA,OAAWA,QAAYA;;gBAGtDA,kBAAaA,KAAWA,GAAGA,MAAMA,QAAQA;gBACzCA,kBAAaA,KAAWA,QAAIA,uBAAWA,MAAMA,QAAQA;gBACrDA,kBAAaA,KAAWA,GAAGA,GAAGA,UAAUA;gBACxCA,kBAAaA,KAAWA,GAAGA,QAAIA,wBAAYA,UAAUA;;gBAErDA,kBAAaA,KAAWA,GAAGA,SAASA;gBACpCA,kBAAaA,KAAWA,GAAgBA,QAAEA,8BAAgBA;gBAC1DA,kBAAaA,KAAWA,QAAEA,uBAAcA,QAAGA,8BAAkBA;gBAC7DA,kBAAaA,KAAWA,QAAIA,uBAAYA,SAASA;;kCAmChCA,IAAQA,IAAQA,IAAQA,IAAQA;gBAEjDA,MAAMA,IAAIA;;oCAlCWA,GAAQA,GAAOA,GAAOA,OAAWA,QAAYA,OAAWA;;gBAE7EA,KAAKA,QAAQA,GAAGA,IAAIA,MAAIA,aAAOA;oBAE3BA,KAAKA,QAAQA,GAAGA,IAAIA,MAAIA,cAAQA;wBAE5BA,gBAASA,GAAGA,GAAGA,GAAGA;;wBAElBA,kBAAaA,WAAWA,GAAGA;;;;gCAKlBA,OAAWA,GAAOA;gBAEnCA,IAAIA,UAASA;oBACTA,oBAAUA,GAAGA,IAAKA;;;oCAGDA,OAAWA,GAAOA;gBAEvCA,IAAIA,UAASA;oBAETA,oBAAUA,GAAGA,IAAKA;;;;;;;;;;;;;;;;;;;;;;;;8BAqBEA,YAAgBA,UAAcA,eAAwBA;;gBAE1EA,kBAAaA;gBACbA,gBAAWA;gBACXA,qBAAgBA;gBAChBA,mBAAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBH1WIA,OAAOA;;;;;oBACRA,OAAOA;;;;;;;;;;gCAEOA;gBAEnCA,OAAOA,IAAIA,mDAAuBA,WAAWA;;;gBAK7CA,OAAOA;;;gBAKPA;gBACAA,mBAAcA;;;gBAKdA;;qCAGsBA,GAAOA;gBAE7BA,uBAAkBA,IAAIA,iCAASA,GAAEA;;mCAGXA;gBAEtBA,uBAAkBA;;+BAGAA,GAAOA;gBAEzBA,IAAIA,eAAUA;oBAEVA,cAASA,IAAIA,+BAAUA,GAAGA;oBAC1BA,iBAAYA,IAAIA,+BAAUA,GAAGA;;gBAEjCA,mBAAcA,GAAGA;gBACjBA,sBAAiBA,GAAGA;;;;;;;;;;;;;8BI3EHA;gBAEjBA,cAASA;gBACTA,aAAQA;gBACRA,WAAMA;;;;;;;;;;;;;;;;+BJ3EeA;oCACOA,KAAIA;kCACNA,KAAIA;kCACDA,KAAIA;gCAEtBA;;;;oCAEOA,GAAGA;gBAErBA,oBAAeA;gBACfA;gBACAA,OAAOA;;4BAGMA,OAAWA;gBAExBA,iBAAYA,IAAIA,+BAAUA,OAAOA;;;;gBAMjCA;gBACAA;;;;gBAKAA,KAAKA,WAAWA,IAAIA,yBAAoBA;oBAEpCA,0BAAaA;oBACbA,0BAAqBA;;;;4BAEjBA,cAAYA,0BAAaA;;;;;;qBAE7BA,IAAIA,0BAAaA,iBAAiBA,CAACA,0BAAaA;wBAE5CA,oBAAeA,0BAAaA;wBAC5BA,yBAAoBA,0BAAaA;wBACjCA;;wBAIAA,sBAAiBA,0BAAaA;;;;;qCAMVA,GAAOA;gBAEnCA;gBACAA,IAAIA;oBAEAA,KAAKA,wBAAWA;oBAChBA,yBAAoBA;;oBAIpBA,KAAKA,IAAIA;oBACTA,QAAUA;;;;gBAIdA,sBAAiBA;gBACjBA;gBACAA,WAAWA,GAAGA;gBACdA;gBACAA,OAAOA;;qCAGqBA,GAAOA;gBAEnCA,SAASA,mBAAcA,GAAGA;gBAC1BA;gBACAA,OAAOA;;mCAGaA;;gBAEpBA,0BAAqBA;;;;wBAEjBA,YAAYA;;;;;;;;;gBAMhBA,0BAAqBA;;;;wBAEjBA,IAAIA,CAACA;4BAAeA;;;;;;;iBAExBA;;;;;;;;;;;;;;;;gCKxFyBA,KAAIA;;4BAIbA,cAA2BA;;gBAE3CA,oBAAoBA;gBACpBA,YAAYA;gBACZA,cAAcA,yEAAmEA,IAAIA;gBACrFA,gBAAgBA,iEAA2DA,IAAIA;gBAC/EA,WAAWA;gBACXA,iBAAiBA;gBACjBA,WAAWA;gBACXA,4BAA4BA;gBAC5BA,aAAQA;gBACRA,sBAAiBA;;gBAEjBA,kBAAaA,IAAIA,wDAAYA,UAACA;oBAE1BA,aAAaA;oBACbA;oBACAA,IAAIA;wBAEAA,UAAUA,0KAA+BA;wBACzCA,6BAAWA,6BAA2BA;;;;wBAMtCA,IAAIA;4BAEAA,UAAUA,0KAA+BA;4BACzCA,6BAAWA,6BAA2BA;;gCAElCA,UAAUA,0CAA0CA,4BAAoBA;gCACxEA,YAAYA;gCACZA,kBAAkBA,oDAAMA,IAAIA,iCAASA,IAAIA;;gCAEzCA,0CAA2CA,+CAA0BA;gCACrEA,gBAAcA,qBAAsBA,mDAA8BA,4DAAgCA;;;;4BAMtGA,UAAUA;;;;;oBAKlBA,IAAGA,WAAWA;wBACVA,yBAAyBA;;;oBAE7BA,eAAeA,oCAA4BA;;;oBAG3CA,IAAIA,CAACA,yBAAyBA,CAACA,yBAAyBA,4BAAoBA;wBACxEA,SAASA;wBACTA,gBAAgBA,4DAAgCA;wBAChDA;wBACAA,aAAaA,4DAAgCA;wBAC7CA;wBACAA,qBAAmBA,kBAAkBA,QAAQA;wBAC7CA,qBAAmBA,kBAAkBA,QAAQA;wBAC7CA,qBAAmBA,kBAAkBA,QAAQA;wBAC7CA,qBAAmBA,kBAAkBA,QAAQA;wBAC7CA,qBAAmBA,kBAAkBA,QAAQA;;wBAE7CA,qBAAqBA,8DAAyBA,IAAIA,iCAASA,IAAIA;;wBAE/DA,gBAAcA,mBAAoBA;;;;;;oBAMvCA;gBACHA,kBAAaA,IAAIA,wDAAYA,UAACA;oBAE1BA,UAAUA;;oBAEVA,+BAA+BA,4BAA2BA,0GAA8BA;;;oBAGzFA;gBACHA,kBAAaA,IAAIA,wDAAYA,UAACA;oBAE1BA,UAAUA;;oBAEVA,UAAUA,0CAA0CA,4BAAoBA;oBACxEA,YAAYA;oBACZA,kBAAkBA,oDAAKA,IAAIA,iCAASA,IAAGA;;oBAEvCA,0CAAwCA,+CAA0BA;oBAClEA,gBAAcA,qBAAsBA,mDAA8BA;;;oBAGnEA;gBACHA,eAA0BA,UAACA;;oBAGvBA,UAAUA;oBACVA,UAAUA;oBACVA,UAAUA;oBACVA,YAAYA,4BAAoBA;;oBAEhCA,UAAUA;oBACVA,WAAWA;oBACXA,WAAWA,yCAACA,oDAAMA;;oBAElBA,SAASA,oCAA4BA;;oBAErCA,cAAYA,kBAAmBA,IAAIA,2DAC/BA,0CAA0CA,6BAC1CA,0CAA0CA;;gBAElDA,kBAAaA,IAAIA,wDAAYA,WAAUA;;gBAEvCA,kBAAaA,IAAIA,wDAAYA,UAACA;;oBAE1BA,SAASA;oBACTA,UAAUA;oBACVA,UAAUA;oBACVA,YAAYA,4BAAoBA;;oBAEhCA,WAAWA;oBACXA,aAAaA;;oBAEbA,gBAAgBA;oBAChBA,sBAAsBA,0CAA0CA;oBACpEA,gBAAcA,yBAA0BA,mDAA8BA,4DAAgCA;oBAClGA,0BAAqBA;;;;4BAEjBA,aAAaA;4BACbA,eAAeA,2FAAOA,IAAIA,iCAASA,oBAAoBA;4BACvDA,IAAIA;gCAAgBA;;4BACpBA,IAAIA;gCAAgBA;;4BACpBA,IAAIA;gCAAgBA;;4BACpBA,IAAIA;gCAAgBA;;;;4BAGpBA,UAAUA,0CAA0CA;4BACpDA,qBAAmBA,UAAUA;4BAC7BA,gBAAcA,sBAAuBA,mDAA8BA,4DAAgCA;;;;;;yBAExGA;gBACHA,cAASA;;;oBAGLA,wBAA0BA;oBAC1BA,KAAKA,WAAWA,IAAIA,mBAAcA;;wBAG9BA,IAAIA,CAACA;4BAAmCA;;wBACxCA,WAAWA,iBAAYA;;wBAEvBA,IAAIA,IAAIA;;4BAGJA,oBAAoBA;;4BAEpBA,0BAAoBA;;;;;oCAGhBA,IAAIA,cAAcA;;;wCAIdA,YAAYA,kBAAaA;;;;;;;;;;;oBASzCA,sBAAiBA;;;;;;;gBAkCrBA,OAAOA,uBAAkBA;;;;;;;;;;;;;qCA3BUA,KAAIA;;4BAGpBA,SAAwBA;;;;;gBAEvCA,0BAAkBA;;;;wBAEdA,uBAAkBA,uBAAgBA;;;;;;iBAEtCA,eAAeA;;;;iCAGKA;;gBAEpBA,0BAAqBA;;;;wBAEjBA,IAAIA,CAACA,cAAcA;4BAEfA;;;;;;;iBAGRA;;;;;;;;;;;;;;;;;;wCClNkCA,AAA2DA,UAACA;wBAAOA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAqCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAA+BA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAA8BA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAkCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAsCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAkCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAoCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAiCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAmCA,QAAQA,IAAIA,yCAAMA,4CAAgBA;wBAAmCA,QAAQA,IAAIA,yCAAMA,kDAAsBA,iLAAsBA;wBAAeA,QAAQA,IAAIA,yCAAMA,kDAAsBA;wBAA2BA,OAAOA;sBAAv2BA,KAAIA;;;;2CAE7CA;gBAE3BA;gBACAA,IAAIA,kCAA6BA,OAAWA;;;oBAMxCA,UAAQA;;gBAEZA,OAAOA;;mCAGcA,YAAgBA;;;gBAGrCA,0BAAqBA;;;;wBAEjBA,IAAIA,eAAcA;4BAEdA,OAAOA;;;;;;;iBAGfA,KAAKA,WAAWA,IAAIA,gCAA2BA;oBAE3CA,IAAIA,2CAAmBA,GAAnBA,8BAAyBA;wBAEzBA;wBACAA,KAAKA,YAAYA,KAAKA,oBAAoBA;4BAEtCA,IAAIA,YAAYA,IAAIA;gCAEhBA,IAAIA,sBAAqBA;oCAErBA,OAAOA,qBAAaA;;gCAExBA;;;;;gBAKhBA,OAAOA;;;;;;;;;;;;;6BC5CeA;;4BAIJA,cAAgCA;;gBAElDA,oBAAoBA;gBACpBA,cAAcA;;gBAEdA,gDAAWA;;;;;;;gBAqBXA;gBACAA;gBACAA,aAAaA;gBACbA,IAAIA;oBAEAA,SAASA;oBACTA,IAAGA;wBAECA,WAAcA,oCAAMA,iCAANA,iCAAsBA;wBACpCA,0BAAmBA;wBACnBA,QAAQA,iDAAuBA;wBAC/BA,0BAAmBA,GAAGA;;;;;;;;;;;;;;;;;;;+BzBQhBA,KAAIA;+BACIA,KAAIA;;;;6BAEdA,GAAKA,QAAkBA;gBAEnCA,iBAAYA;gBACZA,iBAAYA,AAA0BA;gBACtCA,SAASA;;+BAGkBA;gBAE3BA,qBAAQA,GAAGA,qBAAQA;gBACnBA,sBAAiBA;gBACjBA,sBAAiBA;;;;;;;;;;8C0B8YgBA;oBAEjCA,SAASA;oBACTA,IAAIA,YAAWA;wBAEXA,KAAKA;;oBAETA,IAAIA,YAAWA;wBAEXA,KAAKA;;oBAETA,IAAIA,YAAWA;wBAEXA,KAAKA;;;oBAGTA,OAAOA;;8CAG0BA;oBAEjCA,SAASA;oBACTA,IAAIA,YAAWA;wBAEXA,KAAKA;;oBAETA,IAAIA,YAAWA;wBAEXA,KAAKA;;oBAETA,IAAIA,YAAWA;wBAEXA,KAAKA;;;oBAGTA,OAAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAzcMA;;;;;;;;;oBA1BPA,OAAOA;;;oBAGTA,aAAQA;;;;;;;;;;;;;oCA21B0BA;wCAh1BIA,KAAIA;wCACKA,AAAwEA,UAACA;wBAAOA,QAAQA;wBAA6BA,QAAQA;wBAA6BA,OAAOA;sBAAnIA,KAAIA;;8BAgB3DA,IAAIA;;4BAEdA,aAAwBA;;;;gBAGxCA;;;;;;;;;;;gBACAA,qBAAgBA,kBAASA;gBACzBA,KAAKA,WAAWA,IAAIA,oBAAoBA;oBAEpCA,sCAAcA,GAAdA,uBAAmBA,qCAAYA,GAAZA;;;gBAGvBA,mBAAcA;gBACdA,iBAAiBA;gBACjBA,iBAAYA,IAAIA;gBAChBA,eAAUA,kFAAuEA,IAAIA;gBACrFA,sBAAiBA,oFAAyEA,IAAIA;gBAC9FA,iBAAYA,gFAAqEA,IAAIA;gBACrFA;gBACAA,iBAAYA;;;;gBAIZA,gBAAgBA,0EAA+DA,IAAIA;;gBAEnFA,sBAAiBA,KAAIA;gBACrBA;;gBAEAA,kBAAaA;;gBAEbA,wCAAmCA,IAAIA,8CAAkBA,8LAA0DA,+BAACA;oBAEhHA,eAAeA,kCAAqBA;oBACpCA,kBAAkBA;oBAClBA,eAA+DA;oBAC/DA,IAAIA;wBACAA,WAAWA,kCAAqBA;;oBACpCA,cAAyDA,AAAgDA;oBACzGA,SAAgBA,uBAAkBA;;oBAElCA,IAAIA,YAAYA;wBAEZA,UAAUA;wBACVA,WAAWA;wBACXA,WAAWA,SAASA,QAAQA;wBAC5BA,WAAaA,AAAOA;;wBAEpBA,mBAAYA,YAAYA,OAAOA,IAAIA,2DAC/BA,kCAA6BA,gCAC7BA,kCAA6BA;;wBAIjCA,WAAUA;wBACVA,YAAWA;wBACXA,IAAIA,kBAAiBA;4BACjBA,UAASA;;4BAETA;;wBACJA,YAAWA,SAASA,SAAQA;wBAC5BA,YAAaA,AAAOA;wBACpBA,mBAAYA,YAAYA,QAAOA,IAAIA,2DAC/BA,kCAA6BA,gBAC7BA,kCAA6BA;;;;;;;;;;;;;;;;;;gBAkBzCA,wCAAmCA,IAAIA,8CAAkBA,+LAA+BA,+BAACA;;oBAGrFA,eAAeA,kCAAqBA;oBACpCA,cAAyDA,AAAgDA;oBACzGA,SAAgBA,uBAAkBA;oBAClCA,UAAUA;oBACVA,WAAWA;oBACXA,IAAIA,kBAAiBA;wBACjBA,SAASA;;wBAETA;;oBACJA,WAAWA,SAASA,QAAQA;oBAC5BA,WAAaA,AAAOA;oBACpBA,mBAAYA,YAAYA,OAAOA,IAAIA,2DAC/BA,kCAA6BA,eAC7BA,kCAA6BA;;;;gBAIrCA,iBAAYA,AAA+DA,UAACA;wBAAOA,QAAQA;wBAA8BA,QAAQA;wBAA6BA,QAAQA;wBAAiCA,QAAQA;wBAAoCA,QAAQA,iMAA8BA;wBAAwBA,QAAQA,8LAA2BA;wBAAqBA,QAAQA,gMAA6BA;wBAAuBA,QAAQA,gMAA6BA;wBAAuBA,QAAQA;wBAAkCA,QAAQA;wBAAsCA,QAAQA;wBAAuCA,QAAQA;wBAAmCA,OAAOA;sBAAhnBA,KAAIA;;gBAE9CA,wBAAmBA,AAA+DA,UAACA;wBAAOA,QAAQA;wBAAoCA,QAAQA;wBAAsCA,QAAQA;wBAA4CA,QAAQA;wBAAwCA,QAAQA;wBAAsCA,QAAQA,iMAA8BA;wBAAwBA,QAAQA,8LAA2BA;wBAAqBA,QAAQA,gMAA6BA;wBAAuBA,QAAQA,gMAA6BA;wBAAuBA,QAAQA;wBAAgDA,QAAQA;wBAA2CA,OAAOA;sBAArnBA,KAAIA;;;;;;;;;;gBAUrDA,OAAOA,4BAAuBA;oBAE1BA,wBAAmBA;;;qCAIGA;gBAE1BA,iBAAiEA,kCAAqBA;gBACtFA,YAAYA,aAAQA;gBACpBA,OAAOA,6BAAWA,gBAASA,CAACA;;yCAGKA;gBAEjCA,SAASA;gBACTA,mBAAmBA;gBACnBA,mBAAmBA,4DAAmBA;gBACtCA,uBAAuBA;gBACvBA,OAAOA;;4BAGMA;;gBAGbA,YAAiBA,AAAUA;gBAC3BA,IAAIA,UAASA,0DAAiBA;oBAE1BA;oBACAA,eAAUA;;;;;;;;;gBASdA,IAAIA,mBAAaA;oBAEbA,IAAIA,uCAAiCA;;wBAGjCA,sBAAiBA,6CAAwBA,8CAAyBA;;;oBAGtEA,IAAIA,mBAAaA;;wBAGbA;;;;gBAIRA,iBAAYA;gBACZA,IAAIA,uCAAiCA;oBAEjCA,IAAIA;wBAEAA,aAAaA,wBAAmBA,mBAAcA;wBAC9CA,IAAIA,gBAAeA;4BACfA,2BAAsBA;;;;;;;;;;;;gBAWlCA,IAAIA;oBAEAA,QAAQA;wBAEJA,KAAKA;4BACDA;4BACAA;wBACJA,KAAKA;4BACDA;4BACAA;wBACJA,KAAKA;4BAEDA;wBACJA,KAAKA;;4BAEDA;4BACAA;wBACJA;4BAEIA;;;gBAGZA;gBACAA,kBAAaA;;;;gBAMbA,OAAOA,2BAAsBA,CAACA;;;gBAK9BA,OAAOA,6BAAwBA;;mCAGXA,GAAUA,cAA0BA;;;gBAExDA,wBAAwBA;gBACxBA,eAAUA;gBACVA;gBACAA,kBAAoBA;gBACpBA,IAAIA;oBAAoBA;;gBACxBA,0BAAmBA,yBAAoBA,cAAcA,IAAIA,2DAAsCA;gBAC/FA,qBAAgBA;;;;;;gBAQhBA,eAAUA;gBACVA;;;yCAI0BA;gBAE1BA,IAAIA,CAACA;oBACDA,iBAAYA;;;;oCAIKA;gBAErBA;gBACAA,wBAAmBA;;gBAEnBA;;gBAEAA,IAAIA,mBAAaA;oBAEbA,sBAAiBA,6CAAwBA,8CAAyBA;;;gBAGtEA,gBAAgBA;gBAChBA;gBACAA;gBACAA;gBACAA,oBAAoBA;gBACpBA;gBACAA,gCAA4BA,kBAAaA,kBAAaA,mCAAeA,mCAAaA,8CAAyBA;gBAC3GA,KAAKA,WAAWA,IAAIA,kBAAIA,iBAAWA;oBAE/BA,KAAKA,WAAWA,IAAIA,kBAAIA,iBAAWA;wBAE/BA,IAAIA;4BAEAA,8BAEAA,qBAAcA,SACdA,qBAAcA,SAAGA;4BACjBA,8BAEIA,uBAAcA,UAAIA,qBAClBA,qBAAcA,SAAGA;;wBAEzBA,IAAIA,IAAIA,wBAAkBA,IAAIA;;4BAG1BA,wBAAmBA,QAAIA,yBAAcA,qBAAeA,MAAIA,wBAAaA,gBAAWA,gBAAWA;4BAC3FA,wBAAmBA,MAAIA,wBAAaA,MAAIA,wBAAaA,gBAAWA,gBAAWA;;;;;gBAKvFA,KAAKA,YAAWA,KAAIA,iCAA4BA;;oBAG5CA,iBAAqCA,kCAAqBA;;oBAE1DA,SAASA,aAAQA;;oBAEjBA,UAAUA;oBACVA,gBAA+BA,kCAA6BA,AAAoBA;oBAChFA,IAAIA,oBAAmBA;wBAEnBA,cAAcA;wBACdA,cAAcA;;;oBAGlBA,IAAIA,oEAAeA,8BAAsBA,uBAAaA;wBAElDA,mBAAYA,4BAAeA,oBAAoBA,IAAIA,2DAA+BA,4BAAeA,8BAAoBA;;;oBAGzHA,QAAQA;oBACRA,IAAIA,oBAAmBA;wBAAyDA,IAAIA;;oBACpFA,IAAIA,oBAAmBA;wBAA0DA,IAAIA;;oBACrFA,IAAIA;wBACAA,IAAIA;;oBACRA,SAASA;;oBAETA,IAAIA;wBAEAA,cAAyDA;wBACzDA,KAAKA,4DAAmBA;;;oBAG5BA,IAAIA;wBAEAA,KAAKA,YAAWA,KAAIA,uBAAeA;4BAE/BA,4BAAeA,sBAAmBA,8CAAyBA,OAAMA,GAAGA;;;;wBAMxEA,4BAAeA,gBAAeA,UAAUA,GAAGA;wBAC3CA,4BAAeA,wBAAuBA,6CAAqCA,MAAIA,oBAAcA,GAAGA;;;;;;;gBAOxGA,sBAAsBA,kBAAIA;;;;;;oBAMtBA;;oBAEAA,IAAIA,uCAAiCA;wBAEjCA,kBAAaA,WAAWA;wBACxBA,IAAIA;4BAEAA,YAAcA,gCAA2BA;4BACzCA,gCAA4BA,GAAGA,wBAAgBA,kBAAKA,AAACA,gBAAgBA,uDAAcA;;;wBAKvFA,gCAA4BA,eAAOA,+BAAuBA;;;;gBAIlEA,iBAAiBA,mBAAIA;gBACrBA;gBACAA;gBACAA,aAAaA,mBAAIA;;gBAEjBA,mBAAcA,YAAYA;gBAC1BA,IAAGA,CAACA;oBACAA,cAASA,yBAAeA;;;oBAExBA;;oBAEAA,8BAAuBA,GAAGA;oBAC1BA,IAAIA,gBAAWA,QAAQA,CAACA,CAACA;;;;;wBAMrBA,0CAAqCA,uBAAkBA;;wBAIvDA,IAAIA,CAACA;4BAEDA,eAAUA;4BACVA;;;;;;gBAMZA;gBACAA;;;gBAGAA;gBACAA,2BAAsBA;gBACtBA,IAAIA;oBAEAA;oBACAA,IAAIA;wBAEAA;;;;;;;;oDA+CiCA;gBAEzCA,QAAQA;gBACRA,QAAQA;gBACRA,gBAAgBA,IAAIA,iCAAmBA,IAAIA,iBAAYA,4CAAgBA,kBAAaA,kBAAIA,kBAAYA,IAAIA,iBAAYA,4CAAgBA;gBACpIA,OAAOA;;oCAGeA,GAAOA;;gBAG7BA,2BAAsBA,GAAGA;;;;gBAIzBA;gBACAA,OAAOA,oBAAeA,GAAGA,GAAGA,+CAAmBA;;gBAE/CA,OAAOA,oBAAeA,GAAGA,GAAGA,4CAAgBA;;;;gBAI5CA;gBACAA,KAAKA,WAAWA,IAAIA,sCAAiCA;oBAEjDA,SAASA;oBACTA,SAASA,iBAAQA;oBACjBA,YAAYA,uCAA0BA;;oBAEtCA,IAAIA,8BAAyBA,GAAGA;wBAE5BA;wBACAA;wBACAA,cAAcA,MAAMA;wBACpBA;wBACAA,gCAA2BA,IAAIA,kDAAWA,IAAIA,6BAAKA,gBAAQA,eAAeA;;wBAE1EA,kBAAkBA,gCAA2BA,SAASA,IAAIA,IAAIA;;;wBAG9DA,wBAAqBA;wBACrBA,IAAIA,eAAcA;4BAEdA,QAAoDA,AAAiDA;4BACrGA,kCAA6BA,yIAAOA;4BACpCA,IAAIA,iBAAeA;gCAEfA,gBAAcA;;;;wBAItBA,IAAIA,eAAcA;4BAEdA,WAAuBA,AAAiBA;4BACxCA,gBAAcA,0BAAiBA;;wBAEnCA,sBAAeA,eAAaA,4BAAYA,IAAIA;;;;;;;;;sCAU7BA,GAAOA,GAAOA,UAAoBA;;gBAGzDA,KAAKA,WAAWA,IAAIA,sCAAiCA;oBAEjDA,SAASA;oBACTA,SAASA,iBAAQA;oBACjBA,YAAYA,uCAA0BA;;oBAEtCA,IAAIA,8BAAyBA,GAAGA;wBAE5BA,cAAcA,gCAA2BA;wBACzCA,sBAAyBA;wBACzBA,wBAA2BA;wBAC3BA,IAAIA;4BAEAA;4BACAA,oBAAoBA,yBAAKA,yDAAmBA,2DAAqBA,2DAAqBA;;wBAE1FA,IAAIA,kBAAkBA,mBAAkBA;4BAEpCA;;wBAEJA;wBACAA;;;wBAGAA,gCAA2BA,IAAIA,kDAAWA,IAAIA,6BAAKA,gBAAQA,eAAeA;;wBAE1EA;wBACAA,IAAIA,mBAAmBA;4BACnBA,cAAcA,gCAA2BA,SAASA,IAAIA,IAAIA;;4BAG1DA,sBAAeA,iBAAiBA,IAAIA,IAAIA;4BACxCA,cAAcA;;;;wBAIlBA,wBAAqBA;wBACrBA,IAAIA,eAAcA;4BAEdA,IAAIA,qBAAqBA;gCAErBA,gBAAcA;;gCAIdA,QAAoDA,AAAiDA;gCACrGA,kCAA6BA,yIAAOA;gCACpCA,IAAIA,iBAAeA;oCAEfA,gBAAcA;;;;;;wBAM1BA,IAAIA,eAAcA;4BAEdA,WAAuBA,AAAiBA;4BACxCA,gBAAcA,0BAAiBA;;wBAEnCA,sBAAeA,eAAaA,4BAAYA,IAAIA;;;;;;;;;gBASpDA,OAAOA;;gCAGWA,YAAgBA;;gBAGlCA,2BAAsBA,wBAAgBA;gBACtCA,qCAA8BA;gBAC9BA,2BAAsBA,wBAAgBA;gBACtCA,wCAAiCA;gBACjCA,YAAYA;gBACZA,KAAKA,WAAWA,IAAIA,iCAA4BA;;;oBAI5CA,QAA4BA,kCAAqBA;oBACjDA,IAAIA,CAACA;wBAEDA;;oBAEJA,IAAIA,CAACA;wBAEDA;wBACAA,YAAYA;wBACZA,IAAIA,WAAUA;4BAEVA,QAAQA;;;wBAGZA,WAAWA;wBACXA,WAAWA,0BAAiBA;;;wBAG5BA,6BAAwBA,AAAKA,QAAQA,MAAMA,MAAMA;wBACjDA,cAAiBA;wBACjBA,QAAQA;4BAEJA,KAAKA;gCACDA;gCACAA;4BACJA,KAAKA;gCACDA;gCACAA;4BACJA,KAAKA;gCACDA;gCACAA;4BACJA,KAAKA;gCACDA;4BACJA;gCACIA;;wBAERA,aAAaA,4DAAmBA;;wBAEhCA,sBAAeA,SAASA,kBAAUA,MAAMA;;;;;;;;qCASzBA,YAAgBA,YAAgBA;;gBAEvDA,oBAAsBA;gBACtBA,2BAAsBA,wBAAcA;gBACpCA,yCAAkCA;;gBAElCA,gBAAgBA;gBAChBA,KAAKA,WAAWA,IAAIA,iCAA4BA;;oBAG5CA,QAA4BA,kCAAqBA;oBACjDA,IAAIA,CAACA;wBAEDA;;oBAEJA,IAAIA,CAACA;wBAEDA;wBACAA,YAAYA;wBACZA,IAAIA,WAAUA;4BAEVA,QAAQA;;;;wBAIZA,WAAWA,0BAAiBA;wBAC5BA,cAAcA;wBACdA,iBAAiBA;wBACjBA,iBAAiBA;wBACjBA,IAAIA;4BACAA,OAAOA;4BACPA,UAAUA,0BAAaA;4BACvBA,aAAaA;4BACbA,aAAaA;;wBAEjBA,oBAAeA,GAAGA,OAAOA,MAAMA;;wBAE/BA,2BAAsBA,YAAYA;;wBAElCA,KAAKA,YAAYA,KAAKA,8DAAeA;4BAEjCA,aAAaA;4BACbA,IAAIA,cAAaA,6CAAwCA,OAAMA,oFAAgCA,uCAAiCA;gCAE5HA,SAASA;;;4BAGbA,IAAIA,KAAKA;gCAELA,QAAWA,mBAAcA,GAAGA;gCAC5BA,gCAA2BA,IAAIA,kDAAWA,IAAIA,6BAC1CA,wBACAA,wBACAA,iBAGGA,2BAAQA,IAARA;gCACPA,6BAAsBA,GAAGA;gCACzBA,IAAIA;oCAEAA,KAAKA,QAAQA,UAAUA,OAAOA;wCAE1BA;;;;;;;gCASRA,iCAA2BA;;4BAE/BA,IAAIA;;;gCAMAA,6BAA2BA;;;;;;;;;sCAUnBA,GAAuDA,OAAWA,GAAOA;gBAEjGA,YAAeA,aAAQA;;gBAEvBA,oBAAeA,OAAOA,GAAGA,GAAGA;;;oBAGxBA,4BAAuBA,oCAA4BA,MAAIA,oBAAcA,GAAGA;;;qCAInDA,GAA2BA;;;gBAIpDA,UAAYA,2BAAQA,IAARA;gBACZA,IAAIA;oBACAA,OAAOA,mBAAUA,6BAAqBA;;oBAEtCA;;;+BAGcA;gBAElBA,OAAOA,sCAAcA,oBAAdA;;;kCAIWA,MAAYA;gBAE9BA,IAAIA;oBAEAA,QAAwBA,kBAAqBA;oBAC7CA,cAASA,GAAGA;;oBAIZA;;;;gCAKcA,MAA0BA;gBAE5CA,QAAQA,mBAAUA;gBAClBA,6BAAsBA,GAAGA;;;gBAKzBA,OAAOA;;;;;;;;;;;;;;;;;;;;;;oBCtvB8CA;;;oBAAhCA,+DAAiBA;;;;;oBAC6BA;;;oBAAvCA,sEAAwBA;;;;;;;;;;;;;mCAxEpCA;kCACDA;6BAkHoBA,IAAIA;;;;gBA7GvCA,2BAAsBA,IAAIA;;gBAE1BA;gBACAA;gBACAA;gBACAA,gBAAWA;;;;;;;;;gBASXA,WAAWA;gBACXA,iBAAkBA;;gBAElBA,UAAUA;;gBAEVA,UAAuBA,IAAIA,6CAAiBA;gBAC5CA,aAAaA;;;gBAGbA,QAAQA;gBACRA,IAAIA,gBAAgBA;oBAEhBA,gBAAWA;oBACXA;oBACAA;oBACAA;;;gBAGJA,IAAIA,KAAKA;oBAAoBA,IAAIA;;gBACjCA,eAAeA,oCAAYA,GAAZA;;gBAEfA,kBAA0BA,IAAIA,wCAAYA,MAAMA,IAAIA,qDAAuCA,cAAWA,iBAAYA;gBAClHA,kBAAaA;;;;;;;gBAObA,mBAAqBA;gBACrBA,IAAIA;oBAEAA,eAAeA,CAACA,MAAKA,mCAAWA,GAAXA,qBAAiBA;;;gBAG1CA,kCAA6BA;gBAC7BA;gBACAA,oBAAeA,IAAIA,yCAAaA,iBAAsBA,aAAaA;gBACnEA,IAAIA,4CAAaA,mBAAcA;gBAC/BA,gBAAWA;gBACXA,oBAAeA,IAAIA;gBACnBA,iCAA4BA;;gBAE5BA,mBAAiCA,IAAIA,kDAAkBA;gBACvDA,6BAA6BA,IAAIA,kDAAWA,IAAIA;gBAChDA,kBAAaA,IAAIA,8CAAeA,cAAcA;;gBAE9CA,+BAA0BA;;;4BASbA;gBAEbA;gBACAA,4DAAcA;gBACdA,+DAAiBA;gBACjBA,IAAIA,sCAAYA;oBAEZA,IAAIA;wBAEAA,IAAIA;4BAEAA;;wBAEJA;wBACAA,gBAAWA;;;gBAGnBA,IAAIA,sCAAYA;oBAEZA,IAAIA;wBAEAA;;;gBAGRA,IAAIA,sCAAYA;oBACZA,IAAIA;wBAEAA;;;;;;gBAQRA,OAAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBCjHPA,iBAAYA,IAAIA;gBAChBA;;;;;gBASAA;;4BAGaA;gBAEbA,IAAIA;oBAEAA;;gBAEJA,cAAiBA;gBACjBA,IAAIA;oBAA0BA,UAAUA;;gBACxCA,sCAAiCA,SAASA;;;gBAK1CA,OAAOA;;;;;;;;;;;;gCViKkBA,KAAIA;;;;;gBAG7BA,kBAAkBA;;6BAGNA,UAAmBA;gBAE/BA,SAASA;gBACTA,kBAAaA;;8BAGWA,QAAmBA,OAAWA,UAAgBA;gBAEtEA,cAAOA,QAAQA,sBAASA,QAAQA,UAAUA;;gCAGnBA,QAAmBA,UAAYA,UAAgBA;;;;;;;;;;6BArDtDA;gBAEhBA,SAAIA,IAAIA,mDAASA,MAAMA;;;;;;;;;;;;;;;;;;oCW9I4BA,IAAIA;;;;;gBAjBvDA,OAAOA;;4BAGMA,GAAOA;gBAEpBA,aAAqBA,IAAIA;gBACzBA,yBAAoBA;gBACpBA,YAAYA,GAAGA;gBACfA;;8BAGeA;;;;;;;;;;;;;;;oBPuBXA,OAAOA;;;;;;;;;;;;;;8BA7BIA;;gBAEfA,iBAAYA;;;;8BARWA;4BAWTA,GAAOA;gBAErBA,iBAAYA,IAAIA;gBAChBA,oBAAeA,GAAGA;;;;gBAMlBA,OAAOA;;kCAKYA,WAAuBA,IAAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBQhBlDA,iBAAYA,IAAIA;gBAChBA;;;;;gBAYAA;;4BAGaA;gBAEbA;gBACAA,SAAuDA,AAAoDA;gBAC3GA,YAAOA;gBACPA,mEAA4DA;gBAC5DA,0DAAmDA;gBACnDA,IAAIA;oBAEAA,QAAQA;wBAGJA,KAAKA;4BACDA;4BACAA;4BACAA;wBACJA,KAAKA;4BACDA;4BACAA;4BACAA;wBACJA,KAAKA;4BACDA;4BACAA;4BACAA;wBACJA,KAAKA;4BACDA;4BACAA;4BACAA;wBACJA;4BACIA;;oBAERA,qDAAgDA;oBAChDA,uDAAkDA;oBAClDA,iEAA4DA;oBAC5DA,mEAA8DA;;gBAElEA,IAAIA;oBAEAA,IAAIA,OAAMA;wBAENA;;;oBAGJA,IAAIA,OAAMA;wBAENA;;oBAEJA,wDAAmDA,6DAAgEA;oBACnHA,+FAA0FA,6DAAgEA;oBAC1JA,kEAA6DA;oBAC7DA,kGAA6FA;oBAC7FA,kEAA6DA;oBAC7DA,qDAAgDA;;;;gBAIpDA,IAAIA;oBAEAA;;;;;;;;;;;gBAaJA,YAAOA;gBACPA;;;gBAKAA,OAAOA;;;;;;;;;qCCzD2BA,WAAeA;oBAE7CA,OAAOA,IAAIA,gDAAUA,6CAAwBA,WAAWA,8CAAyBA,eAAeA;;gCAGvEA,GAAQA;oBAEjCA,OAAOA,IAAIA,gDAAUA,GAAGA,8CAAyBA,8CAAyBA,eAAeA;;;;;;;;;;;;;8BAhB5EA,MAAWA,WAAeA,WAAeA,iBAAuBA;;gBAE7EA,YAAYA;gBACZA,iBAAiBA;gBACjBA,iBAAiBA;gBACjBA,uBAAuBA;gBACvBA,qBAAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BCTHA,WAAeA;;gBAEjCA,iBAAiBA;gBACjBA,eAAeA;;;;;;;;;;;;;;;;;;;;;;8BdmJCA,eAAwBA,aAAsBA;;;;gBAE9DA,qBAAqBA;gBACrBA,mBAAmBA;gBACnBA,iBAAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BWrKGA;;;;;;;;;gCExBAA,QAAmBA,UAAoBA,UAAgBA;gBAE/EA,6GAAYA,QAAQA,UAAUA,UAAUA;gBACxCA,UAAYA;gBACZA;gBACAA;oBAEIA,IAAIA;wBAEAA,OAAOA;;wBAIPA,OAAOA;;oBAEXA,IAAIA;wBAEAA;;wBAIAA,QAAQA,CAACA;;;gBAGjBA,IAAIA,CAACA;oBAEDA,wBAAwBA,eAAeA,oBAAoBA;;;;;;;;;gCC/BvCA,QAAmBA,UAAyBA,UAAgBA;gBAEpFA,4HAAYA,QAAQA,UAAUA,UAAUA;gBACxCA,YAAcA,WAAWA;gBACzBA,iBAAmBA,oBAAmBA;gBACtCA;gBACAA;gBACAA,KAAKA,QAAQA,oBAAoBA,IAAIA,kBAAkBA;oBAEnDA,eAAeA,KAAIA;oBACnBA;oBACAA,SAASA;;;oBAGTA,OAAOA,YAAYA;wBAEfA;wBACAA,uBAAYA;;oBAEhBA,IAAIA,qBAAqBA,UAAUA,SAAOA;wBAEtCA;wBACAA,+BAAgBA;wBAChBA;;oBAEJA,IAAIA,IAAIA,CAACA,CAACA,aAAaA,SAASA;wBAE5BA,gBAAiBA,UAAUA,SAAOA;;;;;;;;;;;;gCdoJlBA,QAAmBA,UAAuBA,UAAgBA;gBAElFA,wHAAYA,QAAQA,UAAUA,UAAUA;gBACxCA,aAAmBA;gBACnBA,IAAIA;oBACAA,SAASA;;gBACbA,kBAAkBA,6CAA4BA,iCAAwBA,+BAAsBA,WAAWA",
  "sourcesContent": ["using Bridge;\r\nusing Bridge.Html5;\r\n//using ECS;\r\nusing Newtonsoft.Json;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\n//using Pidroh.ConsoleApp.Turnbased;\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace BridgeBuild\r\n{\r\n    public class App\r\n    {\r\n        private static int buffer;\r\n        private static bool bufferOn;\r\n        //private static HTMLPreElement text;\r\n        private static GameMain gr;\r\n        private static TextBoard TextBoard;\r\n        //private static StringBuilder sb;\r\n        private static string[] colors;\r\n        private static int bufferUnicode = -1;\r\n        private static TextBoard aux;\r\n        static DateTime last = DateTime.Now;\r\n\r\n        private static void SetupGame(out GameMain gr, out TextBoard TextBoard)\r\n        {\r\n\r\n            Random rnd = new Random();\r\n            RandomSupplier.Generate = () =>\r\n            {\r\n                return (float)rnd.NextDouble();\r\n            };\r\n            gr = new GameMain();\r\n            TextBoard = gr.GetBoard();\r\n            aux = new TextBoard(300,300);\r\n\r\n        }\r\n\r\n\r\n\r\n        public static void Main()\r\n        {\r\n            TestEntitySystem();\r\n            //Console.WriteLine(\"Game Start\");\r\n            SetupGame(out gr, out TextBoard);\r\n            colors = new string[20];\r\n            for (int i = 0; i < colors.Length; i++)\r\n            {\r\n                colors[i] = ColorStuff.colors[i];\r\n            }\r\n\r\n\r\n\r\n            var style = new HTMLStyleElement();\r\n            style.InnerHTML = \"html,body {font-family: Courier; background-color:#1f2526; height: 100%; color:#888;}\" + \"\\n #canvas-container {width: 100%; height: 100%; text-align:center; vertical-align: middle; } \";\r\n            Document.Head.AppendChild(style);\r\n            buffer = 9;\r\n            bufferOn = false;\r\n\r\n\r\n\r\n            Document.OnKeyPress += (KeyboardEvent a) =>\r\n            {\r\n\r\n                int code = a.KeyCode;\r\n                if (code == 0) code = a.CharCode;\r\n                int unicode = code;\r\n                bufferUnicode = unicode;\r\n                //Console.Write(unicode);\r\n                //buffer = a.CharCode;\r\n\r\n            };\r\n\r\n            UpdateGame();\r\n\r\n            // After building (Ctrl + Shift + B) this project, \r\n            // browse to the /bin/Debug or /bin/Release folder.\r\n\r\n            // A new bridge/ folder has been created and\r\n            // contains your projects JavaScript files. \r\n\r\n            // Open the bridge/index.html file in a browser by\r\n            // Right-Click > Open With..., then choose a\r\n            // web browser from the list\r\n\r\n            // This application will then run in a browser.\r\n        }\r\n\r\n        private static void TestEntitySystem()\r\n        {\r\n\r\n        }\r\n\r\n        private static void UpdateGame()\r\n        {\r\n            DateTime now = DateTime.Now;\r\n            var secs = (now - last).TotalSeconds;\r\n            if (secs > 0.08) {\r\n                Console.WriteLine(secs);\r\n                secs = 0.08;\r\n            }\r\n                \r\n            TextBoard = gr.GetBoard();\r\n            gr.Draw((float)secs);\r\n            last = now;\r\n            gr.InputUnicode = bufferUnicode;\r\n            bufferUnicode = -1;\r\n\r\n            var mouseX = Script.Call<int>(\"getMouseX\");\r\n            var mouseY = Script.Call<int>(\"getMouseY\");\r\n            gr.Mouse.pos = new Point2D(mouseX, mouseY);\r\n\r\n            //Script.Call(\"clear\");\r\n            for (int j = 0; j < TextBoard.Height; j++)\r\n            {\r\n                for (int i = 0; i < TextBoard.Width; i++)\r\n                {\r\n                    if (!aux.SameAs(TextBoard, x: i, y: j))\r\n                    {\r\n                        Script.Call(\"draw\", i, j, colors[TextBoard.TextColor[i, j]], colors[TextBoard.BackColor[i, j]], \"\" + TextBoard.CharAt(i, j));\r\n                        aux.Copy(TextBoard, x: i, y: j);\r\n                    }\r\n                    else\r\n                    {\r\n                        //Script.Call(\"draw\", i, j, colors[TextBoard.TextColor[i, j]], colors[TextBoard.BackColor[i, j]], \"x\");\r\n                    }\r\n                    \r\n\r\n                }\r\n            }\r\n\r\n            Window.SetTimeout((global::System.Action)UpdateGame, 15);\r\n        }\r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    public static class Extensions\r\n    {\r\n        private static Random rng = new Random();\r\n\r\n        public static void Shuffle<T>(this IList<T> list)\r\n        {\r\n            int n = list.Count;\r\n            while (n > 1)\r\n            {\r\n                n--;\r\n                int k = rng.Next(n + 1);\r\n                T value = list[k];\r\n                list[k] = list[n];\r\n                list[n] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\n","#region License\r\n/*\r\nMIT License\r\nCopyright © 2006 The Mono.Xna Team\r\n\r\nAll rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n#endregion License\r\nusing System;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public struct Point2D : IEquatable<Point2D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Point2D zeroPoint = new Point2D();\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public int X;\r\n        public int Y;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Properties\r\n\r\n        public static Point2D Zero\r\n        {\r\n            get { return zeroPoint; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Point2D(int x, int y)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public methods\r\n\r\n        public static bool operator ==(Point2D a, Point2D b)\r\n        {\r\n            return a.Equals(b);\r\n        }\r\n\r\n        public static bool operator !=(Point2D a, Point2D b)\r\n        {\r\n            return !a.Equals(b);\r\n        }\r\n\r\n        public bool Equals(Point2D other)\r\n        {\r\n            return ((X == other.X) && (Y == other.Y));\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return (obj is Point2D) ? Equals((Point2D)obj) : false;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return X ^ Y;\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return string.Format(\"{{X:{0} Y:{1}}}\", X, Y);\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    static public class RandomSupplier\r\n    {\r\n        public static Func<float> Generate{ get; set; }\r\n\r\n        public static int Range(int min, int max) {\r\n            return (int) (Generate() * (max-min)+min);\r\n        }\r\n\r\n        public static T RandomElement<T>(T[] array)\r\n        {\r\n            return array[Range(0, array.Length)];\r\n        }\r\n    }\r\n}\r\n","#region License\r\n/*\r\nMIT License\r\nCopyright © 2006 The Mono.Xna Team\r\n\r\nAll rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n#endregion License\r\n\r\nusing System;\r\nusing System.Globalization;\r\nusing System.ComponentModel;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    public struct Rect : IEquatable<Rect>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Rect emptyRectangle = new Rect();\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public int X;\r\n        public int Y;\r\n        public int Width;\r\n        public int Height;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Public Properties\r\n\r\n        public static Rect Empty\r\n        {\r\n            get { return emptyRectangle; }\r\n        }\r\n\r\n        public int Left\r\n        {\r\n            get { return this.X; }\r\n        }\r\n\r\n        public int Right\r\n        {\r\n            get { return (this.X + this.Width); }\r\n        }\r\n\r\n        public int Top\r\n        {\r\n            get { return this.Y; }\r\n        }\r\n\r\n        public int Bottom\r\n        {\r\n            get { return (this.Y + this.Height); }\r\n        }\r\n\r\n        #endregion Public Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Rect(int x, int y, int width, int height)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n            this.Width = width;\r\n            this.Height = height;\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        public static bool operator ==(Rect a, Rect b)\r\n        {\r\n            return ((a.X == b.X) && (a.Y == b.Y) && (a.Width == b.Width) && (a.Height == b.Height));\r\n        }\r\n\r\n        public bool Contains(int x, int y)\r\n        {\r\n            return ((((this.X <= x) && (x < (this.X + this.Width))) && (this.Y <= y)) && (y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Vector2D value)\r\n        {\r\n            return ((((this.X <= value.X) && (value.X < (this.X + this.Width))) && (this.Y <= value.Y)) && (value.Y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Point2D value)\r\n        {\r\n            return ((((this.X <= value.X) && (value.X < (this.X + this.Width))) && (this.Y <= value.Y)) && (value.Y < (this.Y + this.Height)));\r\n        }\r\n\r\n        public bool Contains(Rect value)\r\n        {\r\n            return ((((this.X <= value.X) && ((value.X + value.Width) <= (this.X + this.Width))) && (this.Y <= value.Y)) && ((value.Y + value.Height) <= (this.Y + this.Height)));\r\n        }\r\n\r\n        public static bool operator !=(Rect a, Rect b)\r\n        {\r\n            return !(a == b);\r\n        }\r\n\r\n        public void Offset(Point2D offset)\r\n        {\r\n            X += offset.X;\r\n            Y += offset.Y;\r\n        }\r\n\r\n        public void Offset(int offsetX, int offsetY)\r\n        {\r\n            X += offsetX;\r\n            Y += offsetY;\r\n        }\r\n\r\n        public Point2D Center\r\n        {\r\n            get\r\n            {\r\n                return new Point2D((this.X + this.Width) / 2, (this.Y + this.Height) / 2);\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        public void Inflate(int horizontalValue, int verticalValue)\r\n        {\r\n            X -= horizontalValue;\r\n            Y -= verticalValue;\r\n            Width += horizontalValue * 2;\r\n            Height += verticalValue * 2;\r\n        }\r\n\r\n        public bool IsEmpty\r\n        {\r\n            get\r\n            {\r\n                return ((((this.Width == 0) && (this.Height == 0)) && (this.X == 0)) && (this.Y == 0));\r\n            }\r\n        }\r\n\r\n        public bool Equals(Rect other)\r\n        {\r\n            return this == other;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            return (obj is Rect) ? this == ((Rect)obj) : false;\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            return string.Format(\"{{X:{0} Y:{1} Width:{2} Height:{3}}}\", X, Y, Width, Height);\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return (this.X ^ this.Y ^ this.Width ^ this.Height);\r\n        }\r\n\r\n        public bool Intersects(Rect r2)\r\n        {\r\n            return !(r2.Left > Right\r\n                     || r2.Right < Left\r\n                     || r2.Top > Bottom\r\n                     || r2.Bottom < Top\r\n                    );\r\n\r\n        }\r\n\r\n\r\n        public void Intersects(ref Rect value, out bool result)\r\n        {\r\n            result = !(value.Left > Right\r\n                     || value.Right < Left\r\n                     || value.Top > Bottom\r\n                     || value.Bottom < Top\r\n                    );\r\n\r\n        }\r\n\r\n        #endregion Public Methods\r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public class TimeStamp\r\n    {\r\n        public float CurrentSnap;\r\n\r\n        internal TimeStampSnap GetSnap()\r\n        {\r\n            return new TimeStampSnap(CurrentSnap);\r\n        }\r\n        \r\n        internal void Advance(float delta)\r\n        {\r\n            CurrentSnap += delta;\r\n        }\r\n    }\r\n\r\n    public struct TimeStampSnap\r\n    {\r\n        public readonly float TimeSnap;\r\n\r\n        public TimeStampSnap(float snap)\r\n        {\r\n            TimeSnap = snap;\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    public static class Unicode\r\n    {\r\n        public const int Space = 32;\r\n\r\n        public const char Uparrow2 = (char)24;\r\n        public const char Downarrow2 = (char)25;\r\n        public const char Rightarrow2 = (char)26;\r\n        public const char Leftarrow2 = (char)27;\r\n        public const char Uparrow = (char)30;\r\n        public const char Downarrow = (char)31;\r\n        public const char Leftarrow = (char)17;\r\n        public const char Rightarrow = (char)16;\r\n    }\r\n}\r\n","using System;\r\nusing System.Text;\r\n//using System.Drawing;\r\nusing System.Globalization;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n    [Serializable]\r\n    public struct Vector2D : IEquatable<Vector2D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Vector2D zeroVector = new Vector2D(0f, 0f);\r\n        private static Vector2D unitVector = new Vector2D(1f, 1f);\r\n        private static Vector2D unitXVector = new Vector2D(1f, 0f);\r\n        private static Vector2D unitYVector = new Vector2D(0f, 1f);\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        public float X;\r\n        public float Y;\r\n\r\n        #endregion Public Fields\r\n\r\n        # region Public Properties\r\n\r\n        public int XInt { get { return (int)X; } }\r\n        public int YInt { get { return (int)Y; } }\r\n\r\n        #endregion Public Properties\r\n\r\n        #region Constants\r\n        #endregion\r\n\r\n\r\n        #region Properties\r\n\r\n        public static Vector2D Zero\r\n        {\r\n            get { return zeroVector; }\r\n        }\r\n\r\n        public static Vector2D One\r\n        {\r\n            get { return unitVector; }\r\n        }\r\n\r\n        public static Vector2D UnitX\r\n        {\r\n            get { return unitXVector; }\r\n        }\r\n\r\n        public static Vector2D UnitY\r\n        {\r\n            get { return unitYVector; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Vector2D(float x, float y)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n        }\r\n\r\n        public Vector2D(float value)\r\n        {\r\n            this.X = value;\r\n            this.Y = value;\r\n        }\r\n\r\n        public static Vector2D InterpolateRounded(Vector2D startPosition, Vector2D endPosition, float ratio)\r\n        {\r\n            return (startPosition * (1 - ratio) + endPosition * ratio).Round();\r\n        }\r\n\r\n        private Vector2D Round()\r\n        {\r\n            return new Vector2D((float)Math.Round(X), (float)Math.Round(Y));\r\n        }\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        public static Vector2D Add(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Add(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X + value2.X;\r\n            result.Y = value1.Y + value2.Y;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        public static float Distance(Vector2D value1, Vector2D value2)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            return (float)Math.Sqrt((v1 * v1) + (v2 * v2));\r\n        }\r\n\r\n        public static void Distance(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            result = (float)Math.Sqrt((v1 * v1) + (v2 * v2));\r\n        }\r\n\r\n        public static float DistanceSquared(Vector2D value1, Vector2D value2)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            return (v1 * v1) + (v2 * v2);\r\n        }\r\n\r\n        public static void DistanceSquared(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            float v1 = value1.X - value2.X, v2 = value1.Y - value2.Y;\r\n            result = (v1 * v1) + (v2 * v2);\r\n        }\r\n\r\n        internal void Set(int x, int y)\r\n        {\r\n            X = x;\r\n            Y = y;\r\n\r\n        }\r\n\r\n        public static Vector2D Divide(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X / value2.X;\r\n            result.Y = value1.Y / value2.Y;\r\n        }\r\n\r\n        public static Vector2D Divide(Vector2D value1, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector2D value1, float divider, out Vector2D result)\r\n        {\r\n            float factor = 1 / divider;\r\n            result.X = value1.X * factor;\r\n            result.Y = value1.Y * factor;\r\n        }\r\n\r\n        public static float Dot(Vector2D value1, Vector2D value2)\r\n        {\r\n            return (value1.X * value2.X) + (value1.Y * value2.Y);\r\n        }\r\n\r\n        public static void Dot(ref Vector2D value1, ref Vector2D value2, out float result)\r\n        {\r\n            result = (value1.X * value2.X) + (value1.Y * value2.Y);\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj is Vector2D)\r\n            {\r\n                return Equals((Vector2D)this);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public bool Equals(Vector2D other)\r\n        {\r\n            return (X == other.X) && (Y == other.Y);\r\n        }\r\n\r\n        public static Vector2D Reflect(Vector2D vector, Vector2D normal)\r\n        {\r\n            Vector2D result;\r\n            float val = 2.0f * ((vector.X * normal.X) + (vector.Y * normal.Y));\r\n            result.X = vector.X - (normal.X * val);\r\n            result.Y = vector.Y - (normal.Y * val);\r\n            return result;\r\n        }\r\n\r\n        public static void Reflect(ref Vector2D vector, ref Vector2D normal, out Vector2D result)\r\n        {\r\n            float val = 2.0f * ((vector.X * normal.X) + (vector.Y * normal.Y));\r\n            result.X = vector.X - (normal.X * val);\r\n            result.Y = vector.Y - (normal.Y * val);\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return X.GetHashCode() + Y.GetHashCode();\r\n        }\r\n\r\n\r\n        public float Length()\r\n        {\r\n            return (float)Math.Sqrt((X * X) + (Y * Y));\r\n        }\r\n\r\n        public float LengthSquared()\r\n        {\r\n            return (X * X) + (Y * Y);\r\n        }\r\n        \r\n        public static Vector2D Max(Vector2D value1, Vector2D value2)\r\n        {\r\n            return new Vector2D(value1.X > value2.X ? value1.X : value2.X,\r\n                               value1.Y > value2.Y ? value1.Y : value2.Y);\r\n        }\r\n\r\n        public static void Max(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X > value2.X ? value1.X : value2.X;\r\n            result.Y = value1.Y > value2.Y ? value1.Y : value2.Y;\r\n        }\r\n\r\n        public static Vector2D Min(Vector2D value1, Vector2D value2)\r\n        {\r\n            return new Vector2D(value1.X < value2.X ? value1.X : value2.X,\r\n                               value1.Y < value2.Y ? value1.Y : value2.Y);\r\n        }\r\n\r\n        public static void Min(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X < value2.X ? value1.X : value2.X;\r\n            result.Y = value1.Y < value2.Y ? value1.Y : value2.Y;\r\n        }\r\n\r\n        public static Vector2D Multiply(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector2D Multiply(Vector2D value1, float scaleFactor)\r\n        {\r\n            value1.X *= scaleFactor;\r\n            value1.Y *= scaleFactor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Multiply(ref Vector2D value1, float scaleFactor, out Vector2D result)\r\n        {\r\n            result.X = value1.X * scaleFactor;\r\n            result.Y = value1.Y * scaleFactor;\r\n        }\r\n\r\n        public static void Multiply(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X * value2.X;\r\n            result.Y = value1.Y * value2.Y;\r\n        }\r\n\r\n        public static Vector2D Negate(Vector2D value)\r\n        {\r\n            value.X = -value.X;\r\n            value.Y = -value.Y;\r\n            return value;\r\n        }\r\n\r\n        public static void Negate(ref Vector2D value, out Vector2D result)\r\n        {\r\n            result.X = -value.X;\r\n            result.Y = -value.Y;\r\n        }\r\n\r\n        public void Normalize()\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((X * X) + (Y * Y));\r\n            X *= val;\r\n            Y *= val;\r\n        }\r\n\r\n        public static Vector2D Normalize(Vector2D value)\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((value.X * value.X) + (value.Y * value.Y));\r\n            value.X *= val;\r\n            value.Y *= val;\r\n            return value;\r\n        }\r\n\r\n        public static void Normalize(ref Vector2D value, out Vector2D result)\r\n        {\r\n            float val = 1.0f / (float)Math.Sqrt((value.X * value.X) + (value.Y * value.Y));\r\n            result.X = value.X * val;\r\n            result.Y = value.Y * val;\r\n        }\r\n\r\n\r\n\r\n        public static Vector2D Subtract(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n        public static void Subtract(ref Vector2D value1, ref Vector2D value2, out Vector2D result)\r\n        {\r\n            result.X = value1.X - value2.X;\r\n            result.Y = value1.Y - value2.Y;\r\n        }\r\n\r\n\r\n\r\n\r\n        public override string ToString()\r\n        {\r\n            CultureInfo currentCulture = CultureInfo.CurrentCulture;\r\n            return string.Format(currentCulture, \"{{X:{0} Y:{1}}}\", new object[] {\r\n                this.X.ToString(currentCulture), this.Y.ToString(currentCulture) });\r\n        }\r\n\r\n        #endregion Public Methods\r\n\r\n\r\n        #region Operators\r\n\r\n        public static Vector2D operator -(Vector2D value)\r\n        {\r\n            value.X = -value.X;\r\n            value.Y = -value.Y;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static bool operator ==(Vector2D value1, Vector2D value2)\r\n        {\r\n            return value1.X == value2.X && value1.Y == value2.Y;\r\n        }\r\n\r\n\r\n        public static bool operator !=(Vector2D value1, Vector2D value2)\r\n        {\r\n            return value1.X != value2.X || value1.Y != value2.Y;\r\n        }\r\n\r\n\r\n        public static Vector2D operator +(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator -(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(Vector2D value, float scaleFactor)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static Vector2D operator *(float scaleFactor, Vector2D value)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n\r\n        public static Vector2D operator /(Vector2D value1, Vector2D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            return value1;\r\n        }\r\n\r\n\r\n        public static Vector2D operator /(Vector2D value1, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            return value1;\r\n        }\r\n\r\n        #endregion Operators\r\n    }\r\n}","// MIT License - Copyright (C) The Mono.Xna Team\r\n// This file is subject to the terms and conditions defined in\r\n// file 'LICENSE.txt', which is part of this source code package.\r\n\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\nusing System.Runtime.Serialization;\r\n\r\nnamespace Pidroh.BaseUtils\r\n{\r\n\r\n    \r\n    public struct Vector3D : IEquatable<Vector3D>\r\n    {\r\n        #region Private Fields\r\n\r\n        private static Vector3D zero = new Vector3D(0f, 0f, 0f);\r\n        private static Vector3D one = new Vector3D(1f, 1f, 1f);\r\n        private static Vector3D unitX = new Vector3D(1f, 0f, 0f);\r\n        private static Vector3D unitY = new Vector3D(0f, 1f, 0f);\r\n        private static Vector3D unitZ = new Vector3D(0f, 0f, 1f);\r\n        private static Vector3D up = new Vector3D(0f, 1f, 0f);\r\n        private static Vector3D down = new Vector3D(0f, -1f, 0f);\r\n        private static Vector3D right = new Vector3D(1f, 0f, 0f);\r\n        private static Vector3D left = new Vector3D(-1f, 0f, 0f);\r\n        private static Vector3D forward = new Vector3D(0f, 0f, -1f);\r\n        private static Vector3D backward = new Vector3D(0f, 0f, 1f);\r\n\r\n        #endregion Private Fields\r\n\r\n\r\n        #region Public Fields\r\n\r\n        \r\n        public float X;\r\n\r\n        \r\n        public float Y;\r\n\r\n        \r\n        public float Z;\r\n\r\n        #endregion Public Fields\r\n\r\n\r\n        #region Properties\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 0, 0.\r\n        /// </summary>\r\n        public static Vector3D Zero\r\n        {\r\n            get { return zero; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 1, 1, 1.\r\n        /// </summary>\r\n        public static Vector3D One\r\n        {\r\n            get { return one; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 1, 0, 0.\r\n        /// </summary>\r\n        public static Vector3D UnitX\r\n        {\r\n            get { return unitX; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 1, 0.\r\n        /// </summary>\r\n        public static Vector3D UnitY\r\n        {\r\n            get { return unitY; }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> with components 0, 0, 1.\r\n        /// </summary>\r\n        public static Vector3D UnitZ\r\n        {\r\n            get { return unitZ; }\r\n        }\r\n\r\n        public static Vector3D Up\r\n        {\r\n            get { return up; }\r\n        }\r\n\r\n        public static Vector3D Down\r\n        {\r\n            get { return down; }\r\n        }\r\n\r\n        public static Vector3D Right\r\n        {\r\n            get { return right; }\r\n        }\r\n\r\n        public static Vector3D Left\r\n        {\r\n            get { return left; }\r\n        }\r\n\r\n        public static Vector3D Forward\r\n        {\r\n            get { return forward; }\r\n        }\r\n\r\n        public static Vector3D Backward\r\n        {\r\n            get { return backward; }\r\n        }\r\n\r\n        #endregion Properties\r\n\r\n\r\n        #region Constructors\r\n\r\n        public Vector3D(float x, float y, float z)\r\n        {\r\n            this.X = x;\r\n            this.Y = y;\r\n            this.Z = z;\r\n        }\r\n\r\n\r\n        public Vector3D(float value)\r\n        {\r\n            this.X = value;\r\n            this.Y = value;\r\n            this.Z = value;\r\n        }\r\n\r\n\r\n        public Vector3D(Vector2D value, float z)\r\n        {\r\n            this.X = value.X;\r\n            this.Y = value.Y;\r\n            this.Z = z;\r\n        }\r\n\r\n\r\n        #endregion Constructors\r\n\r\n\r\n        #region Public Methods\r\n\r\n        /// <summary>\r\n        /// Performs vector addition on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The first vector to add.</param>\r\n        /// <param name=\"value2\">The second vector to add.</param>\r\n        /// <returns>The result of the vector addition.</returns>\r\n        public static Vector3D Add(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            value1.Z += value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector addition on <paramref name=\"value1\"/> and\r\n        /// <paramref name=\"value2\"/>, storing the result of the\r\n        /// addition in <paramref name=\"result\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The first vector to add.</param>\r\n        /// <param name=\"value2\">The second vector to add.</param>\r\n        /// <param name=\"result\">The result of the vector addition.</param>\r\n        public static void Add(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X + value2.X;\r\n            result.Y = value1.Y + value2.Y;\r\n            result.Z = value1.Z + value2.Z;\r\n        }\r\n\r\n\r\n        public static Vector3D Cross(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            Cross(ref vector1, ref vector2, out vector1);\r\n            return vector1;\r\n        }\r\n\r\n        public static void Cross(ref Vector3D vector1, ref Vector3D vector2, out Vector3D result)\r\n        {\r\n            var x = vector1.Y * vector2.Z - vector2.Y * vector1.Z;\r\n            var y = -(vector1.X * vector2.Z - vector2.X * vector1.Z);\r\n            var z = vector1.X * vector2.Y - vector2.X * vector1.Y;\r\n            result.X = x;\r\n            result.Y = y;\r\n            result.Z = z;\r\n        }\r\n\r\n        public static float Distance(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            float result;\r\n            DistanceSquared(ref vector1, ref vector2, out result);\r\n            return (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public static void Distance(ref Vector3D value1, ref Vector3D value2, out float result)\r\n        {\r\n            DistanceSquared(ref value1, ref value2, out result);\r\n            result = (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public static float DistanceSquared(Vector3D value1, Vector3D value2)\r\n        {\r\n            float result;\r\n            DistanceSquared(ref value1, ref value2, out result);\r\n            return result;\r\n        }\r\n\r\n        public static void DistanceSquared(ref Vector3D value1, ref Vector3D value2, out float result)\r\n        {\r\n            result = (value1.X - value2.X) * (value1.X - value2.X) +\r\n                     (value1.Y - value2.Y) * (value1.Y - value2.Y) +\r\n                     (value1.Z - value2.Z) * (value1.Z - value2.Z);\r\n        }\r\n\r\n        public static Vector3D Divide(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            value1.Z /= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D Divide(Vector3D value1, float value2)\r\n        {\r\n            float factor = 1 / value2;\r\n            value1.X *= factor;\r\n            value1.Y *= factor;\r\n            value1.Z *= factor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Divide(ref Vector3D value1, float divisor, out Vector3D result)\r\n        {\r\n            float factor = 1 / divisor;\r\n            result.X = value1.X * factor;\r\n            result.Y = value1.Y * factor;\r\n            result.Z = value1.Z * factor;\r\n        }\r\n\r\n        public static void Divide(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X / value2.X;\r\n            result.Y = value1.Y / value2.Y;\r\n            result.Z = value1.Z / value2.Z;\r\n        }\r\n\r\n        public static float Dot(Vector3D vector1, Vector3D vector2)\r\n        {\r\n            return vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z;\r\n        }\r\n\r\n        public static void Dot(ref Vector3D vector1, ref Vector3D vector2, out float result)\r\n        {\r\n            result = vector1.X * vector2.X + vector1.Y * vector2.Y + vector1.Z * vector2.Z;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (!(obj is Vector3D))\r\n                return false;\r\n\r\n            var other = (Vector3D)obj;\r\n            return X == other.X &&\r\n                    Y == other.Y &&\r\n                    Z == other.Z;\r\n        }\r\n\r\n        public bool Equals(Vector3D other)\r\n        {\r\n            return X == other.X &&\r\n                    Y == other.Y &&\r\n                    Z == other.Z;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return (int)(this.X + this.Y + this.Z);\r\n        }\r\n\r\n\r\n        public float Length()\r\n        {\r\n            float result;\r\n            DistanceSquared(ref this, ref zero, out result);\r\n            return (float)Math.Sqrt(result);\r\n        }\r\n\r\n        public float LengthSquared()\r\n        {\r\n            float result;\r\n            DistanceSquared(ref this, ref zero, out result);\r\n            return result;\r\n        }\r\n\r\n\r\n\r\n\r\n        public static Vector3D Multiply(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            value1.Z *= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D Multiply(Vector3D value1, float scaleFactor)\r\n        {\r\n            value1.X *= scaleFactor;\r\n            value1.Y *= scaleFactor;\r\n            value1.Z *= scaleFactor;\r\n            return value1;\r\n        }\r\n\r\n        public static void Multiply(ref Vector3D value1, float scaleFactor, out Vector3D result)\r\n        {\r\n            result.X = value1.X * scaleFactor;\r\n            result.Y = value1.Y * scaleFactor;\r\n            result.Z = value1.Z * scaleFactor;\r\n        }\r\n\r\n        public static void Multiply(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X * value2.X;\r\n            result.Y = value1.Y * value2.Y;\r\n            result.Z = value1.Z * value2.Z;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Returns a <see>Vector3</see> pointing in the opposite\r\n        /// direction of <paramref name=\"value\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value\">The vector to negate.</param>\r\n        /// <returns>The vector negation of <paramref name=\"value\"/>.</returns>\r\n        public static Vector3D Negate(Vector3D value)\r\n        {\r\n            value = new Vector3D(-value.X, -value.Y, -value.Z);\r\n            return value;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Stores a <see>Vector3</see> pointing in the opposite\r\n        /// direction of <paramref name=\"value\"/> in <paramref name=\"result\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value\">The vector to negate.</param>\r\n        /// <param name=\"result\">The vector that the negation of <paramref name=\"value\"/> will be stored in.</param>\r\n        public static void Negate(ref Vector3D value, out Vector3D result)\r\n        {\r\n            result.X = -value.X;\r\n            result.Y = -value.Y;\r\n            result.Z = -value.Z;\r\n        }\r\n\r\n        public void Normalize()\r\n        {\r\n            Normalize(ref this, out this);\r\n        }\r\n\r\n        public static Vector3D Normalize(Vector3D vector)\r\n        {\r\n            Normalize(ref vector, out vector);\r\n            return vector;\r\n        }\r\n\r\n        public static void Normalize(ref Vector3D value, out Vector3D result)\r\n        {\r\n            float factor;\r\n            Distance(ref value, ref zero, out factor);\r\n            factor = 1f / factor;\r\n            result.X = value.X * factor;\r\n            result.Y = value.Y * factor;\r\n            result.Z = value.Z * factor;\r\n        }\r\n\r\n        public static Vector3D Reflect(Vector3D vector, Vector3D normal)\r\n        {\r\n            // I is the original array\r\n            // N is the normal of the incident plane\r\n            // R = I - (2 * N * ( DotProduct[ I,N] ))\r\n            Vector3D reflectedVector;\r\n            // inline the dotProduct here instead of calling method\r\n            float dotProduct = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);\r\n            reflectedVector.X = vector.X - (2.0f * normal.X) * dotProduct;\r\n            reflectedVector.Y = vector.Y - (2.0f * normal.Y) * dotProduct;\r\n            reflectedVector.Z = vector.Z - (2.0f * normal.Z) * dotProduct;\r\n\r\n            return reflectedVector;\r\n        }\r\n\r\n        public static void Reflect(ref Vector3D vector, ref Vector3D normal, out Vector3D result)\r\n        {\r\n            // I is the original array\r\n            // N is the normal of the incident plane\r\n            // R = I - (2 * N * ( DotProduct[ I,N] ))\r\n\r\n            // inline the dotProduct here instead of calling method\r\n            float dotProduct = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);\r\n            result.X = vector.X - (2.0f * normal.X) * dotProduct;\r\n            result.Y = vector.Y - (2.0f * normal.Y) * dotProduct;\r\n            result.Z = vector.Z - (2.0f * normal.Z) * dotProduct;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector subtraction on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The vector to be subtracted from.</param>\r\n        /// <param name=\"value2\">The vector to be subtracted from <paramref name=\"value1\"/>.</param>\r\n        /// <returns>The result of the vector subtraction.</returns>\r\n        public static Vector3D Subtract(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            value1.Z -= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Performs vector subtraction on <paramref name=\"value1\"/> and <paramref name=\"value2\"/>.\r\n        /// </summary>\r\n        /// <param name=\"value1\">The vector to be subtracted from.</param>\r\n        /// <param name=\"value2\">The vector to be subtracted from <paramref name=\"value1\"/>.</param>\r\n        /// <param name=\"result\">The result of the vector subtraction.</param>\r\n        public static void Subtract(ref Vector3D value1, ref Vector3D value2, out Vector3D result)\r\n        {\r\n            result.X = value1.X - value2.X;\r\n            result.Y = value1.Y - value2.Y;\r\n            result.Z = value1.Z - value2.Z;\r\n        }\r\n\r\n        internal string DebugDisplayString\r\n        {\r\n            get\r\n            {\r\n                return string.Concat(\r\n                    this.X.ToString(), \"  \",\r\n                    this.Y.ToString(), \"  \",\r\n                    this.Z.ToString()\r\n                );\r\n            }\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            StringBuilder sb = new StringBuilder(32);\r\n            sb.Append(\"{X:\");\r\n            sb.Append(this.X);\r\n            sb.Append(\" Y:\");\r\n            sb.Append(this.Y);\r\n            sb.Append(\" Z:\");\r\n            sb.Append(this.Z);\r\n            sb.Append(\"}\");\r\n            return sb.ToString();\r\n        }\r\n\r\n\r\n\r\n        ///// <summary>\r\n        ///// Transforms a vector by a quaternion rotation.\r\n        ///// </summary>\r\n        ///// <param name=\"vec\">The vector to transform.</param>\r\n        ///// <param name=\"quat\">The quaternion to rotate the vector by.</param>\r\n        ///// <param name=\"result\">The result of the operation.</param>\r\n        //        public static void Transform(ref Vector3 vec, ref Quaternion quat, out Vector3 result)\r\n        //        {\r\n        //\t\t// Taken from the OpentTK implementation of Vector3\r\n        //            // Since vec.W == 0, we can optimize quat * vec * quat^-1 as follows:\r\n        //            // vec + 2.0 * cross(quat.xyz, cross(quat.xyz, vec) + quat.w * vec)\r\n        //            Vector3 xyz = quat.Xyz, temp, temp2;\r\n        //            Vector3.Cross(ref xyz, ref vec, out temp);\r\n        //            Vector3.Multiply(ref vec, quat.W, out temp2);\r\n        //            Vector3.Add(ref temp, ref temp2, out temp);\r\n        //            Vector3.Cross(ref xyz, ref temp, out temp);\r\n        //            Vector3.Multiply(ref temp, 2, out temp);\r\n        //            Vector3.Add(ref vec, ref temp, out result);\r\n        //        }\r\n\r\n\r\n\r\n\r\n        #endregion Public methods\r\n\r\n\r\n        #region Operators\r\n\r\n        public static bool operator ==(Vector3D value1, Vector3D value2)\r\n        {\r\n            return value1.X == value2.X\r\n                && value1.Y == value2.Y\r\n                && value1.Z == value2.Z;\r\n        }\r\n\r\n        public static bool operator !=(Vector3D value1, Vector3D value2)\r\n        {\r\n            return !(value1 == value2);\r\n        }\r\n\r\n        public static Vector3D operator +(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X += value2.X;\r\n            value1.Y += value2.Y;\r\n            value1.Z += value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator -(Vector3D value)\r\n        {\r\n            value = new Vector3D(-value.X, -value.Y, -value.Z);\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator -(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X -= value2.X;\r\n            value1.Y -= value2.Y;\r\n            value1.Z -= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator *(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X *= value2.X;\r\n            value1.Y *= value2.Y;\r\n            value1.Z *= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator *(Vector3D value, float scaleFactor)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            value.Z *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator *(float scaleFactor, Vector3D value)\r\n        {\r\n            value.X *= scaleFactor;\r\n            value.Y *= scaleFactor;\r\n            value.Z *= scaleFactor;\r\n            return value;\r\n        }\r\n\r\n        public static Vector3D operator /(Vector3D value1, Vector3D value2)\r\n        {\r\n            value1.X /= value2.X;\r\n            value1.Y /= value2.Y;\r\n            value1.Z /= value2.Z;\r\n            return value1;\r\n        }\r\n\r\n        public static Vector3D operator /(Vector3D value, float divider)\r\n        {\r\n            float factor = 1 / divider;\r\n            value.X *= factor;\r\n            value.Y *= factor;\r\n            value.Z *= factor;\r\n            return value;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n    public class MoveData\r\n    {\r\n        string label;\r\n        internal List<Tick> units = new List<Tick>();\r\n        internal List<int> tags = new List<int>();\r\n\r\n        public MoveData(string label)\r\n        {\r\n            this.label = label;\r\n        }\r\n\r\n        public static int FindByLabel(List<MoveData> moveDatas, string label)\r\n        {\r\n            for (int i = 0; i < moveDatas.Count; i++)\r\n            {\r\n                if(moveDatas[i]!=null)\r\n                    if (moveDatas[i].label == label) return i;\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public class Tick \r\n    {\r\n        internal Condition condition;\r\n        internal List<object> thingsToHappen = new List<object>();\r\n\r\n        public Tick(object action)\r\n        {\r\n            thingsToHappen.Add(action);\r\n        }\r\n\r\n        public Tick()\r\n        {\r\n        }\r\n    }\r\n    public class Condition\r\n    {\r\n        internal readonly ConditionType type;\r\n        internal readonly Target target;\r\n        internal readonly BaseUtils.Vector2D vector;\r\n\r\n        public Condition(ConditionType type, Target target, BaseUtils.Vector2D vector)\r\n        {\r\n            this.type = type;\r\n            this.target = target;\r\n            this.vector = vector;\r\n        }\r\n    }\r\n\r\n    public enum ConditionType\r\n    {\r\n        CanMove\r\n    }\r\n\r\n    public class SummonEntity\r\n    {\r\n        public readonly int enemyWhich;\r\n        public readonly Vector2D preferentialRowColumn;\r\n\r\n        public SummonEntity(int enemyWhich, Vector2D preferentialRowColumn)\r\n        {\r\n            this.enemyWhich = enemyWhich;\r\n            this.preferentialRowColumn = preferentialRowColumn;\r\n        }\r\n\r\n        internal static SummonEntity Enemy(int v, Vector2D vector2D)\r\n        {\r\n            return new SummonEntity(v, vector2D);\r\n        }\r\n    }\r\n\r\n\r\n    public class Animation\r\n    {\r\n        public readonly Area area = null;\r\n        public readonly Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None;\r\n        public readonly Target target = Target.None;\r\n        \r\n\r\n        public Animation(Target target)\r\n        {\r\n            this.target = target;\r\n        }\r\n\r\n        //public Animation(Area area)\r\n        //{\r\n        //    this.area = area;\r\n        //}\r\n\r\n        public Animation(Target target, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.element = element;\r\n            this.target = target;\r\n        }\r\n\r\n        public Animation(Area area, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None, Target target = Target.None)\r\n        {\r\n            this.area = area;\r\n            this.element = element;\r\n            this.target = target;\r\n        }\r\n    }\r\n\r\n    public class MoveAction\r\n    {\r\n        public readonly Target target;\r\n        public readonly BaseUtils.Vector2D distance;\r\n\r\n        public MoveAction(Target target, BaseUtils.Vector2D amount)\r\n        {\r\n            this.target = target;\r\n            this.distance = amount;\r\n        }\r\n    }\r\n\r\n    public class DealDamageAction\r\n    {\r\n        public readonly Target target = Target.None;\r\n        public readonly Area area;\r\n        public readonly int damage;\r\n        public readonly Pidroh.ConsoleApp.Turnbased.BattleMain.Element element;\r\n\r\n        public DealDamageAction(Area area, int damage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.area = area;\r\n            this.damage = damage;\r\n            this.element = element;\r\n            target = Target.Area;\r\n        }\r\n\r\n        public DealDamageAction(Target target, int damage, Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            this.target = target;\r\n            this.damage = damage;\r\n            this.element = element;\r\n        }\r\n    }\r\n\r\n    public class Area\r\n    {\r\n        //public readonly Area area;\r\n        public readonly Target target;\r\n        public readonly List<Vector2D> points = new List<Vector2D>();\r\n\r\n        public Area(Target target)\r\n        {\r\n            this.target = target;\r\n        }\r\n    }\r\n\r\n    public enum Target\r\n    {\r\n        None,  Self, ClosestTarget, ClosestTargetX, Area   \r\n    }\r\n\r\n    \r\n\r\n}\r\n","using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class AsyncTasks\r\n    {\r\n\r\n    }\r\n\r\n    public class AsyncTrack\r\n    {\r\n\r\n    }\r\n\r\n    public abstract class DelayedActions\r\n    {\r\n        List<float> times = new List<float>();\r\n        List<IList> lists = new List<IList>();\r\n\r\n        public void Update(float delta)\r\n        {\r\n            for (int i = 0; i < times.Count; i++)\r\n            {\r\n                times[i] -= delta;\r\n                if (times[i] <= 0)\r\n                {\r\n                    Execute(i);\r\n                    EndTask(i);\r\n                }\r\n            }\r\n        }\r\n\r\n        internal abstract void Execute(int i);\r\n\r\n        internal void Add(float time)\r\n        {\r\n            times.Add(time);\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            return times.Count == 0;\r\n        }\r\n\r\n        internal void EndTask(int i)\r\n        {\r\n            times.RemoveAt(i);\r\n            foreach (var l in lists)\r\n            {\r\n                l.RemoveAt(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class AsyncTaskSetter<T> : DelayedActions\r\n    {\r\n        List<T> ToValue = new List<T>();\r\n        List<Action<T>> setters = new List<Action<T>>();\r\n\r\n        public void Add(T e, Action<T> setter, float time)\r\n        {\r\n            ToValue.Add(e);\r\n            setters.Add((global::System.Action<T>)setter);\r\n            base.Add(time);\r\n        }\r\n\r\n        internal override void Execute(int i)\r\n        {\r\n            setters[i](ToValue[i]);\r\n            ToValue.RemoveAt(i);\r\n            setters.RemoveAt(i);\r\n            \r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased.Happs;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n\r\n    public class BattleMain\r\n    {\r\n        public List<BattleEntity> entities = new List<BattleEntity>();\r\n        public BattleState battleState = new BattleState();\r\n        public HappManager happManager = new HappManager();\r\n        Dictionary<MoveType, Vector2D> movementMoves = new Dictionary<MoveType, Vector2D>();\r\n        //Dictionary<MoveType, Point> attackMoves = new Dictionary<MoveType, Point>();\r\n        MoveType[] enemyMoves;\r\n        //public List<Input> inputs = new List<Turnbased.Input>();\r\n        public InputHolder inputs = new InputHolder();\r\n        public List<MoveType> playerHandFixed = new List<MoveType>();\r\n        public List<MoveType> playerHandUnfixed = new List<MoveType>();\r\n        public List<MoveType> playerHandPool = new List<MoveType>();\r\n\r\n        public float timeToChooseMax = 15f;\r\n        public float timeToChoose = -1;\r\n\r\n        public BattleResult battleResult = new BattleResult();\r\n\r\n        internal void BattleConfigure(BattleConfig battleConfig)\r\n        {\r\n            if (battleConfig == null)\r\n            {\r\n                battleConfig = new BattleConfig(needKillAllEnemies:true);\r\n            }\r\n            this.BattleConfig = battleConfig;\r\n            \r\n        }\r\n\r\n        int nEnemies;\r\n        public MoveDataExecuter MoveDataExecuter;\r\n        private readonly TimeStamp timeStamp;\r\n        private QuickAccessorTwo<BattleEntity, PickupInfo> pickupAccessor;\r\n        internal ECSIntegration ecsInteg;\r\n\r\n        public Action EnemyGenerateMoves;\r\n\r\n        public BattleConfig BattleConfig { get; private set; }\r\n        public int BoardWidth { get; internal set; }\r\n        public int BoardHeight { get; internal set; }\r\n\r\n        public BattleMain(int mode, ECSManager ecs, TimeStamp timeStamp)\r\n        {\r\n            //this.ecs = ecs;\r\n            this.timeStamp = timeStamp;\r\n            pickupAccessor = ecs.QuickAccessor2<BattleEntity, PickupInfo>();\r\n            movementMoves.Add(MoveType.MoveUp, Vector2D.UnitY);\r\n            movementMoves.Add(MoveType.MoveDown, -Vector2D.UnitY);\r\n            movementMoves.Add(MoveType.MoveLeft, -Vector2D.UnitX);\r\n            movementMoves.Add(MoveType.MoveRight, Vector2D.UnitX);\r\n\r\n            playerHandFixed.Clear();\r\n            playerHandFixed.Add(MoveType.MoveRight);\r\n            playerHandFixed.Add(MoveType.MoveLeft);\r\n            playerHandFixed.Add(MoveType.MoveDown);\r\n            playerHandFixed.Add(MoveType.MoveUp);\r\n\r\n            if (mode == 0)\r\n            {\r\n                playerHandUnfixed.Add(MoveType.NormalShot);\r\n                enemyMoves = new MoveType[] {\r\n                    MoveType.MoveUp,\r\n                    MoveType.MoveLeft,\r\n                    MoveType.MoveDown,\r\n                    MoveType.MoveRight,\r\n                    MoveType.NormalShot,\r\n                };\r\n            }\r\n            else\r\n            {\r\n                playerHandUnfixed.Add(MoveType.Fire);\r\n                playerHandUnfixed.Add(MoveType.Ice);\r\n                playerHandUnfixed.Add(MoveType.Thunder);\r\n\r\n\r\n                enemyMoves = new MoveType[] {\r\n                    MoveType.MoveDown,\r\n                    MoveType.MoveLeft,\r\n                    MoveType.MoveUp,\r\n                    MoveType.MoveRight,\r\n                    MoveType.Fire,\r\n                    MoveType.Ice,\r\n                    MoveType.Thunder,\r\n                };\r\n            }\r\n\r\n            //playerHand.Add(MoveType.NormalShot);\r\n\r\n        }\r\n\r\n        internal bool IsVictory()\r\n        {\r\n            return battleResult.result == 1;\r\n        }\r\n\r\n        public void BasicConfig(BattleBasicConfig basicConfig)\r\n        {\r\n            battleState.turnsPerPhase.Val = basicConfig.nTurns;\r\n            nEnemies = basicConfig.nEnemies;\r\n        }\r\n\r\n        public void Init()\r\n        {\r\n\r\n            BattleEntity hero = new BattleEntity();\r\n\r\n            hero.pos.Set(1, 1);\r\n            hero.minPos.Set(0, 0);\r\n            hero.maxPos.Set(2, 2);\r\n            hero.Type = EntityType.hero;\r\n            hero.life = 2;\r\n            for (int i = 0; i < hero.moves.Length; i++)\r\n            {\r\n                hero.moves[i] = -1;\r\n            }\r\n\r\n\r\n            entities.Add(hero);\r\n            ecsInteg.HeroCreated(hero);\r\n            ecsInteg.SpawnEnemies();\r\n\r\n            {\r\n                //GameEntity pickup = new GameEntity();\r\n                //pickup.Type = EntityType.pickup;\r\n                //pickup.pos.Set(0, 2);\r\n                //pickup.life = 2;\r\n                //pickup.graphic = 4;\r\n                //entities.Add(pickup);\r\n            }\r\n            //{\r\n            //    BattleEntity panelEffect = new BattleEntity();\r\n            //    panelEffect.Type = EntityType.paneleffect;\r\n            //    panelEffect.pos.Set(0, 2);\r\n            //    panelEffect.life = 5;\r\n            //    panelEffect.graphic = 5;\r\n            //    panelEffect.randomPosition = true;\r\n            //    panelEffect.drawLife = false;\r\n            //    panelEffect.drawTurn = false;\r\n            //    RandomPosition(panelEffect);\r\n            //    entities.Add(panelEffect);\r\n            //}\r\n\r\n            //{\r\n            //    BattleEntity panelEffect = new BattleEntity();\r\n            //    panelEffect.Type = EntityType.paneleffect;\r\n            //    panelEffect.pos.Set(0, 2);\r\n            //    panelEffect.life = 5;\r\n            //    panelEffect.graphic = 5;\r\n            //    panelEffect.randomPosition = true;\r\n            //    panelEffect.drawLife = false;\r\n            //    panelEffect.drawTurn = false;\r\n            //    RandomPosition(panelEffect);\r\n            //    entities.Add(panelEffect);\r\n            //}\r\n\r\n            Reset();\r\n            ExecutePhase();\r\n        }\r\n\r\n        public BattleEntity NewBattleEntity()\r\n        {\r\n            BattleEntity battleEntity = new BattleEntity();\r\n            entities.Add(battleEntity);\r\n            return battleEntity;\r\n        }\r\n\r\n        internal void Reset()\r\n        {\r\n            for (int i = 0; i < entities.Count; i++)\r\n            {\r\n                entities[i].life = entities[i].maxLife;\r\n            }\r\n            ChangePhase(BattlePhase.EnemyMoveChoice);\r\n            battleState.turn.Val = 0;\r\n            battleState.totalTurns = 0;\r\n            battleState.actingEntity = 0;\r\n            battleState.moveTick_Now.Val = 0;\r\n            battleState.moveTick_Total = 1;\r\n            battleResult.result = 0;\r\n        }\r\n\r\n        internal bool IsOver()\r\n        {\r\n            return battleResult.result != 0;\r\n        }\r\n\r\n        public void Tick()\r\n        {\r\n            FinishPreviousTick();\r\n            bool heroAlive = false;\r\n            bool enemyAlive = false;\r\n            bool pickupObligatoryExist = false;\r\n            foreach (var item in entities)\r\n            {\r\n                if (item.Type == EntityType.enemy)\r\n                {\r\n                    if (item.life > 0)\r\n                        enemyAlive = true;\r\n                }\r\n                if (item.Type == EntityType.hero)\r\n                {\r\n                    if (item.life > 0)\r\n                        heroAlive = true;\r\n                }\r\n            }\r\n            for (int i = 0; i < this.pickupAccessor.Length; i++)\r\n            {\r\n                var pickup = pickupAccessor.Comp2(i);\r\n                if (pickup.necessaryForVictory && pickupAccessor.Comp1(i).Alive)\r\n                {\r\n                    pickupObligatoryExist = true;\r\n                }\r\n            }\r\n            if (!heroAlive)\r\n            {\r\n                battleResult.result = 2;\r\n\r\n            }\r\n            else if ((!enemyAlive|| !BattleConfig.needKillAllEnemies) && !pickupObligatoryExist)\r\n            {\r\n                battleResult.result = 1;\r\n            }\r\n            if (battleResult.result == 0)\r\n            {\r\n                happManager.Tick();\r\n                timeStamp.Advance(1);\r\n                ExecutePhase();\r\n            }\r\n\r\n        }\r\n\r\n        public void Update(float delta)\r\n        {\r\n            if (timeToChoose > 0 && battleState.phase == BattlePhase.PickHands)\r\n            {\r\n                timeToChoose -= delta;\r\n                if (timeToChoose <= 0)\r\n                {\r\n                    Tick();\r\n                }\r\n            }\r\n            \r\n\r\n        }\r\n\r\n        internal void FinishPreviousTick()\r\n        {\r\n            BattlePhase previousPhase = battleState.phase;\r\n            switch (previousPhase)\r\n            {\r\n                case BattlePhase.EnemyMoveChoice:\r\n                    ChangePhase(BattlePhase.HandRecharge);\r\n                    break;\r\n                case BattlePhase.HandRecharge:\r\n                    ChangePhase(BattlePhase.PickHands);\r\n                    break;\r\n                case BattlePhase.PickHands:\r\n                    ChangePhase(BattlePhase.ExecuteMove);\r\n                    break;\r\n                case BattlePhase.ExecuteMove:\r\n                    if (battleState.moveTick_Now >= battleState.moveTick_Total - 1)\r\n                    {\r\n                        battleState.moveTick_Now.Val = 0;\r\n                        battleState.moveTick_Total = 1;\r\n                        bool noMoreUnitsToActThisTurn = true;\r\n                        int i_initial = battleState.actingEntity + 1;\r\n                        if (i_initial < entities.Count)\r\n                        {\r\n                            for (int i = i_initial; i < entities.Count; i++)\r\n                            {\r\n                                if (entities[i].Alive)\r\n                                {\r\n                                    battleState.actingEntity = i;\r\n                                    noMoreUnitsToActThisTurn = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        if (noMoreUnitsToActThisTurn)\r\n                        {\r\n                            if (battleState.turn >= battleState.turnsPerPhase - 1)\r\n                            {\r\n                                ChangePhase(BattlePhase.EnemyMoveChoice);\r\n                                foreach (var e in entities)\r\n                                {\r\n                                    if (e.randomPosition)\r\n                                    {\r\n                                        RandomPosition(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                battleState.actingEntity = 0;\r\n                                battleState.turn = battleState.turn + 1;\r\n                                battleState.totalTurns += 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        battleState.moveTick_Now.Val += 1;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private static void RandomPosition(BattleEntity e)\r\n        {\r\n            e.pos.X = RandomSupplier.Range(0, 5);\r\n            e.pos.Y = RandomSupplier.Range(0, 2);\r\n        }\r\n\r\n        private void ChangePhase(BattlePhase phase)\r\n        {\r\n            BattlePhase previousPhase = battleState.phase;\r\n            if (phase == previousPhase) return;\r\n            if (phase == BattlePhase.PickHands)\r\n            {\r\nPidroh.BaseUtils.Extensions.Shuffle<global::Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType>(                playerHandPool);\r\n                playerHandUnfixed.Clear();\r\n                int commandsToAdd = 3;\r\n                if (commandsToAdd > playerHandPool.Count)\r\n                {\r\n                    commandsToAdd = playerHandPool.Count;\r\n                }\r\n                for (int i = 0; i < commandsToAdd; i++)\r\n                {\r\n                    playerHandUnfixed.Add(playerHandPool[i]);\r\n                }\r\n\r\n\r\n                timeToChoose = timeToChooseMax;\r\n            }\r\n            if (previousPhase == BattlePhase.ExecuteMove)\r\n            {\r\n                battleState.turn.Val = 0;\r\n                battleState.actingEntity = 0;\r\n                battleState.moveTick_Now.Val = 0;\r\n                battleState.moveTick_Total = 1;\r\n                foreach (var e in entities)\r\n                {\r\n                    for (int i = 0; i < e.moves.Length; i++)\r\n                    {\r\n                        e.moves[i] = -1;\r\n                    }\r\n                }\r\n            }\r\n            battleState.phase = phase;\r\n        }\r\n\r\n        private void ExecutePhase()\r\n        {\r\n            var phase = battleState.phase;\r\n            switch (phase)\r\n            {\r\n                case BattlePhase.EnemyMoveChoice:\r\n                    ecsInteg.SpawnEnemies();\r\n                    EnemyGenerateMoves();\r\n                    break;\r\n                case BattlePhase.HandRecharge:\r\n                    break;\r\n                case BattlePhase.PickHands:\r\n                    inputs.Clear();\r\n                    foreach (var hi in playerHandFixed)\r\n                    {\r\n                        inputs.Add(new Turnbased.Input(InputType.Move, (int)hi), InputTags.MOVEFIX);\r\n                    }\r\n                    foreach (var hi in playerHandUnfixed)\r\n                    {\r\n                        inputs.Add(new Turnbased.Input(InputType.Move, (int)hi), InputTags.MOVEUNFIX);\r\n                    }\r\n                    inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Redo), InputTags.MISC);\r\n                    inputs.Add(new Turnbased.Input(InputType.MiscBattle, MiscBattleInput.Done), InputTags.MISC);\r\n                    break;\r\n                case BattlePhase.ExecuteMove:\r\n                    ecsInteg.SpawnEnemies();\r\n                    ExecuteMoves();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n        public void InputDone(Input input)\r\n        {\r\n            if (input.type == InputType.Move)\r\n            {\r\n                MoveType arg1 = (MoveType)input.arg1;\r\n                //Console.Write(\"INPUTTED1\");\r\n                if (playerHandFixed.Contains(arg1) || playerHandUnfixed.Contains(arg1)) {\r\n\r\n                    //Console.Write(\"INPUTTED2\");\r\n                    MoveChosen(arg1);\r\n                }\r\n                    \r\n            }\r\n                \r\n            if (input.type == InputType.MiscBattle)\r\n            {\r\n                MiscBattleInput misc = (MiscBattleInput)input.arg1;\r\n                if (misc == MiscBattleInput.Redo)\r\n                {\r\n                    foreach (var e in entities)\r\n                    {\r\n                        if (e.Type == EntityType.hero)\r\n                        {\r\n                            for (int i = 0; i < e.moves.Length; i++)\r\n                            {\r\n                                if (e.moves[i] == null)\r\n                                {\r\n                                    e.moves[i] = -1;\r\n                                }\r\n                                int value = e.moves[i];\r\n\r\n                                if (value == -1 || i == battleState.turnsPerPhase)\r\n                                {\r\n                                    if (i > 0)\r\n                                    {\r\n                                        e.moves[i - 1] = -1;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (misc == MiscBattleInput.Done)\r\n                {\r\n                    Tick();\r\n                }\r\n            }\r\n        }\r\n\r\n        internal bool BattleDecided()\r\n        {\r\n            int heroes = 0;\r\n            int enemies = 0;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Type == EntityType.hero)\r\n                {\r\n                    if (e.Alive)\r\n                        heroes++;\r\n                }\r\n                if (e.Type == EntityType.enemy)\r\n                {\r\n                    if (e.Alive)\r\n                        enemies++;\r\n                }\r\n            }\r\n            return heroes == 0 || enemies == 0;\r\n        }\r\n\r\n        public void MoveChosen(MoveType moveType)\r\n        {\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Type == EntityType.hero)\r\n                {\r\n                    for (int i = 0; i < e.moves.Length; i++)\r\n                    {\r\n\r\n                        int value = e.moves[i];\r\n\r\n                        if (value == -1)\r\n                        {\r\n\r\n                            e.moves[i] = (int) moveType;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public void ExecuteMoves()\r\n        {\r\n\r\n            //Console.Write(\"bla\" + battleState.turn.Val);\r\n            //Console.Read();\r\n            BattleEntity attacker = entities[battleState.actingEntity];\r\n            int turn = battleState.turn;\r\n            ExecuteMove(attacker, turn);\r\n        }\r\n\r\n        public void ExecuteMove(BattleEntity actor, int turn)\r\n        {\r\n            MoveDataExecuter.ExecuteMove(actor, turn);\r\n\r\n        }\r\n\r\n        public float CalculateAttackMultiplier(BattleEntity actor)\r\n        {\r\n            var baseD = actor.damageMultiplier;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e != actor)\r\n                {\r\n                    if (e.pos == actor.pos)\r\n                    {\r\n                        if (e.Type == EntityType.paneleffect)\r\n                        {\r\n                            baseD *= 3;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return baseD;\r\n        }\r\n\r\n\r\n        public float CalculateDefenderMultiplier(BattleEntity actor)\r\n        {\r\n            var baseD = 1;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e != actor)\r\n                {\r\n                    if (e.pos == actor.pos)\r\n                    {\r\n                        if (e.Type == EntityType.paneleffect)\r\n                        {\r\n                            baseD *= 3;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return baseD;\r\n        }\r\n\r\n        public class BattleState\r\n        {\r\n            public Value turn = new Value();\r\n            public int totalTurns;\r\n            public Value turnsPerPhase = new Value();\r\n            public Value moveTick_Now = new Value();\r\n            public int moveTick_Total = 0;\r\n            public int actingEntity = 0;\r\n            public BattlePhase phase;\r\n        }\r\n\r\n        public class BattleEntity\r\n        {\r\n            public int life;\r\n            public Vector2D pos = new Vector2D();\r\n            public Vector2D minPos = new Vector2D();\r\n            public Vector2D maxPos = new Vector2D();\r\n            public int[] moves = new int[10];\r\n            public int graphic;\r\n            public int graphicRepeatedIndex;\r\n            public float damageMultiplier = 1;\r\n            internal bool drawLife = true;\r\n            internal bool drawTurn = true;\r\n            internal bool randomPosition = false;\r\n            public Element element = Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None;\r\n            internal int maxLife = 3;\r\n\r\n            public EntityType Type { get; set; }\r\n            public Vector2D PositionV2D { get { return new BaseUtils.Vector2D(pos.X, pos.Y); } }\r\n\r\n            public bool Dead { get { return life <= 0; } }\r\n\r\n            public bool Alive { get { return !this.Dead; } }\r\n\r\n        }\r\n\r\n        public enum MoveType\r\n        {\r\n            DoNothing,\r\n            MoveUp,\r\n            MoveLeft,\r\n            MoveDown,\r\n            MoveRight,\r\n            NormalShot,\r\n            Fire,\r\n            Ice,\r\n            Thunder,\r\n            IceBomb,\r\n            ThunderBomb,\r\n            SummonEntity\r\n        }\r\n\r\n        public enum HappTag\r\n        {\r\n            AttackHit,\r\n            AttackMiss,\r\n            DamageTaken,\r\n            MovementFail\r\n        }\r\n\r\n        public enum BattlePhase\r\n        {\r\n            EnemyMoveChoice,\r\n            HandRecharge,\r\n            PickHands,\r\n            ExecuteMove,\r\n        }\r\n\r\n        public enum EntityType\r\n        {\r\n            hero, enemy, pickup, paneleffect\r\n        }\r\n\r\n        public enum Element\r\n        {\r\n            Fire, Ice, Thunder,\r\n            None\r\n        }\r\n\n    \nprivate int __Property__Initializer__BoardWidth=6;private int __Property__Initializer__BoardHeight=3;}\r\n\r\n\r\n\r\n    public class Value\r\n    {\r\n        public float Val { get; set; }\r\n\r\n        public Enum valAsEnum { set { Val = Convert.ToSingle(value); } }\r\n\r\n        internal void Set(int v)\r\n        {\r\n            Val = v;\r\n        }\r\n\r\n        public static Value operator +(Value c1, float c2)\r\n        {\r\n            c1.Val += c2;\r\n            return c1;\r\n        }\r\n\r\n        public static float operator -(Value c1, float c2)\r\n        {\r\n            return c1.Val - c2;\r\n        }\r\n\r\n        public static bool operator ==(Value c1, Value c2)\r\n        {\r\n            bool c2null = object.ReferenceEquals(c2, null);\r\n            bool c1null = object.ReferenceEquals(c1, null);\r\n            if (c2null && c1null)\r\n                return true;\r\n            if (c1null || c2null)\r\n            {\r\n                return false;\r\n            }\r\n            return c1.Val == c2.Val;\r\n        }\r\n\r\n        public static bool operator !=(Value c1, Value c2)\r\n        {\r\n            bool c2null = object.ReferenceEquals(c2, null);\r\n            bool c1null = object.ReferenceEquals(c1, null);\r\n            if (c2null && c1null)\r\n                return false;\r\n            if (c1null || c2null)\r\n            {\r\n                return true;\r\n            }\r\n            return c1.Val != c2.Val;\r\n        }\r\n\r\n        public static implicit operator float(Value d)\r\n        {\r\n            return d.Val;\r\n        }\r\n\r\n        public static implicit operator int(Value d)\r\n        {\r\n            return (int)d.Val;\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public class BattleResult\r\n    {\r\n        public int result;\r\n    }\r\n\r\n    public struct BattleBasicConfig\r\n    {\r\n        public readonly int nEnemies;\r\n        public readonly int nTurns;\r\n\r\n        public BattleBasicConfig(int nEnemies, int nTurns)\r\n        {\r\n            this.nEnemies = nEnemies;\r\n            this.nTurns = nTurns;\r\n        }\r\n    }\r\n\r\n    public struct Input\r\n    {\r\n        public readonly InputType type;\r\n        public readonly int arg1;\r\n\r\n\r\n\r\n        public Input(InputType type, int arg1)\r\n        {\r\n            this.type = type;\r\n            this.arg1 = arg1;\r\n        }\r\n\r\n        public Input(InputType type, Enum arg1)\r\n        {\r\n            this.type = type;\r\n            this.arg1 = Convert.ToInt32(arg1);\r\n        }\r\n    }\r\n\r\n    public enum InputType\r\n    {\r\n        None, Move, MiscBattle\r\n    }\r\n\r\n    public enum MiscBattleInput\r\n    {\r\n        Done, Redo\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class BattleSetup\r\n    {\r\n        public ECSManager ecs;\r\n        public BattleMain battleMain;\r\n        public TimeStamp timeStamp;\r\n\r\n        public BattleSetup(int mode, BattleBasicConfig battleBasicConfig, int difficulty, ECSManager ecs)\r\n        {\r\n            this.ecs = ecs;\r\n            timeStamp = new TimeStamp();\r\n            battleMain = new BattleMain(mode, ecs, timeStamp);\r\n            var mcp = new MoveCreatorProg();\r\n\r\n            var stages = ecs.QuickAccessor1<StageData>();\r\n\r\n            var fixedAttack = stages.Entity(difficulty).GetComponent<FixedAttackStage>();\r\n            var playerHandPool = battleMain.playerHandPool;\r\n            if (fixedAttack != null)\r\n            {\r\n                \r\n                foreach (var item in fixedAttack.moves)\r\n                {\r\n                    playerHandPool.Add((BattleMain.MoveType)item);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                playerHandPool.Add(BattleMain.MoveType.Fire);\r\n                playerHandPool.Add(BattleMain.MoveType.Ice);\r\n                playerHandPool.Add(BattleMain.MoveType.Thunder);\r\n            }\r\n            var stage = stages.Comp1(difficulty);\r\n            var enmys = stage.enemySpawns;\r\n            foreach (var item in enmys)\r\n            {\r\n                ecs.CreateEntityWithComponent(item);\r\n            }\r\n            \r\n            battleMain.MoveDataExecuter = new MoveDataExecuter(battleMain, mcp.moveDatas, ecs, timeStamp);\r\n\r\n            List<string> entityRenderTexts = new List<string>();\r\n\r\n            var enemyDatas = new EnemyDataCreator(entityRenderTexts,mcp).enemyDatas;\r\n            var battleState = battleMain.battleState;\r\n\r\n            battleMain.BasicConfig(basicConfig:battleBasicConfig);\r\n            battleMain.BattleConfigure(stage.battleConfig);\r\n\r\n            var enemyFactory = new SpawnEntityFactory(ecs, enemyDatas, battleMain);\r\n            battleMain.ecsInteg = new ECSIntegration(enemyFactory, ecs);\r\n            //battleMain.EnemyFactory = enemyFactory;\r\n\r\n            var enemyAis = ecs.QuickAccessor2<EnemyAI, BattleMain.BattleEntity>();\r\n            var enemyAiStateless = ecs.CreateAccessor(necessary: new Type[] { typeof(EnemyAI) }, not: new Type[] { typeof(EnemyAIState) });\r\n            battleMain.EnemyGenerateMoves = () =>\r\n            {\r\n                while (enemyAiStateless.Length > 0)\r\n                {\r\n                    enemyAiStateless.Get(0).AddComponent<EnemyAIState>();\r\n                }\r\n\r\n                for (int i = 0; i < enemyAis.Length; i++)\r\n                {\r\n                    var ai = enemyAis.Comp1(i);\r\n                    var battler = enemyAis.Comp2(i);\r\n                    var aiState = enemyAis.Entity(i).GetComponent<EnemyAIState>();\r\n                    var moves = ai.moves;\r\n                    for (int j = 0; j < battleState.turnsPerPhase; j++)\r\n                    {\r\n                        int aiPro = (j+ aiState.progress) % moves.Count;\r\n                        var move = moves[aiPro];\r\n                        if (move is MoveUse)\r\n                        {\r\n\r\n                            battler.moves[j] = (move as MoveUse).move;\r\n                        }\r\n                        //be.moves[j] = ;\r\n                    }\r\n                    aiState.progress += battleState.turnsPerPhase;\r\n                }\r\n            };\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    /// <summary>\r\n    /// data that will be a part of stagedata so each stage can have it's config\r\n    /// It will also be contained in battlemain.\r\n    /// Should be static, once created.\r\n    /// </summary>\r\n    public class BattleConfig\r\n    {\r\n        public readonly List<int> enemiesToSummon =new List<int>();\r\n        public readonly bool needKillAllEnemies = true;\r\n        \r\n        public BattleConfig(int[] enemiesToSummon)\r\n        {\r\n            this.enemiesToSummon.AddRange(enemiesToSummon);\r\n        }\r\n\r\n        public BattleConfig(bool needKillAllEnemies)\r\n        {\r\n            this.needKillAllEnemies = needKillAllEnemies;\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class ColorStuff\r\n    {\r\n        private static readonly string GoodMain;\r\n        public static string neutralDark = \"#19013b\";\r\n        public static string neutralStrong = \"#2c3e43\";\r\n        private static readonly string GoodSub;\r\n        private static readonly string EvilMain;\r\n        public static string[] colors = new string[20];\r\n\r\n        static ColorStuff()\r\n        {\r\n            for (int i = 0; i < colors.Length; i++)\r\n            {\r\n                colors[i] = \"#1A1A1A\";\r\n            }\r\n            //colors[Colors.Hero] = \"#009c8d\";\r\n            //const string heroSub = \"#005f91\";\r\n            //colors[Colors.HeroTurn] = heroSub;\r\n            //colors[Colors.Enemy] = \"#ff0353\";\r\n            //colors[Colors.GridHero] = heroSub;\r\n            //colors[BattleRender.Colors.GridEnemy] = \"#8e0060\";\r\n            //colors[BattleRender.Colors.EnemyTurn] = \"#8e0060\";\r\n            //colors[BattleRender.Colors.Board] = \"#1e486e\";\r\n            //colors[BattleRender.Colors.inputKey] = \"#688690\";\r\n            //colors[BattleRender.Colors.WindowLabel] = \"#1e486e\";\r\n            //colors[BattleRender.Colors.FireAura] = \"#793100\";\r\n            //colors[BattleRender.Colors.IceAura] = \"#005590\";\r\n            //colors[BattleRender.Colors.ThunderAura] = \"#00583d\";\r\n\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero] = \"#8ad896\";\r\n            const string heroSub = \"#4c6d50\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn] = heroSub;\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy] = \"#ff7694\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero] = heroSub;\r\n            const string enemysub = \"#a7464f\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy] = enemysub;\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn] = enemysub;\r\n            colors[BattleRender.Colors.Board] = \"#1e486e\";\r\n            colors[BattleRender.Colors.inputKey] = \"#688690\";\r\n            colors[BattleRender.Colors.WindowLabel] = \"#1e486e\";\r\n            colors[BattleRender.Colors.FireAura] = \"#793100\";\r\n            colors[BattleRender.Colors.IceAura] = \"#005590\";\r\n            colors[BattleRender.Colors.ThunderAura] = \"#00583d\";\r\n            colors[BattleRender.Colors.FireShot] = \"#f82b36\";\r\n            colors[BattleRender.Colors.IceShot] = \"#007eff\";\r\n            colors[BattleRender.Colors.ThunderShot] = \"#a37c00\";\r\n            colors[BattleRender.Colors.BackgroundInput] = \"#080808\";\r\n\r\n\r\n            colors[BattleRender.Colors.inputKey] = \"#9E8664\";\r\n            colors[BattleRender.Colors.InputDescription] = \"#808080\";\r\n            colors[BattleRender.Colors.BackBattle] = \"#000000\";\r\n            colors[BattleRender.Colors.BackgroundInput] = \"#1A1A1A\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.HeroTurn] = \"#00B2B2\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.EnemyTurn] = \"#FF0040\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridEnemy] = \"#00468C\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero] = \"#8C0023\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Hero] = \"#66FFFF\";\r\n            colors[Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Enemy] = \"#D90036\";\r\n            colors[BattleRender.Colors.WindowLabel] = \"#666666\";\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased.DebugExtra\r\n{\r\n    public static class DebugEx\r\n    {\r\n        static List<string> messages = new List<string>();\r\n\r\n        public static void Log(string v)\r\n        {\r\n            messages.Add(v);\r\n        }\r\n\r\n        public static void Show()\r\n        {\r\n            Console.Clear();\r\n            foreach (var item in messages)\r\n            {\r\n                Console.WriteLine(item);\r\n                \r\n            }\r\n            Console.Read();\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ECS;\r\nusing System;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    internal class ECSIntegration\r\n    {\r\n\r\n        SpawnEntityFactory enemyFactory;\r\n        ECSManager ecs;\r\n\r\n        public ECSIntegration(SpawnEntityFactory enemyFactory, ECSManager ecs)\r\n        {\r\n            this.enemyFactory = enemyFactory;\r\n            this.ecs = ecs;\r\n        }\r\n\r\n        internal void HeroCreated(BattleMain.BattleEntity hero)\r\n        {\r\n            \r\n        }\r\n\r\n        internal void SpawnEnemies()\r\n        {\r\n            enemyFactory.Spawn();\r\n        }\r\n    }\r\n}","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class EnemyAI\r\n    {\r\n        public readonly List<object> moves = new List<object>();\r\n    }\r\n\r\n    public class EnemyAIState\r\n    {\r\n        public int progress;\r\n    }\r\n\r\n    public class Loop\r\n    {\r\n        public List<object> actions = new List<object>();\r\n    }\r\n\r\n    public class MoveUse\r\n    {\r\n        public readonly int move;\r\n\r\n        public MoveUse(int move)\r\n        {\r\n            this.move = move;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class SpawnEntityFactory\r\n    {\r\n\r\n        ECSManager ecs;\r\n        List<EnemyData> enemyDatas;\r\n        private readonly BattleMain battleMain;\r\n        private QuickAccessorOne<SpawnData> spawns;\r\n\r\n        public SpawnEntityFactory(ECSManager ecs, List<EnemyData> enemyDatas, BattleMain battleMain)\r\n        {\r\n            this.ecs = ecs;\r\n            //ecs.QuickAccessor1<EnemyData>();\r\n            spawns = ecs.QuickAccessor1<SpawnData>();\r\n            this.enemyDatas = enemyDatas;\r\n            this.battleMain = battleMain;\r\n        }\r\n\r\n        public void Spawn()\r\n        {\r\n            int spawned = 0;\r\n            //for (int i = 0; i < spawns.Count; i++)\r\n            while (spawns.Count > 0)\r\n            {\r\n                SpawnData spawn = spawns.Comp1(0);\r\n                spawns.Entity(0).RemoveComponent(spawn);\r\n                var id = spawn.id;\r\n                BattleMain.EntityType entType = (BattleMain.EntityType)spawn.entityType;\r\n                if(entType == BattleMain.EntityType.pickup)\r\n                {\r\n                    var be = battleMain.NewBattleEntity();\r\n                    be.Type = entType;\r\n                    PickupInfo pickup = new PickupInfo(true);\r\n                    var pickupE = ecs.CreateEntityWithComponent(pickup);\r\n                    pickupE.AddComponent(be);\r\n                    be.pos = spawn.position;\r\n                    be.life = 1;\r\n                    be.maxLife = 1;\r\n                    be.drawLife = false;\r\n                    be.drawTurn = false;\r\n                    be.graphic = 4;\r\n                    \r\n                }\r\n                if (entType == BattleMain.EntityType.enemy)\r\n                {\r\n                    var enemyAI = enemyDatas[id].enemyAI;\r\n                    var enemy = ecs.CreateEntityWithComponent(enemyAI);\r\n                    var be = battleMain.NewBattleEntity();\r\n                    be.pos = spawn.position;\r\n                    be.life = enemyDatas[id].hp;\r\n                    be.maxLife = be.life;\r\n                    be.graphic = enemyDatas[id].render;\r\n                    var entities = battleMain.entities;\r\n                    foreach (var item in entities)\r\n                    {\r\n                        if (item != be && item.graphic == be.graphic)\r\n                        {\r\n                            be.graphicRepeatedIndex++;\r\n                        }\r\n                    }\r\n                    be.minPos = new Vector2D(3, 0);\r\n                    be.maxPos = new Vector2D(5, 2);\r\n                    be.Type = BattleMain.EntityType.enemy;\r\n                    enemy.AddComponent(be);\r\n                    EnemyAIState enemyAiState = new EnemyAIState();\r\n                    enemyAiState.progress = spawned;\r\n                    enemy.AddComponent(enemyAiState);\r\n                    //Console.Write(\"SPAWN\");\r\n                    spawned++;\r\n                }\r\n                \r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    public class PickupInfo\r\n    {\r\n        public bool necessaryForVictory;\r\n\r\n        public PickupInfo(bool necessaryForVictory)\r\n        {\r\n            this.necessaryForVictory = necessaryForVictory;\r\n        }\r\n    }\r\n\r\n    public class EnemyData\r\n    {\r\n        public readonly EnemyAI enemyAI;\r\n        public readonly int hp;\r\n        public readonly int render;\r\n\r\n        public EnemyData(EnemyAI enemyAI, int hp, int render)\r\n        {\r\n            this.enemyAI = enemyAI;\r\n            this.hp = hp;\r\n            this.render = render;\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class EnemyDataCreator\r\n    {\r\n        List<string> renderTexts;\r\n        public List<EnemyData> enemyDatas = new List<EnemyData>();\r\n        MoveCreatorProg moveCreatorProg;\r\n\r\n        public EnemyDataCreator(List<string> renderTexts, MoveCreatorProg moveCreatorProg)\r\n        {\r\n            this.renderTexts = renderTexts;\r\n            this.moveCreatorProg = moveCreatorProg;\r\n            AddEnemy(ai: Actions(\r\n                Moves(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Thunder)\r\n                ), hp:2, renderText:\"%\");\r\n            AddEnemy(ai: Actions(\r\n                Moves(Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing, Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing)\r\n                ), hp: 3, renderText: \"#\");\r\n            AddEnemy(ai: Actions(\r\n               Moves(\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.MoveRight\r\n                   )\r\n               ), hp: 6, renderText: \"&\");\r\n            AddEnemy(ai: Actions(\r\n                   \r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.IceBomb,\r\n                   \"Summon\",\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.ThunderBomb,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.Fire\r\n\r\n\r\n               ), hp: 45, renderText: \"$\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveUp,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveRight,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveLeft,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.MoveDown,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.MoveUp\r\n\r\n\r\n               ), hp: 3, renderText: \"H\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Ice,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"J\");\r\n            AddEnemy(ai: Actions(\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"L\");\r\n            AddEnemy(ai: Actions(\r\n\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.Fire,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType.DoNothing,\r\n                   Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType\r\n.DoNothing\r\n\r\n\r\n\r\n               ), hp: 3, renderText: \"K\");\r\n            //AddEnemy(ai: Actions(), hp: 3, renderText: \"$\");\r\n            //AddEnemy(ai: Actions(), hp: 5, renderText: \"#\");\r\n\r\n        }\r\n\r\n        private EnemyAI Actions(params object[] obs)\r\n        {\r\n            var ai = new EnemyAI();\r\n            \r\n            foreach (var o in obs)\r\n            {\r\n                if (o is Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)\r\n                {\r\n                    ai.moves.Add(new MoveUse((int)o));\r\n                    continue;\r\n                }\r\n                if (o is string)\r\n                {   \r\n                    ai.moves.Add(new MoveUse(moveCreatorProg.GetMoveId(o as string)));\r\n                    continue;\r\n                }\r\n                if (o is Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[])\r\n                {\r\n                    foreach (var item in o as Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[])\r\n                    {\r\n                        ai.moves.Add(new MoveUse((int)item));\r\n                    }\r\n                    continue;\r\n                }\r\n                ai.moves.Add(o);\r\n            }\r\n            return ai;\r\n        }\r\n\r\n        private Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[] Moves(params Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType[] moves)\r\n        {\r\n            return moves;\r\n        }\r\n\r\n        private void AddEnemy(EnemyAI ai, int hp, string renderText)\r\n        {\r\n            int render = renderTexts.Count;\r\n            renderTexts.Add(renderText);\r\n            enemyDatas.Add(new EnemyData(ai, hp, render));\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n\r\n    public class StageDataCreator\r\n    {\r\n        //public List<StageData> stages = new List<StageData>();\r\n        private readonly ECSManager ecs;\r\n\r\n        public StageDataCreator(ECSManager ecs)\r\n        {\r\n            this.ecs = ecs;\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 0)),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 2))\r\n                ).HideLifeUI(), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                new BattleConfig(needKillAllEnemies:false),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 1)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 2)),\r\n                Enemy(4, new BaseUtils.Vector2D(5, 1))\r\n                ).HideLifeUI(), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                new BattleConfig(needKillAllEnemies: false),\r\n                Pickup(0, new BaseUtils.Vector2D(2, 2)),\r\n                Pickup(0, new BaseUtils.Vector2D(1, 2)),\r\n                Pickup(0, new BaseUtils.Vector2D(0, 2)),\r\n                Enemy(5, new BaseUtils.Vector2D(5, 2))\r\n                ), new FixedAttackStage());\r\n            Add(new StageData(\r\n                //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n                Enemy(6, new BaseUtils.Vector2D(5, 0))\r\n                ), new FixedAttackStage(\r\n                    (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n               //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n               Enemy(4, new BaseUtils.Vector2D(4, 1))\r\n               ), new FixedAttackStage(\r\n                   (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n               //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n               Enemy(5, new BaseUtils.Vector2D(4, 1))\r\n               ), new FixedAttackStage(\r\n                   (int)BattleMain.MoveType.Fire));\r\n            Add(new StageData(\r\n              //Enemy(0, new BaseUtils.Vector2D(4, 0)),\r\n              Enemy(5, new BaseUtils.Vector2D(4, 1)),\r\n              Enemy(7, new BaseUtils.Vector2D(3, 0))\r\n              ), new FixedAttackStage(\r\n                  (int)BattleMain.MoveType.Fire, (int)BattleMain.MoveType.Thunder ));\r\n            Add(\r\n\r\n\r\n                new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(3, 0)),\r\n                Enemy(0, new BaseUtils.Vector2D(5, 2))\r\n                )\r\n                ,\r\n                new StageData(\r\n                Enemy(1, new BaseUtils.Vector2D(3, 2)),\r\n                Enemy(2, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                 new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(4, 1)),\r\n                Enemy(1, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                new StageData(\r\n                Enemy(0, new BaseUtils.Vector2D(3, 2)),\r\n                Enemy(2, new BaseUtils.Vector2D(3, 1)),\r\n                Enemy(2, new BaseUtils.Vector2D(5, 1))\r\n                )\r\n                ,\r\n                new StageData(\r\n                    new BattleConfig(new int[] { 1 }),\r\n                    Enemy(3, new BaseUtils.Vector2D(4, 1))\r\n                )\r\n\r\n                //,\r\n\r\n                //,\r\n                //new StageData(\r\n                //new EnemySpawnData(1, new BaseUtils.Vector2D(4, 1)),\r\n                //new EnemySpawnData(1, new BaseUtils.Vector2D(5, 1)))\r\n                );\r\n            \r\n        }\r\n\r\n        private void Add(params object[] comps)\r\n        {\r\n            \r\n            var e = ecs.CreateEntity();\r\n            foreach (var item in comps)\r\n            {\r\n                e.AddComponent(item);\r\n            }\r\n\r\n        }\r\n\r\n        private SpawnData Pickup(int v, Vector2D vector2D)\r\n        {\r\n            return new SpawnData(v, vector2D, (int)BattleMain.EntityType.pickup);\r\n        }\r\n\r\n        private SpawnData Enemy(int v, Vector2D vector2D)\r\n        {\r\n            return new SpawnData(v, vector2D, (int)BattleMain.EntityType.enemy);\r\n        }\r\n\r\n        private void Add(params StageData[] stageData1)\r\n        {\r\n            foreach (var item in stageData1)\r\n            {\r\n                ecs.CreateEntityWithComponent(item);\r\n            }\r\n            //stages.AddRange(stageData1);\r\n        }\r\n    }\r\n\r\n    public class StageData\r\n    {\r\n        public List<SpawnData> enemySpawns = new List<SpawnData>();\r\n        public BattleConfig battleConfig;\r\n        public bool hideLifeUI = false;\r\n\r\n        public StageData(params SpawnData[] spawns)\r\n        {\r\n            enemySpawns.AddRange(spawns);\r\n        }\r\n\r\n        public StageData(BattleConfig battleConfig, params SpawnData[] spawns)\r\n        {\r\n            enemySpawns.AddRange(spawns);\r\n            this.battleConfig = battleConfig;\r\n        }\r\n\r\n        public StageData HideLifeUI()\r\n        {\r\n            hideLifeUI = true;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    public class FixedAttackStage\r\n    {\r\n        public List<int> moves = new List<int>();\r\n        \r\n\r\n        public FixedAttackStage(int move)\r\n        {\r\n            moves.Add(move);\r\n        }\r\n\r\n        public FixedAttackStage(params int[] move)\r\n        {\r\n            moves.AddRange(move);\r\n        }\r\n\r\n        public FixedAttackStage()\r\n        {\r\n        }\r\n    }\r\n\r\n    public class SpawnData\r\n    {\r\n        public readonly int id;\r\n        public readonly int entityType;\r\n        public readonly BaseUtils.Vector2D position;\r\n\r\n        public SpawnData(int id, Vector2D position, int type)\r\n        {\r\n            this.id = id;\r\n            this.position = position;\r\n            this.entityType = type;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased.Happs;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.BaseUtils;\r\nusing Pidroh.ECS;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class MoveDataExecuter\r\n    {\r\n        BattleMain battleMain;\r\n        List<MoveData> moveDatas;\r\n        private HappManager happManager;\r\n        private List<BattleMain.BattleEntity> entities;\r\n        private readonly ECSManager ecs;\r\n        TimeStamp timeStamp;\r\n        List<Vector2D> aux = new List<Vector2D>();\r\n\r\n\r\n        public MoveDataExecuter(BattleMain turnBase, List<MoveData> moveDatas, ECSManager ecs, TimeStamp timeStamp)\r\n        {\r\n            this.battleMain = turnBase;\r\n            this.moveDatas = moveDatas;\r\n            this.ecs = ecs;\r\n            this.timeStamp = timeStamp;\r\n        }\r\n\r\n        public void ExecuteMove(BattleMain.BattleEntity actor, int turn)\r\n        {\r\n\r\n\r\n            var battleState = this.battleMain.battleState;\r\n            entities = this.battleMain.entities;\r\n            int userId = entities.IndexOf(actor);\r\n\r\n            var moveId = actor.moves[turn];\r\n            if (moveId < 0) return;\r\n            var md = moveDatas[moveId];\r\n            if (md == null) return;\r\n            battleState.moveTick_Total = md.units.Count;\r\n            int moveTick = battleState.moveTick_Now;\r\n            var actions = md.units[moveTick].thingsToHappen;\r\n            happManager = battleMain.happManager;\r\n\r\n\r\n\r\n            foreach (var a in actions)\r\n            {\r\n\r\n                if (a is MoveAction)\r\n                {\r\n                    MoveAction ma = a as MoveAction;\r\n                    var p = ma.distance;\r\n                    actor.pos += p;\r\n                    bool invalidMove =\r\n                        actor.pos.X < actor.minPos.X\r\n                        || actor.pos.Y < actor.minPos.Y\r\n                        || actor.pos.Y > actor.maxPos.Y\r\n                        || actor.pos.X > actor.maxPos.X;\r\n                    foreach (var e in entities)\r\n                    {\r\n                        if (e != actor && e.Alive)\r\n                        {\r\n                            if (actor.pos == e.pos)\r\n                            {\r\n                                invalidMove = true;\r\n                                if (e.Type == BattleMain.EntityType.pickup)\r\n                                {\r\n                                    e.life = 0;\r\n                                    actor.damageMultiplier = 2;\r\n                                    invalidMove = false;\r\n                                }\r\n                                if (e.Type == BattleMain.EntityType.paneleffect)\r\n                                {\r\n                                    invalidMove = false;\r\n                                }\r\n                                if (invalidMove) break;\r\n\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (invalidMove)\r\n                    {\r\n                        //Console.WriteLine(\"Invalid move generate\" + battleState.moveTick_Now.Val);\r\n\r\n                        int actorId = entities.IndexOf(actor);\r\n                        CreateHapp(md, new HappMoveData(actorId), new HappMovementFail(actor.pos));\r\n\r\n\r\n                        battleMain.happManager\r\n                            .Add(new Happ(BattleMain.HappTag.MovementFail))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actorId))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actor.pos.X))\r\n                            .AddAttribute(new Happ.Attribute().SetValue(actor.pos.Y));\r\n\r\n                        battleState.moveTick_Total = 1;\r\n                        actor.pos -= p;\r\n                    }\r\n                }\r\n                if (a is DealDamageAction)\r\n                {\r\n                    var dda = a as DealDamageAction;\r\n                    var attackElement = dda.element;\r\n                    \r\n                    if (dda.target == Target.Area)\r\n                    {\r\n                        var area = dda.area;\r\n                        var referenceUserOfArea = ResolveTarget(actor, entities, area.target);\r\n                        int mirroringX = 1;\r\n                        if (actor.Type == BattleMain.EntityType.enemy) //enemies act on opposite side\r\n                        {\r\n                            mirroringX = -1;\r\n                        }\r\n                        foreach (var point in area.points)\r\n                        {\r\n                            var searchPos = point * new BaseUtils.Vector2D(mirroringX, 1) + referenceUserOfArea.pos;\r\n                            //Console.WriteLine(\"Search point \"+searchPos);\r\n                            for (int i = 0; i < entities.Count; i++)\r\n                            {\r\n                                if (entities[i].pos == searchPos)\r\n                                {\r\n                                    DealDamage(actor, dda, entities[i]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else\r\n                    {\r\n                        //find target\r\n                        BattleMain.BattleEntity target = ResolveTarget(actor, entities, dda.target);\r\n                        if (target != null)\r\n                        {\r\n                            DealDamage(actor, dda, target);\r\n\r\n                        }\r\n                    }\r\n                }\r\n                if (a is SummonEntity)\r\n                {\r\n                    var se = a as SummonEntity;\r\n                    var enemyWhich = se.enemyWhich;\r\n                    var enemyId = battleMain.BattleConfig.enemiesToSummon[enemyWhich];\r\n                    var entities = battleMain.entities;\r\n                    var positions = GetEmptySpots(side:1);\r\n                    if (positions.Count == 0) return;\r\n\r\n                    Vector2D summonPos = se.preferentialRowColumn;\r\n                    if (!positions.Contains(summonPos))\r\n                    {\r\n                        summonPos = positions[0];\r\n                    }\r\n                    ecs.CreateEntityWithComponent(new SpawnData(enemyId, summonPos, (int)BattleMain.EntityType.enemy));\r\n                    \r\n                }\r\n                if (a is Animation)\r\n                {\r\n                    var anim = a as Animation;\r\n                    BattleMain.BattleEntity target = ResolveTarget(actor, entities, anim.target);\r\n                    var area = anim.area;\r\n                    HappArea happArea = null;\r\n                    if (area != null)\r\n                    {\r\n                        var referenceUserOfArea = ResolveTarget(actor, entities, area.target);\r\n\r\n                        int mirroringX = 1;\r\n                        if (actor.Type == BattleMain.EntityType.enemy) //enemies act on opposite side\r\n                        {\r\n                            mirroringX = -1;\r\n                        }\r\n                        happArea = new HappArea(area, referenceUserOfArea.pos, mirroringX);\r\n                    }\r\n                    int targetId = -1;\r\n                    if (target != null)\r\n                        targetId = entities.IndexOf(target);\r\n                    CreateHapp(md, happArea, new HappMoveData(userId, targetId, anim.element));\r\n\r\n                    if (anim.target != Target.None)\r\n                    {\r\n                        happManager\r\n.Add(new Happ(BattleMain.HappTag.AttackHit))\r\n                        .AddAttribute(new Happ.Attribute().SetValue(entities.IndexOf(target)))\r\n                        .AddAttribute(new Happ.Attribute().SetValue(userId))\r\n                        .AddAttribute(new Happ.Attribute().SetValue((int)anim.element));\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            if (moveTick == md.units.Count - 1)\r\n            {\r\n                foreach (var item in md.units)\r\n                {\r\n                    foreach (var act in item.thingsToHappen)\r\n                    {\r\n                        if (act is DealDamageAction)\r\n                        {\r\n                            ChangeElement(actor, (act as DealDamageAction).element);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        private List<Vector2D> GetEmptySpots(int side = -1)\r\n        {\r\n            aux.Clear();\r\n            int offX = 0;\r\n            if (side == 1) offX = 3;\r\n            int width = battleMain.BoardWidth / 2;\r\n            if (side == -1)\r\n                width = battleMain.BoardWidth;\r\n            for (int i = 0; i < width; i++)\r\n            {\r\n                for (int j = 0; j < battleMain.BoardHeight; j++)\r\n                {\r\n\r\n                    aux.Add(new Vector2D(i+offX,j));\r\n                }\r\n            }\r\n            var entities = battleMain.entities;\r\n            foreach (var e in entities)\r\n            {\r\n                if (e.Alive && aux.Contains(e.pos))\r\n                {\r\n                    aux.Remove(e.pos);\r\n                }\r\n            }\r\n            return aux;\r\n            \r\n        }\r\n\r\n        private void ChangeElement(BattleMain.BattleEntity actor, BattleMain.Element element)\r\n        {\r\n            if (actor.element == element) return;\r\n            actor.element = element;\r\n            var th = new HappTags((int)MiscHappTags.ChangeElement);\r\n            ecs.CreateEntityWithComponent(th, new HappMoveData(entities.IndexOf(actor), -1, element)).AddComponent(timeStamp.GetSnap());\r\n        }\r\n\r\n        private void CreateHapp(MoveData md, object comp1, object comp2)\r\n        {\r\n            var th = new HappTags(md.tags);\r\n            var e = ecs.CreateEntityWithComponent(th, timeStamp.GetSnap());\r\n            if (comp1 != null) e.AddComponent(comp1);\r\n            if (comp2 != null) e.AddComponent(comp2);\r\n        }\r\n\r\n        private void CreateHapp(int tag, object comp1, object comp2)\r\n        {\r\n            var th = new HappTags(tag);\r\n            var e = ecs.CreateEntityWithComponent(th, timeStamp.GetSnap());\r\n            if (comp1 != null) e.AddComponent(comp1);\r\n            if (comp2 != null) e.AddComponent(comp2);\r\n        }\r\n\r\n        private void DealDamage(BattleMain.BattleEntity actor, DealDamageAction dda, BattleMain.BattleEntity target)\r\n        {\r\n            BattleMain.Element attackElement = dda.element;\r\n            bool elementalBlock = attackElement == target.element && attackElement != BattleMain.Element.None;\r\n            bool superEffective = false;\r\n            int damage = 0;\r\n            int targetId = entities.IndexOf(target);\r\n            if (elementalBlock)\r\n            {\r\n            }\r\n            {\r\n                if (!elementalBlock)\r\n                {\r\n                    var mul = battleMain.CalculateAttackMultiplier(actor);\r\n                    mul *= battleMain.CalculateDefenderMultiplier(target);\r\n                    if (attackElement == BattleMain.Element.Fire && target.element == BattleMain.Element.Ice\r\n                        || attackElement == BattleMain.Element.Thunder && target.element == BattleMain.Element.Fire\r\n                        || attackElement == BattleMain.Element.Ice && target.element == BattleMain.Element.Thunder)\r\n                    {\r\n                        mul *= 3;\r\n                        superEffective = true;\r\n                    }\r\n\r\n                    \r\n\r\n                    damage = dda.damage * (int)mul;\r\n                    target.life -= damage;\r\n                    \r\n                    actor.damageMultiplier = 1;\r\n                    \r\n                    happManager.Add(new Happ(BattleMain.HappTag.DamageTaken))\r\n                    .AddAttribute(new Happ.Attribute().SetValue(targetId));\r\n                }\r\n            }\r\n            this.CreateHapp((int)MiscHappTags.Damage, new HappDamageData(target.element, dda.element, entities.IndexOf(target), damage, superEffective, elementalBlock), null);\r\n            if (target.life <= 0 && !superEffective)\r\n            {\r\n                CreateHapp((int)MiscHappTags.Death, new HappMoveData(targetId), null);\r\n            }\r\n        }\r\n\r\n        private static BattleMain.BattleEntity ResolveTarget(BattleMain.BattleEntity actor, List<BattleMain.BattleEntity> entities, Target targetType)\r\n        {\r\n            if (targetType == Target.Self) return actor;\r\n            BattleMain.BattleEntity target = null;\r\n            float minDis = 10;\r\n            foreach (var e2 in entities)\r\n            {\r\n\r\n                if (e2.Dead) continue;\r\n                if (actor.Type != e2.Type\r\n                    && e2.Type != BattleMain.EntityType.paneleffect\r\n                    && e2.Type != BattleMain.EntityType.pickup)\r\n                {\r\n                    bool sameHeight = actor.pos.Y == e2.pos.Y;\r\n\r\n                    if (sameHeight)\r\n                    {\r\n                        float dis = actor.pos.X - e2.pos.X;\r\n                        if (dis < 0) dis *= -1;\r\n                        if (dis < minDis)\r\n                        {\r\n                            minDis = dis;\r\n                            target = e2;\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            return target;\r\n        }\r\n    }\r\n\r\n    public class HappTags\r\n    {\r\n        public List<int> tags = new List<int>();\r\n\r\n        public HappTags(List<int> tags)\r\n        {\r\n            this.tags.AddRange(tags);\r\n        }\r\n\r\n        public HappTags(int i)\r\n        {\r\n            tags.Add(i);\r\n        }\r\n    }\r\n\r\n    public enum MiscHappTags{\r\n        ChangeElement = 500,\r\n        Damage = 501,\r\n        Death = 502\r\n    }\r\n\r\n    public class HappDamageData\r\n    {\r\n        public readonly BattleMain.Element targetE, damageE;\r\n        public readonly int target;\r\n        public readonly int amount;\r\n        public readonly bool superEffective;\r\n        public readonly bool elementalBlock;\r\n\r\n        public HappDamageData(BattleMain.Element targetE, BattleMain.Element damageE, int target, int amount, bool superEffective, bool elementalBlock)\r\n        {\r\n            this.targetE = targetE;\r\n            this.damageE = damageE;\r\n            this.target = target;\r\n            this.amount = amount;\r\n            this.superEffective = superEffective;\r\n            this.elementalBlock = elementalBlock;\r\n        }\r\n    }\r\n\r\n    public class HappMoveData\r\n    {\r\n        public readonly int user;\r\n        public readonly int target = -1;\r\n        public readonly BattleMain.Element element = BattleMain.Element.None;\r\n\r\n        public HappMoveData(int user)\r\n        {\r\n            this.user = user;\r\n        }\r\n\r\n        public HappMoveData(int user, int target, BattleMain.Element element)\r\n        {\r\n            this.user = user;\r\n            this.target = target;\r\n            this.element = element;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    public class HappMovementFail\r\n    {\r\n        public readonly Vector2D moveTo;\r\n\r\n        public HappMovementFail(Vector2D moveTo)\r\n        {\r\n            this.moveTo = moveTo;\r\n        }\r\n    }\r\n\r\n    public class HappArea\r\n    {\r\n        public readonly Area area;\r\n        public Vector2D offset = new Vector2D();\r\n        public readonly int mirroringX;\r\n\r\n        public HappArea(Area area)\r\n        {\r\n            this.area = area;\r\n        }\r\n\r\n        public HappArea(Area area, Vector2D offset, int mirroringX)\r\n        {\r\n            this.area = area;\r\n            this.offset = offset;\r\n            this.mirroringX = mirroringX;\r\n        }\r\n    }\r\n\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased.DebugExtra;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased.Happs\r\n{\r\n\r\n    public class HappManager\r\n    {\r\n        public int CurrentTime { get; private set; }\r\n        List<Happ> Happs = new List<Happ>();\r\n        List<HappHandler> handlers = new List<HappHandler>();\r\n        int latestHandled = -1;\r\n\r\n        public void AddHandler(HappHandler hh)\r\n        {\r\n            handlers.Add(hh);\r\n        }\r\n\r\n        public void TryHandle()\r\n        {\r\n            if(latestHandled != CurrentTime)\r\n                Handle();\r\n        }\r\n\r\n        private void Handle()\r\n        {\r\n            latestHandled = CurrentTime;\r\n            foreach (var h in handlers)\r\n            {\r\n                for (int i = Happs.Count - 1; i >= 0; i--)\r\n                {\r\n                    //this check assumes happs are ordered by time stamp\r\n                    //which they should be automatically\r\n                    if (Happs[i].TimeStamp != CurrentTime)\r\n                    {\r\n                        DebugEx.Log(\"Happening not equal to current time\");\r\n                        break;\r\n                    }\r\n                    bool hasTags = true;\r\n                    foreach (var tagsNeeded in h.necessaryTags)\r\n                    {\r\n                        if (!Happs[i].HasTag(tagsNeeded))\r\n                        {\r\n                            hasTags = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (hasTags)\r\n                    {\r\n                        DebugEx.Log(\"Happening handled\");\r\n                        h.Handle(Happs[i]);\r\n                    }\r\n                    else\r\n                    {\r\n                        DebugEx.Log(\"Happening tag is different\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public Happ Add(Happ h)\r\n        {\r\n            h.TimeStamp = CurrentTime;\r\n            Happs.Add(h);\r\n            return h;\r\n        }\r\n\r\n        public void Tick()\r\n        {\r\n            CurrentTime++;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public class Happ\r\n    {\r\n        //public string MainTag;\r\n        public List<int> tags = new List<int>();\r\n        public int TimeStamp;\r\n        List<Attribute> attrs = new List<Attribute>();\r\n\r\n        //public Happ(IConvertible c)\r\n        //{\r\n        //    tags.Add(Convert.ToInt32(c));\r\n        //}\r\n\r\n        public Happ(object mainTag)\r\n        {\r\n            //MainTag = mainTag.ToString();\r\n            tags.Add(Convert.ToInt32(mainTag));\r\n        }\r\n\r\n        public class Attribute\r\n        {\r\n            public float Value { get; private set; }\r\n            public Attribute SetValue(float f)\r\n            {\r\n                Value = f;\r\n                return this;\r\n            }\r\n            public TagHolder tags = new TagHolder();\r\n        }\r\n\r\n        public Happ AddAttribute(Attribute a)\r\n        {\r\n            attrs.Add(a);\r\n            return this;\r\n        }\r\n\r\n        internal int GetAttribute_Int(int index)\r\n        {\r\n            return (int)attrs[index].Value;\r\n        }\r\n\r\n        internal bool HasTag(int tagsNeeded)\r\n        {\r\n            return tags.Contains(tagsNeeded);\r\n        }\r\n    }\r\n\r\n    public class HappHandler\r\n    {\r\n        public List<int> necessaryTags = new List<int>();\r\n        public Action<Happ> Handle;\r\n\r\n        public HappHandler(object mainTag, Action<Happ> handle)\r\n        {\r\n            this.necessaryTags.Add(Convert.ToInt32(mainTag));\r\n            Handle = handle;\r\n        }\r\n    }\r\n\r\n    public class TagHolder\r\n    {\r\n        public List<object> Tags { get; private set; }\r\n\r\n        public bool HasTag(object t)\r\n        {\r\n            return Tags.Contains(t);\r\n        }\r\n\r\n        internal void Add(object v)\r\n        {\r\n            Tags.Add(v);\r\n        }\r\n\n    \nprivate List<object> __Property__Initializer__Tags=new List<object>();}\r\n\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class InputHolder\r\n    {\r\n        public List<Input> inputs = new List<Input>();\r\n        List<InputTags> tags = new List<InputTags>();\r\n\r\n\r\n        internal void Clear()\r\n        {\r\n            inputs.Clear();\r\n        }\r\n\r\n        internal void Add(Input input, InputTags tag)\r\n        {\r\n            inputs.Add(input);\r\n            tags.Add(tag);\r\n\r\n        }\r\n\r\n        internal bool TagIs(int i2, InputTags tag)\r\n        {\r\n            if (tags.Count <= i2) return false;\r\n            return tags[i2] == tag;\r\n        }\r\n    }\r\n\r\n    public enum InputTags{\r\n        NONE, MOVEFIX, MOVEUNFIX, MISC\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class MoveCreatorProg\r\n    {\r\n        internal List<MoveData> moveDatas = new List<MoveData>();\r\n        internal List<MoveRenderData> moveRenders = new List<MoveRenderData>();\r\n        AreaCreationUtils areaUtils = new AreaCreationUtils();\r\n        \r\n\r\n        public MoveCreatorProg()\r\n        {\r\n            moveDatas.Add(null); //do nothing\r\n            BaseUtils.Vector2D[] directions = new BaseUtils.Vector2D[] {\r\n                \r\n                new BaseUtils.Vector2D(0, 1),\r\n                new BaseUtils.Vector2D(-1, 0),\r\n                new BaseUtils.Vector2D(0, -1),\r\n                new BaseUtils.Vector2D(1, 0), \r\n            };\r\n            string[] moveLabels = new string[] {\r\n                \"Move Up\",\r\n                \"Move Left\",\r\n                \"Move Down\",\r\n                \"Move Right\",\r\n            };\r\n            string[] moveAbrev = new string[] {\r\n                \"^\",\r\n                \"<\",\r\n                \"v\",\r\n                \">\",\r\n            };\r\n            for (int i = 0; i < directions.Length; i++)\r\n            {\r\n                NewMoveData(label:moveLabels[i], condition: new Condition(ConditionType.CanMove, Target.Self, directions[i]), action: new MoveAction(Target.Self, directions[i]), tags: TagArray(MoveDataTags.Movement,  MoveDataTags.HeroInitial));\r\n                NewMoveTextRenderData(name:moveLabels[i], abrev:moveAbrev[i]);\r\n            }\r\n            NewMoveData(\"Gun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.None)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Gun\", \"G\");\r\n\r\n            NewMoveData(\"Firegun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Fire), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Fire)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Firegun\", \"FG\");\r\n\r\n            NewMoveData(\"Icegun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Ice), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Ice)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Icegun\", \"IG\");\r\n\r\n            NewMoveData(\"Thundergun\", ticks: OneTickPerAction(new Animation(Target.ClosestTargetX, BattleMain.Element.Thunder), new DealDamageAction(Target.ClosestTargetX, 1, BattleMain.Element.Thunder)), tags: TagArray(MoveDataTags.Shoot));\r\n            NewMoveTextRenderData(\"Thundergun\", \"TG\");\r\n\r\n            Area area = AreaUser().RowForward(width: 1, XDis: 3);\r\n            NewMoveData(\"Icebomb\", ticks: OneTickPerAction(new Animation(area, BattleMain.Element.Ice), new DealDamageAction(area, 1, BattleMain.Element.Ice)), tags: TagArray(MoveDataTags.Bomb));\r\n            NewMoveTextRenderData(\"Icebomb\", \"IB\");\r\n\r\n            NewMoveData(\"Thunderbomb\", ticks: OneTickPerAction(new Animation(area, BattleMain.Element.Thunder), new DealDamageAction(area, 1, BattleMain.Element.Thunder)), tags: TagArray(MoveDataTags.Bomb));\r\n            NewMoveTextRenderData(\"Thunderbomb\", \"TB\");\r\n\r\n            NewMoveData(\"Summon\", ticks: OneTickPerAction(SummonEntity.Enemy(0, new Vector2D(5,0))), tags: TagArray(MoveDataTags.Summon));\r\n            NewMoveTextRenderData(\"Summon\", \"SU\");\r\n        }\r\n\r\n        internal int GetMoveId(string v)\r\n        {\r\n            return MoveData.FindByLabel(moveDatas, v);\r\n        }\r\n\r\n        private AreaCreationUtils AreaUser()\r\n        {\r\n            areaUtils.target = Target.Self;\r\n            return areaUtils;\r\n        }\r\n\r\n        public class AreaCreationUtils\r\n        {\r\n            public Target target;\r\n            int height = 3;\r\n\r\n            internal Area RowForward(int width, int XDis)\r\n            {\r\n                var ra = new Area(target);\r\n                int offsetY = (int)Math.Floor((float)height / 2f);\r\n                for (int i = 0; i < width; i++)\r\n                {\r\n                    for (int j = 0; j < height; j++)\r\n                    {\r\n                        \r\n                        ra.points.Add(new Vector2D(i+XDis, j-offsetY));\r\n                    }\r\n                }\r\n                return ra;\r\n            }\r\n        }\r\n\r\n\r\n        private void NewMoveTextRenderData(string name, string abrev)\r\n        {\r\n            moveRenders.Add(new MoveRenderData(name, abrev));\r\n        }\r\n\r\n        private void NewMoveData(string label, Tick[] ticks, object[] tags)\r\n        {\r\n            var mv = new MoveData(label);\r\n            mv.units.AddRange(ticks);\r\n            foreach (var item in tags)\r\n            {\r\n                mv.tags.Add(Convert.ToInt32(item));\r\n            }\r\n            \r\n            moveDatas.Add(mv);\r\n        }\r\n\r\n        private void NewMoveData(string label, Condition condition, object action, object[] tags)\r\n        {\r\n            var mv = new MoveData(label);\r\n            Tick tick = new Tick();\r\n            tick.condition = condition;\r\n            tick.thingsToHappen.Add(action);\r\n            mv.units.Add(tick);\r\n            foreach (var item in tags)\r\n            {\r\n                mv.tags.Add(Convert.ToInt32(item));\r\n            }\r\n            moveDatas.Add(mv);\r\n        }\r\n\r\n        private Tick[] OneTickPerAction(params object[] actions)\r\n        {\r\n            Tick[] ticks = new Tick[actions.Length];\r\n            for (int i = 0; i < ticks.Length; i++)\r\n            {\r\n                ticks[i] = new Tick(actions[i]);\r\n            }\r\n            return ticks;\r\n        }\r\n\r\n        private object[] TagArray(params object[] args)\r\n        {\r\n            return args;\r\n        }\r\n    }\r\n\r\n    public class MoveRenderData\r\n    {\r\n        public string Label;\r\n        public string Abrev;\r\n\r\n        public MoveRenderData(string label, string abrev)\r\n        {\r\n            this.Label = label;\r\n            this.Abrev = abrev;\r\n        }\r\n    }\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n\r\n    public class Accessor\r\n    {\r\n        public int Length { get { return SelectedEntities.Count; } }\r\n\r\n        internal Type[] TypesProhibited { get; set; }\r\n\r\n        internal Type[] TypesNecessary;\r\n        internal List<Entity> SelectedEntities = new List<Entity>();\r\n\r\n        public Accessor(params Type[] s)\r\n        {\r\n            TypesNecessary = s;\r\n        }\r\n\r\n        internal bool EntityAdded(Entity e)\r\n        {\r\n            return SelectedEntities.Contains(e);\r\n        }\r\n\r\n        public Entity Get(int i)\r\n        {\r\n            return SelectedEntities[i];\r\n        }\r\n    }\r\n\r\n    public class QuickAccessorOne<T1>\r\n    {\r\n\r\n        public QuickAccessorOne()\r\n        {\r\n            accessor = new Accessor(typeof(T1));\r\n        }\r\n\r\n        internal Accessor accessor;\r\n        public int Count { get { return accessor.Length; } }\r\n        \r\n\r\n        public T1 Comp1(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T1>();\r\n        }\r\n\r\n        public Entity Entity(int i)\r\n        {\r\n            return accessor.SelectedEntities[i];\r\n        }\r\n    }\r\n    public class QuickAccessorTwo<T1, T2> \r\n    {\r\n\r\n        internal Accessor accessor;\r\n        public int Length { get { return accessor.Length; } }\r\n\r\n        public T1 Comp1(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T1>();\r\n        }\r\n\r\n        public Entity Entity(int i)\r\n        {\r\n            return accessor.SelectedEntities[i];\r\n        }\r\n\r\n        public QuickAccessorTwo()\r\n        {\r\n            accessor = new Accessor(typeof(T1), typeof(T2));\r\n        }\r\n\r\n        \r\n\r\n        public T2 Comp2(int i)\r\n        {\r\n            return accessor.SelectedEntities[i].GetComponent<T2>();\r\n        }\r\n\r\n        \r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public class ECSManager\r\n    {\r\n\r\n        private static ECSManager[] managers = new ECSManager[20];\r\n        Dictionary<Type, object[]> comps = new Dictionary<Type, object[]>();\r\n        private int ECSId;\r\n\r\n        private ECSManager() { }\r\n\r\n        public ProcessorAccessor CreateProcessor(Accessor accessor, Action<Accessor> action)\r\n        {\r\n\r\n            return new ProcessorAccessor(action, accessor);\r\n        }\r\n\r\n        public Accessor CreateAccessor(Type[] necessary, Type[] not)\r\n        {\r\n            var acc = new Accessor(necessary);\r\n            acc.TypesProhibited = not;\r\n            AddAccessor(acc);\r\n            return acc;\r\n\r\n        }\r\n\r\n        public QuickAccessorTwo<T1,T2> QuickAccessor2<T1, T2>()\r\n        {\r\n            QuickAccessorTwo<T1, T2> accessor = new QuickAccessorTwo<T1, T2>();\r\n            AddAccessor(accessor.accessor);\r\n            return accessor;\r\n        }\r\n\r\n        public QuickAccessorOne<T1> QuickAccessor1<T1>()\r\n        {\r\n            QuickAccessorOne<T1> accessor = new QuickAccessorOne<T1>();\r\n            AddAccessor(accessor.accessor);\r\n            return accessor;\r\n        }\r\n\r\n        int entityIdMax = -1;\r\n        List<Accessor> accessors = new List<Accessor>();\r\n\r\n        #region static methods\r\n\r\n\r\n        internal static ECSManager GetInstance(Entity e)\r\n        {\r\n            return managers[e.ecs];\r\n        }\r\n\r\n        public static ECSManager Create()\r\n        {\r\n            \r\n            for (int i = 0; i < managers.Length; i++)\r\n            {\r\n                if (managers[i] == null) {\r\n                    managers[i] = new ECSManager();\r\n                    managers[i].ECSId = i;\r\n                    return managers[i];\r\n                }\r\n                    \r\n            }\r\n            return null;\r\n        }\r\n\r\n\r\n        #endregion\r\n\r\n        public Entity CreateEntityWithComponent(object v)\r\n        {\r\nEntity e;\n            CreateEntity(out e);\r\n            AddComponent(e, v);\r\n            return e;\r\n        }\r\n\r\n        public Entity CreateEntityWithComponent(object v, object v2)\r\n        {\r\nEntity e;\n            CreateEntity(out e);\r\n            AddComponent(e, v);\r\n            AddComponent(e, v2);\r\n            return e;\r\n        }\r\n\r\n        public Entity CreateEntity(out Entity e)\r\n        {\r\n            entityIdMax++;\r\n            Entity entity = new Entity(this.ECSId, entityIdMax);\r\n            e = entity;\r\n            return entity;\r\n        }\r\n\r\n        public Entity CreateEntity()\r\n        {\r\n            entityIdMax++;\r\n            Entity entity = new Entity(this.ECSId, entityIdMax);\r\n            return entity;\r\n        }\r\n\r\n\r\n        public ProcessorFlex<T1,T2> QuickProcessorFlex<T1, T2>(Action<QuickAccessorTwo<T1, T2>> p)\r\n        {\r\n            ProcessorFlex<T1, T2> processorFlex = new ProcessorFlex<T1, T2>(p);\r\n            QuickAccessorTwo<T1, T2> accessor = processorFlex.accessor;\r\n            Accessor accessor1 = accessor.accessor;\r\n            AddAccessor(accessor1);\r\n            return processorFlex;\r\n        }\r\n\r\n        private void AddAccessor(Accessor accessor1)\r\n        {\r\n            accessors.Add(accessor1);\r\n            for (int i = 0; i <= entityIdMax; i++)\r\n            {\r\n                UpdateAccessorEntity(accessor1, i);\r\n            }\r\n\r\n        }\r\n\r\n        private void UpdateAccessorEntity(Accessor accessor, int entityId)\r\n        {\r\n            Entity entity = new Entity(ECSId, entityId);\r\n            bool belong = HasAllComps(accessor.TypesNecessary, entityId) && HasNoneOfTheseComps(accessor.TypesProhibited, entityId);\r\n            bool member = accessor.EntityAdded(entity);\r\n\r\n            if (belong != member) {\r\n                if (belong)\r\n                {\r\n                    accessor.SelectedEntities.Add(entity);\r\n                }\r\n                else\r\n                {\r\n                    accessor.SelectedEntities.Remove(entity);\r\n                }\r\n            }\r\n            \r\n\r\n            //if (item.EntityAdded(e))\r\n            //{\r\n            //    continue;\r\n            //}\r\n            //else\r\n            //{\r\n            //    if (HasAllComponents(e, item.TypesNecessary))\r\n            //    {\r\n            //        item.SelectedEntities.Add(e);\r\n            //    }\r\n            //}\r\n\r\n        }\r\n\r\n        \r\n\r\n        internal T AddComponent<T>(Entity e) where T : new()\r\n        {\r\n            T t = new T();\r\n            AddComponent(e, t);\r\n\r\n            return t;\r\n        }\r\n\r\n        public void AddComponent(Entity e, object t)\r\n        {\r\n            Type type = t.GetType();\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                comps.Add(type, new object[300]);\r\n            }\r\n            comps[type][e.id] = t;\r\n            foreach (var item in accessors)\r\n            {\r\n                UpdateAccessorEntity(item, e.id);\r\n                \r\n            }\r\n        }\r\n\r\n        public void RemoveComponent(Entity e, object t)\r\n        {\r\n            Type type = t.GetType();\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                comps.Add(type, new object[300]);\r\n            }\r\n            comps[type][e.id] = null;\r\n            foreach (var item in accessors)\r\n            {\r\n                UpdateAccessorEntity(item, e.id);\r\n\r\n            }\r\n        }\r\n\r\n        private bool HasAllComponents(Entity e, Type[] typesNecessary)\r\n        {\r\n            int id = e.id;\r\n            return HasAllComps(typesNecessary, id);\r\n        }\r\n\r\n        private bool HasAllComps(Type[] typesNecessary, int id)\r\n        {\r\n            foreach (var type in typesNecessary)\r\n            {\r\n                if (!comps.ContainsKey(type))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                if (comps[type][id] == null)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        private bool HasNoneOfTheseComps(Type[] typesProhibited, int id)\r\n        {\r\n            if (typesProhibited == null) return true;\r\n            foreach (var type in typesProhibited)\r\n            {\r\n                if (comps.ContainsKey(type))\r\n                {\r\n                    if (comps[type][id] != null)\r\n                        return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        internal T GetComponent<T>(Entity e)\r\n        {\r\n            Type type = typeof(T);\r\n            if (!comps.ContainsKey(type))\r\n            {\r\n                //comps.Add(type, new object[300]);\r\n                return default(T);\r\n            }\r\n            return (T) comps[type][e.id];\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public struct Entity : IEquatable<Entity>\r\n    {\r\n        readonly internal int ecs;\r\n        readonly internal int id;\r\n\r\n        public Entity(int ecs, int id)\r\n        {\r\n            this.ecs = ecs;\r\n            this.id = id;\r\n        }\r\n\r\n        public bool Equals(Entity other)\r\n        {\r\n            return other.id == this.id && other.ecs == this.ecs;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public static class ExtensionMethods\r\n    {\r\n\r\n        public static void RemoveComponent(this Entity e, object comp)\r\n        {\r\n            ECSManager.GetInstance(e).RemoveComponent(e, comp);\r\n        }\r\n\r\n        public static T AddComponent<T>(this Entity e) where T: new()\r\n        {\r\n            return ECSManager.GetInstance(e).AddComponent<T>(e);\r\n        }\r\n        public static void AddComponent(this Entity e, object comp)\r\n        {\r\n            ECSManager.GetInstance(e).AddComponent(e, comp);\r\n        }\r\n        public static T GetComponent<T>(this Entity e)\r\n        {\r\n            return ECSManager.GetInstance(e).GetComponent<T>(e);\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ECS\r\n{\r\n    public class ProcessorFlex<T1, T2>\r\n    {\r\n        private Action<QuickAccessorTwo<T1, T2>> p;\r\n        internal QuickAccessorTwo<T1, T2> accessor;\r\n\r\n        public ProcessorFlex(Action<QuickAccessorTwo<T1, T2>> p)\r\n        {\r\n            this.p = p;\r\n            accessor = new QuickAccessorTwo<T1, T2>();\r\n        }\r\n\r\n        public void Run()\r\n        {\r\n            p(accessor);\r\n        }\r\n    }\r\n\r\n    public class ProcessorAccessor\r\n    {\r\n        private Action<Accessor> p;\r\n\r\n        Accessor a;\r\n\r\n        public ProcessorAccessor(Action<Accessor> p, Accessor a)\r\n        {\r\n            this.p = p;\r\n            this.a = a;\r\n        }\r\n\r\n        public void Run()\r\n        {\r\n            p(a);\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextWorld\r\n    {\r\n        public Palette palette = DefaultPalettes.C4KiroKaze;\r\n        List<TextEntity> activeAgents = new List<TextEntity>();\r\n        List<TextEntity> freeBoards = new List<TextEntity>();\r\n        List<TextAnimation> animations = new List<TextAnimation>();\r\n        public TextBoard mainBoard;\r\n        int latestId = -1;\r\n\r\n        public T AddAnimation<T>(T ta) where T : TextAnimation\r\n        {\r\n            animations.Add(ta);\r\n            ta.RegisterLists();\r\n            return ta;\r\n        }\r\n\r\n        public void Init(int width, int height)\r\n        {\r\n            mainBoard = new TextBoard(width, height);\r\n\r\n        }\r\n\r\n        public void Draw()\r\n        {\r\n            mainBoard.Reset();\r\n            DrawChildren();\r\n        }\r\n\r\n        public void DrawChildren()\r\n        {\r\n            for (int i = 0; i < activeAgents.Count; i++)\r\n            {\r\n                activeAgents[i].ResetAnimation();\r\n                foreach (var anim in animations)\r\n                {\r\n                    anim.Modify(activeAgents[i]);\r\n                }\r\n                if (activeAgents[i].freeIfIdle && !activeAgents[i].animating)\r\n                {\r\n                    freeBoards.Add(activeAgents[i]);\r\n                    activeAgents.Remove(activeAgents[i]);\r\n                    i--;\r\n                }\r\n                else\r\n                {\r\n                    mainBoard.Insert(activeAgents[i].Animation);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        public TextEntity GetFreeEntity(int w, int h)\r\n        {\r\n            TextEntity te;\r\n            if (freeBoards.Count > 0)\r\n            {\r\n                te = freeBoards[freeBoards.Count - 1];\r\n                freeBoards.RemoveAt(freeBoards.Count - 1);\r\n            }\r\n            else\r\n            {\r\n                te = new TextEntity();\r\n                te.id = ++latestId;\r\n\r\n            }\r\n\r\n            activeAgents.Add(te);\r\n            te.freeIfIdle = false;\r\n            te.SetSize(w, h);\r\n            te.ResetFull();\r\n            return te;\r\n        }\r\n\r\n        public TextEntity GetTempEntity(int w, int h)\r\n        {\r\n            var te = GetFreeEntity(w, h);\r\n            te.freeIfIdle = true;\r\n            return te;\r\n        }\r\n\r\n        public void AdvanceTime(float v)\r\n        {\r\n            foreach (var anim in animations)\r\n            {\r\n                anim.Update(v);\r\n            }\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            foreach (var anim in animations)\r\n            {\r\n                if (!anim.IsDone()) return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public class TextEntity\r\n    {\r\n        public int id;\r\n        public TextBoard Origin;\r\n        public TextBoard Animation;\r\n        public bool freeIfIdle = false;\r\n        internal bool animating;\r\n\r\n        public int Height { get { return Origin.Height; } }\r\n        public int Width { get { return Origin.Width; } }\r\n\r\n        public TextAnimation.BaseData AnimBase(float length)\r\n        {\r\n            return new TextAnimation.BaseData(length, 0, id);\r\n        }\r\n\r\n        internal Vector2D GetPosition()\r\n        {\r\n            return Origin.Position;\r\n        }\r\n\r\n        internal void ResetAnimation()\r\n        {\r\n            animating = false;\r\n            Animation.Set(Origin);\r\n        }\r\n\r\n        internal void ResetFull()\r\n        {\r\n            Origin.ResetInvisible();\r\n        }\r\n\r\n        internal void SetPosition(int x, int y)\r\n        {\r\n            Origin.Position = new Vector2D(x,y);\r\n        }\r\n\r\n        internal void SetPosition(Vector2D vector2D)\r\n        {\r\n            Origin.Position = vector2D;\r\n        }\r\n\r\n        internal void SetSize(int w, int h)\r\n        {\r\n            if (Origin == null)\r\n            {\r\n                Origin = new TextBoard(w, h);\r\n                Animation = new TextBoard(w, h);\r\n            }\r\n            Origin.Resize(w, h);\r\n            Animation.Resize(w, h);\r\n\r\n        }\r\n    }\r\n\r\n    public class DelaysAnimation : TextAnimation\r\n    {\r\n        protected override void RequestRegisterLists()\r\n        {\r\n            \r\n        }\r\n\r\n        internal void Delay(float v)\r\n        {\r\n            Add(new BaseData(v, 0, -1));\r\n        }\r\n    }\r\n\r\n\r\n    public class PositionAnimation : TextAnimation<PositionAnimation.PositionData>\r\n    {\r\n\r\n        public override void Modify(TextEntity entity, PositionData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            TextBoard target = entity.Animation;\r\n            if (mainData.permanent)\r\n                target = entity.Origin;\r\n            target.Position = Vector2D.InterpolateRounded(mainData.startPosition, mainData.endPosition, progress / length);\r\n\r\n        }\r\n\r\n        public struct PositionData\r\n        {\r\n            public readonly bool permanent;\r\n            public readonly Vector2D startPosition, endPosition;\r\n\r\n            public PositionData(Vector2D startPosition, Vector2D endPosition, bool perm = false)\r\n            {\r\n                this.startPosition = startPosition;\r\n                this.endPosition = endPosition;\r\n                this.permanent = perm;\r\n            }\r\n        }\r\n    }\r\n\r\n    public abstract class TextAnimation<T> : TextAnimation\r\n    {\r\n        protected List<T> mainData = new List<T>();\r\n        protected override void RequestRegisterLists()\r\n        {\r\n            base.RegisterList(mainData);\r\n        }\r\n\r\n        public void Add(BaseData baseData, T mainD)\r\n        {\r\n            base.Add(baseData);\r\n            mainData.Add(mainD);\r\n        }\r\n\r\n        public override void Modify(TextEntity entity, int index, float progress, float length)\r\n        {\r\n            Modify(entity, mainData[index], progress, length);\r\n        }\r\n\r\n        public virtual void Modify(TextEntity entity, T mainData, float progress, float length)\r\n        {\r\n        }\r\n\r\n        //internal override void Execute(int index, BaseData baseData)\r\n        //{\r\n        //    this.Execute(mainData[index], baseData);\r\n        //}\r\n\r\n        //public abstract void Execute(T mainData, BaseData baseData);\r\n    }\r\n\r\n    public abstract class TextAnimation\r\n    {\r\n\r\n        public struct BaseData\r\n        {\r\n            public readonly float length;\r\n            public readonly float progress;\r\n            public readonly int target;\r\n\r\n            public BaseData(float length, float progress, int target)\r\n            {\r\n                this.length = length;\r\n                this.progress = progress;\r\n                this.target = target;\r\n            }\r\n        }\r\n        List<float> length = new List<float>();\r\n        List<float> progress = new List<float>();\r\n        List<int> targets = new List<int>();\r\n        List<IList> lists = new List<IList>();\r\n\r\n        public void RegisterLists()\r\n        {\r\n            lists.Add(length);\r\n            lists.Add(progress);\r\n            lists.Add(targets);\r\n            RequestRegisterLists();\r\n        }\r\n\r\n        protected abstract void RequestRegisterLists();\r\n\r\n        public void Update(float delta)\r\n        {\r\n            for (int i = 0; i < progress.Count; i++)\r\n            {\r\n                progress[i] += delta;\r\n                if (progress[i] >= length[i])\r\n                {\r\n                    EndTask(i);\r\n                }\r\n                else\r\n                {\r\n                    //Execute(i, new BaseData(length[i],progress[i], targets[i]));\r\n                }\r\n            }\r\n        }\r\n\r\n        //internal abstract void Execute(int index, BaseData baseData);\r\n\r\n        internal void Add(BaseData bd)\r\n        {\r\n            progress.Add(bd.progress);\r\n            targets.Add(bd.target);\r\n            length.Add(bd.length);\r\n        }\r\n\r\n        public bool IsDone()\r\n        {\r\n            foreach (var item in lists)\r\n            {\r\n                if (item.Count != progress.Count)\r\n                {\r\n                    string s = null;\r\n                    s.Trim();\r\n                }\r\n            }\r\n            return progress.Count == 0;\r\n        }\r\n\r\n        internal void EndTask(int i)\r\n        {\r\n            foreach (var l in lists)\r\n            {\r\n\r\n                l.RemoveAt(i);\r\n            }\r\n        }\r\n\r\n        internal void RegisterList(IList mainData)\r\n        {\r\n            lists.Add(mainData);\r\n        }\r\n\r\n        internal void Modify(TextEntity a)\r\n        {\r\n            for (int i = 0; i < progress.Count; i++)\r\n            {\r\n                if (a.id == targets[i])\r\n                {\r\n                    Modify(a, i, progress[i], length[i]);\r\n                    a.animating = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        public virtual void Modify(TextEntity entity, int index, float progress, float length)\r\n        {\r\n        }\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class Palette\r\n    {\r\n        public string[] HtmlColors;\r\n\r\n\r\n        public Palette(params string[] colors)\r\n        {\r\n            HtmlColors = colors;\r\n        }\r\n    }\r\n\r\n    public class DefaultPalettes\r\n    {\r\n        public static Palette C4KiroKaze = new Palette(\"#332c50\", \"#46878f\", \"#94e344\", \"#e2f3e4\");\r\n        public static Palette C4Reader = new Palette(\"#262626\", \"#8b8cba\", \"#8bba91\", \"#649f8d\");\r\n        public static Palette C4Novel = new Palette(\"#262626\", \"#342d41\", \"#b8b8b8\", \"#8b8cba\");\r\n        public const int C4Black = 0;\r\n        public const int C4BlackNeutral = 1;\r\n        public const int C4WhiteNeutral = 2;\r\n        public const int C4White = 3;\r\n\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.TurnBased.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering.GameScreen\r\n{\r\n    public struct MouseHover\r\n    {\r\n        public Rect rect;\r\n        public int type;\r\n        public int id;\r\n\r\n        public MouseHover(Rect rect, int type, int id)\r\n        {\r\n            this.rect = rect;\r\n            this.type = type;\r\n            this.id = id;\r\n        }\r\n    }\r\n\r\n    public class MouseHoverManager\r\n    {\r\n        public List<MouseHover> mouseHovers = new List<MouseHover>();\r\n        public List<MouseHover> mouseHoversActive = new List<MouseHover>();\r\n        public MouseIO mouseIO;\r\n\r\n        public MouseHoverManager(MouseIO mouseIO)\r\n        {\r\n            this.mouseIO = mouseIO;\r\n        }\r\n\r\n        public void Update()\r\n        {\r\n            mouseHoversActive.Clear();\r\n            foreach (var item in mouseHovers)\r\n            {\r\n                if (item.rect.Contains(mouseIO.pos))\r\n                {\r\n                    mouseHoversActive.Add(item);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextBoard\r\n    {\r\n        public const char NOCHANGECHAR = (char)1;\r\n        public const char INVISIBLECHAR = (char)2;\r\n        public const int NOCHANGECOLOR = -2;\r\n        public const int INVISIBLECOLOR = -1;\r\n        char[,] chars;\r\n        public int[,] TextColor { get; private set; }\r\n        public int[,] BackColor { get; private set; }\r\n        //StringBuilder stringBuilder = new StringBuilder();\r\n        int cursorX = 0;\r\n        int cursorY = 0;\r\n        public Vector2D Position { get; set; }\r\n\r\n\r\n        public TextBoard(int width, int height)\r\n        {\r\n            //SetMaxSize(width, height);\r\n            Resize(width, height);\r\n        }\r\n\r\n        public void DrawOnCenter(string message, int color, int xOff = 0, int yOff = 0, bool alignString = true)\r\n        {\r\n            int x = (Width) / 2;\r\n            if (alignString) x -= message.Length / 2;\r\n            int y = Height / 2;\r\n            Draw(message, x + xOff, y + yOff, color);\r\n        }\r\n\r\n        \r\n\r\n        private void SetMaxSize(int width, int height)\r\n        {\r\n            chars = new char[width, height];\r\n            TextColor = new int[width, height];\r\n            BackColor = new int[width, height];\r\n        }\r\n\r\n        public void Reset()\r\n        {\r\n            DrawRepeated(' ', 0, 0, Width, Height, 0, 0);\r\n        }\r\n\r\n        public void ResetInvisible()\r\n        {\r\n            DrawRepeated(INVISIBLECHAR, 0, 0, Width, Height, INVISIBLECOLOR, INVISIBLECOLOR);\r\n        }\r\n\r\n\r\n        public int Width { get; private set; }\r\n\r\n        public void Insert(TextBoard secondBoard)\r\n        {\r\n            for (int i = 0; i < secondBoard.Width; i++)\r\n            {\r\n                for (int j = 0; j < secondBoard.Height; j++)\r\n                {\r\n                    int x = (int)secondBoard.Position.X + i;\r\n                    int y = (int)secondBoard.Position.Y + j;\r\n                    if (secondBoard.chars[i, j] != INVISIBLECHAR)\r\n                        chars[x, y] = secondBoard.chars[i, j];\r\n                    if (secondBoard.TextColor[i, j] != INVISIBLECOLOR)\r\n                        TextColor[x, y] = secondBoard.TextColor[i, j];\r\n                    if (secondBoard.BackColor[i, j] != INVISIBLECOLOR)\r\n                        BackColor[x, y] = secondBoard.BackColor[i, j];\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n\r\n\r\n\r\n        public int Height { get; private set; }\r\n        public int CursorX\r\n        {\r\n            get { return cursorX; }\r\n            set\r\n            {\r\n                cursorX = value;\r\n            }\r\n        }\r\n        public int CursorY { get { return cursorY; }\r\n            set\r\n            {\r\n                cursorY = value;\r\n            }\r\n        }\r\n\r\n        public void DrawOneDigit(int i, int x, int y, int color = NOCHANGECOLOR, int background = NOCHANGECOLOR)\r\n        {\r\n            char c = (char)(i + '0');\r\n            DrawChar(c, x, y, color, background);\r\n        }\r\n\r\n        public void DrawTwoDigits(int i, int x, int y, int color = NOCHANGECOLOR, int background = NOCHANGECOLOR)\r\n        {\r\n            DrawOneDigit(i/10,x,y,color,background);\r\n            DrawOneDigit(i %10, x+1, y, color, background);\r\n        }\r\n\r\n        internal bool SameAs(TextBoard textBoard, int x, int y)\r\n        {\r\n            return this.chars[x, y] == textBoard.chars[x, y]\r\n                && this.BackColor[x,y] == textBoard.BackColor[x,y]\r\n                && this.TextColor[x,y] == textBoard.TextColor[x,y];\r\n        }\r\n\r\n        internal void Copy(TextBoard textBoard, int x, int y)\r\n        {\r\n            this.chars[x, y] = textBoard.chars[x, y];\r\n            this.TextColor[x, y] = textBoard.TextColor[x, y];\r\n            this.BackColor[x, y] = textBoard.BackColor[x, y];\r\n        }\r\n\r\n        internal void Draw_Cursor_UnicodeLabel(int v, int color)\r\n        {\r\n            int len = DrawUnicodeLabel(v, cursorX, cursorY, color);\r\n            for (int i = 0; i < len; i++)\r\n            {\r\n                AdvanceCursor();\r\n            }\r\n            \r\n        }\r\n\r\n        internal int DrawUnicodeLabel(int unicode, int x, int y, int color)\r\n        {\r\n            if (unicode >= 'a' && unicode <= 'z') {\r\n                DrawChar((char)(unicode + 'A' - 'a'), x, y, color);\r\n                return 1;\r\n            }\r\n            if (unicode >= '0' && unicode <= '9')\r\n            {\r\n                DrawChar((char)(unicode), x, y, color);\r\n                return 1;\r\n            }\r\n            string label = \"\";\r\n            if (unicode == 32)\r\n            {\r\n                label = \"SPACE\";\r\n            }\r\n            Draw(label, x, y, color);\r\n            return label.Length;\r\n        }\r\n\r\n        internal void Set(TextBoard origin)\r\n        {\r\n            this.Position = origin.Position;\r\n            for (int i = 0; i < Width; i++)\r\n            {\r\n                for (int j = 0; j < Height; j++)\r\n                {\r\n                    this.chars[i, j] = origin.chars[i, j];\r\n                    this.BackColor[i, j] = origin.BackColor[i, j];\r\n                    this.TextColor[i, j] = origin.TextColor[i, j];\r\n                }\r\n            }\r\n        }\r\n\r\n        internal void Resize(int w, int h)\r\n        {\r\n            if (chars == null || w > chars.GetLength(0) || h > chars.GetLength(1))\r\n            {\r\n                SetMaxSize(w, h);\r\n            }\r\n            Width = w;\r\n            Height = h;\r\n\r\n        }\r\n\r\n        public char CharAt(int i, int j)\r\n        {\r\n            return chars[i, j];\r\n        }\r\n\r\n        public void SetCursorAt(int x, int y)\r\n        {\r\n            cursorX = x;\r\n            cursorY = y;\r\n        }\r\n\r\n        public void Draw_Cursor(string v)\r\n        {\r\n            foreach (var c in v)\r\n            {\r\n                Draw_Cursor(c);\r\n            }\r\n        }\r\n\r\n        public void Draw_Cursor(string v, int color)\r\n        {\r\n            foreach (var c in v)\r\n            {\r\n                Draw_Cursor(c, color);\r\n            }\r\n        }\r\n\r\n        internal bool CanDraw_Cursor_SmartLineBreak(string v)\r\n        {\r\n            int currentX = cursorX;\r\n            int currentY = cursorY;\r\n\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                bool lineBreak = false;\r\n                bool shouldCheckForLineBreaks = (i == 0 || v[i] == ' ') && i != v.Length - 1;\r\n                if (shouldCheckForLineBreaks)\r\n                {\r\n                    for (int j = 1; j < v.Length - i; j++)\r\n                    {\r\n                        if (j + currentX >= Width) //reach end of the line without ending the word, should line break\r\n                        {\r\n                            if (v[i] == ' ')\r\n                            {\r\n                                i++; //skip through the space if it's a new line\r\n                            }\r\n                            lineBreak = true;\r\n                            break;\r\n                        }\r\n                        if (v[i + j] == ' ') //new word begins so no need to line break\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lineBreak)\r\n                {\r\n                    currentY++;\r\n                    currentX = 0;\r\n                }\r\n                currentX++;\r\n                if (currentX >= Width)\r\n                {\r\n                    currentY++;\r\n                    currentX = 0;\r\n                }\r\n                if (currentX >= Width || currentY >= Height) return false;\r\n                \r\n                \r\n            }\r\n            return true;\r\n        }\r\n\r\n        public DrawCursorResult Draw_Cursor_SmartLineBreak(string v, int color)\r\n        {\r\n            int offStart = 0;\r\n            int offEnd = v.Length - 1;\r\n            return Draw_Cursor_SmartLineBreak(v, color, offStart, offEnd);\r\n        }\r\n\r\n        public DrawCursorResult Draw_Cursor_SmartLineBreak(string v, int color, int offStart, int offEnd)\r\n        {\r\n            \r\n            Vector2D start = new Vector2D(CursorX, CursorY);\r\n            int endIndex = offEnd + 1;\r\n            for (int i = offStart; i < endIndex; i++)\r\n            {\r\n                int originX = cursorX;\r\n                bool lineBreak = false;\r\n                bool shouldCheckForLineBreaks = (i == 0 || v[i] == ' ') && i != endIndex - 1;\r\n                if (shouldCheckForLineBreaks)\r\n                {\r\n                    for (int j = 1; j < endIndex - i; j++)\r\n                    {\r\n                        if (j + originX >= Width) //reach end of the line without ending the word, should line break\r\n                        {\r\n                            if (v[i] == ' ')\r\n                            {\r\n                                i++; //skip through the space if it's a new line\r\n                            }\r\n                            lineBreak = true;\r\n                            break;\r\n                        }\r\n                        if (v[i + j] == ' ') //new word begins so no need to line break\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lineBreak)\r\n                {\r\n                    CursorNewLine(0);\r\n                }\r\n                Draw_Cursor(v[i], color);\r\n            }\r\n            Vector2D end = new Vector2D(CursorX, CursorY);\r\n            return new DrawCursorResult(PositionToIndex(start), PositionToIndex(end), start, end);\r\n        }\r\n\r\n        private int PositionToIndex(Vector2D start)\r\n        {\r\n            return (int)(start.X + start.Y * Width);\r\n        }\r\n\r\n        public void DrawOneDigit_Cursor(int i)\r\n        {\r\n            Draw_Cursor((char)(i + '0'));\r\n        }\r\n\r\n        public void Draw_Cursor(char c)\r\n        {\r\n\r\n            DrawChar(c, cursorX, cursorY);\r\n            AdvanceCursor();\r\n        }\r\n\r\n        public void Draw_Cursor(char c, int color)\r\n        {\r\n\r\n            DrawChar(c, cursorX, cursorY, color);\r\n            AdvanceCursor();\r\n        }\r\n\r\n        public void AdvanceCursor()\r\n        {\r\n            cursorX++;\r\n            if (cursorX >= Width)\r\n            {\r\n                cursorX = 0;\r\n                cursorY++;\r\n            }\r\n        }\r\n\r\n        public void CursorNewLine(int x)\r\n        {\r\n            cursorY++;\r\n            cursorX = x;\r\n        }\r\n\r\n        public void DrawChar(char v, int x, int y)\r\n        {\r\n            \r\n            if (v != NOCHANGECHAR) {\r\n                chars[x, y] = v;\r\n\r\n            }\r\n                \r\n        }\r\n\r\n        public void DrawChar(char v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n\r\n            DrawChar(v, x, y);\r\n            SetColor(color, x, y);\r\n            SetBackColor(backColor, x, y);\r\n        }\r\n\r\n        internal void SetAll(char text, int textColor = NOCHANGECOLOR, int backColor= NOCHANGECOLOR)\r\n        {\r\n            DrawRepeated(text, 0, 0, Width, Height, textColor, backColor);\r\n        }\r\n\r\n        public void DrawWithGrid(string text, int x, int y, int gridColor, int textColor)\r\n        {\r\n            int width = text.Length;\r\n            DrawGrid(x, y, width + 2, 3, gridColor);\r\n            Draw(text, x + 1, y + 1, textColor);\r\n        }\r\n\r\n        public void Draw(string v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                int x2 = x + i;\r\n                int y2 = y;\r\n                if(x2 >= Width)\r\n                {\r\n                    x2 -= Width;\r\n                    y2++;\r\n                }\r\n                DrawChar(v[i], x2, y2, color, backColor);\r\n            }\r\n        }\r\n\r\n        public void DrawWithLinebreaks(string v, int x, int y, int newlineX, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            int linebreaks = 0;\r\n            int xOffsetnewlines = 0;\r\n            for (int i = 0; i < v.Length; i++)\r\n            {\r\n                int x2 = x + i+ xOffsetnewlines;\r\n                int y2 = y;\r\n                \r\n                if (x2 >= Width)\r\n                {\r\n                    x2 -= Width+newlineX;\r\n                    y2++;\r\n                }\r\n                DrawChar(v[i], x2, y2+linebreaks, color, backColor);\r\n                if (v[i] == '\\n')\r\n                {\r\n                    linebreaks++;\r\n                    xOffsetnewlines += newlineX - x2-1;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public void Draw(IEnumerable<char> v, int x, int y, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = 0; i < System.Linq.Enumerable.Count<char>(v); i++)\r\n            {\r\n                DrawChar(System.Linq.Enumerable.ElementAt<char>(v,i), x + i, y, color, backColor);\r\n            }\r\n        }\r\n\r\n        public void DrawGrid(int x, int y, int width, int height, int color)\r\n        {\r\n\r\n            DrawRepeated((char)179, x, y, 1, height, color);\r\n            DrawRepeated((char)179, x + width - 1, y, 1, height, color);\r\n            DrawRepeated((char)196, x, y, width, 1, color);\r\n            DrawRepeated((char)196, x, y + height - 1, width, 1, color);\r\n\r\n            DrawRepeated((char)218, x, y, 1, 1, color);\r\n            DrawRepeated((char)192, x,              y+height-1, 1, 1, color);\r\n            DrawRepeated((char)217, x+width-1,      y+ height - 1, 1, 1, color);\r\n            DrawRepeated((char)191, x + width - 1,  y, 1, 1, color);\r\n        }\r\n\r\n        public void DrawRepeated(char c, int x, int y, int width, int height, int color, int backColor = NOCHANGECOLOR)\r\n        {\r\n            for (int i = x; i < x + width; i++)\r\n            {\r\n                for (int j = y; j < y + height; j++)\r\n                {\r\n                    DrawChar(c, i, j, color);\r\n\r\n                    SetBackColor(backColor, i, j);\r\n                }\r\n            }\r\n        }\r\n\r\n        public void SetColor(int color, int x, int y)\r\n        {\r\n            if (color != NOCHANGECOLOR)\r\n                TextColor[x, y] = color;\r\n        }\r\n\r\n        public void SetBackColor(int color, int x, int y)\r\n        {\r\n            if (color != NOCHANGECOLOR)\r\n            {\r\n                BackColor[x, y] = color;\r\n            }\r\n        }\r\n\r\n        public void Draw(string v, int x2, int y2, object input)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public void DrawGrid(int v1, int v2, int v3, int v4, object board)\r\n        {\r\n            throw new NotImplementedException();\r\n        }\r\n\r\n        public struct DrawCursorResult\r\n        {\r\n            public int StartIndex;\r\n            public int EndIndex;\r\n            public Vector2D StartPosition;\r\n            public Vector2D EndPosition;\r\n\r\n            public DrawCursorResult(int startIndex, int endIndex, Vector2D startPosition, Vector2D endPosition)\r\n            {\r\n                StartIndex = startIndex;\r\n                EndIndex = endIndex;\r\n                StartPosition = startPosition;\r\n                EndPosition = endPosition;\r\n            }\r\n        }\r\n    }\r\n}\r\n","using Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TextScreenN : ITextScreen, IMouseInput, IKeyboardInput\r\n    {\r\n        public TextWorld TextWorld;\r\n\r\n        public virtual void Update(float f) { }\r\n\r\n        public TextScreenN()\r\n        {\r\n        }\r\n\r\n        public TextScreenN(TextWorld textWorld)\r\n        {\r\n            TextWorld = textWorld;\r\n        }\r\n\r\n        public  void Init(int w, int h)\r\n        {\r\n            TextWorld = new TextWorld();\r\n            TextWorld.Init(w, h);\r\n\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return TextWorld.mainBoard;\r\n        }\r\n\r\n\r\n\r\n        public void MouseEvent(MouseEvents mouseDown, int v1, int v2)\r\n        {\r\n            \r\n        }\r\n\r\n        public int InputUnicode { set; get; }\r\n        int InputAsNumber\r\n        {\r\n            get\r\n            {\r\n                return InputUnicode - 48;\r\n            }\r\n        }\r\n    }\r\n\r\n    public interface ITextScreen\r\n    {\r\n        \r\n        TextBoard GetBoard();\r\n        \r\n        void Update(float f);\r\n        \r\n    }\r\n\r\n    public interface IMouseInput\r\n    {\r\n        void MouseEvent(MouseEvents eventType, int v1, int v2);\r\n    }\r\n\r\n    public interface IKeyboardInput\r\n    {\r\n        int InputUnicode { set; }\r\n    }\r\n\r\n    public enum MouseEvents\r\n    { \r\n        MouseDown,\r\n        None\r\n    }\r\n\r\n    public class TextScreenHolder\r\n    {\r\n        public ITextScreen Screen { get; set; }\r\n        public IMouseInput Mouse { get; set; }\r\n        public IKeyboardInput Key { get; set; }\r\n\r\n        internal void SetAll(object dns)\r\n        {\r\n            Screen = dns as ITextScreen;\r\n            Mouse = dns as IMouseInput;\r\n            Key = dns as IKeyboardInput;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class HappHandling\r\n    {\r\n        BattleRender battleRender;\r\n        ECSManager ecs;\r\n        public Action Handle;\r\n        List<HappHandler> handlers = new List<HappHandler>();\r\n        private QuickAccessorTwo<HappTags, TimeStampSnap> happs;\r\n        private float highestHandled;\r\n\r\n        public HappHandling(BattleRender battleRender, BattleSetup battleSetup)\r\n        {\r\n            this.battleRender = battleRender;\r\n            var world = battleRender.textWorld;\r\n            var posAnim = world.AddAnimation<global::Pidroh.TextRendering.PositionAnimation>(new PositionAnimation());\r\n            var blinkAnim = world.AddAnimation<global::Pidroh.TextRendering.BlinkAnim>(new BlinkAnim());\r\n            this.ecs = battleSetup.ecs;\r\n            var battleMain = battleSetup.battleMain;\r\n            var time = battleSetup.timeStamp;\r\n            battleRender.HappHandling = this;\r\n            happs = ecs.QuickAccessor2<HappTags, TimeStampSnap>();\r\n            highestHandled = -1;\r\n\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var damage = e.GetComponent<HappDamageData>();\r\n                string message;\r\n                if (damage.elementalBlock)\r\n                {\r\n                    message = damage.damageE + \" absorbs \" + damage.targetE+\"\\n\";\r\n                    message += battleRender.GetEntityName(damage.target)+\" is unafectted.\";\r\n                }\r\n                else\r\n                {\r\n                    \r\n                    //message = battleRender.GetEntityName(damage.target) + \" gets hit!\";\r\n                    if (damage.superEffective)\r\n                    {\r\n                        message = damage.damageE + \" ravages \" + damage.targetE + \"\\n\";\r\n                        message += battleRender.GetEntityName(damage.target)+\" takes a heavy hit!\";\r\n                        {\r\n                            var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[damage.target].pos);\r\n                            var blast = battleRender.textWorld.GetTempEntity(5, 5);\r\n                            blast.SetPosition(pos + new Vector2D(-2, -2));\r\n\r\n                            blast.Origin.DrawRepeated(' ', 1, 1, 3, 3, TextBoard.INVISIBLECOLOR, BattleRender.Colors.Enemy);\r\n                            blinkAnim.Add(blast.AnimBase(0.2f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(damage.damageE), 0.05f));\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //message = battleRender.GetEntityName(damage.target) + \" gets hurt\";\r\n                        message = null;\r\n                    }\r\n                }\r\n                \r\n\r\n                if(message != null)\r\n                    battleRender.ShowMessage(message);\r\n\r\n                var defender = battleRender.battlerRenders[damage.target];\r\n\r\n                //var fe = battleRender.textWorld.GetTempEntity(defender.Width, defender.Height);\r\n                if (!damage.superEffective && !damage.elementalBlock && battleMain.entities[damage.target].Alive) {\r\n                    var fe = battleRender.textWorld.GetTempEntity(3, 3);\r\n                    var backColor = BattleRender.ElementToProjColor(damage.damageE);\r\n                    backColor = 0;\r\n                    int xColor = BattleRender.ElementToProjColor(damage.damageE);\r\n                    const char damageChar = 'X';\r\n                    fe.Origin.DrawChar(damageChar, 1, 0, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 1, 1, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 1, 2, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 0, 1, xColor, backColor);\r\n                    fe.Origin.DrawChar(damageChar, 2, 1, xColor, backColor);\r\n                    //fe.Origin.DrawChar(TextBoard.NOCHANGECHAR, 0, 0);\r\n                    fe.Origin.Position = defender.GetPosition() + new Vector2D(-1, -1);\r\n\r\n                    blinkAnim.Add(fe.AnimBase(0.35f), BlinkAnim.BlinkData.Char('Z', 0.05f));\r\n                    //blinkAnim.Add(fe.AnimBase(0.35f), BlinkAnim.BlinkData.BackColor(BattleRender.Colors.Hero, 0.05f));\r\n                }\r\n                \r\n                //Console.Write(\"CHANGE ELE\");\r\n\r\n            }, MiscHappTags.Damage));\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n\r\n                battleRender.ShowBattleMessage(battleRender.GetEntityName(hmd.user) + \" is emitting \" + hmd.element);\r\n                //Console.Write(\"CHANGE ELE\");\r\n\r\n            }, MiscHappTags.ChangeElement));\r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                //var defender = battleRender.battlerRenders[hmd.target];\r\n                var pos = battleRender.BattleEntityToScreenPosition(battleMain.entities[hmd.user].pos);\r\n                var blast = battleRender.textWorld.GetTempEntity(3,3);\r\n                blast.SetPosition(pos+ new Vector2D(-1,-1));\r\n                \r\n                blast.Origin.DrawRepeated(' ',1,1, 1,1, TextBoard.INVISIBLECOLOR, BattleRender.Colors.Enemy);\r\n                blinkAnim.Add(blast.AnimBase(0.2f), BlinkAnim.BlinkData.BackColor(BattleRender.Colors.Hero, 0.05f));\r\n                //Console.Write(\"CHANGE ELE\");\r\n\r\n            }, MiscHappTags.Death));\r\n            Action<Entity> moveMiss = (e) =>\r\n            {\r\n                //Console.WriteLine(\"HANDLE!3\");\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                var hmf = e.GetComponent<HappMovementFail>();\r\n                int eId = hmd.user;\r\n                var mover = battleMain.entities[eId];\r\n\r\n                var pos = mover.PositionV2D;\r\n                var pos2 = hmf.moveTo;\r\n                var posF = (pos + pos2) / 2;\r\n\r\n                var fe = battleRender.battlerRenders[eId];\r\n                //Console.WriteLine(\"Move fail\");\r\n                posAnim.Add(fe.AnimBase(0.2f), new PositionAnimation.PositionData(\r\n                    battleRender.BattleEntityToScreenPosition(mover.PositionV2D),\r\n                    battleRender.BattleEntityToScreenPosition(posF)));\r\n            };\r\n            handlers.Add(new HappHandler(moveMiss, MoveDataTags.Movement));\r\n            \r\n            handlers.Add(new HappHandler((e) =>\r\n            {\r\n                var ha = e.GetComponent<HappArea>();\r\n                var hmd = e.GetComponent<HappMoveData>();\r\n                int eId = hmd.user;\r\n                var mover = battleMain.entities[eId];\r\n                //var userRender = battleRender.battlerEntities[eId];\r\n                var area = ha.area;\r\n                var points = area.points;\r\n\r\n                var useEffect = world.GetTempEntity(1, 1);\r\n                useEffect.SetPosition(battleRender.BattleEntityToScreenPosition(mover.pos));\r\n            blinkAnim.Add(useEffect.AnimBase(0.5f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(hmd.element), 0.15f));\r\n                foreach (var item in points)\r\n                {\r\n                    var entity = world.GetTempEntity(1, 1);\r\n                    var finalPos = item * new Vector2D(ha.mirroringX, 1) + ha.offset;\r\n                    if (finalPos.X < 0) continue;\r\n                    if (finalPos.Y < 0) continue;\r\n                    if (finalPos.X > 5) continue;\r\n                    if (finalPos.Y > 2) continue;\r\n                    //Console.Write(finalPos.XInt);\r\n                    //Console.Write(finalPos.YInt);\r\n                    var pos = battleRender.BattleEntityToScreenPosition(finalPos);\r\n                    entity.SetPosition(pos.XInt, pos.YInt);\r\n                    blinkAnim.Add(entity.AnimBase(0.5f), BlinkAnim.BlinkData.BackColor(BattleRender.ElementToProjColor(hmd.element), 0.15f));\r\n                }\r\n            }, MoveDataTags.Bomb));\r\n            Handle = () =>\r\n            {\r\n                //Console.WriteLine(\"HANDLE!\");\r\n                float newHighestHandled = highestHandled;\r\n                for (int i = 0; i < happs.Length; i++)\r\n                {\r\n                    //Console.Write(\"ADV\"+battleRender.CanAdvanceGraphics());\r\n                    if (!battleRender.CanAdvanceGraphics()) break;\r\n                    var tags = happs.Comp1(i);\r\n                    //if (happs.Comp2(i).TimeSnap > highestHandled)\r\n                    if (i > highestHandled)\r\n                    {\r\n                        //newHighestHandled = happs.Comp2(i).TimeSnap;\r\n                        newHighestHandled = i;\r\n                        //Console.WriteLine(\"HANDLE!\");\r\n                        foreach (var han in handlers)\r\n                        {\r\n                            //Console.WriteLine(\"HANDLE!x\");\r\n                            if (han.CanHandle(tags.tags))\r\n                            {\r\n                                //Console.WriteLine(happs.Comp2(i).TimeSnap + \" - \" + time.CurrentSnap);\r\n                                //Console.WriteLine(\"HANDLE!2\");\r\n                                han.Handler(happs.Entity(i));\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        //Console.WriteLine(happs.Comp2(i).TimeSnap+\" - \"+ time.CurrentSnap);\r\n                    }\r\n                }\r\n                highestHandled = newHighestHandled;\r\n            };\r\n            \r\n        }\r\n\r\n        public class HappHandler\r\n        {\r\n            internal List<int> necessaryTags = new List<int>();\r\n            internal Action<Entity> Handler;\r\n\r\n            public HappHandler(Action<Entity> handler, params object[] tags)\r\n            {\r\n                foreach (var t in tags)\r\n                {\r\n                    necessaryTags.Add(Convert.ToInt32(t));\r\n                }\r\n                this.Handler = handler;\r\n            }\r\n\r\n            internal bool CanHandle(List<int> tags)\r\n            {\r\n                foreach (var item in necessaryTags)\r\n                {\r\n                    if (!tags.Contains(item))\r\n                    {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        internal bool IsDone()\r\n        {\r\n            return highestHandled >= happs.Length - 1;\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.ConsoleApp.Turnbased;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class InputHandling\r\n    {\r\n        int[] unfixedCommandKeys = {'1', '2','3','4' };\r\n        Dictionary<Input, int> fixedMoveButtons = global::Bridge.Script.CallFor(new Dictionary<Input, int>(),(_o1)=>{_o1.Add(new Input(InputType.Move, BattleMain.MoveType.NormalShot),'g');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Fire),'f');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Ice),'i');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.IceBomb),'b');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.ThunderBomb),'y');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.Thunder),'t');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveRight),'d');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveUp),'w');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveDown),'s');_o1.Add(new Input(InputType.Move, BattleMain.MoveType.MoveLeft),'a');_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Done),Unicode.Space);_o1.Add(new Input(InputType.MiscBattle, MiscBattleInput.Redo),'r');return _o1;});\r\n\r\n        public int GetFixedMoveUnicode(Input input)\r\n        {\r\n            int value;\r\n            if (fixedMoveButtons.TryGetValue(input, out value))\r\n            {\r\n\r\n            }\r\n            else\r\n            {\r\n                value = -1;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        public Input PickingHand(int unicodeKey, InputHolder input)\r\n        {\r\n            //Console.WriteLine(\" input + \"+(char)unicodeKey);\r\n            foreach (var item in fixedMoveButtons)\r\n            {\r\n                if (item.Value == unicodeKey)\r\n                {\r\n                    return item.Key;\r\n                }\r\n            }\r\n            for (int i = 0; i < unfixedCommandKeys.Length; i++)\r\n            {\r\n                if (unfixedCommandKeys[i] == unicodeKey)\r\n                {\r\n                    int unfixedCommandPos = 0;\r\n                    for (int i2 = 0; i2 < input.inputs.Count; i2++)\r\n                    {\r\n                        if (input.TagIs(i2, InputTags.MOVEUNFIX))\r\n                        {\r\n                            if (unfixedCommandPos == i)\r\n                            {\r\n                                return input.inputs[i2];\r\n                            }\r\n                            unfixedCommandPos++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return default(Input);\r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class MouseHoverText\r\n    {\r\n        public string[][] texts = new string[2][];\r\n        public MouseHoverManager hoverManager;\r\n        public TextEntity entity;\r\n\r\n        public MouseHoverText(MouseHoverManager hoverManager, TextEntity entity)\r\n        {\r\n            this.hoverManager = hoverManager;\r\n            this.entity = entity;\r\n            //texts[0] = new string[Enum.GetValues(typeof(BattleMain.MoveType)).Length];\r\n            texts[0] = new string[] {\r\n                \"\",\r\n                \"Move up\",\r\n                \"Move left\",\r\n                \"Move down\",\r\n                \"Move right\",\r\n                \"Shoots forward\",\r\n                \"Shoots fire forward\",\r\n                \"Shoots ice forward\",\r\n                \"Shoots thunder forward\",\r\n                \"Throws ice bomb three squares forward\",\r\n                \"Throws thunder bomb three squares forward\",\r\n                \"Summons another enemy\",\r\n                \"\",\r\n            };\r\n\r\n        }\r\n\r\n\r\n        public void Update()\r\n        {\r\n            entity.ResetFull();\r\n            hoverManager.Update();\r\n            var active = hoverManager.mouseHoversActive;\r\n            if (active.Count > 0)\r\n            {\r\n                int id = active[0].id;\r\n                if(id >= 0)\r\n                {\r\n                    string text = texts[active[0].type][id];\r\n                    entity.Origin.Draw(text, 0, 0, 2);\r\n                    int x = active[0].rect.X + 1 - text.Length/2;\r\n                    entity.SetPosition(x, active[0].rect.Y + 2);\r\n                }\r\n\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n","using Pidroh.BaseUtils;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing Pidroh.TurnBased.TextRendering;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class BattleRender : ITextScreen_\r\n    {\r\n        private BattleMain turnBaseTry;\r\n        private readonly StageData stageData;\r\n        private PositionAnimation posAnim;\r\n        private CharByCharAnimation charByCharAnim;\r\n        private DelaysAnimation delayAnim;\r\n        public TextWorld textWorld;\r\n\r\n        public TextBoard TextBoard { get; set; }\r\n        int input;\r\n        public int Input\r\n        {\r\n            get { return input; }\r\n            set\r\n            {\r\n                input = value; //Console.WriteLine(value);\r\n            }\r\n        }\r\n\r\n        public HappHandling HappHandling { get; internal set; }\r\n        public int InputUnicode { set; get; }\r\n        public MouseIO Mouse { set; get; }\r\n        public MouseHoverManager mouseHover;\r\n\r\n        //public List<DelayedActions> tasks = new List<DelayedActions>();\r\n        Dictionary<object, string> moveChars;\r\n        Dictionary<object, string> moveDescriptions = new Dictionary<object, string>();\r\n        Dictionary<MiscBattleInput, string> miscDescriptions = global::Bridge.Script.CallFor(new Dictionary<MiscBattleInput, string>(),(_o1)=>{_o1.Add(MiscBattleInput.Done,\"DONE\");_o1.Add(MiscBattleInput.Redo,\"REDO\");return _o1;});\r\n        private Dictionary<Input, string> moveButtons;\r\n\r\n        private bool debugOn = true;\r\n        private int gridScale;\r\n        private int gridOffsetx;\r\n        private int gridOffsety;\r\n        internal List<TextEntity> battlerRenders;\r\n\r\n        char[][] entitiesChars;\r\n        private bool MessageDoNotHide;\r\n        string message = null;\r\n        private bool waitingForMessageInput;\r\n        private Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase lastPhase;\r\n        private TextEntity messageEnt;\r\n\r\n        public InputHandling inputH = new InputHandling();\r\n\r\n        public BattleRender(BattleMain battleLogic, StageData stageData)\r\n        {\r\n\r\n            string[] entityTexts = { \"@\", \"&\", \"%\", \"$\", \"O\", \"X\", \"J\", \"Y\",\"Z\" };\r\n            entitiesChars = new char[entityTexts.Length][];\r\n            for (int i = 0; i < entityTexts.Length; i++)\r\n            {\r\n                entitiesChars[i] = entityTexts[i].ToCharArray();\r\n            }\r\n\r\n            turnBaseTry = battleLogic;\r\n            this.stageData = stageData;\r\n            textWorld = new TextWorld();\r\n            posAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.PositionAnimation>(new PositionAnimation());\r\n            charByCharAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.CharByCharAnimation>(new CharByCharAnimation());\r\n            delayAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.DelaysAnimation>(new DelaysAnimation());\r\n            textWorld.Init(70, 46);\r\n            TextBoard = textWorld.mainBoard;\r\n            //TextBoard = new TextBoard(70, 25);\r\n\r\n            //var posAnim = textWorld.AddAnimation(new PositionAnimation());\r\n            var blinkAnim = textWorld.AddAnimation<global::Pidroh.TextRendering.BlinkAnim>(new BlinkAnim());\r\n\r\n            battlerRenders = new List<TextEntity>();\r\n            UpdateBattleRenderCount();\r\n\r\n            messageEnt = textWorld.GetFreeEntity(40, 4);\r\n\r\n            turnBaseTry.happManager.AddHandler(new Happs.HappHandler(Pidroh.ConsoleApp.Turnbased.BattleMain.HappTag.AttackHit, (h) =>\r\n            {\r\n                var attacker = turnBaseTry.entities[h.GetAttribute_Int(1)];\r\n                int defenderEID = h.GetAttribute_Int(0);\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity defender = null;\r\n                if (defenderEID >= 0)\r\n                    defender = turnBaseTry.entities[defenderEID];\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = (Pidroh.ConsoleApp.Turnbased.BattleMain.Element)h.GetAttribute_Int(2);\r\n                TextEntity fe = GetProjTextEntity(element);\r\n\r\n                if (defender != null)\r\n                {\r\n                    var pos = attacker.PositionV2D;\r\n                    var pos2 = defender.PositionV2D;\r\n                    var xDis = Math.Abs(pos.X - pos2.X);\r\n                    float time = (float)xDis * 0.1f;\r\n\r\n                    posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                        BattleEntityToScreenPosition(attacker.PositionV2D),\r\n                        BattleEntityToScreenPosition(defender.PositionV2D)));\r\n                }\r\n                else\r\n                {\r\n                    var pos = attacker.PositionV2D;\r\n                    var pos2 = pos;\r\n                    if (attacker.Type == BattleMain.EntityType.enemy)\r\n                        pos2.X = -1;\r\n                    else\r\n                        pos2.X = 6;\r\n                    var xDis = Math.Abs(pos.X - pos2.X);\r\n                    float time = (float)xDis * 0.1f;\r\n                    posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                        BattleEntityToScreenPosition(pos),\r\n                        BattleEntityToScreenPosition(pos2)));\r\n                }\r\n\r\n\r\n\r\n\r\n            }));\r\n\r\n            //turnBaseTry.happManager.AddHandler(new Happs.HappHandler(BattleMain.HappTag.DamageTaken, (h) =>\r\n            //{\r\n            //    var defender = turnBaseTry.entities[h.GetAttribute_Int(0)];\r\n            //    var fe = textWorld.GetTempEntity(1, 1);\r\n            //    fe.Origin.DrawChar(TextBoard.NOCHANGECHAR, 0, 0);\r\n            //    fe.Origin.Position = BattleEntityToScreenPosition(defender.PositionV2D);\r\n            //    blinkAnim.Add(fe.AnimBase(0.5f), BlinkAnim.BlinkData.Char(' ', 0.1f));\r\n            //    //ShowMessage(\"Got damaged\");\r\n            //}));\r\n\r\n            turnBaseTry.happManager.AddHandler(new Happs.HappHandler(BattleMain.HappTag.AttackMiss, (h) =>\r\n            {\r\n\r\n                var attacker = turnBaseTry.entities[h.GetAttribute_Int(0)];\r\n                Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = (Pidroh.ConsoleApp.Turnbased.BattleMain.Element)h.GetAttribute_Int(1);\r\n                TextEntity fe = GetProjTextEntity(element);\r\n                var pos = attacker.PositionV2D;\r\n                var pos2 = pos;\r\n                if (attacker.Type == BattleMain.EntityType.enemy)\r\n                    pos2.X = -1;\r\n                else\r\n                    pos2.X = 6;\r\n                var xDis = Math.Abs(pos.X - pos2.X);\r\n                float time = (float)xDis * 0.1f;\r\n                posAnim.Add(fe.AnimBase(time), new PositionAnimation.PositionData(\r\n                    BattleEntityToScreenPosition(pos),\r\n                    BattleEntityToScreenPosition(pos2)));\r\n            }));\r\n\r\n\r\n            moveChars = global::Bridge.Script.CallFor(new Dictionary<object, string>(),(_o2)=>{_o2.Add(BattleMain.MoveType.Fire,\"F\");_o2.Add(BattleMain.MoveType.Ice,\"I\");_o2.Add(BattleMain.MoveType.Thunder,\"T\");_o2.Add(BattleMain.MoveType.NormalShot,\"G\");_o2.Add(BattleMain.MoveType.MoveRight,Unicode.Rightarrow2+\"\");_o2.Add(BattleMain.MoveType.MoveUp,Unicode.Uparrow2+\"\");_o2.Add(BattleMain.MoveType.MoveDown,Unicode.Downarrow2+\"\");_o2.Add(BattleMain.MoveType.MoveLeft,Unicode.Leftarrow2+\"\");_o2.Add(BattleMain.MoveType.IceBomb,\"IB\");_o2.Add(BattleMain.MoveType.ThunderBomb,\"TB\");_o2.Add(BattleMain.MoveType.SummonEntity,\"SU\");_o2.Add(BattleMain.MoveType.DoNothing,\" \");return _o2;});\r\n\r\n            moveDescriptions = global::Bridge.Script.CallFor(new Dictionary<object, string>(),(_o3)=>{_o3.Add(BattleMain.MoveType.Ice,\"Ice Shot\");_o3.Add(BattleMain.MoveType.Fire,\"Fire Shot\");_o3.Add(BattleMain.MoveType.Thunder,\"Thunder Shot\");_o3.Add(BattleMain.MoveType.IceBomb,\"Ice Bomb\");_o3.Add(BattleMain.MoveType.NormalShot,\"Gun\");_o3.Add(BattleMain.MoveType.MoveRight,Unicode.Rightarrow2+\"\");_o3.Add(BattleMain.MoveType.MoveUp,Unicode.Uparrow2+\"\");_o3.Add(BattleMain.MoveType.MoveDown,Unicode.Downarrow2+\"\");_o3.Add(BattleMain.MoveType.MoveLeft,Unicode.Leftarrow2+\"\");_o3.Add(BattleMain.MoveType.ThunderBomb,\"Thunder Bomb\");_o3.Add(BattleMain.MoveType.SummonEntity,\"Summon\");return _o3;});\r\n\r\n\r\n\r\n\r\n            //Console.ReadLine();\r\n        }\r\n\r\n        private void UpdateBattleRenderCount()\r\n        {\r\n            while (battlerRenders.Count < this.turnBaseTry.entities.Count)\r\n            {\r\n                battlerRenders.Add(textWorld.GetFreeEntity(2, 2));\r\n            }\r\n        }\r\n\r\n        internal string GetEntityName(int user)\r\n        {\r\n            Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity gameEntity = turnBaseTry.entities[user];\r\n            var chars = GetChar(gameEntity);\r\n            return new string(chars) + (gameEntity.graphicRepeatedIndex + 1);\r\n        }\r\n\r\n        private TextEntity GetProjTextEntity(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            var fe = textWorld.GetTempEntity(1, 1);\r\n            fe.Origin.DrawChar(TextBoard.INVISIBLECHAR, 0, 0);\r\n            int elementColor = ElementToProjColor(element);\r\n            fe.Origin.SetBackColor(elementColor, 0, 0);\r\n            return fe;\r\n        }\r\n\r\n        public void Draw(float delta)\r\n        {\r\n\r\n            InputKey input = (InputKey)Input;\r\n            if (input != InputKey.NONE && waitingForMessageInput)\r\n            {\r\n                waitingForMessageInput = false;\r\n                message = null;\r\n            }\r\n            //if (input != InputKey.NONE) Console.WriteLine(input);\r\n            //int inputNumber = input - '0';\r\n            //if (debugOn && input == 'k')\r\n            //{\r\n            //    DebugExtra.DebugEx.Show();\r\n            //}\r\n\r\n            if (lastPhase != turnBaseTry.battleState.phase)\r\n            {\r\n                if (turnBaseTry.battleState.phase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                {\r\n                    //ShowMessage(\"Pick your commands\", false, true);\r\n                    TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, Colors.FireAura);\r\n\r\n                }\r\n                if (lastPhase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n                {\r\n                    //Console.Write(\"X__X\");\r\n                    HideMessage();\r\n                    //TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, 0);\r\n                }\r\n            }\r\n            lastPhase = turnBaseTry.battleState.phase;\r\n            if (turnBaseTry.battleState.phase == BattleMain.BattlePhase.PickHands)\r\n            {\r\n                if (InputUnicode >= 0)\r\n                {\r\n                    var inputX = inputH.PickingHand(InputUnicode, turnBaseTry.inputs);\r\n                    if (inputX.type != InputType.None)\r\n                        turnBaseTry.InputDone(inputX);\r\n                }\r\n\r\n                //foreach (var item in moveKeys)\r\n                //{\r\n                //    if (item.Value == input)\r\n                //    {\r\n                //        turnBaseTry.InputDone(item.Key);\r\n                //    }\r\n                //}\r\n            }\r\n            if (CanAdvance_Logic())\r\n            {\r\n                switch (turnBaseTry.battleState.phase)\r\n                {\r\n                    case BattleMain.BattlePhase.EnemyMoveChoice:\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    case BattleMain.BattlePhase.HandRecharge:\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    case BattleMain.BattlePhase.PickHands:\r\n\r\n                        break;\r\n                    case BattleMain.BattlePhase.ExecuteMove:\r\n                        //System.Threading.Thread.Sleep(300);\r\n                        turnBaseTry.Tick();\r\n                        break;\r\n                    default:\r\n\r\n                        break;\r\n                }\r\n            }\r\n            UpdateBattleRenderCount();\r\n            DrawGraphics(delta);\r\n\r\n        }\r\n\r\n        public bool CanAdvanceGraphics()\r\n        {\r\n            return textWorld.IsDone() && !waitingForMessageInput;\r\n        }\r\n\r\n        private bool CanAdvance_Logic()\r\n        {\r\n            return CanAdvanceGraphics() && HappHandling.IsDone();\r\n        }\r\n\r\n        public void ShowMessage(string s, bool waitForInput = true, bool doNotHide = false)\r\n        {\r\n            this.MessageDoNotHide = doNotHide;\r\n            message = s;\r\n            messageEnt.Origin.ResetInvisible();\r\n            float timeToWrite = message.Length * 0.015f;\r\n            if (timeToWrite > 0.4f) timeToWrite = 0.4f;\r\n            charByCharAnim.Add(messageEnt.AnimBase(timeToWrite), new CharByCharAnimation.CharByCharData(0, message.Length + 1));\r\n            delayAnim.Delay(timeToWrite + 0.8f);\r\n\r\n            //waitingForMessageInput = waitForInput;\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void HideMessage()\r\n        {\r\n            message = null;\r\n            waitingForMessageInput = false;\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void ShowBattleMessage(string s)\r\n        {\r\n            if (!turnBaseTry.BattleDecided())\r\n                ShowMessage(s);\r\n            //Console.Write(\"M: \"+s);\r\n        }\r\n\r\n        public void DrawGraphics(float delta)\r\n        {\r\n            mouseHover.mouseHovers.Clear();\r\n            turnBaseTry.Update(delta);\r\n            //clear grid\r\n            TextBoard.Reset();\r\n\r\n            if (lastPhase == Pidroh.ConsoleApp.Turnbased.BattleMain.BattlePhase.PickHands)\r\n            {\r\n                TextBoard.SetAll(TextBoard.NOCHANGECHAR, TextBoard.NOCHANGECOLOR, Colors.BackgroundInput);\r\n            }\r\n\r\n            int controlsY = gridScale * 3 + 10 + 3 + 4;\r\n            gridScale = 5;\r\n            gridOffsetx = 2;\r\n            gridOffsety = 1;\r\n            int enemyGridOffX = gridScale * 3;\r\n            bool drawDot = false;\r\n            TextBoard.DrawRepeated(' ', gridOffsetx, gridOffsety, gridScale * 6, gridScale*3, TextBoard.NOCHANGECOLOR, Colors.BackBattle);\r\n            for (int i = 0; i < 3 * gridScale; i++)\r\n            {\r\n                for (int j = 0; j < 3 * gridScale; j++)\r\n                {\r\n                    if (drawDot)\r\n                    {\r\n                        TextBoard.DrawChar(\r\n                        '.',\r\n                        gridOffsetx + i,\r\n                        gridOffsety + j, Colors.GridHero);\r\n                        TextBoard.DrawChar(\r\n                            '.',\r\n                            gridOffsetx + i + enemyGridOffX,\r\n                            gridOffsety + j, Colors.GridEnemy);\r\n                    }\r\n                    if (i % gridScale == 0 && j % gridScale == 0)\r\n                    {\r\n\r\n                        TextBoard.DrawGrid(i + gridOffsetx + enemyGridOffX, j + gridOffsety, gridScale, gridScale, Colors.GridEnemy);\r\n                        TextBoard.DrawGrid(i + gridOffsetx, j + gridOffsety, gridScale, gridScale, Colors.GridHero);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n\r\n                BattleMain.BattleEntity gameEntity = turnBaseTry.entities[i];\r\n\r\n                var ec = GetChar(gameEntity);\r\n\r\n                var pos = gameEntity.PositionV2D;\r\n                BaseUtils.Vector2D screenPos = BattleEntityToScreenPosition((BaseUtils.Vector2D)pos);\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.paneleffect)\r\n                {\r\n                    screenPos.Y = screenPos.Y + 1;\r\n                    screenPos.X = screenPos.X - 1;\r\n                }\r\n                //battlerEntities[i].origin.Position = screenPos;\r\n                if (battlerRenders[i].Origin.Position != screenPos && textWorld.IsDone())\r\n                {\r\n                    posAnim.Add(battlerRenders[i].AnimBase(0.15f), new PositionAnimation.PositionData(battlerRenders[i].Origin.Position, screenPos, true));\r\n                }\r\n\r\n                var c = Colors.Hero;\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.enemy) c = Colors.Enemy;\r\n                if (gameEntity.Type == Pidroh.ConsoleApp.Turnbased.BattleMain.EntityType.pickup) c = Colors.inputKey;\r\n                if (gameEntity.Dead)\r\n                    c = TextBoard.INVISIBLECOLOR;\r\n                int bc = TextBoard.INVISIBLECOLOR;\r\n\r\n                if (gameEntity.Alive)\r\n                {\r\n                    Pidroh.ConsoleApp.Turnbased.BattleMain.Element element = gameEntity.element;\r\n                    bc = ElementToAuraColor(element);\r\n\r\n                }\r\n                if (gameEntity.Dead)\r\n                {\r\n                    for (int j = 0; j < ec.Length + 1; j++)\r\n                    {\r\n                        battlerRenders[i].Origin.DrawChar(TextBoard.INVISIBLECHAR, j, 0, c, bc);\r\n                    }\r\n\r\n                }\r\n                else\r\n                {\r\n                    battlerRenders[i].Origin.Draw(ec, 0, 0, c, bc);\r\n                    battlerRenders[i].Origin.DrawOneDigit(gameEntity.graphicRepeatedIndex + 1, 0 + ec.Length, 0, c, bc);\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            int textBoardHeight = 3 * gridScale;\r\n\r\n            {\r\n                //int y = 2;\r\n                //int x = 6 * gridScale + 20;\r\n                \r\n                int x = 3;\r\n\r\n                if (turnBaseTry.battleState.phase == BattleMain.BattlePhase.PickHands)\r\n                {\r\n                    DrawControls(controlsY, x);\r\n                    if (turnBaseTry.timeToChoose > 0)\r\n                    {\r\n                        float ratio = turnBaseTry.timeToChoose / turnBaseTry.timeToChooseMax;\r\n                        TextBoard.DrawRepeated(' ', x, controlsY + 16, (int)(ratio * 15), 1, Colors.Board, Colors.GridHero);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    TextBoard.DrawRepeated(' ', x - 1, controlsY - 1, 15, 15, Colors.Board);\r\n                }\r\n            }\r\n\r\n            int turnOrderX = 6 * gridScale + 5;\r\n            int turnOrderY = 2;\r\n            turnOrderX = 2;\r\n            turnOrderY = 3 * gridScale + 2 ;\r\n\r\n            DrawTurnOrder(turnOrderX, turnOrderY);\r\n            if(!stageData.hideLifeUI)\r\n                DrawLife(turnOrderX+25, turnOrderY);\r\n            {\r\n                const int X = 2;\r\n                //const int Y = 16;\r\n                messageEnt.SetPosition(X, controlsY - 2);\r\n                if (message != null && (!CanAdvanceGraphics()))\r\n                {\r\n                    //TextBoard.DrawGrid(\r\n                    //    messageEnt.Origin.Position.XInt, messageEnt.Origin.Position.YInt, \r\n                    //    messageEnt.Width, messageEnt.Height, Colors.Board);\r\n                    //messageEnt.Origin.DrawGrid(0, 0, 40, 4, Colors.Board);\r\n                    messageEnt.Origin.DrawWithLinebreaks(message, 1, 0, 1, Colors.HeroTurn);\r\n                }\r\n                else\r\n                {\r\n                    if (!MessageDoNotHide)\r\n                    {\r\n                        message = null;\r\n                        messageEnt.Origin.SetAll(' ');\r\n                    }\r\n\r\n                    //TextBoard.DrawRepeated(' ',X, Y, 40, 4, Colors.Board);\r\n                }\r\n            }\r\n            TextBoard.CursorNewLine(1);\r\n            TextBoard.CursorNewLine(1);\r\n            //textBoard.Draw_Cursor(turnBaseTry.battleState.phase.ToString());\r\n\r\n            textWorld.DrawChildren();\r\n            textWorld.AdvanceTime(delta);\r\n            if (CanAdvanceGraphics())\r\n            {\r\n                HappHandling.Handle();\r\n                if (CanAdvanceGraphics())\r\n                {\r\n                    turnBaseTry.happManager.TryHandle();\r\n                }\r\n            }\r\n            //if (CanAdvance())\r\n            //{\r\n\r\n            //}\r\n        }\r\n\r\n        public static int ElementToAuraColor(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            int bc = TextBoard.INVISIBLECOLOR;\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)\r\n            {\r\n                bc = Colors.FireAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)\r\n            {\r\n                bc = Colors.IceAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)\r\n            {\r\n                bc = Colors.ThunderAura;\r\n            }\r\n\r\n            return bc;\r\n        }\r\n\r\n        public static int ElementToProjColor(Pidroh.ConsoleApp.Turnbased.BattleMain.Element element)\r\n        {\r\n            int bc = Colors.inputKey;\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire)\r\n            {\r\n                bc = Colors.FireShot;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice)\r\n            {\r\n                bc = Colors.IceAura;\r\n            }\r\n            if (element == Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder)\r\n            {\r\n                bc = Colors.ThunderAura;\r\n            }\r\n\r\n            return bc;\r\n        }\r\n\r\n        public Vector2D BattleEntityToScreenPosition(BaseUtils.Vector2D pos)\r\n        {\r\n            var x = pos.X;\r\n            var y = pos.Y;\r\n            var screenPos = new BaseUtils.Vector2D(x * gridScale + gridScale / 2 + gridOffsetx, 2 * gridScale - y * gridScale + gridScale / 2 + gridOffsety);\r\n            return screenPos;\r\n        }\r\n\r\n        private void DrawControls(int y, int x)\r\n        {\r\n            //TextBoard.DrawGrid(x - 2, y - 1, 20, 15, Colors.Board);\r\n            TextBoard.SetCursorAt(x, y);\r\n            //TextBoard.Draw_Cursor(\"Controls\", Colors.WindowLabel);\r\n\r\n            //InputTags inputTag = InputTags.MOVEFIX;\r\n            int yOff = 0;\r\n            yOff = DrawInputs_Fix(y, x, InputTags.MOVEFIX, yOff);\r\n            //yOff++;\r\n            yOff = DrawInputs_Fix(y, x, InputTags.MISC, yOff);\r\n            //yOff++;\r\n            //yOff = DrawInputs_Fix(y, x, InputTags.MOVEUNFIX, yOff);\r\n\r\n            int attackNumber = 1;\r\n            for (int i = 0; i < turnBaseTry.inputs.inputs.Count; i++)\r\n            {\r\n                int x2 = x;\r\n                int y2 = y + 2 + yOff;\r\n                var input = turnBaseTry.inputs.inputs[i];\r\n\r\n                if (turnBaseTry.inputs.TagIs(i, InputTags.MOVEUNFIX))\r\n                {\r\n                    yOff++;\r\n                    yOff++;\r\n                    int unicode = '0' + attackNumber;\r\n                    attackNumber++;\r\n                    mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 0, input.arg1));\r\n                    //TextBoard.DrawChar('[', x2 - 1, y2, Colors.HeroTurn);\r\n                    int lengthBname = TextBoard.DrawUnicodeLabel(unicode, x2, y2, Colors.inputKey);\r\n                    //TextBoard.DrawChar(']', x2 + lengthBname, y2, Colors.HeroTurn);\r\n\r\n                    string description = string.Empty;\r\n                    if (input.type == InputType.Move)\r\n                    {\r\n                        Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType m = (Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)input.arg1;\r\n                        moveDescriptions.TryGetValue(m, out description);\r\n                        if (description == null)\r\n                        {\r\n                            description = m.ToString();\r\n                        }\r\n\r\n                    }\r\n                    if (input.type == InputType.MiscBattle)\r\n                    {\r\n                        MiscBattleInput arg1 = (MiscBattleInput)input.arg1;\r\n                        description = miscDescriptions[arg1];\r\n                    }\r\n                    TextBoard.Draw(description, x2 + 2 + 5, y2, Colors.InputDescription);\r\n                }\r\n\r\n                //var c = moveChars[move];\r\n                //DrawMove(move, Colors.HeroTurn);\r\n                //TextBoard.Draw(c, x2 + 3, y2, Colors.HeroTurn);\r\n                //TextBoard.DrawWithGrid(c+\"\", x2, y + 2, Colors.HeroTurn);\r\n            }\r\n        }\r\n\r\n        private int DrawInputs_Fix(int y, int x, InputTags inputTag, int yOff)\r\n        {\r\n\r\n            for (int i = 0; i < turnBaseTry.inputs.inputs.Count; i++)\r\n            {\r\n                int x2 = x;\r\n                int y2 = y + 2 + yOff;\r\n                var input = turnBaseTry.inputs.inputs[i];\r\n\r\n                if (turnBaseTry.inputs.TagIs(i, inputTag))\r\n                {\r\n                    var unicode = inputH.GetFixedMoveUnicode(input);\r\n                    string forceInputLabel = null;\r\n                    string forceCommandLabel = null;\r\n                    if (unicode == 'w')\r\n                    {\r\n                        forceInputLabel = \"WASD\";\r\n                        forceCommandLabel = \"\" + Unicode.Uparrow2 + Unicode.Leftarrow2 + Unicode.Downarrow2 + Unicode.Rightarrow2;\r\n                    }\r\n                    if (unicode == 'a' || unicode == 's' || unicode == 'd')\r\n                    {\r\n                        continue;\r\n                    }\r\n                    yOff++;\r\n                    yOff++;\r\n\r\n\r\n                    mouseHover.mouseHovers.Add(new MouseHover(new Rect(x2 - 2, y2, 20, 1), 0, input.arg1));\r\n                    //TextBoard.DrawChar('[', x2 - 1, y2, Colors.HeroTurn);\r\n                    int lengthBname = 0;\r\n                    if (forceInputLabel == null)\r\n                        lengthBname = TextBoard.DrawUnicodeLabel(unicode, x2, y2, Colors.inputKey);\r\n                    else\r\n                    {\r\n                        TextBoard.Draw(forceInputLabel, x2, y2, Colors.inputKey);\r\n                        lengthBname = forceInputLabel.Length;\r\n                    }\r\n                    //TextBoard.DrawChar(']', x2 + lengthBname, y2, Colors.HeroTurn);\r\n\r\n                    string description = string.Empty;\r\n                    if (input.type == InputType.Move)\r\n                    {\r\n                        if (forceCommandLabel != null)\r\n                        {\r\n                            description = forceCommandLabel;\r\n                        }\r\n                        else\r\n                        {\r\n                            Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType m = (Pidroh.ConsoleApp.Turnbased.BattleMain.MoveType)input.arg1;\r\n                            moveDescriptions.TryGetValue(m, out description);\r\n                            if (description == null)\r\n                            {\r\n                                description = m.ToString();\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    if (input.type == InputType.MiscBattle)\r\n                    {\r\n                        MiscBattleInput arg1 = (MiscBattleInput)input.arg1;\r\n                        description = miscDescriptions[arg1];\r\n                    }\r\n                    TextBoard.Draw(description, x2 + 2 + 5, y2, Colors.InputDescription);\r\n                }\r\n\r\n                //var c = moveChars[move];\r\n                //DrawMove(move, Colors.HeroTurn);\r\n                //TextBoard.Draw(c, x2 + 3, y2, Colors.HeroTurn);\r\n                //TextBoard.DrawWithGrid(c+\"\", x2, y + 2, Colors.HeroTurn);\r\n            }\r\n\r\n            return yOff;\r\n        }\r\n\r\n        private void DrawLife(int turnOrderX, int turnOrderY)\r\n        {\r\n            //TextBoard.DrawGrid(turnOrderX - 1, turnOrderY - 1, 20, 9, Colors.WindowLabel);\r\n            TextBoard.SetCursorAt(turnOrderX + 1, turnOrderY);\r\n            TextBoard.Draw_Cursor(\"Life\", Colors.WindowLabel);\r\n            TextBoard.SetCursorAt(turnOrderX + 8, turnOrderY);\r\n            TextBoard.Draw_Cursor(\"Element\", Colors.WindowLabel);\r\n            int index = -1; //using this because not all units get drawn\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n                //Console\r\n\r\n                BattleMain.BattleEntity e = turnBaseTry.entities[i];\r\n                if (!e.drawLife)\r\n                {\r\n                    continue;\r\n                }\r\n                if (!e.Dead)\r\n                {\r\n                    index++;\r\n                    int color = Colors.HeroTurn;\r\n                    if (e.Type == BattleMain.EntityType.enemy)\r\n                    {\r\n                        color = Colors.EnemyTurn;\r\n                    }\r\n                    //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n                    int xOff = turnOrderX + 1;\r\n                    int yOff = turnOrderY + 2 + index*2;\r\n                    //DrawEntityChar(e, color, xOff, yOff);\r\n                    //TextBoard.DrawChar(GetChar(e), xOff, turnOrderY + 2, color);\r\n                    TextBoard.DrawTwoDigits((int)e.life, xOff, yOff, color);\r\n                    string element = string.Empty;\r\n                    switch (e.element)\r\n                    {\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Fire:\r\n                            element = \"Fire\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Ice:\r\n                            element = \"Ice\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.Thunder:\r\n                            element = \"Thunder\";\r\n                            break;\r\n                        case Pidroh.ConsoleApp.Turnbased.BattleMain.Element.None:\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    var eColor = ElementToAuraColor(e.element);\r\n\r\n                    TextBoard.Draw(element, xOff + 7, yOff, eColor);\r\n                }\r\n\r\n                //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n\r\n                //TextBoard.CursorNewLine(x: 1);\r\n            }\r\n        }\r\n\r\n        private void DrawTurnOrder(int turnOrderX, int turnOrderY, bool horizontal = true)\r\n        {\r\n            Value turnsPerPhase = turnBaseTry.battleState.turnsPerPhase;\r\n            TextBoard.SetCursorAt(turnOrderX+3, turnOrderY);\r\n            TextBoard.Draw_Cursor(\"Commands\", Colors.WindowLabel);\r\n\r\n            int drawingId = -1;\r\n            for (int i = 0; i < turnBaseTry.entities.Count; i++)\r\n            {\r\n\r\n                BattleMain.BattleEntity e = turnBaseTry.entities[i];\r\n                if (!e.drawTurn)\r\n                {\r\n                    continue;\r\n                }\r\n                if (!e.Dead)\r\n                {\r\n                    drawingId++;\r\n                    int color = Colors.HeroTurn;\r\n                    if (e.Type == BattleMain.EntityType.enemy)\r\n                    {\r\n                        color = Colors.EnemyTurn;\r\n                    }\r\n\r\n                    //TextBoard.DrawOneDigit_Cursor((int)e.life.Val);\r\n                    int xOff = turnOrderX + 1 + drawingId * 3;\r\n                    int yEntity = turnOrderY + 2;\r\n                    int yFirstMove = turnOrderY + 3;\r\n                    int xFirstMove = xOff;\r\n                    if (horizontal) {\r\n                        xOff = turnOrderX;\r\n                        yEntity = turnOrderY+2+drawingId*2;\r\n                        yFirstMove = yEntity;\r\n                        xFirstMove = turnOrderX+3;\r\n                    }\r\n                    DrawEntityChar(e, color, xOff, yEntity);\r\n                    \r\n                    TextBoard.SetCursorAt(xFirstMove, yFirstMove);\r\n\r\n                    for (int i2 = 0; i2 < turnsPerPhase; i2++)\r\n                    {\r\n                        int color2 = color;\r\n                        if (drawingId == turnBaseTry.battleState.actingEntity && i2 == turnBaseTry.battleState.turn && turnBaseTry.battleState.phase == BattleMain.BattlePhase.ExecuteMove)\r\n                        {\r\n                            color2 = Colors.Hero;\r\n                        }\r\n\r\n                        if (i2 < turnsPerPhase)\r\n                        {\r\n                            string c = GetCharOfMove(e, i2);\r\n                            mouseHover.mouseHovers.Add(new MouseHover(new Rect(\r\n                                TextBoard.CursorX,\r\n                                TextBoard.CursorY,\r\n                                c.Length,\r\n                                1\r\n                                ),\r\n                                0, e.moves[i2])); //add here...? @_@\r\n                            TextBoard.Draw_Cursor(c, color2);\r\n                            if (horizontal)\r\n                            {\r\n                                for (int j = c.Length; j < 3; j++)\r\n                                {\r\n                                    TextBoard.AdvanceCursor();\r\n                                }\r\n                                \r\n                            }\r\n\r\n                            //TextBoard.Draw_Cursor(' ');\r\n                        }\r\n                        else\r\n                        {\r\n                            TextBoard.Draw_Cursor(' ', color);\r\n                        }\r\n                        if (horizontal)\r\n                        {\r\n\r\n                        }\r\n                        else\r\n                        {\r\n                            TextBoard.CursorNewLine(x: xFirstMove);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //TextBoard.CursorNewLine(x: 1);\r\n            }\r\n        }\r\n\r\n        private void DrawEntityChar(Pidroh.ConsoleApp.Turnbased.BattleMain.BattleEntity e, int color, int x, int y)\r\n        {\r\n            char[] chars = GetChar(e);\r\n\r\n            TextBoard.Draw(chars, x, y, color);\r\n            //if (e.graphicRepeatedIndex > 0)\r\n            {\r\n                TextBoard.DrawOneDigit(e.graphicRepeatedIndex + 1, x + chars.Length, y, color);\r\n            }\r\n        }\r\n\r\n        private string GetCharOfMove(BattleMain.BattleEntity e, int i2)\r\n        {\r\n\r\n\r\n            float val = e.moves[i2];\r\n            if (val >= 0)\r\n                return moveChars[(BattleMain.MoveType)val];\r\n            else\r\n                return \" \";\r\n        }\r\n\r\n        public char[] GetChar(BattleMain.BattleEntity gameEntity)\r\n        {\r\n            return entitiesChars[gameEntity.graphic];\r\n\r\n        }\r\n\r\n        private void DrawMove(Value move, int color)\r\n        {\r\n            if (move.Val >= 0)\r\n            {\r\n                BattleMain.MoveType m = (BattleMain.MoveType)move.Val;\r\n                DrawMove(m, color);\r\n            }\r\n            else\r\n            {\r\n                TextBoard.Draw_Cursor(' ');\r\n            }\r\n\r\n        }\r\n\r\n        private void DrawMove(BattleMain.MoveType move, int color)\r\n        {\r\n            var c = moveChars[move];\r\n            TextBoard.Draw_Cursor(c, color);\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return TextBoard;\r\n        }\r\n\r\n        public static class Colors\r\n        {\r\n            public const int GridHero = 1;\r\n            public const int GridEnemy = 2;\r\n            public const int Hero = 3;\r\n            public const int Enemy = 4;\r\n            public const int HeroTurn = 5;\r\n            public const int EnemyTurn = 6;\r\n            public const int inputKey = 7;\r\n            public const int Board = 8;\r\n            public const int WindowLabel = 9;\r\n            internal static int FireAura = 10;\r\n            internal static int IceAura = 11;\r\n            internal static int ThunderAura = 12;\r\n            internal static int FireShot = 13;\r\n            internal static int IceShot = 14;\r\n            internal static int ThunderShot = 15;\r\n            public const int BackgroundInput = 16;\r\n            public const int InputDescription = 17;\r\n            internal static int BackBattle = 18;\r\n            \r\n        }\r\n\r\n        public enum InputKey\r\n        {\r\n            NONE, LEFT, RIGHT, DOWN, UP, FIRE, REDO, DONE,\r\n            ICE,\r\n            THUNDER,\r\n            NORMALSHOT\r\n        }\r\n\n\r\n\r\n    \nprivate int __Property__Initializer__InputUnicode=-1;}\r\n\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Pidroh.ECS;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing Pidroh.TurnBased.TextRendering;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class GameMain : ITextScreen_\r\n    {\r\n        private BattleMain battleMain;\r\n        private BattleRender battleRender;\r\n        private ModeSelectionScreen modeSelectionScreen;\r\n        ITextScreen_ mainDraw;\r\n        private ResultScreen resultScreen;\r\n        //ITextScreen[] screens = new ITextScreen[5];\r\n        int difficulty;\r\n        int[] enemyAmount = new int[]   { 1, 1, 2, 1, 2, 3, 2, 3, 1, 2, 3, 3 };\r\n        int[] turnAmount = new int[] { 2, 4, 2, 6, 4, 2, 6, 4, 8, 8, 6, 8 };\r\n        private MouseHoverText mouseHover;\r\n\r\n        public GameMain()\r\n        {\r\n            modeSelectionScreen = new ModeSelectionScreen();\r\n            \r\n            Reset();\r\n            modeSelectionScreen.mode = 1;\r\n            modeSelectionScreen.wannaLeave = 1;\r\n            mainDraw = modeSelectionScreen;\r\n            //Reset();\r\n        }\r\n\r\n        private void Reset()\r\n        {\r\n\r\n\r\n\r\n            int mode = modeSelectionScreen.mode;\r\n            bool timeAttack = modeSelectionScreen.timeAttack;\r\n\r\n            var ecs = ECSManager.Create();\r\n\r\n            StageDataCreator sdc = new StageDataCreator(ecs);\r\n            var stages = ecs.QuickAccessor1<StageData>();\r\n            //var stages = sdc.stages;\r\n\r\n            int d = difficulty;\r\n            if (stages.Count <= d)\r\n            {\r\n                mainDraw = modeSelectionScreen;\r\n                modeSelectionScreen.Reset();\r\n                difficulty = 0;\r\n                return;\r\n            }\r\n            //d = 200;\r\n            if (d >= enemyAmount.Length) d = enemyAmount.Length - 1;\r\n            int nEnemies = enemyAmount[d];\r\n\r\n            BattleSetup battleSetup = new BattleSetup(mode, new BattleBasicConfig(nTurns: 5, nEnemies: nEnemies), difficulty, ecs);\r\n            battleMain = battleSetup.battleMain;\r\n\r\n\r\n            //ecs.CreateEntityWithComponent(new EnemySpawnData(0, new BaseUtils.Vector2D(4, 1)));\r\n            //ecs.CreateEntityWithComponent(new EnemySpawnData(1, new BaseUtils.Vector2D(5, 1)));\r\n\r\n\r\n            float timeToChoose = -1;\r\n            if (timeAttack)\r\n            {\r\n                timeToChoose = (5f * turnAmount[d]) * nEnemies;\r\n                \r\n            }\r\n            battleMain.timeToChooseMax = timeToChoose;\r\n            battleMain.Init();\r\n            battleRender = new BattleRender(battleMain, stageData:stages.Comp1(difficulty));\r\n            new HappHandling(battleRender, battleSetup);\r\n            mainDraw = battleRender;\r\n            resultScreen = new ResultScreen();\r\n            resultScreen.battleResult = battleMain.battleResult;\r\n            \r\n            MouseHoverManager hoverManager = new MouseHoverManager(Mouse);\r\n            hoverManager.mouseHovers.Add(new MouseHover(new BaseUtils.Rect(5,5,5,5), 0,0));\r\n            mouseHover = new MouseHoverText(hoverManager, battleRender.textWorld.GetFreeEntity(50, 1));\r\n\r\n            battleRender.mouseHover = hoverManager;\r\n            \r\n        }\r\n\r\n        public int Input { set { mainDraw.Input = value; } get { return 'c'; } }\r\n        public int InputUnicode { set { mainDraw.InputUnicode = value; } get { return 'c'; } }\r\n\r\n        public MouseIO Mouse { set; get; }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            mouseHover.Update();\r\n            mainDraw.Draw(f);\r\n            mainDraw.Mouse = Mouse;\r\n            if (mainDraw == battleRender)\r\n            {\r\n                if (battleMain.IsOver())\r\n                {\r\n                    if (battleMain.IsVictory())\r\n                    {\r\n                        difficulty++;\r\n                    }\r\n                    resultScreen.Enter();\r\n                    mainDraw = resultScreen;\r\n                }\r\n            }\r\n            if (mainDraw == resultScreen)\r\n            {\r\n                if (resultScreen.wannaLeave == 1)\r\n                {\r\n                    Reset();\r\n                }\r\n            }\r\n            if (mainDraw == modeSelectionScreen) {\r\n                if (modeSelectionScreen.wannaLeave == 1)\r\n                {\r\n                    Reset();\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return mainDraw.GetBoard();\r\n        }\r\n\n    \nprivate MouseIO __Property__Initializer__Mouse=new MouseIO();}\r\n}\r\n","using Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.ConsoleApp.Turnbased\r\n{\r\n    public class ResultScreen : ITextScreen_\r\n    {\r\n        private TextWorld textWorld;\r\n        string youWin = \"You Win\";\r\n        public MouseIO Mouse { set; get; }\r\n        string youLose = \"You lose\";\r\n        public BattleResult battleResult;\r\n        public ResultScreen()\r\n        {\r\n            textWorld = new TextWorld();\r\n            textWorld.Init(70, 25);\r\n        }\r\n        public int wannaLeave;\r\n\r\n        public int Input { set; get; }\r\n        public int InputUnicode { set; get; }\r\n\r\n        public void Enter()\r\n        {\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            if (InputUnicode > 0)\r\n            {\r\n                wannaLeave = 1;\r\n            }\r\n            string message = youWin;\r\n            if (battleResult.result == 2) message = youLose;\r\n            textWorld.mainBoard.DrawOnCenter(message, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.Board);\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return textWorld.mainBoard;\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class TestGame : ITextGame\r\n    {\r\n        public TextScreenHolder ScreenHolder { get; private set; }\r\n\r\n        public Palette GetPalette()\r\n        {\r\n            return DefaultPalettes.C4Novel;\r\n        }\r\n\r\n        public void Init(int w, int h)\r\n        {\r\n            TextScreenN screen = new TestScreen();\r\n            ScreenHolder.SetAll(screen);\r\n            screen.Init(w, h);\r\n            screen.GetBoard().Draw(\"Test\", 0,0, 1);\r\n        }\r\n\r\n        public void Update(float delta)\r\n        {\r\n            \r\n        }\r\n\n    \nprivate TextScreenHolder __Property__Initializer__ScreenHolder=new TextScreenHolder();}\r\n\r\n    public class TestScreen : TextScreenN\r\n    {\r\n        public override void Update(float f)\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n","using Pidroh.ConsoleApp.Turnbased;\r\nusing Pidroh.TextRendering;\r\nusing Pidroh.TextRendering.GameScreen;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TurnBased.TextRendering\r\n{\r\n    public class ModeSelectionScreen : ITextScreen_\r\n    {\r\n        private TextWorld textWorld;\r\n        string youWin = \"You Win\";\r\n        string youLose = \"You lose\";\r\n        public MouseIO Mouse { set; get; }\r\n        int selection;\r\n        public BattleResult battleResult;\r\n        public ModeSelectionScreen()\r\n        {\r\n            textWorld = new TextWorld();\r\n            textWorld.Init(70, 25);\r\n        }\r\n        public int wannaLeave;\r\n        public int mode;\r\n        public bool timeAttack = false;\r\n        public int screenStage;\r\n\r\n        public int Input { set; get; }\r\n        public int InputUnicode { set; get; }\r\n\r\n        public void Enter()\r\n        {\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public void Draw(float f)\r\n        {\r\n            textWorld.mainBoard.Reset();\r\n            Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey ik = (Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey) Input;\r\n            mode = -1;\r\n            textWorld.mainBoard.Draw(\"ProgBattle Prototype v0.3\", 1, 1, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);\r\n            textWorld.mainBoard.Draw(\"A game by Pidroh\", 1, 2, Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero);\r\n            if (screenStage == 0)\r\n            {\r\n                switch (ik)\r\n                {\r\n\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.LEFT:\r\n                        screenStage = 1;\r\n                        timeAttack = false;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.RIGHT:\r\n                        screenStage = 1;\r\n                        timeAttack = true;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN:\r\n                        timeAttack = true;\r\n                        mode = 0;\r\n                        break;\r\n                    case Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP:\r\n                        mode = 0;\r\n                        timeAttack = false;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                textWorld.mainBoard.DrawOnCenter(\"[w] Vanilla\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 4, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[a] Elemental\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 5, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[s] Vanilla Time Attack\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 6, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[d] Elemental Time Attack\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 7, alignString: false);\r\n            }\r\n            if (screenStage == 1)\r\n            {\r\n                if (ik == Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.UP)\r\n                {\r\n                    mode = 1;\r\n                    \r\n                }\r\n                if (ik == Pidroh.ConsoleApp.Turnbased.BattleRender.InputKey.DOWN)\r\n                {\r\n                    screenStage = 0;\r\n                }\r\n                textWorld.mainBoard.DrawOnCenter(\"Elemental Mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: -5);\r\n                textWorld.mainBoard.DrawOnCenter(\"Fire beats Ice, Ice beats Thunder, Thunder beats fire\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: -2);\r\n                textWorld.mainBoard.DrawOnCenter(\"Same element = no damage\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 0);\r\n                textWorld.mainBoard.DrawOnCenter(\"It is best to have had some experience with vanilla mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 1);\r\n                textWorld.mainBoard.DrawOnCenter(\"[w] Start Elemental Mode\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 4, alignString: false);\r\n                textWorld.mainBoard.DrawOnCenter(\"[s] Go back\", Pidroh.ConsoleApp.Turnbased.BattleRender.Colors.GridHero, yOff: 5, alignString: false);\r\n            }\r\n\r\n\r\n            if (mode >= 0)\r\n            {\r\n                wannaLeave = 1;\r\n            }\r\n\r\n            \r\n            \r\n\r\n            //string message = youWin;\r\n            //if (battleResult.result == 2) message = youLose;\r\n            //textWorld.mainBoard.DrawOnCenter(message, Colors.Board);\r\n        }\r\n\r\n        internal void Reset()\r\n        {\r\n            mode = -1;\r\n            wannaLeave = 0;\r\n        }\r\n\r\n        public TextBoard GetBoard()\r\n        {\r\n            return textWorld.mainBoard;\r\n        }\r\n\r\n    }\r\n}\r\n","using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\n\r\nnamespace Pidroh.TextRendering\r\n{\r\n    public class BlinkAnim : TextAnimation<BlinkAnim.BlinkData>\r\n    {\r\n        public override void Modify(TextEntity entity, BlinkData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            float aux = progress;\r\n            bool blink = true;\r\n            while (true)\r\n            {\r\n                if (blink)\r\n                {\r\n                    aux -= mainData.blinkActiveTime;\r\n                }\r\n                else\r\n                {\r\n                    aux -= mainData.blinkInactive;\r\n                }\r\n                if (aux < 0)\r\n                {\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    blink = !blink;\r\n                }\r\n            }\r\n            if (!blink)\r\n            {\r\n                entity.Animation.SetAll(mainData.text, mainData.textColor, mainData.backColor);\r\n            }\r\n        }\r\n\r\n\r\n        public struct BlinkData\r\n        {\r\n            public readonly char text;\r\n            public readonly int backColor, textColor;\r\n            public readonly float blinkActiveTime;\r\n            public readonly float blinkInactive;\r\n\r\n            public BlinkData(char text, int backColor, int textColor, float blinkActiveTime, float blinkInactive)\r\n            {\r\n                this.text = text;\r\n                this.backColor = backColor;\r\n                this.textColor = textColor;\r\n                this.blinkActiveTime = blinkActiveTime;\r\n                this.blinkInactive = blinkInactive;\r\n            }\r\n\r\n            public static BlinkData BackColor(int backColor, float blinkDuration)\r\n            {\r\n                return new BlinkData(TextBoard.NOCHANGECHAR, backColor, TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration);\r\n            }\r\n\r\n            public static BlinkData Char(char c, float blinkDuration)\r\n            {\r\n                return new BlinkData(c, TextBoard.NOCHANGECOLOR, TextBoard.NOCHANGECOLOR, blinkDuration, blinkDuration);\r\n            }\r\n        }\r\n    }\r\n}\r\n","namespace Pidroh.TextRendering\r\n{\r\n    public class CharByCharAnimation : TextAnimation<CharByCharAnimation.CharByCharData>\r\n    {\r\n        public override void Modify(TextEntity entity, CharByCharData mainData, float progress, float length)\r\n        {\r\n            base.Modify(entity, mainData, progress, length);\r\n            float ratio = progress / length;\r\n            float lengthText = mainData.charEnd - mainData.charStart;\r\n            int lineBreaks = 0;\r\n            int offsetedPerm = 0;\r\n            for (int i = mainData.charStart; i < mainData.charEnd; i++)\r\n            {\r\n                int offseted = i + offsetedPerm;\r\n                int line = 0;\r\n                var tb = entity.Animation;\r\n                \r\n\r\n                while (offseted >= tb.Width)\r\n                {\r\n                    line++;\r\n                    offseted -= tb.Width;\r\n                }\r\n                if (entity.Origin.CharAt(offseted, line + lineBreaks) == '\\n')\r\n                {\r\n                    lineBreaks++;\r\n                    offsetedPerm -= offseted;\r\n                    offseted = 0;\r\n                }\r\n                if (i > ((lengthText * ratio) + mainData.charStart))\r\n                {\r\n                    tb.DrawChar(' ', offseted, line + lineBreaks);\r\n                    //tb.Draw(\"\" + i, 6, 5, 1);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public class CharByCharData\r\n        {\r\n            internal int charStart;\r\n            internal int charEnd;\r\n\r\n            public CharByCharData(int charStart, int charEnd)\r\n            {\r\n                this.charStart = charStart;\r\n                this.charEnd = charEnd;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]
}

2018-06-17T07:52:04:162 	Trace		Base64 SourceMap for C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:163 	Trace		//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJCcmlkZ2VCdWlsZC5qcyIsCiAgInNvdXJjZVJvb3QiOiAiIiwKICAic291cmNlcyI6IFsiQXBwLmNzIiwiLi4vLi4vUmV1c2FibGVQaWRyb2hWUy9CYXNlVXRpbHMvRXh0ZW5zaW9ucy5jcyIsIi4uLy4uL1JldXNhYmxlUGlkcm9oVlMvQmFzZVV0aWxzL1BvaW50LmNzIiwiLi4vLi4vUmV1c2FibGVQaWRyb2hWUy9CYXNlVXRpbHMvUmFuZG9tU3VwcGxpZXIuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL0Jhc2VVdGlscy9SZWN0YW5nbGUuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL0Jhc2VVdGlscy9UaW1lU3RhbXAuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL0Jhc2VVdGlscy9Vbmljb2RlLmNzIiwiLi4vLi4vUmV1c2FibGVQaWRyb2hWUy9CYXNlVXRpbHMvVmVjdG9yMkQuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL0Jhc2VVdGlscy9WZWN0b3IzRC5jcyIsIi4uL1R1cm5CYXNlZExvZ2ljL01vdmVEYXRhLmNzIiwiLi4vVHVybkJhc2VkVGV4dFJlbmRlcmluZy9Bc3luY1Rhc2tzLmNzIiwiLi4vVHVybkJhc2VkTG9naWMvQmF0dGxlTWFpbi5jcyIsIi4uL1R1cm5CYXNlZExvZ2ljL0JhdHRsZVNldHVwLmNzIiwiLi4vVHVybkJhc2VkVGV4dFJlbmRlcmluZy9Db2xvclN0dWZmLmNzIiwiLi4vVHVybkJhc2VkTG9naWMvRGVidWdFeHRyYS9EZWJ1Z0V4LmNzIiwiLi4vVHVybkJhc2VkTG9naWMvRUNTSW50ZWdyYXRpb24uY3MiLCIuLi9UdXJuQmFzZWRMb2dpYy9FbmVteUFJLmNzIiwiLi4vVHVybkJhc2VkTG9naWMvU3Bhd25GYWN0b3J5LmNzIiwiLi4vVHVybkJhc2VkTG9naWMvRW5lbXlEYXRhQ3JlYXRvci5jcyIsIi4uL1R1cm5CYXNlZExvZ2ljL1N0YWdlRGF0YS5jcyIsIi4uL1R1cm5CYXNlZExvZ2ljL01vdmVEYXRhRXhlY3V0ZXIuY3MiLCIuLi9UdXJuQmFzZWRMb2dpYy9IYXBwcy9IYXBwLmNzIiwiLi4vVHVybkJhc2VkTG9naWMvSW5wdXRIb2xkZXIuY3MiLCIuLi9UdXJuQmFzZWRMb2dpYy9Nb3ZlQ3JlYXRvclByb2cuY3MiLCIuLi8uLi9WaXN1YWxTdHVkaW9Tb2x1dGlvblJtay9FQ1MvQWNjZXNzb3IuY3MiLCIuLi8uLi9WaXN1YWxTdHVkaW9Tb2x1dGlvblJtay9FQ1MvRUNTTWFuYWdlci5jcyIsIi4uLy4uL1Zpc3VhbFN0dWRpb1NvbHV0aW9uUm1rL0VDUy9FbnRpdHkuY3MiLCIuLi8uLi9WaXN1YWxTdHVkaW9Tb2x1dGlvblJtay9FQ1MvUHJvY2Vzc29yRmxleC5jcyIsIi4uLy4uL1JldXNhYmxlUGlkcm9oVlMvVGV4dFJlbmRlcmluZ0xvZ2ljL1RleHRXb3JsZC5jcyIsIi4uLy4uL1JldXNhYmxlUGlkcm9oVlMvVGV4dFJlbmRlcmluZ0xvZ2ljL1BhbGV0dGUuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL1RleHRSZW5kZXJpbmdMb2dpYy9HYW1lU2NyZWVuL01vdXNlSG92ZXIuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL1RleHRSZW5kZXJpbmdMb2dpYy9UZXh0Qm9hcmQuY3MiLCIuLi8uLi9SZXVzYWJsZVBpZHJvaFZTL1RleHRSZW5kZXJpbmdMb2dpYy9HYW1lU2NyZWVuL0lUZXh0U2NyZWVuTi5jcyIsIi4uL1R1cm5CYXNlZFRleHRSZW5kZXJpbmcvSGFwcEhhbmRsaW5nLmNzIiwiLi4vVHVybkJhc2VkVGV4dFJlbmRlcmluZy9JbnB1dEhhbmRsaW5nLmNzIiwiLi4vVHVybkJhc2VkVGV4dFJlbmRlcmluZy9Nb3VzZUhvdmVyVGV4dC5jcyIsIi4uL1R1cm5CYXNlZFRleHRSZW5kZXJpbmcvQmF0dGxlUmVuZGVyLmNzIiwiLi4vVHVybkJhc2VkVGV4dFJlbmRlcmluZy9HYW1lTWFpbi5jcyIsIi4uL1R1cm5CYXNlZFRleHRSZW5kZXJpbmcvUmVzdWx0U2NyZWVuLmNzIiwiLi4vLi4vUmV1c2FibGVQaWRyb2hWUy9UZXh0UmVuZGVyaW5nTG9naWMvR2FtZVNjcmVlbi9UZXN0R2FtZS5jcyIsIi4uL1R1cm5CYXNlZFRleHRSZW5kZXJpbmcvTW9kZVNlbGVjdGlvblNjcmVlbi5jcyIsIi4uLy4uL1JldXNhYmxlUGlkcm9oVlMvVGV4dFJlbmRlcmluZ0xvZ2ljL0JsaW5rQW5pbWF0aW9uLmNzIiwiLi4vLi4vUmV1c2FibGVQaWRyb2hWUy9UZXh0UmVuZGVyaW5nTG9naWMvQ2hhckJ5Q2hhckFuaW1hdGlvbi5jcyJdLAogICJuYW1lcyI6IFsiIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7WUE0Q1lBOztZQUVBQSxxQ0FBY0EsbUNBQVFBO1lBQ3RCQSx5QkFBU0E7WUFDVEEsS0FBS0EsV0FBV0EsSUFBSUEsK0JBQWVBO2dCQUUvQkEsMENBQU9BLEdBQVBBLDJCQUFZQSxpRUFBa0JBLEdBQWxCQTs7Ozs7WUFLaEJBLFlBQVlBO1lBQ1pBLGtCQUFrQkE7WUFDbEJBLDBCQUEwQkE7WUFDMUJBO1lBQ0FBOzs7O1lBSUFBLDZEQUF1QkEsVUFBQ0E7O2dCQUdwQkEsV0FBV0E7Z0JBQ1hBLElBQUlBO29CQUFXQSxPQUFPQTs7Z0JBQ3RCQSxjQUFjQTtnQkFDZEEsZ0NBQWdCQTs7Ozs7O1lBTXBCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FyRCtCQTtnQ0FFWkE7Ozs7cUNBRU9BLElBQWlCQTs7b0JBRzNDQSxVQUFhQSxJQUFJQTtvQkFDakJBLDJDQUEwQkE7d0JBRXRCQSxPQUFPQSxBQUFPQTs7b0JBRWxCQSxPQUFLQSxJQUFJQTtvQkFDVEEsY0FBWUE7b0JBQ1pBLHNCQUFNQSxJQUFJQTs7Ozs7OztvQkE2RFZBLFVBQWVBO29CQUNmQSxXQUFXQSxDQUFDQSwyQkFBTUE7b0JBQ2xCQSxJQUFJQTt3QkFDQUEsOENBQWtCQTt3QkFDbEJBOzs7b0JBR0pBLDRCQUFZQTtvQkFDWkEsd0JBQVFBLEFBQU9BO29CQUNmQSx1QkFBT0E7b0JBQ1BBLGtDQUFrQkE7b0JBQ2xCQSxnQ0FBZ0JBOztvQkFFaEJBLGFBQWFBO29CQUNiQSxhQUFhQTtvQkFDYkEsK0JBQWVBLElBQUlBLGdDQUFRQSxRQUFRQTs7O29CQUduQ0EsS0FBS0EsV0FBV0EsSUFBSUEsa0NBQWtCQTt3QkFFbENBLEtBQUtBLFdBQVdBLElBQUlBLGlDQUFpQkE7NEJBRWpDQSxJQUFJQSxDQUFDQSwyQkFBV0EsMkJBQWNBLEdBQU1BO2dDQUVoQ0EsS0FBb0JBLEdBQUdBLEdBQUdBLDBDQUFPQSx5Q0FBb0JBLEdBQUdBLEtBQTlCQSwwQkFBbUNBLDBDQUFPQSx5Q0FBb0JBLEdBQUdBLEtBQTlCQSwwQkFBbUNBLHlCQUFLQSxpQ0FBaUJBLEdBQUdBO2dDQUN6SEEseUJBQVNBLDJCQUFjQSxHQUFNQTs7Ozs7Ozs7O29CQVd6Q0Esa0JBQWtCQSxBQUF1QkE7Ozs7Ozs7Ozs7Ozs7K0JDNUhqQkEsSUFBSUE7Ozs7bUNBRUxBLEdBQUdBO29CQUUxQkEsUUFBUUE7b0JBQ1JBLE9BQU9BO3dCQUVIQTt3QkFDQUEsUUFBUUEsdUNBQVNBO3dCQUNqQkEsWUFBVUEsMkJBQUtBO3dCQUNmQSwyQkFBS0EsR0FBS0EsMkJBQUtBO3dCQUNmQSwyQkFBS0EsR0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQytCUkEsT0FBT0E7Ozs7Ozs7Ozs7dUNBbUJjQSxHQUFXQTtvQkFFdENBLE9BQU9BLFVBQVNBOzt5Q0FHV0EsR0FBV0E7b0JBRXRDQSxPQUFPQSxDQUFDQSxVQUFTQTs7Ozs7Ozs7Ozs7OEJBbEJOQSxHQUFPQTs7Z0JBRWxCQSxTQUFTQTtnQkFDVEEsU0FBU0E7Ozs7Ozs7K0JBa0JNQTtnQkFFZkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsV0FBS0EsWUFBWUEsQ0FBQ0EsV0FBS0E7OzhCQUdSQTtnQkFFeEJBLE9BQU9BLENBQUNBLDRDQUFrQkEsYUFBT0EscUNBQVNBOzs7Z0JBSzFDQSxPQUFPQSxTQUFJQTs7O2dCQUtYQSxPQUFPQSx3Q0FBaUNBLGtDQUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNDdEZ2QkEsS0FBU0E7b0JBQzdCQSxPQUFPQSxrQkFBTUEsQUFBQ0EsNkNBQWFBLENBQUNBLFFBQUlBLGFBQUtBOzt5Q0FHWEEsR0FBR0E7b0JBRTdCQSxPQUFPQSx5QkFBTUEseUNBQVNBLGVBQWZBOzs7Ozs7Ozs7Ozs7Ozs7O3dCQ3dDREEsT0FBT0E7Ozs7Ozs7Ozs7dUNBeUNjQSxHQUFRQTtvQkFFbkNBLE9BQU9BLENBQUNBLENBQUNBLFFBQU9BLFFBQVFBLENBQUNBLFFBQU9BLFFBQVFBLENBQUNBLFlBQVdBLFlBQVlBLENBQUNBLGFBQVlBOzt5Q0F1QmxEQSxHQUFRQTtvQkFFbkNBLE9BQU9BLENBQUNBLENBQUNBLDhDQUFLQTs7Ozs7Ozs7Ozs7Ozs7b0JBL0RSQSxPQUFPQTs7Ozs7b0JBS1BBLE9BQU9BLENBQUNBLFdBQVNBOzs7OztvQkFLakJBLE9BQU9BOzs7OztvQkFLUEEsT0FBT0EsQ0FBQ0EsV0FBU0E7Ozs7O29CQW1FbkJBLE9BQU9BLElBQUlBLGdDQUFRQSxrQkFBQ0EsV0FBU0EsNkJBQWlCQSxrQkFBQ0EsV0FBU0E7Ozs7O29CQW1CeERBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLHFCQUFvQkEsQ0FBQ0EsdUJBQXNCQSxDQUFDQSxrQkFBaUJBLENBQUNBOzs7Ozs7OEJBOUVyRUEsR0FBT0EsR0FBT0EsT0FBV0E7O2dCQUVqQ0EsU0FBU0E7Z0JBQ1RBLFNBQVNBO2dCQUNUQSxhQUFhQTtnQkFDYkEsY0FBY0E7Ozs7Ozs7a0NBYUdBLEdBQU9BO2dCQUV4QkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBU0EsdUJBQWlCQSxDQUFDQSxVQUFVQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFTQTs7a0NBRzNFQTtnQkFFakJBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLFdBQVNBLHVCQUFpQkEsQ0FBQ0EsVUFBVUEsYUFBYUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsV0FBU0E7O2dDQUduR0E7Z0JBRWpCQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxVQUFVQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxXQUFTQSx1QkFBaUJBLENBQUNBLFVBQVVBLGFBQWFBLENBQUNBLFVBQVVBLENBQUNBLFdBQVNBOztrQ0FHbkdBO2dCQUVqQkEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsWUFBWUEsQ0FBQ0EsQ0FBQ0EsWUFBVUEsc0JBQWdCQSxDQUFDQSxXQUFTQSx1QkFBaUJBLENBQUNBLFVBQVVBLGFBQWFBLENBQUNBLENBQUNBLFlBQVVBLHVCQUFpQkEsQ0FBQ0EsV0FBU0E7OzhCQVF4SUE7Z0JBRWZBLG1CQUFLQTtnQkFDTEEsbUJBQUtBOztnQ0FHVUEsU0FBYUE7Z0JBRTVCQSxtQkFBS0E7Z0JBQ0xBLG1CQUFLQTs7K0JBY1dBLGlCQUFxQkE7Z0JBRXJDQSxtQkFBS0E7Z0JBQ0xBLG1CQUFLQTtnQkFDTEEsMkJBQVNBO2dCQUNUQSw2QkFBVUE7OytCQVdLQTtnQkFFZkEsT0FBT0Esd0NBQVFBOzs4QkFHU0E7Z0JBRXhCQSxPQUFPQSxDQUFDQSx5Q0FBZUEsd0NBQVFBLEFBQUNBLHFDQUFNQTs7O2dCQUt0Q0EsT0FBT0EsNkRBQXNEQSxrQ0FBR0Esa0NBQUdBLHNDQUFPQTs7O2dCQUsxRUEsT0FBT0EsQ0FBQ0EsU0FBU0EsU0FBU0EsYUFBYUE7O2tDQUdwQkE7Z0JBRW5CQSxPQUFPQSxDQUFDQSxDQUFDQSxVQUFVQSxjQUNQQSxXQUFXQSxhQUNYQSxTQUFTQSxlQUNUQSxZQUFZQTs7O29DQU1MQSxPQUFnQkE7Z0JBRW5DQSxXQUFTQSxDQUFDQSxDQUFDQSxlQUFhQSxjQUNaQSxnQkFBY0EsYUFDZEEsY0FBWUEsZUFDWkEsaUJBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQkMvTDNCQSxPQUFPQSxJQUFJQSxzQ0FBY0E7OytCQUdQQTtnQkFFbEJBLG9CQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFRRUE7O2dCQUVqQkEsZ0JBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0NqQmNBO3NDQUNFQTt1Q0FDQ0E7c0NBQ0RBO21DQUNIQTtxQ0FDRUE7cUNBQ0FBO3NDQUNDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkN5QnJCQSxPQUFPQTs7Ozs7d0JBS1BBLE9BQU9BOzs7Ozt3QkFLUEEsT0FBT0E7Ozs7O3dCQUtQQSxPQUFPQTs7Ozs7Ozs7OztzQ0E3Q29CQSxJQUFJQTtzQ0FDSkEsSUFBSUE7dUNBQ0hBLElBQUlBO3VDQUNKQSxJQUFJQTs7Ozs4Q0E4REFBLGVBQXdCQSxhQUFzQkE7b0JBRXBGQSxPQUFPQSxDQUFDQSxzR0FBZ0JBLENBQUNBLElBQUlBLFNBQVNBLDhEQUFjQTs7K0JBYTdCQSxRQUFpQkE7b0JBRXhDQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztpQ0FHWUEsUUFBcUJBLFFBQXFCQTtvQkFFN0RBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7O29DQU9HQSxRQUFpQkE7b0JBRTFDQSxTQUFXQSxXQUFXQSxlQUFlQSxXQUFXQTtvQkFDaERBLE9BQU9BLEFBQU9BLFVBQVVBLENBQUNBLEtBQUtBLE1BQU1BLENBQUNBLEtBQUtBOztzQ0FHbEJBLFFBQXFCQSxRQUFxQkE7b0JBRWxFQSxTQUFXQSxhQUFXQSxpQkFBZUEsYUFBV0E7b0JBQ2hEQSxXQUFTQSxBQUFPQSxVQUFVQSxDQUFDQSxLQUFLQSxNQUFNQSxDQUFDQSxLQUFLQTs7MkNBR1pBLFFBQWlCQTtvQkFFakRBLFNBQVdBLFdBQVdBLGVBQWVBLFdBQVdBO29CQUNoREEsT0FBT0EsQ0FBQ0EsS0FBS0EsTUFBTUEsQ0FBQ0EsS0FBS0E7OzZDQUdNQSxRQUFxQkEsUUFBcUJBO29CQUV6RUEsU0FBV0EsYUFBV0EsaUJBQWVBLGFBQVdBO29CQUNoREEsV0FBU0EsQ0FBQ0EsS0FBS0EsTUFBTUEsQ0FBQ0EsS0FBS0E7O2tDQVVEQSxRQUFpQkE7b0JBRTNDQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztvQ0FHZUEsUUFBcUJBLFFBQXFCQTtvQkFFaEVBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7O29DQUdJQSxRQUFpQkE7b0JBRTNDQSxhQUFlQSxJQUFJQTtvQkFDbkJBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsT0FBT0E7O29DQUdlQSxRQUFxQkEsU0FBZUE7b0JBRTFEQSxhQUFlQSxJQUFJQTtvQkFDbkJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7OytCQUdGQSxRQUFpQkE7b0JBRXJDQSxPQUFPQSxDQUFDQSxXQUFXQSxZQUFZQSxDQUFDQSxXQUFXQTs7aUNBR3hCQSxRQUFxQkEsUUFBcUJBO29CQUU3REEsV0FBU0EsQ0FBQ0EsYUFBV0EsY0FBWUEsQ0FBQ0EsYUFBV0E7O21DQWtCbEJBLFFBQWlCQTtvQkFFNUNBO29CQUNBQSxVQUFZQSxNQUFPQSxDQUFDQSxDQUFDQSxXQUFXQSxZQUFZQSxDQUFDQSxXQUFXQTtvQkFDeERBLFdBQVdBLFdBQVdBLENBQUNBLFdBQVdBO29CQUNsQ0EsV0FBV0EsV0FBV0EsQ0FBQ0EsV0FBV0E7b0JBQ2xDQSxPQUFPQTs7cUNBR2dCQSxRQUFxQkEsUUFBcUJBO29CQUVqRUEsVUFBWUEsTUFBT0EsQ0FBQ0EsQ0FBQ0EsYUFBV0EsY0FBWUEsQ0FBQ0EsYUFBV0E7b0JBQ3hEQSxhQUFXQSxhQUFXQSxDQUFDQSxhQUFXQTtvQkFDbENBLGFBQVdBLGFBQVdBLENBQUNBLGFBQVdBOzsrQkFtQlhBLFFBQWlCQTtvQkFFeENBLE9BQU9BLElBQUlBLGlDQUFTQSxXQUFXQSxXQUFXQSxXQUFXQSxVQUNsQ0EsV0FBV0EsV0FBV0EsV0FBV0E7O2lDQUdqQ0EsUUFBcUJBLFFBQXFCQTtvQkFFN0RBLGFBQVdBLGFBQVdBLGFBQVdBLGFBQVdBO29CQUM1Q0EsYUFBV0EsYUFBV0EsYUFBV0EsYUFBV0E7OytCQUdyQkEsUUFBaUJBO29CQUV4Q0EsT0FBT0EsSUFBSUEsaUNBQVNBLFdBQVdBLFdBQVdBLFdBQVdBLFVBQ2xDQSxXQUFXQSxXQUFXQSxXQUFXQTs7aUNBR2pDQSxRQUFxQkEsUUFBcUJBO29CQUU3REEsYUFBV0EsYUFBV0EsYUFBV0EsYUFBV0E7b0JBQzVDQSxhQUFXQSxhQUFXQSxhQUFXQSxhQUFXQTs7b0NBR2hCQSxRQUFpQkE7b0JBRTdDQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztzQ0FHcUJBLFFBQWlCQTtvQkFFN0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsT0FBT0E7O3NDQUdpQkEsUUFBcUJBLGFBQW1CQTtvQkFFaEVBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7O3NDQUdFQSxRQUFxQkEsUUFBcUJBO29CQUVsRUEsYUFBV0EsYUFBV0E7b0JBQ3RCQSxhQUFXQSxhQUFXQTs7a0NBR0lBO29CQUUxQkEsVUFBVUEsQ0FBQ0E7b0JBQ1hBLFVBQVVBLENBQUNBO29CQUNYQSxPQUFPQTs7b0NBR2VBLE9BQW9CQTtvQkFFMUNBLGFBQVdBLENBQUNBO29CQUNaQSxhQUFXQSxDQUFDQTs7cUNBVWlCQTtvQkFFN0JBLFVBQVlBLE1BQU9BLEFBQU9BLFVBQVVBLENBQUNBLFVBQVVBLFdBQVdBLENBQUNBLFVBQVVBO29CQUNyRUEsV0FBV0E7b0JBQ1hBLFdBQVdBO29CQUNYQSxPQUFPQTs7dUNBR2tCQSxPQUFvQkE7b0JBRTdDQSxVQUFZQSxNQUFPQSxBQUFPQSxVQUFVQSxDQUFDQSxZQUFVQSxhQUFXQSxDQUFDQSxZQUFVQTtvQkFDckVBLGFBQVdBLFlBQVVBO29CQUNyQkEsYUFBV0EsWUFBVUE7O29DQUtPQSxRQUFpQkE7b0JBRTdDQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztzQ0FHaUJBLFFBQXFCQSxRQUFxQkE7b0JBRWxFQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBOzs0Q0FrQlFBO29CQUU5QkEsVUFBVUEsQ0FBQ0E7b0JBQ1hBLFVBQVVBLENBQUNBO29CQUNYQSxPQUFPQTs7dUNBSW9CQSxRQUFpQkE7b0JBRTVDQSxPQUFPQSxhQUFZQSxZQUFZQSxhQUFZQTs7eUNBSWhCQSxRQUFpQkE7b0JBRTVDQSxPQUFPQSxhQUFZQSxZQUFZQSxhQUFZQTs7dUNBSWJBLFFBQWlCQTtvQkFFL0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsT0FBT0E7OzBDQUl1QkEsUUFBaUJBO29CQUUvQ0EsWUFBWUE7b0JBQ1pBLFlBQVlBO29CQUNaQSxPQUFPQTs7dUNBSXVCQSxRQUFpQkE7b0JBRS9DQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzt5Q0FJdUJBLE9BQWdCQTtvQkFFOUNBLFdBQVdBO29CQUNYQSxXQUFXQTtvQkFDWEEsT0FBT0E7O3lDQUl1QkEsYUFBbUJBO29CQUVqREEsV0FBV0E7b0JBQ1hBLFdBQVdBO29CQUNYQSxPQUFPQTs7dUNBSXVCQSxRQUFpQkE7b0JBRS9DQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzt5Q0FJdUJBLFFBQWlCQTtvQkFFL0NBLGFBQWVBLElBQUlBO29CQUNuQkEsWUFBWUE7b0JBQ1pBLFlBQVlBO29CQUNaQSxPQUFPQTs7Ozs7Ozs7Ozs7O29CQWhZYUEsT0FBT0Esa0JBQUtBOzs7OztvQkFDWkEsT0FBT0Esa0JBQUtBOzs7Ozs7OEJBbUNwQkEsR0FBU0E7O2dCQUVyQkEsU0FBU0E7Z0JBQ1RBLFNBQVNBOzs4QkFHR0E7O2dCQUVaQSxTQUFTQTtnQkFDVEEsU0FBU0E7Ozs7Ozs7O2dCQVVUQSxPQUFPQSxJQUFJQSxpQ0FBU0EsQUFBT0Esa0JBQVdBLGVBQUlBLEFBQU9BLGtCQUFXQTs7MkJBaUQ5Q0EsR0FBT0E7Z0JBRXJCQSxTQUFJQTtnQkFDSkEsU0FBSUE7Ozs4QkEwQ29CQTtnQkFFeEJBLElBQUlBO29CQUVBQSxPQUFPQSxhQUFPQSxBQUFVQTs7O2dCQUc1QkE7OytCQUdlQTtnQkFFZkEsT0FBT0EsQ0FBQ0EsV0FBS0EsWUFBWUEsQ0FBQ0EsV0FBS0E7OztnQkFxQi9CQSxPQUFPQSxzQ0FBa0JBOzs7Z0JBTXpCQSxPQUFPQSxBQUFPQSxVQUFVQSxDQUFDQSxTQUFJQSxVQUFLQSxDQUFDQSxTQUFJQTs7O2dCQUt2Q0EsT0FBT0EsQ0FBQ0EsU0FBSUEsVUFBS0EsQ0FBQ0EsU0FBSUE7OztnQkFvRXRCQSxVQUFZQSxNQUFPQSxBQUFPQSxVQUFVQSxDQUFDQSxTQUFJQSxVQUFLQSxDQUFDQSxTQUFJQTtnQkFDbkRBLFVBQUtBO2dCQUNMQSxVQUFLQTs7O2dCQXNDTEEscUJBQTZCQTtnQkFDN0JBLE9BQU9BLG1EQUFjQSwwQ0FBbUNBLG1CQUNwREEsa0NBQWdCQSxpQkFBaUJBLGtDQUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQ3ZSL0NBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7d0JBUVBBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7d0JBUVBBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7d0JBUVBBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7d0JBUVBBLE9BQU9BOzs7Ozt3QkFLUEEsT0FBT0E7Ozs7O3dCQUtQQSxPQUFPQTs7Ozs7d0JBS1BBLE9BQU9BOzs7Ozt3QkFLUEEsT0FBT0E7Ozs7O3dCQUtQQSxPQUFPQTs7Ozs7d0JBS1BBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7OztnQ0FsR2NBLElBQUlBOytCQUNMQSxJQUFJQTtpQ0FDRkEsSUFBSUE7aUNBQ0pBLElBQUlBO2lDQUNKQSxJQUFJQTs4QkFDUEEsSUFBSUE7Z0NBQ0ZBLElBQUlBLHNDQUFhQTtpQ0FDaEJBLElBQUlBO2dDQUNMQSxJQUFJQSxpQ0FBU0E7bUNBQ1ZBLElBQUlBLDJDQUFpQkE7b0NBQ3BCQSxJQUFJQTs7Ozs7Ozs7Ozs7Ozs7OytCQW1JWkEsUUFBaUJBO29CQUV4Q0EsWUFBWUE7b0JBQ1pBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBV1lBLFFBQXFCQSxRQUFxQkE7b0JBRTdEQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7O2lDQUlHQSxTQUFrQkE7OztvQkFFM0NBLGtDQUFVQSxTQUFhQSxTQUFhQTtvQkFDcENBLE9BQU9BOzttQ0FHY0EsU0FBc0JBLFNBQXNCQTtvQkFFakVBLFFBQVFBLGNBQVlBLGNBQVlBLGNBQVlBO29CQUM1Q0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsY0FBWUEsY0FBWUEsY0FBWUE7b0JBQzlDQSxRQUFRQSxjQUFZQSxjQUFZQSxjQUFZQTtvQkFDNUNBLGFBQVdBO29CQUNYQSxhQUFXQTtvQkFDWEEsYUFBV0E7O29DQUdjQSxTQUFrQkE7OztvQkFFM0NBO29CQUNBQSw0Q0FBb0JBLFNBQWFBLFNBQWFBO29CQUM5Q0EsT0FBT0EsQUFBT0EsVUFBVUE7O3NDQUdBQSxRQUFxQkEsUUFBcUJBO29CQUVsRUEsNENBQW9CQSxRQUFZQSxRQUFZQTtvQkFDNUNBLFdBQVNBLEFBQU9BLFVBQVVBOzsyQ0FHTUEsUUFBaUJBOzs7b0JBRWpEQTtvQkFDQUEsNENBQW9CQSxRQUFZQSxRQUFZQTtvQkFDNUNBLE9BQU9BOzs2Q0FHd0JBLFFBQXFCQSxRQUFxQkE7b0JBRXpFQSxXQUFTQSxDQUFDQSxhQUFXQSxjQUFZQSxDQUFDQSxhQUFXQSxjQUNwQ0EsQ0FBQ0EsYUFBV0EsY0FBWUEsQ0FBQ0EsYUFBV0EsY0FDcENBLENBQUNBLGFBQVdBLGNBQVlBLENBQUNBLGFBQVdBOztrQ0FHbkJBLFFBQWlCQTtvQkFFM0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztvQ0FHbUJBLFFBQWlCQTtvQkFFM0NBLGFBQWVBLElBQUlBO29CQUNuQkEsWUFBWUE7b0JBQ1pBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsT0FBT0E7O29DQUdlQSxRQUFxQkEsU0FBZUE7b0JBRTFEQSxhQUFlQSxJQUFJQTtvQkFDbkJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7b0JBQ3RCQSxhQUFXQSxhQUFXQTs7b0NBR0FBLFFBQXFCQSxRQUFxQkE7b0JBRWhFQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7OytCQUdGQSxTQUFrQkE7b0JBRXRDQSxPQUFPQSxZQUFZQSxZQUFZQSxZQUFZQSxZQUFZQSxZQUFZQTs7aUNBR2hEQSxTQUFzQkEsU0FBc0JBO29CQUUvREEsV0FBU0EsY0FBWUEsY0FBWUEsY0FBWUEsY0FBWUEsY0FBWUE7O29DQTRDekNBLFFBQWlCQTtvQkFFN0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztzQ0FHcUJBLFFBQWlCQTtvQkFFN0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOztzQ0FHaUJBLFFBQXFCQSxhQUFtQkE7b0JBRWhFQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7O3NDQUdFQSxRQUFxQkEsUUFBcUJBO29CQUVsRUEsYUFBV0EsYUFBV0E7b0JBQ3RCQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBOzs7Ozs7Ozs7Ozs7O2tDQVNJQTtvQkFFMUJBLFFBQVFBLElBQUlBLGlDQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQTtvQkFDMUNBLE9BQU9BOzs7Ozs7Ozs7Ozs7OztvQ0FTZUEsT0FBb0JBO29CQUUxQ0EsYUFBV0EsQ0FBQ0E7b0JBQ1pBLGFBQVdBLENBQUNBO29CQUNaQSxhQUFXQSxDQUFDQTs7cUNBUWlCQTs7b0JBRTdCQSxzQ0FBY0EsUUFBWUE7b0JBQzFCQSxPQUFPQTs7dUNBR2tCQSxPQUFvQkE7b0JBRTdDQTtvQkFDQUEscUNBQWFBLGtCQUFXQSxvQ0FBVUE7b0JBQ2xDQSxXQUFTQSxNQUFLQTtvQkFDZEEsYUFBV0EsWUFBVUE7b0JBQ3JCQSxhQUFXQSxZQUFVQTtvQkFDckJBLGFBQVdBLFlBQVVBOzttQ0FHTUEsUUFBaUJBOzs7O29CQUs1Q0E7O29CQUVBQSxpQkFBbUJBLENBQUNBLENBQUNBLFdBQVdBLFlBQVlBLENBQUNBLFdBQVdBLGFBQWFBLENBQUNBLFdBQVdBO29CQUNqRkEsb0JBQW9CQSxXQUFXQSxDQUFDQSxNQUFPQSxZQUFZQTtvQkFDbkRBLG9CQUFvQkEsV0FBV0EsQ0FBQ0EsTUFBT0EsWUFBWUE7b0JBQ25EQSxvQkFBb0JBLFdBQVdBLENBQUNBLE1BQU9BLFlBQVlBOztvQkFFbkRBLE9BQU9BOztxQ0FHZ0JBLFFBQXFCQSxRQUFxQkE7Ozs7OztvQkFPakVBLGlCQUFtQkEsQ0FBQ0EsQ0FBQ0EsYUFBV0EsY0FBWUEsQ0FBQ0EsYUFBV0EsZUFBYUEsQ0FBQ0EsYUFBV0E7b0JBQ2pGQSxhQUFXQSxhQUFXQSxDQUFDQSxNQUFPQSxjQUFZQTtvQkFDMUNBLGFBQVdBLGFBQVdBLENBQUNBLE1BQU9BLGNBQVlBO29CQUMxQ0EsYUFBV0EsYUFBV0EsQ0FBQ0EsTUFBT0EsY0FBWUE7Ozs7Ozs7Ozs7Ozs7b0NBU2RBLFFBQWlCQTtvQkFFN0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzs7Ozs7Ozs7Ozs7OztzQ0FTaUJBLFFBQXFCQSxRQUFxQkE7b0JBRWxFQSxhQUFXQSxhQUFXQTtvQkFDdEJBLGFBQVdBLGFBQVdBO29CQUN0QkEsYUFBV0EsYUFBV0E7Ozs7Ozs7Ozs7Ozs7O3VDQTBES0EsUUFBaUJBO29CQUU1Q0EsT0FBT0EsYUFBWUEsWUFDWkEsYUFBWUEsWUFDWkEsYUFBWUE7O3lDQUdRQSxRQUFpQkE7b0JBRTVDQSxPQUFPQSxDQUFDQSxDQUFDQSx1REFBVUE7O3VDQUdXQSxRQUFpQkE7b0JBRS9DQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLFlBQVlBO29CQUNaQSxPQUFPQTs7NENBR3VCQTtvQkFFOUJBLFFBQVFBLElBQUlBLGlDQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQTtvQkFDMUNBLE9BQU9BOzswQ0FHdUJBLFFBQWlCQTtvQkFFL0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzt1Q0FHdUJBLFFBQWlCQTtvQkFFL0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzt5Q0FHdUJBLE9BQWdCQTtvQkFFOUNBLFdBQVdBO29CQUNYQSxXQUFXQTtvQkFDWEEsV0FBV0E7b0JBQ1hBLE9BQU9BOzt5Q0FHdUJBLGFBQW1CQTtvQkFFakRBLFdBQVdBO29CQUNYQSxXQUFXQTtvQkFDWEEsV0FBV0E7b0JBQ1hBLE9BQU9BOzt1Q0FHdUJBLFFBQWlCQTtvQkFFL0NBLFlBQVlBO29CQUNaQSxZQUFZQTtvQkFDWkEsWUFBWUE7b0JBQ1pBLE9BQU9BOzt5Q0FHdUJBLE9BQWdCQTtvQkFFOUNBLGFBQWVBLElBQUlBO29CQUNuQkEsV0FBV0E7b0JBQ1hBLFdBQVdBO29CQUNYQSxXQUFXQTtvQkFDWEEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7b0JBM0hIQSxPQUFPQSxzQkFDSEEsb0NBQ0FBLG9DQUNBQTs7Ozs7OzhCQW5VSUEsR0FBU0EsR0FBU0E7O2dCQUU5QkEsU0FBU0E7Z0JBQ1RBLFNBQVNBO2dCQUNUQSxTQUFTQTs7OEJBSUdBOztnQkFFWkEsU0FBU0E7Z0JBQ1RBLFNBQVNBO2dCQUNUQSxTQUFTQTs7OEJBSUdBLE9BQWdCQTs7Z0JBRTVCQSxTQUFTQTtnQkFDVEEsU0FBU0E7Z0JBQ1RBLFNBQVNBOzs7Ozs7OzhCQTRIZUE7Z0JBRXhCQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDRkE7OztnQkFFSkEsWUFBWUEscUNBQVVBO2dCQUN0QkEsT0FBT0EsV0FBS0EsV0FDSkEsV0FBS0EsV0FDTEEsV0FBS0E7OytCQUdFQTtnQkFFZkEsT0FBT0EsV0FBS0EsV0FDSkEsV0FBS0EsV0FDTEEsV0FBS0E7OztnQkFLYkEsT0FBT0Esa0JBQUtBLEFBQUNBLFNBQVNBLFNBQVNBOzs7Z0JBTS9CQTtnQkFDQUEsdURBQW9CQSxrQkFBVUEsb0NBQVVBO2dCQUN4Q0EsT0FBT0EsQUFBT0EsVUFBVUE7OztnQkFLeEJBO2dCQUNBQSx1REFBb0JBLGtCQUFVQSxvQ0FBVUE7Z0JBQ3hDQSxPQUFPQTs7O2dCQStEUEEsaURBQWNBLGtCQUFVQTs7O2dCQXdGeEJBLFNBQW1CQTtnQkFDbkJBO2dCQUNBQSxVQUFVQTtnQkFDVkE7Z0JBQ0FBLFVBQVVBO2dCQUNWQTtnQkFDQUEsVUFBVUE7Z0JBQ1ZBO2dCQUNBQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7a0JDMVhpQkE7Ozs7OzsrQkFDNkNBOzhCQUN6Q0E7OzhCQUdmQTs7Z0JBRWJBLGNBQWNBOzs4QkFRREEsUUFBZUE7O2dCQUU1QkEsZUFBZUE7Z0JBQ2ZBLGNBQWNBOzs0QkFHREEsTUFBV0EsU0FBOEdBOzs7OztnQkFFdElBLFlBQVlBO2dCQUNaQSxlQUFlQTtnQkFDZkEsY0FBY0E7Ozs7Ozs7Ozs7Ozs4QkEyQ3NCQSxLQUFJQTs7NEJBRWhDQTs7Z0JBRVJBLGNBQWNBOzs7Ozs7Ozs7Ozs7Ozs2QkN2SUVBLEtBQUlBOzZCQUNKQSxLQUFJQTs7Ozs4QkFFTEE7Z0JBRWZBLEtBQUtBLFdBQVdBLElBQUlBLGtCQUFhQTtvQkFFN0JBLG1CQUFNQSxHQUFOQSxtQkFBTUEsSUFBTUE7b0JBQ1pBLElBQUlBLG1CQUFNQTt3QkFFTkEsYUFBUUE7d0JBQ1JBLGFBQVFBOzs7OzJCQU9GQTtnQkFFZEEsZUFBVUE7OztnQkFLVkEsT0FBT0E7OytCQUdXQTs7Z0JBRWxCQSxvQkFBZUE7Z0JBQ2ZBLDBCQUFrQkE7Ozs7d0JBRWRBLG9DQUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQzRvQk1BLFVBQWNBOztnQkFFbkNBLGdCQUFnQkE7Z0JBQ2hCQSxjQUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0M5bEJ5QkEsS0FBSUE7Ozs4QkFHM0JBOztnQkFFaEJBLDhCQUE4QkE7OzRCQUdkQTs7Z0JBRWhCQSwwQkFBMEJBOzs7Ozs7OzswQ0RvTktBO29CQUUvQkEsVUFBVUE7b0JBQ1ZBLFVBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQ0F4VHVCQSxLQUFJQTttQ0FDUkEsSUFBSUE7bUNBQ0pBLElBQUlBO3FDQUNVQSxLQUFJQTs4QkFJdkJBLElBQUlBO3VDQUNRQSxLQUFJQTt5Q0FDRkEsS0FBSUE7c0NBQ1BBLEtBQUlBOztvQ0FHZkE7b0NBRU9BLElBQUlBOzs7OzRCQXdCckJBLE1BQVVBLEtBQWdCQTs7O2dCQUd4Q0EsaUJBQWlCQTtnQkFDakJBLHNCQUFpQkE7Z0JBQ2pCQSx1QkFBa0JBLHdEQUFpQkE7Z0JBQ25DQSx1QkFBa0JBLDBEQUFtQkEsMkNBQUNBO2dCQUN0Q0EsdUJBQWtCQSwwREFBbUJBLDJDQUFDQTtnQkFDdENBLHVCQUFrQkEsMkRBQW9CQTs7Z0JBRXRDQTtnQkFDQUEseUJBQW9CQTtnQkFDcEJBLHlCQUFvQkE7Z0JBQ3BCQSx5QkFBb0JBO2dCQUNwQkEseUJBQW9CQTs7Z0JBRXBCQSxJQUFJQTtvQkFFQUEsMkJBQXNCQTtvQkFDdEJBLGtCQUFhQSxtQkFDVEEsd0RBQ0FBLDBEQUNBQSwwREFDQUEsMkRBQ0FBOztvQkFLSkEsMkJBQXNCQTtvQkFDdEJBLDJCQUFzQkE7b0JBQ3RCQSwyQkFBc0JBOzs7b0JBR3RCQSxrQkFBYUEsbUJBQ1RBLDBEQUNBQSwwREFDQUEsd0RBQ0FBLDJEQUNBQSxzREFDQUEscURBQ0FBOzs7Ozs7Ozt1Q0EvRGtCQTtnQkFFMUJBLElBQUlBLGdCQUFnQkE7b0JBRWhCQSxlQUFlQSxJQUFJQTs7Z0JBRXZCQSxvQkFBb0JBOzs7O2dCQW1FcEJBLE9BQU9BOzttQ0FHYUE7Z0JBRXBCQSxxQ0FBZ0NBO2dCQUNoQ0EsZ0JBQVdBOzs7O2dCQU1YQSxXQUFvQkEsSUFBSUE7O2dCQUV4QkE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUEsWUFBWUE7Z0JBQ1pBO2dCQUNBQSxLQUFLQSxXQUFXQSxJQUFJQSxtQkFBbUJBO29CQUVuQ0EsOEJBQVdBLEdBQVhBLGVBQWdCQTs7OztnQkFJcEJBLGtCQUFhQTtnQkFDYkEsMEJBQXFCQTtnQkFDckJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBb0NBQTtnQkFDQUE7OztnQkFLQUEsbUJBQTRCQSxJQUFJQTtnQkFDaENBLGtCQUFhQTtnQkFDYkEsT0FBT0E7OztnQkFLUEEsS0FBS0EsV0FBV0EsSUFBSUEscUJBQWdCQTtvQkFFaENBLHNCQUFTQSxVQUFVQSxzQkFBU0E7O2dCQUVoQ0EsaUJBQVlBO2dCQUNaQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUE7Z0JBQ0FBOzs7Z0JBS0FBLE9BQU9BOzs7O2dCQUtQQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQTtnQkFDQUEsMEJBQXFCQTs7Ozt3QkFFakJBLElBQUlBLGNBQWFBOzRCQUViQSxJQUFJQTtnQ0FDQUE7Ozt3QkFFUkEsSUFBSUEsY0FBYUE7NEJBRWJBLElBQUlBO2dDQUNBQTs7Ozs7Ozs7aUJBR1pBLEtBQUtBLFdBQVdBLElBQUlBLDRCQUE0QkE7b0JBRTVDQSxhQUFhQSwwQkFBcUJBO29CQUNsQ0EsSUFBSUEsOEJBQThCQSwwQkFBcUJBO3dCQUVuREE7OztnQkFHUkEsSUFBSUEsQ0FBQ0E7b0JBRURBOzt1QkFHQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsY0FBYUEsQ0FBQ0EseUNBQW9DQSxDQUFDQTtvQkFFMURBOztnQkFFSkEsSUFBSUE7b0JBRUFBO29CQUNBQTtvQkFDQUE7Ozs7OEJBS1dBO2dCQUVmQSxJQUFJQSx5QkFBb0JBLDJCQUFxQkE7b0JBRXpDQSxxQkFBZ0JBO29CQUNoQkEsSUFBSUE7d0JBRUFBOzs7Ozs7OztnQkFTUkEsb0JBQTRCQTtnQkFDNUJBLFFBQVFBO29CQUVKQSxLQUFLQTt3QkFDREEsaUJBQVlBO3dCQUNaQTtvQkFDSkEsS0FBS0E7d0JBQ0RBLGlCQUFZQTt3QkFDWkE7b0JBQ0pBLEtBQUtBO3dCQUNEQSxpQkFBWUE7d0JBQ1pBO29CQUNKQSxLQUFLQTt3QkFDREEsSUFBSUEsZ0ZBQTRCQTs0QkFFNUJBOzRCQUNBQTs0QkFDQUE7NEJBQ0FBLGdCQUFnQkE7NEJBQ2hCQSxJQUFJQSxZQUFZQTtnQ0FFWkEsS0FBS0EsUUFBUUEsV0FBV0EsSUFBSUEscUJBQWdCQTtvQ0FFeENBLElBQUlBLHNCQUFTQTt3Q0FFVEEsZ0NBQTJCQTt3Q0FDM0JBO3dDQUNBQTs7Ozs7OzRCQU1aQSxJQUFJQTtnQ0FFQUEsSUFBSUEsMEVBQW9CQTtvQ0FFcEJBLGlCQUFZQTtvQ0FDWkEsMEJBQWtCQTs7Ozs0Q0FFZEEsSUFBSUE7Z0RBRUFBLHNEQUFlQTs7Ozs7Ozs7b0NBTXZCQTtvQ0FDQUEsd0JBQW1CQTtvQ0FDbkJBOzs7OzRCQU1SQTs7O3dCQUVKQTtvQkFDSkE7d0JBQ0lBOzs7bUNBVWFBOztnQkFFckJBLG9CQUE0QkE7Z0JBQzVCQSxJQUFJQSxVQUFTQTtvQkFBZUE7O2dCQUM1QkEsSUFBSUEsVUFBU0E7b0JBRXpCQSxtR0FBNkdBO29CQUM3RkE7b0JBQ0FBO29CQUNBQSxJQUFJQSxnQkFBZ0JBO3dCQUVoQkEsZ0JBQWdCQTs7b0JBRXBCQSxLQUFLQSxXQUFXQSxJQUFJQSxlQUFlQTt3QkFFL0JBLDJCQUFzQkEsNEJBQWVBOzs7O29CQUl6Q0Esb0JBQWVBOztnQkFFbkJBLElBQUlBLGtCQUFpQkE7b0JBRWpCQTtvQkFDQUE7b0JBQ0FBO29CQUNBQTtvQkFDQUEsMEJBQWtCQTs7Ozs0QkFFZEEsS0FBS0EsWUFBV0EsS0FBSUEsZ0JBQWdCQTtnQ0FFaENBLDJCQUFRQSxJQUFSQSxZQUFhQTs7Ozs7Ozs7Z0JBSXpCQSx5QkFBb0JBOzs7O2dCQUtwQkEsWUFBWUE7Z0JBQ1pBLFFBQVFBO29CQUVKQSxLQUFLQTt3QkFDREE7d0JBQ0FBO3dCQUNBQTtvQkFDSkEsS0FBS0E7d0JBQ0RBO29CQUNKQSxLQUFLQTt3QkFDREE7d0JBQ0FBLDBCQUFtQkE7Ozs7Z0NBRWZBLGdCQUFXQSxJQUFJQSx5Q0FBZ0JBLDRDQUFnQkEsQUFBS0EsS0FBS0E7Ozs7Ozt5QkFFN0RBLDJCQUFtQkE7Ozs7Z0NBRWZBLGdCQUFXQSxJQUFJQSx5Q0FBZ0JBLDRDQUFnQkEsQUFBS0EsTUFBS0E7Ozs7Ozt5QkFFN0RBLGdCQUFXQSxJQUFJQSx5Q0FBZ0JBLGtEQUFzQkEsaUxBQXVCQTt3QkFDNUVBLGdCQUFXQSxJQUFJQSx5Q0FBZ0JBLGtEQUFzQkEsaUxBQXVCQTt3QkFDNUVBO29CQUNKQSxLQUFLQTt3QkFDREE7d0JBQ0FBO3dCQUNBQTtvQkFDSkE7d0JBQ0lBOzs7aUNBS1VBOztnQkFFbEJBLElBQUlBLGVBQWNBO29CQUVkQSxXQUFnQkEsQUFBVUE7O29CQUUxQkEsSUFBSUEsOEJBQXlCQSxTQUFTQSxnQ0FBMkJBOzs7d0JBRzdEQSxnQkFBV0E7Ozs7O2dCQUtuQkEsSUFBSUEsZUFBY0E7b0JBRWRBLFdBQXVCQSxBQUFpQkE7b0JBQ3hDQSxJQUFJQSxTQUFRQTt3QkFFUkEsMEJBQWtCQTs7OztnQ0FFZEEsSUFBSUEsV0FBVUE7b0NBRVZBLEtBQUtBLFdBQVdBLElBQUlBLGdCQUFnQkE7d0NBRWhDQSxJQUFJQSwyQkFBUUEsR0FBUkEsYUFBY0E7NENBRWRBLDJCQUFRQSxHQUFSQSxZQUFhQTs7d0NBRWpCQSxZQUFZQSwyQkFBUUEsR0FBUkE7O3dDQUVaQSxJQUFJQSxVQUFTQSxNQUFNQSxNQUFLQTs0Q0FFcEJBLElBQUlBO2dEQUVBQSwyQkFBUUEsZUFBUkEsWUFBaUJBOzs7Ozs7Ozs7OztvQkFPekNBLElBQUlBLFNBQVFBO3dCQUVSQTs7Ozs7O2dCQU9SQTtnQkFDQUE7Z0JBQ0FBLDBCQUFrQkE7Ozs7d0JBRWRBLElBQUlBLFdBQVVBOzRCQUVWQSxJQUFJQTtnQ0FDQUE7Ozt3QkFFUkEsSUFBSUEsV0FBVUE7NEJBRVZBLElBQUlBO2dDQUNBQTs7Ozs7Ozs7aUJBR1pBLE9BQU9BLGdCQUFlQTs7a0NBR0hBOztnQkFFbkJBLDBCQUFrQkE7Ozs7d0JBRWRBLElBQUlBLFdBQVVBOzRCQUVWQSxLQUFLQSxXQUFXQSxJQUFJQSxnQkFBZ0JBOztnQ0FHaENBLFlBQVlBLDJCQUFRQSxHQUFSQTs7Z0NBRVpBLElBQUlBLFVBQVNBOztvQ0FHVEEsMkJBQVFBLEdBQVJBLFlBQWFBLEFBQU1BO29DQUNuQkE7Ozs7Ozs7Ozs7Ozs7O2dCQWFoQkEsZUFBd0JBLHNCQUFTQTtnQkFDakNBLFdBQVdBO2dCQUNYQSxpQkFBWUEsVUFBVUE7O21DQUdGQSxPQUFvQkE7Z0JBRXhDQSxrQ0FBNkJBLE9BQU9BOzs7aURBSURBOztnQkFFbkNBLFlBQVlBO2dCQUNaQSwwQkFBa0JBOzs7O3dCQUVkQSxJQUFJQSwyQkFBS0E7NEJBRUxBLElBQUlBLHNEQUFTQTtnQ0FFVEEsSUFBSUEsV0FBVUE7b0NBRVZBOzs7Ozs7Ozs7aUJBS2hCQSxPQUFPQTs7bURBSThCQTs7Z0JBRXJDQTtnQkFDQUEsMEJBQWtCQTs7Ozt3QkFFZEEsSUFBSUEsMkJBQUtBOzRCQUVMQSxJQUFJQSxzREFBU0E7Z0NBRVRBLElBQUlBLFdBQVVBO29DQUVWQTs7Ozs7Ozs7O2lCQUtoQkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQStCNkJBLE9BQU9BLElBQUlBLGlDQUFtQkEsWUFBT0E7Ozs7O29CQUVoREEsT0FBT0E7Ozs7O29CQUVOQSxPQUFPQSxDQUFDQTs7Ozs7Ozs7OzZCQWZiQTs7Ozs7K0JBT0lBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQXRCTEEsSUFBSUE7cUNBRUtBLElBQUlBO29DQUNMQSxJQUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQzVoQmpCQSxNQUFVQSxtQkFBcUNBLFlBQWdCQTs7O2dCQUU5RUEsV0FBV0E7Z0JBQ1hBLGlCQUFZQSxJQUFJQTtnQkFDaEJBLGtCQUFhQSxJQUFJQSx1Q0FBV0EsTUFBTUEsS0FBS0E7Z0JBQ3ZDQSxVQUFVQSxJQUFJQTs7Z0JBRWRBLGFBQWFBOztnQkFFYkEsa0JBQWtCQSxxR0FBY0E7Z0JBQ2hDQSxxQkFBcUJBO2dCQUNyQkEsSUFBSUEsZUFBZUE7O29CQUdmQSwwQkFBcUJBOzs7OzRCQUVqQkEsbUJBQW1CQSxBQUFxQkE7Ozs7Ozs7b0JBSzVDQSxtQkFBbUJBO29CQUNuQkEsbUJBQW1CQTtvQkFDbkJBLG1CQUFtQkE7O2dCQUV2QkEsWUFBWUEsYUFBYUE7Z0JBQ3pCQSxZQUFZQTtnQkFDWkEsMkJBQXFCQTs7Ozt3QkFFakJBLDhCQUE4QkE7Ozs7Ozs7Z0JBR2xDQSxtQ0FBOEJBLElBQUlBLDZDQUFpQkEsaUJBQVlBLGVBQWVBLEtBQUtBOztnQkFFbkZBLHdCQUFpQ0EsS0FBSUE7O2dCQUVyQ0EsaUJBQWlCQSxJQUFJQSw2Q0FBaUJBLG1CQUFrQkE7Z0JBQ3hEQSxrQkFBa0JBOztnQkFFbEJBLDRCQUFtQ0E7Z0JBQ25DQSxnQ0FBMkJBOztnQkFFM0JBLG1CQUFtQkEsSUFBSUEsK0NBQW1CQSxLQUFLQSxZQUFZQTtnQkFDM0RBLDJCQUFzQkEsSUFBSUEsMkNBQWVBLGNBQWNBOzs7Z0JBR3ZEQSxlQUFlQTtnQkFDZkEsdUJBQXVCQSxtQkFBOEJBLG1CQUFhQSxBQUFPQSxpREFBaUJBLG1CQUFhQSxBQUFPQTtnQkFDOUdBLHFDQUFnQ0E7b0JBRTVCQSxPQUFPQTt3QkFFSEE7OztvQkFHSkEsS0FBS0EsV0FBV0EsSUFBSUEsaUJBQWlCQTt3QkFFakNBLFNBQVNBLGVBQWVBO3dCQUN4QkEsY0FBY0EsZUFBZUE7d0JBQzdCQSxjQUFjQSxtR0FBZ0JBO3dCQUM5QkEsWUFBWUE7d0JBQ1pBLEtBQUtBLFdBQVdBLElBQUlBLDBFQUEyQkE7NEJBRTNDQSxZQUFZQSxDQUFDQSxNQUFHQSwwQkFBb0JBOzRCQUNwQ0EsV0FBV0EsY0FBTUE7NEJBQ2pCQSxJQUFJQTs7Z0NBR0FBLGlDQUFjQSxHQUFkQSxrQkFBbUJBLENBQUNBOzs7O3dCQUk1QkEsdUNBQW9CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NDekVBQTs7O29CQUk1QkEsS0FBS0EsV0FBV0EsSUFBSUEsc0RBQWVBO3dCQUUvQkEsaUVBQU9BLEdBQVBBOzs7Ozs7Ozs7Ozs7Ozs7O29CQWdCSkEsaUVBQU9BLHNEQUFQQTtvQkFDQUE7b0JBQ0FBLGlFQUFPQSwwREFBUEEsa0RBQW1FQTtvQkFDbkVBLGlFQUFPQSx1REFBUEE7b0JBQ0FBLGlFQUFPQSwwREFBUEEsa0RBQW1FQTtvQkFDbkVBO29CQUNBQSxpRUFBT0EsMkRBQVBBLGtEQUFvRUE7b0JBQ3BFQSxpRUFBT0EsMkRBQVBBLGtEQUFvRUE7b0JBQ3BFQSxpRUFBT0EsdURBQVBBO29CQUNBQSxpRUFBT0EsMERBQVBBO29CQUNBQSxpRUFBT0EsNkRBQVBBO29CQUNBQSxpRUFBT0EsMERBQVBBO29CQUNBQSxpRUFBT0EseURBQVBBO29CQUNBQSxpRUFBT0EsNkRBQVBBO29CQUNBQSxpRUFBT0EsMERBQVBBO29CQUNBQSxpRUFBT0EseURBQVBBO29CQUNBQSxpRUFBT0EsNkRBQVBBO29CQUNBQSxpRUFBT0EsaUVBQVBBOzs7b0JBR0FBLGlFQUFPQSwwREFBUEE7b0JBQ0FBLGlFQUFPQSxrRUFBUEE7b0JBQ0FBLGlFQUFPQSw0REFBUEE7b0JBQ0FBLGlFQUFPQSxpRUFBUEE7b0JBQ0FBLGlFQUFPQSwwREFBUEE7b0JBQ0FBLGlFQUFPQSwyREFBUEE7b0JBQ0FBLGlFQUFPQSwyREFBUEE7b0JBQ0FBLGlFQUFPQSwwREFBUEE7b0JBQ0FBLGlFQUFPQSxzREFBUEE7b0JBQ0FBLGlFQUFPQSx1REFBUEE7b0JBQ0FBLGlFQUFPQSw2REFBUEE7Ozs7Ozs7Ozs7Ozs7Ozs7NEJKZmFBLE1BQW9CQSxRQUFlQTs7Z0JBRWhEQSxZQUFZQTtnQkFDWkEsY0FBY0E7Z0JBQ2RBLGNBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkF3RWNBOzs0QkFLUkEsTUFBV0EsUUFBWUE7O2dCQUUzQ0EsWUFBWUE7Z0JBQ1pBLGNBQWNBO2dCQUNkQSxlQUFlQTtnQkFDZkEsY0FBU0E7OzhCQUdXQSxRQUFlQSxRQUFZQTs7Z0JBRS9DQSxjQUFjQTtnQkFDZEEsY0FBY0E7Z0JBQ2RBLGVBQWVBOzs7Ozs7Ozs7Ozs7b0NLeElZQSxLQUFJQTs7OzsrQkFFWkE7b0JBRW5CQSw0REFBYUE7Ozs7b0JBS2JBO29CQUNBQSwwQkFBcUJBOzs7OzRCQUVqQkEseUJBQWtCQTs7Ozs7OztxQkFHdEJBOzs7Ozs7Ozs7Ozs7NEJDWGtCQSxjQUFpQ0E7O2dCQUVuREEsb0JBQW9CQTtnQkFDcEJBLFdBQVdBOzs7O21DQUdXQTs7OztnQkFPdEJBOzs7Ozs7Ozs7Ozs2QkNoQmlDQSxLQUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQzJGeEJBLFNBQWlCQSxJQUFRQTs7Z0JBRXRDQSxlQUFlQTtnQkFDZkEsVUFBVUE7Z0JBQ1ZBLGNBQWNBOzs7Ozs7Ozs7Ozs7O2tDQy9Ga0JBLEtBQUlBOzs0QkFHaEJBLGFBQTBCQTs7Z0JBRTlDQSxtQkFBbUJBO2dCQUNuQkEsdUJBQXVCQTtnQkFDdkJBLGNBQWFBLGNBQ1RBLFlBQU1BLDBEQUF5REEsMERBQTBEQSxzREFBc0RBLDJEQUEyREEsd0RBQXdEQTtnQkFFdFNBLGNBQWFBLGNBQ1RBLFlBQU1BLHlEQUF5REEsMkRBQTJEQTtnQkFFOUhBLGNBQWFBLGNBQ1ZBLFlBQ0lBLHlEQUNBQSwwREFDQUEsNkRBQ0FBO2dCQUlQQSxjQUFhQSxjQUVOQSx5TUFFQUEsZ01BQ0FBLG1NQUNBQSxpTUFDQUE7Z0JBS1BBLGNBQWFBLGNBRU5BLDhMQUNBQSxnTUFDQUEsaU1BQ0FBLGdNQUNBQSxnTUFDQUEsZ01BQ0FBO2dCQUtQQSxjQUFhQSxjQUVUQSwyTEFDR0EsaU1BQ0FBO2dCQU1QQSxjQUFhQSxjQUNOQSxpTUFDQUE7Z0JBTVBBLGNBQWFBLGNBRVRBLDRMQUNHQSxpTUFDQUE7Ozs7Ozs7K0JBV2FBOzs7Z0JBRXBCQSxTQUFTQSxJQUFJQTs7Z0JBRWJBLDBCQUFrQkE7Ozs7d0JBRWRBLElBQUlBOzRCQUVBQSxhQUFhQSxJQUFJQSxvQ0FBUUEscUNBQUtBOzRCQUM5QkE7O3dCQUVKQSxJQUFJQTs0QkFFQUEsYUFBYUEsSUFBSUEsb0NBQVFBLCtCQUEwQkE7NEJBQ25EQTs7d0JBRUpBLElBQUlBOzRCQUVBQSwyQkFBcUJBOzs7O29DQUVqQkEsYUFBYUEsSUFBSUEsb0NBQVFBLEFBQUtBOzs7Ozs7NkJBRWxDQTs7d0JBRUpBLGFBQWFBOzs7Ozs7aUJBRWpCQSxPQUFPQTs7NkJBR3FEQTs7Z0JBRTVEQSxPQUFPQTs7Z0NBR1dBLElBQVlBLElBQVFBO2dCQUV0Q0EsYUFBYUE7Z0JBQ2JBLHFCQUFnQkE7Z0JBQ2hCQSxvQkFBZUEsSUFBSUEsc0NBQVVBLElBQUlBLElBQUlBOzs7Ozs7Ozs7Ozs2QkM0QmhCQSxLQUFJQTs7OEJBR0xBOztnQkFFcEJBLGVBQVVBOzs4QkFHVUE7Ozs7Z0JBRXBCQSxvQkFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0QkN3UEhBOztnQkFFWkEsWUFBWUE7OzhCQUdBQSxNQUFXQSxRQUFpQkE7O2dCQUV4Q0EsWUFBWUE7Z0JBQ1pBLGNBQWNBO2dCQUNkQSxrQkFBa0JBOzs7Ozs7Ozs7Ozs7Ozs7NEJBekRBQSxTQUE0QkEsU0FBNEJBLFFBQVlBLFFBQVlBLGdCQUFxQkE7O2dCQUV2SEEsZUFBZUE7Z0JBQ2ZBLGVBQWVBO2dCQUNmQSxjQUFjQTtnQkFDZEEsY0FBY0E7Z0JBQ2RBLHNCQUFzQkE7Z0JBQ3RCQSxzQkFBc0JBOzs7Ozs7Ozs7Ozs7OzhCQU9HQTsrQkFDZ0JBOzs0QkFFekJBOztnQkFFaEJBLFlBQVlBOzs4QkFHSUEsTUFBVUEsUUFBWUE7O2dCQUV0Q0EsWUFBWUE7Z0JBQ1pBLGNBQWNBO2dCQUNkQSxlQUFlQTs7Ozs7Ozs7Ozs7Ozs0QkFVS0E7O2dCQUVwQkEsY0FBY0E7Ozs7Ozs7Ozs7Ozs7NEJDaFVNQSxLQUFJQTs2QkFFSkEsS0FBSUE7OzRCQU9oQkE7OztnQkFHUkEsY0FBU0EsdUJBQWdCQTs7OztvQ0FjSkE7Z0JBRXJCQSxlQUFVQTtnQkFDVkEsT0FBT0E7O3dDQUdtQkE7Z0JBRTFCQSxPQUFPQSxrQkFBS0EsbUJBQU1BOzs4QkFHREE7Z0JBRWpCQSxPQUFPQSxtQkFBY0E7Ozs7Ozs7Ozs7Ozs7NEJBaEJHQSxJQUFJQTs7OztnQ0FMRkE7Z0JBRXRCQSxhQUFRQTtnQkFDUkEsT0FBT0E7Ozs7Ozs7Ozs7OztxQ0F3QmtCQSxLQUFJQTs7NEJBR2xCQSxTQUFnQkE7O2dCQUUvQkEsdUJBQXVCQSx1QkFBZ0JBO2dCQUN2Q0EsY0FBU0E7Ozs7Ozs7Ozs7Ozs7OzZCQXpITUEsS0FBSUE7Z0NBQ01BLEtBQUlBO3FDQUNiQTs7OztrQ0FFR0E7Z0JBRW5CQSxrQkFBYUE7OztnQkFLYkEsSUFBR0EsdUJBQWlCQTtvQkFDaEJBOzs7OztnQkFLSkEscUJBQWdCQTtnQkFDaEJBLDBCQUFrQkE7Ozs7d0JBRWRBLEtBQUtBLFFBQVFBLDRCQUFpQkEsUUFBUUE7Ozs0QkFJbENBLElBQUlBLG1CQUFNQSxpQkFBZ0JBO2dDQUV0QkE7Z0NBQ0FBOzs0QkFFSkE7NEJBQ0FBLDJCQUEyQkE7Ozs7b0NBRXZCQSxJQUFJQSxDQUFDQSxtQkFBTUEsVUFBVUE7d0NBRWpCQTt3Q0FDQUE7Ozs7Ozs7NkJBR1JBLElBQUlBO2dDQUVBQTtnQ0FDQUEsU0FBU0EsbUJBQU1BOztnQ0FJZkE7Ozs7Ozs7OzsyQkFNQUE7Z0JBRVpBLGNBQWNBO2dCQUNkQSxlQUFVQTtnQkFDVkEsT0FBT0E7OztnQkFLUEE7Ozs7Ozs7Ozs7OzRCQWdGdUNBLEtBQUlBOzs7OzhCQVg1QkE7Z0JBRWZBLE9BQU9BLG1CQUFjQTs7MkJBR1BBO2dCQUVkQSxjQUFTQTs7Ozs7Ozs7Ozs7NEJENkxXQSxLQUFJQTs7NEJBRVpBOztnQkFFWkEsbUJBQW1CQTs7OEJBR1BBOztnQkFFWkEsY0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCVHFYQUEsTUFBZ0JBOztnQkFFekJBLFlBQVlBO2dCQUNaQSxZQUFZQTs7OEJBR0hBLE1BQWdCQTs7Z0JBRXpCQSxZQUFZQTtnQkFDWkEsWUFBWUEsdUJBQWdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCV2h0QkpBLEtBQUlBOzRCQUNUQSxLQUFJQTs7Ozs7Z0JBS3ZCQTs7MkJBR2NBLE9BQWFBO2dCQUUzQkEsZ0JBQVdBO2dCQUNYQSxjQUFTQTs7OzZCQUlPQSxJQUFRQTtnQkFFeEJBLElBQUlBLG1CQUFjQTtvQkFBSUE7O2dCQUN0QkEsT0FBT0Esa0JBQUtBLFFBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCTlRPQSxLQUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJQbUdoQkEsUUFBZUE7O2dCQUU3QkEsY0FBY0E7Z0JBQ2RBLGdCQUFnQkE7Ozs7Ozs7Ozs7Ozs7aUNjL0dnQkEsS0FBSUE7bUNBQ0lBLEtBQUlBO2lDQUNsQkEsSUFBSUE7Ozs7Z0JBSzlCQSxtQkFBY0E7Z0JBQ2RBLGlCQUFrQ0EsbUJBRTlCQSxJQUFJQSx3Q0FDSkEsSUFBSUEsaUNBQW1CQSxRQUN2QkEsSUFBSUEsb0NBQXNCQSxLQUMxQkEsSUFBSUE7Z0JBRVJBLGlCQUFzQkE7Z0JBTXRCQSxnQkFBcUJBO2dCQU1yQkEsS0FBS0EsV0FBV0EsSUFBSUEsbUJBQW1CQTtvQkFFbkNBLGlCQUFrQkEsOEJBQVdBLEdBQVhBLGNBQTBCQSxJQUFJQSxzQ0FBVUEsbURBQXVCQSx5Q0FBYUEsOEJBQVdBLEdBQVhBLHdCQUF3QkEsSUFBSUEsdUNBQVdBLHlDQUFhQSw4QkFBV0EsR0FBWEEsd0JBQXNCQSxlQUFTQSwyS0FBd0JBO29CQUN6TUEsMkJBQTJCQSw4QkFBV0EsR0FBWEEsY0FBcUJBLDZCQUFVQSxHQUFWQTs7Z0JBRXBEQSwwQkFBMEJBLHVCQUFpQkEsSUFBSUEsNkNBQVVBLG9EQUF3QkEsSUFBSUEsb0RBQWlCQSxzREFBMEJBLHdEQUFpQ0EsZUFBU0E7Z0JBQzFLQTs7Z0JBRUFBLDhCQUE4QkEsdUJBQWlCQSxJQUFJQSw2Q0FBVUEsbURBQXVCQSxzREFBMEJBLElBQUlBLG9EQUFpQkEsc0RBQTBCQSx3REFBaUNBLGVBQVNBO2dCQUN2TUE7O2dCQUVBQSw2QkFBNkJBLHVCQUFpQkEsSUFBSUEsNkNBQVVBLG1EQUF1QkEscURBQXlCQSxJQUFJQSxvREFBaUJBLHNEQUEwQkEsdURBQWdDQSxlQUFTQTtnQkFDcE1BOztnQkFFQUEsaUNBQWlDQSx1QkFBaUJBLElBQUlBLDZDQUFVQSxtREFBdUJBLHlEQUE2QkEsSUFBSUEsb0RBQWlCQSxzREFBMEJBLDJEQUFvQ0EsZUFBU0E7Z0JBQ2hOQTs7Z0JBRUFBLFdBQVlBO2dCQUNaQSw4QkFBOEJBLHVCQUFpQkEsSUFBSUEsMkNBQVVBLE1BQU1BLHFEQUF5QkEsSUFBSUEsa0RBQWlCQSxTQUFTQSx1REFBZ0NBLGVBQVNBO2dCQUNuS0E7O2dCQUVBQSxrQ0FBa0NBLHVCQUFpQkEsSUFBSUEsMkNBQVVBLE1BQU1BLHlEQUE2QkEsSUFBSUEsa0RBQWlCQSxTQUFTQSwyREFBb0NBLGVBQVNBO2dCQUMvS0E7O2dCQUVBQSw2QkFBNkJBLHVCQUFpQkEsa0RBQXNCQSxJQUFJQSwyQ0FBdUJBLGVBQVNBO2dCQUN4R0E7Ozs7aUNBR21CQTtnQkFFbkJBLE9BQU9BLGlEQUFxQkEsZ0JBQVdBOzs7Z0JBS3ZDQSx3QkFBbUJBO2dCQUNuQkEsT0FBT0E7OzZDQXlCd0JBLE1BQWFBO2dCQUU1Q0EscUJBQWdCQSxJQUFJQSwyQ0FBZUEsTUFBTUE7O3FDQUdwQkEsT0FBY0EsT0FBY0E7O2dCQUVqREEsU0FBU0EsSUFBSUEscUNBQVNBO2dCQUN0QkEsa0JBQWtCQTtnQkFDbEJBLDBCQUFxQkE7Ozs7d0JBRWpCQSxZQUFZQSx1QkFBZ0JBOzs7Ozs7O2dCQUdoQ0EsbUJBQWNBOzttQ0FHT0EsT0FBY0EsV0FBcUJBLFFBQWVBOztnQkFFdkVBLFNBQVNBLElBQUlBLHFDQUFTQTtnQkFDdEJBLFdBQVlBLElBQUlBO2dCQUNoQkEsaUJBQWlCQTtnQkFDakJBLHdCQUF3QkE7Z0JBQ3hCQSxhQUFhQTtnQkFDYkEsMEJBQXFCQTs7Ozt3QkFFakJBLFlBQVlBLHVCQUFnQkE7Ozs7OztpQkFFaENBLG1CQUFjQTs7d0NBR2NBOztnQkFFNUJBLFlBQWVBLGtCQUFTQTtnQkFDeEJBLEtBQUtBLFdBQVdBLElBQUlBLGNBQWNBO29CQUU5QkEseUJBQU1BLEdBQU5BLFVBQVdBLElBQUlBLHdDQUFLQSwyQkFBUUEsR0FBUkE7O2dCQUV4QkEsT0FBT0E7O2dDQUdlQTs7Z0JBRXRCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBNURrQkEsT0FBV0E7Z0JBRWhDQSxTQUFTQSxJQUFJQSxpQ0FBS0E7Z0JBQ2xCQSxjQUFjQSxrQkFBS0EsV0FBV0EsQUFBT0E7Z0JBQ3JDQSxLQUFLQSxXQUFXQSxJQUFJQSxPQUFPQTtvQkFFdkJBLEtBQUtBLFdBQVdBLElBQUlBLGFBQVFBOzt3QkFHeEJBLGNBQWNBLElBQUlBLGlDQUFTQSxNQUFFQSxZQUFNQSxNQUFFQTs7O2dCQUc3Q0EsT0FBT0E7Ozs7Ozs7O3VDZHpFZUEsV0FBMEJBO29CQUVwREEsS0FBS0EsV0FBV0EsSUFBSUEsaUJBQWlCQTt3QkFFakNBLElBQUdBLGtCQUFVQSxNQUFJQTs0QkFDYkEsSUFBSUEseUNBQVVBLFVBQVlBO2dDQUFPQSxPQUFPQTs7OztvQkFFaERBLE9BQU9BOzs7Ozs7Ozs7Ozs2QkFmaUJBLEtBQUlBOzRCQUNOQSxLQUFJQTs7NEJBRWRBOztnQkFFWkEsYUFBYUE7Ozs7Ozs7O3lDVzhSb0NBLE9BQStCQSxVQUF3Q0E7O29CQUV4SEEsSUFBSUEsZUFBY0E7d0JBQWFBLE9BQU9BOztvQkFDdENBLGFBQWlDQTtvQkFDakNBO29CQUNBQSwwQkFBbUJBOzs7Ozs0QkFHZkEsSUFBSUE7Z0NBQVNBOzs0QkFDYkEsSUFBSUEsZUFBY0EsV0FDWEEsWUFBV0EsaUVBQ1hBLFlBQVdBO2dDQUVkQSxpQkFBa0JBLGdCQUFlQTs7Z0NBRWpDQSxJQUFJQTtvQ0FFQUEsVUFBWUEsY0FBY0E7b0NBQzFCQSxJQUFJQTt3Q0FBU0EsT0FBT0E7O29DQUNwQkEsSUFBSUEsTUFBTUE7d0NBRU5BLFNBQVNBO3dDQUNUQSxTQUFTQTs7Ozs7Ozs7Ozs7b0JBT3pCQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7OzJCQXpUVUEsS0FBSUE7OzRCQUdEQSxVQUFxQkEsV0FBMEJBLEtBQWdCQTs7Z0JBRW5GQSxrQkFBa0JBO2dCQUNsQkEsaUJBQWlCQTtnQkFDakJBLFdBQVdBO2dCQUNYQSxpQkFBaUJBOzs7O21DQUdHQSxPQUErQkE7Ozs7Z0JBSW5EQSxrQkFBa0JBO2dCQUNsQkEsZ0JBQVdBO2dCQUNYQSxhQUFhQSxzQkFBaUJBOztnQkFFOUJBLGFBQWFBLCtCQUFZQSxNQUFaQTtnQkFDYkEsSUFBSUE7b0JBQVlBOztnQkFDaEJBLFNBQVNBLHVCQUFVQTtnQkFDbkJBLElBQUlBLE1BQU1BO29CQUFNQTs7Z0JBQ2hCQSw2QkFBNkJBO2dCQUM3QkEsZUFBZUE7Z0JBQ2ZBLGNBQWNBLGlCQUFTQTtnQkFDdkJBLG1CQUFjQTs7OztnQkFJZEEsMEJBQWtCQTs7Ozs7d0JBR2RBLElBQUlBOzRCQUVBQSxTQUFnQkE7NEJBQ2hCQSxRQUFRQTs0QkFDUkEsc0VBQWFBOzRCQUNiQSxrQkFDSUEsY0FBY0Esa0JBQ1hBLGNBQWNBLGtCQUNkQSxjQUFjQSxrQkFDZEEsY0FBY0E7NEJBQ3JCQSwyQkFBa0JBOzs7O29DQUVkQSxJQUFJQSwyQkFBS0EsVUFBU0E7d0NBRWRBLElBQUlBLDBEQUFhQTs0Q0FFYkE7NENBQ0FBLElBQUlBLFdBQVVBO2dEQUVWQTtnREFDQUE7Z0RBQ0FBOzs0Q0FFSkEsSUFBSUEsV0FBVUE7Z0RBRVZBOzs0Q0FFSkEsSUFBSUE7Z0RBQWFBOzs7Ozs7Ozs7Ozs2QkFNN0JBLElBQUlBOzs7Z0NBSUFBLGNBQWNBLHNCQUFpQkE7Z0NBQy9CQSxnQkFBV0EsSUFBSUEsSUFBSUEsOENBQWFBLFVBQVVBLElBQUlBLDZDQUFpQkE7OztnQ0FHL0RBLGdDQUNTQSxJQUFJQSx1Q0FBS0EsK01BQ0FBLElBQUlBLDREQUEwQkEsdUJBQzlCQSxJQUFJQSw0REFBMEJBLDJCQUM5QkEsSUFBSUEsNERBQTBCQTs7Z0NBRWhEQTtnQ0FDQUEseUVBQWFBOzs7d0JBR3JCQSxJQUFJQTs0QkFFQUEsVUFBVUE7NEJBQ1ZBLG9CQUFvQkE7OzRCQUVwQkEsSUFBSUEsZUFBY0E7Z0NBRWRBLFdBQVdBO2dDQUNYQSwwQkFBMEJBLDJEQUFjQSxPQUFPQSxlQUFVQTtnQ0FDekRBO2dDQUNBQSxJQUFJQSxlQUFjQTtvQ0FFZEEsYUFBYUE7O2dDQUVqQkEsMkJBQXNCQTs7Ozt3Q0FFbEJBLGdCQUFnQkEsNEZBQVFBLElBQUlBLGlDQUFtQkEsaUJBQWlCQTs7d0NBRWhFQSxLQUFLQSxXQUFXQSxJQUFJQSxxQkFBZ0JBOzRDQUVoQ0EsSUFBSUEsNERBQVNBLGlCQUFVQTtnREFFbkJBLGdCQUFXQSxPQUFPQSxLQUFLQSxzQkFBU0E7Ozs7Ozs7Ozs7O2dDQVM1Q0EsYUFBaUNBLDJEQUFjQSxPQUFPQSxlQUFVQTtnQ0FDaEVBLElBQUlBLFVBQVVBO29DQUVWQSxnQkFBV0EsT0FBT0EsS0FBS0E7Ozs7O3dCQUtuQ0EsSUFBSUE7NEJBRUFBLFNBQVNBOzRCQUNUQSxpQkFBaUJBOzRCQUNqQkEsY0FBY0EscURBQXdDQTs0QkFDdERBLGVBQWVBOzRCQUNmQSxnQkFBZ0JBOzRCQUNoQkEsSUFBSUE7Z0NBQXNCQTs7OzRCQUUxQkEsZ0JBQXFCQTs0QkFDckJBLElBQUlBLENBQUNBLG1CQUFtQkE7Z0NBRXBCQSxZQUFZQTs7NEJBRWhCQSxtQ0FBOEJBLElBQUlBLHNDQUFVQSxTQUFTQSxvQkFBV0EsQUFBS0E7Ozt3QkFHekVBLElBQUlBOzRCQUVBQSxXQUFXQTs0QkFDWEEsY0FBaUNBLDJEQUFjQSxPQUFPQSxlQUFVQTs0QkFDaEVBLFlBQVdBOzRCQUNYQSxlQUFvQkE7NEJBQ3BCQSxJQUFJQSxTQUFRQTtnQ0FFUkEsMkJBQTBCQSwyREFBY0EsT0FBT0EsZUFBVUE7O2dDQUV6REE7Z0NBQ0FBLElBQUlBLGVBQWNBO29DQUVkQSxjQUFhQTs7Z0NBRWpCQSxXQUFXQSxJQUFJQSw0Q0FBU0EsT0FBTUEsbUNBQXlCQTs7NEJBRTNEQSxlQUFlQTs0QkFDZkEsSUFBSUEsV0FBVUE7Z0NBQ1ZBLFdBQVdBLHNCQUFpQkE7OzRCQUNoQ0EsZ0JBQVdBLElBQUlBLFVBQVVBLElBQUlBLGdEQUFhQSxRQUFRQSxVQUFVQTs7NEJBRTVEQSxJQUFJQSxnQkFBZUE7Z0NBRWZBLHFCQUNuQkEsSUFBSUEsdUNBQUtBLDRNQUN3QkEsSUFBSUEsNERBQTBCQSxzQkFBaUJBLHdCQUMvQ0EsSUFBSUEsNERBQTBCQSxzQkFDOUJBLElBQUlBLDREQUEwQkEsQUFBS0E7Ozs7Ozs7Ozs7O2dCQU83REEsSUFBSUEsYUFBWUE7b0JBRVpBLDJCQUFxQkE7Ozs7NEJBRWpCQSwyQkFBb0JBOzs7O29DQUVoQkEsSUFBSUE7d0NBRUFBLG1CQUFjQSxPQUFPQSxDQUFDQTs7Ozs7Ozs7Ozs7Ozs7OztxQ0FRTEE7OztnQkFFakNBO2dCQUNBQTtnQkFDQUEsSUFBSUE7b0JBQVdBOztnQkFDZkEsWUFBWUE7Z0JBQ1pBLElBQUlBLFNBQVFBO29CQUNSQSxRQUFRQTs7Z0JBQ1pBLEtBQUtBLFdBQVdBLElBQUlBLE9BQU9BO29CQUV2QkEsS0FBS0EsV0FBV0EsSUFBSUEsNkJBQXdCQTs7d0JBR3hDQSxhQUFRQSxJQUFJQSxpQ0FBU0EsTUFBRUEsWUFBS0E7OztnQkFHcENBLGVBQWVBO2dCQUNmQSwwQkFBa0JBOzs7O3dCQUVkQSxJQUFJQSxXQUFXQSxrQkFBYUE7NEJBRXhCQSxnQkFBV0E7Ozs7Ozs7aUJBR25CQSxPQUFPQTs7O3FDQUlnQkEsT0FBK0JBO2dCQUV0REEsSUFBSUEsa0JBQWlCQTtvQkFBU0E7O2dCQUM5QkEsZ0JBQWdCQTtnQkFDaEJBLFNBQVNBLElBQUlBLDRDQUFTQSxBQUFLQTtnQkFDM0JBLGdGQUE4QkEsSUFBSUEsSUFBSUEsZ0RBQWFBLHNCQUFpQkEsUUFBUUEsSUFBSUEsV0FBdUJBOztrQ0FHbkZBLElBQWFBLE9BQWNBO2dCQUUvQ0EsU0FBU0EsSUFBSUEsMENBQVNBO2dCQUN0QkEsUUFBUUEscUNBQThCQSxJQUFJQTtnQkFDMUNBLElBQUlBLFNBQVNBO29CQUFNQSw4Q0FBZUE7O2dCQUNsQ0EsSUFBSUEsU0FBU0E7b0JBQU1BLDhDQUFlQTs7O29DQUdkQSxLQUFTQSxPQUFjQTtnQkFFM0NBLFNBQVNBLElBQUlBLDRDQUFTQTtnQkFDdEJBLFFBQVFBLHFDQUE4QkEsSUFBSUE7Z0JBQzFDQSxJQUFJQSxTQUFTQTtvQkFBTUEsOENBQWVBOztnQkFDbENBLElBQUlBLFNBQVNBO29CQUFNQSw4Q0FBZUE7OztrQ0FHZEEsT0FBK0JBLEtBQXNCQTtnQkFFekVBLG9CQUFtQ0E7Z0JBQ25DQSxxQkFBc0JBLGtCQUFpQkEsa0JBQWtCQSxrQkFBaUJBO2dCQUMxRUE7Z0JBQ0FBO2dCQUNBQSxlQUFlQSxzQkFBaUJBO2dCQUNoQ0EsSUFBSUE7OztvQkFJQUEsSUFBSUEsQ0FBQ0E7d0JBRURBLFVBQVVBLDBDQUFxQ0E7d0JBQy9DQSxPQUFPQSw0Q0FBdUNBO3dCQUM5Q0EsSUFBSUEsa0JBQWlCQSx1REFBMkJBLG1CQUFrQkEsc0RBQzNEQSxrQkFBaUJBLDBEQUE4QkEsbUJBQWtCQSx1REFDakVBLGtCQUFpQkEsc0RBQTBCQSxtQkFBa0JBOzRCQUVoRUE7NEJBQ0FBOzs7Ozt3QkFLSkEsU0FBU0EsMkJBQWFBLGtCQUFLQTt3QkFDM0JBLDZCQUFlQTs7d0JBRWZBOzt3QkFFQUEscUJBQWdCQSxJQUFJQSx1Q0FBS0EsOE1BQ1hBLElBQUlBLDREQUEwQkE7OztnQkFHcERBLGtCQUFnQkEsQUFBS0EsaURBQXFCQSxJQUFJQSwyQ0FBZUEsZ0JBQWdCQSxhQUFhQSxzQkFBaUJBLFNBQVNBLFFBQVFBLGdCQUFnQkEsaUJBQWlCQTtnQkFDN0pBLElBQUlBLG9CQUFvQkEsQ0FBQ0E7b0JBRXJCQSxrQkFBV0EsQUFBS0EsZ0RBQW9CQSxJQUFJQSw4Q0FBYUEsV0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJHckpsREEsT0FBY0E7O2dCQUVoQ0EsYUFBYUE7Z0JBQ2JBLGFBQWFBOzs7Ozs7Ozs7OzRCUC9IRkE7O2dCQUVYQSxZQUFZQTs7Ozs7Ozs7Ozs0QkM0REVBOztnQkFFZEEsMkJBQTJCQTs7Ozs7Ozs7Ozs7Ozs7OzRCRXlGZEEsSUFBUUEsVUFBbUJBOztnQkFFeENBLFVBQVVBO2dCQUNWQSxnQkFBZ0JBO2dCQUNoQkEsa0JBQWtCQTs7Ozs7Ozs7Ozs7Ozs0QkZ0S0lBLEtBQWdCQSxZQUE0QkE7O2dCQUVsRUEsV0FBV0E7O2dCQUVYQSxjQUFTQTtnQkFDVEEsa0JBQWtCQTtnQkFDbEJBLGtCQUFrQkE7Ozs7OztnQkFLbEJBOztnQkFFQUEsT0FBT0E7b0JBRUhBLFlBQWtCQTtvQkFDbEJBLG1FQUFpQ0E7b0JBQ2pDQSxTQUFTQTtvQkFDVEEsY0FBZ0NBLEFBQXVCQTtvQkFDdkRBLElBQUdBLFlBQVdBO3dCQUVWQSxTQUFTQTt3QkFDVEEsVUFBVUE7d0JBQ1ZBLGFBQW9CQSxJQUFJQTt3QkFDeEJBLGNBQWNBLG1DQUE4QkE7d0JBQzVDQSxvREFBcUJBO3dCQUNyQkEsU0FBU0E7d0JBQ1RBO3dCQUNBQTt3QkFDQUE7d0JBQ0FBO3dCQUNBQTs7O29CQUdKQSxJQUFJQSxZQUFXQTt3QkFFWEEsY0FBY0Esd0JBQVdBO3dCQUN6QkEsWUFBWUEsbUNBQThCQTt3QkFDMUNBLFVBQVNBO3dCQUNUQSxVQUFTQTt3QkFDVEEsV0FBVUEsd0JBQVdBO3dCQUNyQkEsY0FBYUE7d0JBQ2JBLGNBQWFBLHdCQUFXQTt3QkFDeEJBLGVBQWVBO3dCQUNmQSwwQkFBcUJBOzs7O2dDQUVqQkEsSUFBSUEsOEJBQVFBLFFBQU1BLGlCQUFnQkE7b0NBRTlCQTs7Ozs7Ozt5QkFHUkEsYUFBWUEsSUFBSUE7d0JBQ2hCQSxhQUFZQSxJQUFJQTt3QkFDaEJBLFdBQVVBO3dCQUNWQSxrREFBbUJBO3dCQUNuQkEsbUJBQTRCQSxJQUFJQTt3QkFDaENBLHdCQUF3QkE7d0JBQ3hCQSxrREFBbUJBOzt3QkFFbkJBOzs7Ozs7Ozs7Ozs7Ozs7OzttQ0V1RHlCQSxLQUFJQTs7OzhCQUl4QkE7Ozs7Z0JBRWJBLDBCQUFxQkE7OzRCQUdSQSxjQUEyQkE7Ozs7Z0JBRXhDQSwwQkFBcUJBO2dCQUNyQkEsb0JBQW9CQTs7Ozs7Z0JBS3BCQTtnQkFDQUEsT0FBT0E7Ozs7Ozs7Ozs7NEJBdElhQTs7Z0JBRXBCQSxXQUFXQTtnQkFDWEEsWUFBSUEsSUFBSUEsOENBRUpBLGVBQVVBLElBQUlBLHlDQUNkQSxlQUFVQSxJQUFJQSx3REFDRUEsSUFBSUE7Z0JBQ3hCQSxZQUFJQSxJQUFJQSwyQ0FFSkEsSUFBSUEsdURBQ0pBLGVBQVVBLElBQUlBLHlDQUNkQSxlQUFVQSxJQUFJQSx5Q0FDZEEsY0FBU0EsSUFBSUEsd0RBQ0dBLElBQUlBO2dCQUN4QkEsWUFBSUEsSUFBSUEsMkNBRUpBLElBQUlBLHVEQUNKQSxlQUFVQSxJQUFJQSx5Q0FDZEEsZUFBVUEsSUFBSUEseUNBQ2RBLGVBQVVBLElBQUlBLHlDQUNkQSxjQUFTQSxJQUFJQSwyQ0FDVkEsSUFBSUE7Z0JBQ1hBLFlBQUlBLElBQUlBLDhDQUVKQSxjQUFTQSxJQUFJQSwyQ0FDVkEsSUFBSUEsb0RBQ0hBLEFBQUtBO2dCQUNiQSxZQUFJQSxJQUFJQSw4Q0FFTEEsY0FBU0EsSUFBSUEsMkNBQ1ZBLElBQUlBLG9EQUNIQSxBQUFLQTtnQkFDWkEsWUFBSUEsSUFBSUEsOENBRUxBLGNBQVNBLElBQUlBLDJDQUNWQSxJQUFJQSxvREFDSEEsQUFBS0E7Z0JBQ1pBLFlBQUlBLElBQUlBLDhDQUVOQSxjQUFTQSxJQUFJQSx5Q0FDYkEsY0FBU0EsSUFBSUEsMkNBQ1ZBLElBQUlBLHFEQUNIQSxBQUFLQSxzREFBMEJBLEFBQUtBO2dCQUMxQ0EsVUFHSUEsSUFBSUEsOENBQ0pBLGNBQVNBLElBQUlBLHlDQUNiQSxjQUFTQSxJQUFJQSwyQ0FHYkEsSUFBSUEsOENBQ0pBLGNBQVNBLElBQUlBLHlDQUNiQSxjQUFTQSxJQUFJQSwyQ0FHWkEsSUFBSUEsOENBQ0xBLGNBQVNBLElBQUlBLHlDQUNiQSxjQUFTQSxJQUFJQSwyQ0FHYkEsSUFBSUEsOENBQ0pBLGNBQVNBLElBQUlBLHlDQUNiQSxjQUFTQSxJQUFJQSx5Q0FDYkEsY0FBU0EsSUFBSUEsMkNBR2JBLElBQUlBLDJDQUNBQSxJQUFJQSxnREFBYUEsd0NBQ2pCQSxjQUFTQSxJQUFJQTs7Ozs7NkJBYVJBOzs7O2dCQUdiQSxRQUFRQTtnQkFDUkEsMEJBQXFCQTs7Ozt3QkFFakJBLDhDQUFlQTs7Ozs7Ozs7MkJBZU5BOzs7Z0JBRWJBLDBCQUFxQkE7Ozs7d0JBRWpCQSxtQ0FBOEJBOzs7Ozs7Ozs4QkFkYkEsR0FBT0E7Z0JBRTVCQSxPQUFPQSxJQUFJQSxzQ0FBVUEsR0FBR0EsbUJBQVVBLEFBQUtBOzs2QkFHbkJBLEdBQU9BO2dCQUUzQkEsT0FBT0EsSUFBSUEsc0NBQVVBLEdBQUdBLG1CQUFVQSxBQUFLQTs7Ozs7Ozs7aUNWekNSQSxHQUFPQTtvQkFFdENBLE9BQU9BLElBQUlBLHlDQUFhQSxHQUFHQTs7Ozs7Ozs7Ozs7OzRCQVJYQSxZQUFnQkE7O2dCQUVoQ0Esa0JBQWtCQTtnQkFDbEJBLDZCQUE2QkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0NBdENNQSxLQUFJQTs7OEJBRS9CQTs7Z0JBRVJBLHdCQUFtQkE7Ozs7Ozs7Ozs7O3VDRStsQlFBLElBQVVBO29CQUVyQ0EsVUFBVUE7b0JBQ1ZBLE9BQU9BOzswQ0FHb0JBLElBQVVBO29CQUVyQ0EsT0FBT0EsU0FBU0E7O3VDQUdXQSxJQUFVQTtvQkFFckNBLGFBQWNBLHVCQUF1QkEsSUFBSUE7b0JBQ3pDQSxhQUFjQSx1QkFBdUJBLElBQUlBO29CQUN6Q0EsSUFBSUEsVUFBVUE7d0JBQ1ZBOztvQkFDSkEsSUFBSUEsVUFBVUE7d0JBRVZBOztvQkFFSkEsT0FBT0EsV0FBVUE7O3lDQUdVQSxJQUFVQTtvQkFFckNBLGFBQWNBLHVCQUF1QkEsSUFBSUE7b0JBQ3pDQSxhQUFjQSx1QkFBdUJBLElBQUlBO29CQUN6Q0EsSUFBSUEsVUFBVUE7d0JBQ1ZBOztvQkFDSkEsSUFBSUEsVUFBVUE7d0JBRVZBOztvQkFFSkEsT0FBT0EsV0FBVUE7O3lDQUdpQkE7b0JBRWxDQSxPQUFPQTs7dUNBR3lCQTtvQkFFaENBLE9BQU9BLGtCQUFLQTs7Ozs7Ozs7OztvQkFuRGNBLFdBQU1BLHdCQUFpQkE7Ozs7OzJCQUVuQ0E7Z0JBRWRBLFdBQU1BOzs7Ozs7Ozs7Ozs7OztvQmF4bkJnQkEsT0FBT0E7Ozs7Ozt3Q0FLUUEsS0FBSUE7OzRCQUU3QkE7Ozs7Z0JBRVpBLHNCQUFpQkE7Ozs7bUNBR0tBO2dCQUV0QkEsT0FBT0EsK0JBQTBCQTs7MkJBR25CQTtnQkFFZEEsT0FBT0EsOEJBQWlCQTs7Ozs7Ozs7Ozs7O29DQ25CV0E7Ozs7dUNBeUNBQTtvQkFFbkNBLE9BQU9BLGtEQUFTQSxPQUFUQTs7OztvQkFNUEEsS0FBS0EsV0FBV0EsSUFBSUEsdUNBQWlCQTt3QkFFakNBLElBQUlBLGtEQUFTQSxHQUFUQSxvQ0FBZUE7NEJBQ2ZBLGtEQUFTQSxHQUFUQSxtQ0FBY0EsSUFBSUE7NEJBQ2xCQSxrREFBU0EsR0FBVEEseUNBQW9CQTs0QkFDcEJBLE9BQU9BLGtEQUFTQSxHQUFUQTs7OztvQkFJZkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs2QkF6RHdCQSxLQUFJQTttQ0FrQ3JCQTtpQ0FDU0EsS0FBSUE7Ozs7Ozs7dUNBOUJVQSxVQUFtQkE7O2dCQUd4REEsT0FBT0EsSUFBSUEsNkJBQWtCQSxRQUFRQTs7c0NBR1ZBLFdBQWtCQTtnQkFFN0NBLFVBQVVBLElBQUlBLG9CQUFTQTtnQkFDdkJBLHNCQUFzQkE7Z0JBQ3RCQSxpQkFBWUE7Z0JBQ1pBLE9BQU9BOzs7c0NBSW1DQSxJQUFJQTtnQkFFOUNBLGVBQW9DQSxLQUFJQTtnQkFDeENBLGlCQUFZQTtnQkFDWkEsT0FBT0E7O3NDQUdnQ0E7Z0JBRXZDQSxlQUFnQ0EsS0FBSUE7Z0JBQ3BDQSxpQkFBWUE7Z0JBQ1pBLE9BQU9BOztpREFnQzZCQTtnQkFFaERBO2dCQUNZQSxvQkFBaUJBO2dCQUNqQkEsa0JBQWFBLEtBQUdBO2dCQUNoQkEsT0FBT0E7O21EQUc2QkEsR0FBVUE7Z0JBRTFEQTtnQkFDWUEsb0JBQWlCQTtnQkFDakJBLGtCQUFhQSxLQUFHQTtnQkFDaEJBLGtCQUFhQSxLQUFHQTtnQkFDaEJBLE9BQU9BOztzQ0FHZ0JBO2dCQUV2QkE7Z0JBQ0FBLGFBQWdCQSxJQUFJQSx5QkFBT0EsWUFBWUE7Z0JBQ3ZDQSxNQUFJQTtnQkFDSkEsT0FBT0E7OztnQkFLUEE7Z0JBQ0FBLGFBQWdCQSxJQUFJQSx5QkFBT0EsWUFBWUE7Z0JBQ3ZDQSxPQUFPQTs7MENBSW9DQSxJQUFJQSxJQUFJQTtnQkFFbkRBLG9CQUFzQ0EsS0FBSUEsbUNBQXNCQTtnQkFDaEVBLGVBQW9DQTtnQkFDcENBLGdCQUFxQkE7Z0JBQ3JCQSxpQkFBWUE7Z0JBQ1pBLE9BQU9BOzttQ0FHY0E7Z0JBRXJCQSxtQkFBY0E7Z0JBQ2RBLEtBQUtBLFdBQVdBLEtBQUtBLGtCQUFhQTtvQkFFOUJBLDBCQUFxQkEsV0FBV0E7Ozs7NENBS05BLFVBQW1CQTtnQkFFakRBLGFBQWdCQSxJQUFJQSx5QkFBT0EsWUFBT0E7Z0JBQ2xDQSxhQUFjQSxpQkFBWUEseUJBQXlCQSxhQUFhQSx5QkFBb0JBLDBCQUEwQkE7Z0JBQzlHQSxhQUFjQSxxQkFBcUJBOztnQkFFbkNBLElBQUlBLFdBQVVBO29CQUNWQSxJQUFJQTt3QkFFQUEsOEJBQThCQTs7d0JBSTlCQSxpQ0FBaUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7c0NBcUJyQkEsR0FBR0E7Z0JBRXZCQSxRQUFNQTtnQkFDTkEsa0JBQWFBLEdBQUdBOztnQkFFaEJBLE9BQU9BOztvQ0FHY0EsR0FBVUE7O2dCQUUvQkEsV0FBWUE7Z0JBQ1pBLElBQUlBLENBQUNBLHVCQUFrQkE7b0JBRW5CQSxlQUFVQSxNQUFNQTs7Z0JBRXBCQSxxQkFBTUEsMEJBQU1BLGFBQVFBO2dCQUNwQkEsMkJBQXFCQTs7Ozt3QkFFakJBLDBCQUFxQkEsTUFBTUE7Ozs7Ozs7O3VDQUtQQSxHQUFVQTs7Z0JBRWxDQSxXQUFZQTtnQkFDWkEsSUFBSUEsQ0FBQ0EsdUJBQWtCQTtvQkFFbkJBLGVBQVVBLE1BQU1BOztnQkFFcEJBLHFCQUFNQSwwQkFBTUEsYUFBUUE7Z0JBQ3BCQSwyQkFBcUJBOzs7O3dCQUVqQkEsMEJBQXFCQSxNQUFNQTs7Ozs7Ozs7d0NBS0xBLEdBQVVBO2dCQUVwQ0EsU0FBU0E7Z0JBQ1RBLE9BQU9BLGlCQUFZQSxnQkFBZ0JBOzttQ0FHZEEsZ0JBQXVCQTs7Z0JBRTVDQSwwQkFBcUJBOzs7O3dCQUVqQkEsSUFBSUEsQ0FBQ0EsdUJBQWtCQTs0QkFFbkJBOzs7d0JBR0pBLElBQUlBLHNCQUFNQSwwQkFBTUEsYUFBT0E7NEJBQ25CQTs7Ozs7OztpQkFFUkE7OzJDQUc2QkEsaUJBQXdCQTs7Z0JBRXJEQSxJQUFJQSxtQkFBbUJBO29CQUFNQTs7Z0JBQzdCQSwwQkFBcUJBOzs7O3dCQUVqQkEsSUFBSUEsdUJBQWtCQTs0QkFFbEJBLElBQUlBLHNCQUFNQSwwQkFBTUEsYUFBT0E7Z0NBQ25CQTs7Ozs7Ozs7aUJBR1pBOztvQ0FHb0JBLEdBQUdBOztnQkFFdkJBLFdBQVlBLEFBQU9BO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsdUJBQWtCQTs7b0JBR25CQSxPQUFPQTs7Z0JBRVhBLE9BQU9BLFlBQUlBLGtDQUFNQSwwQkFBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJDck9iQSxLQUFTQTs7Z0JBRW5CQSxXQUFXQTtnQkFDWEEsVUFBVUE7Ozs7Ozs7K0JBR0tBO2dCQUVmQSxPQUFPQSxhQUFZQSxXQUFXQSxjQUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJDQVNaQSxHQUFlQTtvQkFFOUNBLGtDQUF1QkEsbUJBQW1CQSxHQUFHQTs7d0NBR3BCQSxHQUFHQTtvQkFFNUJBLE9BQU9BLGtDQUF1QkEscUJBQW1CQTs7MENBRXJCQSxHQUFlQTtvQkFFM0NBLGtDQUF1QkEsZ0JBQWdCQSxHQUFHQTs7d0NBRWpCQSxHQUFHQTtvQkFFNUJBLE9BQU9BLGtDQUF1QkEsbUJBQW1CQTs7Ozs7Ozs7Ozs7OzRCQ2Q1QkEsR0FBb0JBOztnQkFFekNBLFNBQVNBO2dCQUNUQSxTQUFTQTs7Ozs7Z0JBS1RBLE9BQUVBOzs7Ozs7Ozs7Ozs0QkExQmVBOztnQkFFakJBLFNBQVNBO2dCQUNUQSxnQkFBV0EsS0FBSUE7Ozs7O2dCQUtmQSxPQUFFQTs7Ozs7Ozs7Ozs7O29CSHNCbUJBLE9BQU9BOzs7Ozs7O2dCQUo1QkEsZ0JBQVdBLElBQUlBLHFCQUFTQSxBQUFPQTs7Ozs2QkFPbkJBO2dCQUVaQSxPQUFPQSxvRkFBMEJBOzs4QkFHaEJBO2dCQUVqQkEsT0FBT0EsdUNBQTBCQTs7Ozs7Ozs7Ozs7O29CQU9YQSxPQUFPQTs7Ozs7OztnQkFjN0JBLGdCQUFXQSxJQUFJQSxxQkFBU0EsQUFBT0EsSUFBS0EsQUFBT0E7Ozs7NkJBWi9CQTtnQkFFWkEsT0FBT0Esb0ZBQTBCQTs7OEJBR2hCQTtnQkFFakJBLE9BQU9BLHVDQUEwQkE7OzZCQVVyQkE7Z0JBRVpBLE9BQU9BLG9GQUEwQkE7Ozs7Ozs7Ozs7Ozs7OzhCSTJLaEJBLEtBQUlBO2dDQUNGQSxLQUFJQTsrQkFDUEEsS0FBSUE7NkJBQ0pBLEtBQUlBOzs7OztnQkFJcEJBLGVBQVVBO2dCQUNWQSxlQUFVQTtnQkFDVkEsZUFBVUE7Z0JBQ1ZBOzs4QkFLZUE7Z0JBRWZBLEtBQUtBLFdBQVdBLElBQUlBLHFCQUFnQkE7b0JBRWhDQSxzQkFBU0EsR0FBVEEsc0JBQVNBLElBQU1BO29CQUNmQSxJQUFJQSxzQkFBU0EsTUFBTUEsb0JBQU9BO3dCQUV0QkEsYUFBUUE7Ozs7OzsyQkFXRkE7Z0JBRWRBLGtCQUFhQTtnQkFDYkEsaUJBQVlBO2dCQUNaQSxnQkFBV0E7Ozs7Z0JBS1hBLDBCQUFxQkE7Ozs7d0JBRWpCQSxJQUFJQSxnQ0FBY0E7NEJBRWRBLFFBQVdBOzRCQUNYQTs7Ozs7OztpQkFHUkEsT0FBT0E7OytCQUdXQTs7Z0JBRWxCQSwwQkFBa0JBOzs7Ozt3QkFHZEEsb0NBQVdBOzs7Ozs7O29DQUlRQTtnQkFFdkJBLGVBQVVBOztnQ0FHT0E7Z0JBRWpCQSxLQUFLQSxXQUFXQSxJQUFJQSxxQkFBZ0JBO29CQUVoQ0EsSUFBSUEsU0FBUUEscUJBQVFBO3dCQUVoQkEsWUFBT0EsR0FBR0EsR0FBR0Esc0JBQVNBLElBQUlBLG9CQUFPQTt3QkFDakNBOzs7OzhCQUtlQSxRQUFtQkEsT0FBV0EsVUFBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7OztzQ0N0VHRDQSxJQUFJQTtvQ0FDTkEsSUFBSUE7bUNBQ0xBLElBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkNQbEJBLE1BQVdBLE1BQVVBOztnQkFFbkNBLFlBQVlBO2dCQUNaQSxZQUFZQTtnQkFDWkEsVUFBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQU13QkEsS0FBSUE7eUNBQ0VBLEtBQUlBOzs0QkFHdkJBOztnQkFFckJBLGVBQWVBOzs7Ozs7Z0JBS2ZBO2dCQUNBQSwwQkFBcUJBOzs7O3dCQUVqQkEsSUFBSUEsbUJBQW1CQTs0QkFFbkJBLDJCQUFzQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCRDdCbkJBOzs7O2dCQUVYQSxrQkFBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkRzT0dBLFFBQWNBLFVBQWdCQTs7Z0JBRTFDQSxjQUFjQTtnQkFDZEEsZ0JBQWdCQTtnQkFDaEJBLGNBQWNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDRzdPV0E7eUNBQ0NBO3lDQUNEQTswQ0FDQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQXVFeEJBLE9BQU9BOzs7b0JBR1RBLGVBQVVBOzs7OztvQkFHU0EsT0FBT0E7OztvQkFHMUJBLGVBQVVBOzs7Ozs7Ozs7OzRCQXRFREEsT0FBV0E7OztnQkFHeEJBLFlBQU9BLE9BQU9BOzs7O29DQUdPQSxTQUFnQkEsT0FBV0EsTUFBY0EsTUFBY0E7Ozs7Z0JBRTVFQSxRQUFRQSxpQkFBQ0E7Z0JBQ1RBLElBQUlBO29CQUFhQSxTQUFLQTs7Z0JBQ3RCQSxRQUFRQTtnQkFDUkEsWUFBS0EsU0FBU0EsTUFBSUEsWUFBTUEsTUFBSUEsWUFBTUE7O2tDQUtkQSxPQUFXQTtnQkFFL0JBLGFBQVFBLDBDQUFTQSxPQUFPQTtnQkFDeEJBLGlCQUFZQSwyQ0FBUUEsT0FBT0E7Z0JBQzNCQSxpQkFBWUEsMkNBQVFBLE9BQU9BOzs7Z0JBSzNCQSw0QkFBd0JBLFlBQU9BOzs7Z0JBSy9CQSxrQkFBYUEsb0RBQXFCQSxZQUFPQSxhQUFRQSwrQ0FBZ0JBOzs4QkFNbERBO2dCQUVmQSxLQUFLQSxXQUFXQSxJQUFJQSxtQkFBbUJBO29CQUVuQ0EsS0FBS0EsV0FBV0EsSUFBSUEsb0JBQW9CQTt3QkFFcENBLFFBQVFBLG1CQUFLQSwwQkFBeUJBO3dCQUN0Q0EsUUFBUUEsbUJBQUtBLDBCQUF5QkE7d0JBQ3RDQSxJQUFJQSx1QkFBa0JBLEdBQUdBLFFBQU1BOzRCQUMzQkEsZ0JBQU1BLEdBQUdBLElBQUtBLHVCQUFrQkEsR0FBR0E7O3dCQUN2Q0EsSUFBSUEsMkJBQXNCQSxHQUFHQSxRQUFNQTs0QkFDL0JBLG9CQUFVQSxHQUFHQSxJQUFLQSwyQkFBc0JBLEdBQUdBOzt3QkFDL0NBLElBQUlBLDJCQUFzQkEsR0FBR0EsUUFBTUE7NEJBQy9CQSxvQkFBVUEsR0FBR0EsSUFBS0EsMkJBQXNCQSxHQUFHQTs7Ozs7b0NBeUJsQ0EsR0FBT0EsR0FBT0EsR0FBT0EsT0FBMkJBOzs7Z0JBRXJFQSxRQUFTQSxDQUFNQSxBQUFDQTtnQkFDaEJBLGdCQUFTQSxHQUFHQSxHQUFHQSxHQUFHQSxPQUFPQTs7cUNBR0hBLEdBQU9BLEdBQU9BLEdBQU9BLE9BQTJCQTs7O2dCQUV0RUEsa0JBQWFBLCtCQUFLQSxHQUFFQSxHQUFFQSxPQUFNQTtnQkFDNUJBLGtCQUFhQSxRQUFPQSxlQUFLQSxHQUFHQSxPQUFPQTs7OEJBR2xCQSxXQUFxQkEsR0FBT0E7Z0JBRTdDQSxPQUFPQSxnQkFBV0EsR0FBR0EsUUFBTUEscUJBQWdCQSxHQUFHQSxPQUN2Q0Esb0JBQWVBLEdBQUVBLFFBQU1BLHlCQUFvQkEsR0FBRUEsT0FDN0NBLG9CQUFlQSxHQUFFQSxRQUFNQSx5QkFBb0JBLEdBQUVBOzs0QkFHckNBLFdBQXFCQSxHQUFPQTtnQkFFM0NBLGdCQUFXQSxHQUFHQSxJQUFLQSxxQkFBZ0JBLEdBQUdBO2dCQUN0Q0Esb0JBQWVBLEdBQUdBLElBQUtBLHlCQUFvQkEsR0FBR0E7Z0JBQzlDQSxvQkFBZUEsR0FBR0EsSUFBS0EseUJBQW9CQSxHQUFHQTs7Z0RBR1hBLEdBQU9BO2dCQUUxQ0EsVUFBVUEsc0JBQWlCQSxHQUFHQSxjQUFTQSxjQUFTQTtnQkFDaERBLEtBQUtBLFdBQVdBLElBQUlBLEtBQUtBO29CQUVyQkE7Ozs7d0NBS3NCQSxTQUFhQSxHQUFPQSxHQUFPQTtnQkFFckRBLElBQUlBLGlCQUFrQkE7b0JBQ2xCQSxnQkFBU0EsRUFBTUEsQUFBQ0EsNkNBQXNCQSxHQUFHQSxHQUFHQTtvQkFDNUNBOztnQkFFSkEsSUFBSUEsaUJBQWtCQTtvQkFFbEJBLGdCQUFTQSxDQUFNQSxBQUFDQSxrQkFBVUEsR0FBR0EsR0FBR0E7b0JBQ2hDQTs7Z0JBRUpBO2dCQUNBQSxJQUFJQTtvQkFFQUE7O2dCQUVKQSxZQUFLQSxPQUFPQSxHQUFHQSxHQUFHQTtnQkFDbEJBLE9BQU9BOzsyQkFHT0E7Z0JBRWRBLGdCQUFnQkE7Z0JBQ2hCQSxLQUFLQSxXQUFXQSxJQUFJQSxZQUFPQTtvQkFFdkJBLEtBQUtBLFdBQVdBLElBQUlBLGFBQVFBO3dCQUV4QkEsZ0JBQVdBLEdBQUdBLElBQUtBLGtCQUFhQSxHQUFHQTt3QkFDbkNBLG9CQUFlQSxHQUFHQSxJQUFLQSxzQkFBaUJBLEdBQUdBO3dCQUMzQ0Esb0JBQWVBLEdBQUdBLElBQUtBLHNCQUFpQkEsR0FBR0E7Ozs7OEJBS2xDQSxHQUFPQTtnQkFFeEJBLElBQUlBLGNBQVNBLFFBQVFBLElBQUlBLHlDQUFzQkEsSUFBSUE7b0JBRS9DQSxnQkFBV0EsR0FBR0E7O2dCQUVsQkEsYUFBUUE7Z0JBQ1JBLGNBQVNBOzs7OEJBSU1BLEdBQU9BO2dCQUV0QkEsT0FBT0EsZ0JBQU1BLEdBQUdBOzttQ0FHSUEsR0FBT0E7Z0JBRTNCQSxlQUFVQTtnQkFDVkEsZUFBVUE7O3FDQUdVQTs7Z0JBRXBCQSwwQkFBa0JBOzs7O3dCQUVkQSxpQkFBWUE7Ozs7Ozs7cUNBSUlBLEdBQVVBOztnQkFFOUJBLDBCQUFrQkE7Ozs7d0JBRWRBLG1CQUFZQSxHQUFHQTs7Ozs7OzttQ0EwR0NBOztnQkFHcEJBLGNBQVNBLEdBQUdBLGNBQVNBO2dCQUNyQkE7O3FDQUdvQkEsR0FBUUE7O2dCQUc1QkEsZ0JBQVNBLEdBQUdBLGNBQVNBLGNBQVNBO2dCQUM5QkE7O3FEQWpId0NBO2dCQUV4Q0EsZUFBZUE7Z0JBQ2ZBLGVBQWVBOztnQkFFZkEsS0FBS0EsV0FBV0EsSUFBSUEsVUFBVUE7b0JBRTFCQTtvQkFDQUEsK0JBQWdDQSxDQUFDQSxXQUFVQSxhQUFFQSxjQUFjQSxNQUFLQTtvQkFDaEVBLElBQUlBO3dCQUVBQSxLQUFLQSxXQUFXQSxJQUFJQSxhQUFXQSxTQUFHQTs0QkFFOUJBLElBQUlBLE1BQUlBLGtCQUFZQTtnQ0FFaEJBLElBQUlBLGFBQUVBO29DQUVGQTs7Z0NBRUpBO2dDQUNBQTs7NEJBRUpBLElBQUlBLGFBQUVBLE1BQUlBO2dDQUVOQTs7OztvQkFJWkEsSUFBSUE7d0JBRUFBO3dCQUNBQTs7b0JBRUpBO29CQUNBQSxJQUFJQSxZQUFZQTt3QkFFWkE7d0JBQ0FBOztvQkFFSkEsSUFBSUEsWUFBWUEsY0FBU0EsWUFBWUE7d0JBQVFBOzs7OztnQkFJakRBOztrREFHK0NBLEdBQVVBO2dCQUV6REE7Z0JBQ0FBLGFBQWFBO2dCQUNiQSxPQUFPQSxrQ0FBMkJBLEdBQUdBLE9BQU9BLFVBQVVBOztvREFHUEEsR0FBVUEsT0FBV0EsVUFBY0E7O2dCQUdsRkEsWUFBaUJBLElBQUlBLGlDQUFTQSxjQUFTQTtnQkFDdkNBLGVBQWVBO2dCQUNmQSxLQUFLQSxRQUFRQSxVQUFVQSxJQUFJQSxVQUFVQTtvQkFFakNBLGNBQWNBO29CQUNkQTtvQkFDQUEsK0JBQWdDQSxDQUFDQSxXQUFVQSxhQUFFQSxjQUFjQSxNQUFLQTtvQkFDaEVBLElBQUlBO3dCQUVBQSxLQUFLQSxXQUFXQSxJQUFJQSxhQUFXQSxTQUFHQTs0QkFFOUJBLElBQUlBLE1BQUlBLGlCQUFXQTtnQ0FFZkEsSUFBSUEsYUFBRUE7b0NBRUZBOztnQ0FFSkE7Z0NBQ0FBOzs0QkFFSkEsSUFBSUEsYUFBRUEsTUFBSUE7Z0NBRU5BOzs7O29CQUlaQSxJQUFJQTt3QkFFQUE7O29CQUVKQSxtQkFBWUEsYUFBRUEsSUFBSUE7O2dCQUV0QkEsVUFBZUEsSUFBSUEsaUNBQVNBLGNBQVNBO2dCQUNyQ0EsT0FBT0EsSUFBSUEsdURBQWlCQSxxQkFBZ0JBLGlCQUFRQSxxQkFBZ0JBLGVBQU1BLGdCQUFPQTs7dUNBR3pEQTtnQkFFeEJBLE9BQU9BLGtCQUFLQSxBQUFDQSxVQUFVQSxVQUFVQTs7MkNBR0xBO2dCQUU1QkEsaUJBQVlBLEVBQU1BLEFBQUNBOzs7Z0JBbUJuQkE7Z0JBQ0FBLElBQUlBLGdCQUFXQTtvQkFFWEE7b0JBQ0FBOzs7cUNBSWtCQTtnQkFFdEJBO2dCQUNBQSxlQUFVQTs7Z0NBR09BLEdBQVFBLEdBQU9BOztnQkFHaENBLElBQUlBLE1BQUtBO29CQUNMQSxnQkFBTUEsR0FBR0EsSUFBS0E7Ozs7O2tDQU1EQSxHQUFRQSxHQUFPQSxHQUFPQSxPQUFXQTs7O2dCQUdsREEsY0FBU0EsR0FBR0EsR0FBR0E7Z0JBQ2ZBLGNBQVNBLE9BQU9BLEdBQUdBO2dCQUNuQkEsa0JBQWFBLFdBQVdBLEdBQUdBOzs4QkFHVkEsTUFBV0EsV0FBK0JBOzs7Z0JBRTNEQSxrQkFBYUEsWUFBWUEsWUFBT0EsYUFBUUEsV0FBV0E7O29DQUc5QkEsTUFBYUEsR0FBT0EsR0FBT0EsV0FBZUE7Z0JBRS9EQSxZQUFZQTtnQkFDWkEsY0FBU0EsR0FBR0EsR0FBR0Esc0JBQWNBO2dCQUM3QkEsWUFBS0EsTUFBTUEsZUFBT0EsZUFBT0E7OzhCQUdaQSxHQUFVQSxHQUFPQSxHQUFPQSxPQUFXQTs7Z0JBRWhEQSxLQUFLQSxXQUFXQSxJQUFJQSxVQUFVQTtvQkFFMUJBLFNBQVNBLEtBQUlBO29CQUNiQSxTQUFTQTtvQkFDVEEsSUFBR0EsTUFBTUE7d0JBRUxBLFdBQU1BO3dCQUNOQTs7b0JBRUpBLGdCQUFTQSxhQUFFQSxJQUFJQSxJQUFJQSxJQUFJQSxPQUFPQTs7OzRCQTRCckJBLEdBQXFCQSxHQUFPQSxHQUFPQSxPQUFXQTs7Z0JBRTNEQSxLQUFLQSxXQUFXQSxJQUFJQSw0QkFBbUNBLFlBQUlBO29CQUV2REEsZ0JBQVNBLDRCQUF1Q0EsYUFBRUEsSUFBSUEsTUFBSUEsU0FBR0EsR0FBR0EsT0FBT0E7Ozs4QkE2QzlEQSxHQUFVQSxJQUFRQSxJQUFRQTtnQkFFdkNBLE1BQU1BLElBQUlBOzswQ0EzRWlCQSxHQUFVQSxHQUFPQSxHQUFPQSxVQUFjQSxPQUFXQTs7Z0JBRTVFQTtnQkFDQUE7Z0JBQ0FBLEtBQUtBLFdBQVdBLElBQUlBLFVBQVVBO29CQUUxQkEsU0FBU0EsT0FBSUEsVUFBR0E7b0JBQ2hCQSxTQUFTQTs7b0JBRVRBLElBQUlBLE1BQU1BO3dCQUVOQSxXQUFNQSxnQkFBTUE7d0JBQ1pBOztvQkFFSkEsZ0JBQVNBLGFBQUVBLElBQUlBLElBQUlBLE9BQUdBLGtCQUFZQSxPQUFPQTtvQkFDekNBLElBQUlBLGFBQUVBO3dCQUVGQTt3QkFDQUEscUNBQW1CQSxnQkFBV0E7Ozs7Z0NBY3JCQSxHQUFPQSxHQUFPQSxPQUFXQSxRQUFZQTs7Z0JBR3REQSxrQkFBYUEsS0FBV0EsR0FBR0EsTUFBTUEsUUFBUUE7Z0JBQ3pDQSxrQkFBYUEsS0FBV0EsUUFBSUEsdUJBQVdBLE1BQU1BLFFBQVFBO2dCQUNyREEsa0JBQWFBLEtBQVdBLEdBQUdBLEdBQUdBLFVBQVVBO2dCQUN4Q0Esa0JBQWFBLEtBQVdBLEdBQUdBLFFBQUlBLHdCQUFZQSxVQUFVQTs7Z0JBRXJEQSxrQkFBYUEsS0FBV0EsR0FBR0EsU0FBU0E7Z0JBQ3BDQSxrQkFBYUEsS0FBV0EsR0FBZ0JBLFFBQUVBLDhCQUFnQkE7Z0JBQzFEQSxrQkFBYUEsS0FBV0EsUUFBRUEsdUJBQWNBLFFBQUdBLDhCQUFrQkE7Z0JBQzdEQSxrQkFBYUEsS0FBV0EsUUFBSUEsdUJBQVlBLFNBQVNBOztrQ0FtQ2hDQSxJQUFRQSxJQUFRQSxJQUFRQSxJQUFRQTtnQkFFakRBLE1BQU1BLElBQUlBOztvQ0FsQ1dBLEdBQVFBLEdBQU9BLEdBQU9BLE9BQVdBLFFBQVlBLE9BQVdBOztnQkFFN0VBLEtBQUtBLFFBQVFBLEdBQUdBLElBQUlBLE1BQUlBLGFBQU9BO29CQUUzQkEsS0FBS0EsUUFBUUEsR0FBR0EsSUFBSUEsTUFBSUEsY0FBUUE7d0JBRTVCQSxnQkFBU0EsR0FBR0EsR0FBR0EsR0FBR0E7O3dCQUVsQkEsa0JBQWFBLFdBQVdBLEdBQUdBOzs7O2dDQUtsQkEsT0FBV0EsR0FBT0E7Z0JBRW5DQSxJQUFJQSxVQUFTQTtvQkFDVEEsb0JBQVVBLEdBQUdBLElBQUtBOzs7b0NBR0RBLE9BQVdBLEdBQU9BO2dCQUV2Q0EsSUFBSUEsVUFBU0E7b0JBRVRBLG9CQUFVQSxHQUFHQSxJQUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQXFCRUEsWUFBZ0JBLFVBQWNBLGVBQXdCQTs7Z0JBRTFFQSxrQkFBYUE7Z0JBQ2JBLGdCQUFXQTtnQkFDWEEscUJBQWdCQTtnQkFDaEJBLG1CQUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CSDFXSUEsT0FBT0E7Ozs7O29CQUNSQSxPQUFPQTs7Ozs7Ozs7OztnQ0FFT0E7Z0JBRW5DQSxPQUFPQSxJQUFJQSxtREFBdUJBLFdBQVdBOzs7Z0JBSzdDQSxPQUFPQTs7O2dCQUtQQTtnQkFDQUEsbUJBQWNBOzs7Z0JBS2RBOztxQ0FHc0JBLEdBQU9BO2dCQUU3QkEsdUJBQWtCQSxJQUFJQSxpQ0FBU0EsR0FBRUE7O21DQUdYQTtnQkFFdEJBLHVCQUFrQkE7OytCQUdBQSxHQUFPQTtnQkFFekJBLElBQUlBLGVBQVVBO29CQUVWQSxjQUFTQSxJQUFJQSwrQkFBVUEsR0FBR0E7b0JBQzFCQSxpQkFBWUEsSUFBSUEsK0JBQVVBLEdBQUdBOztnQkFFakNBLG1CQUFjQSxHQUFHQTtnQkFDakJBLHNCQUFpQkEsR0FBR0E7Ozs7Ozs7Ozs7Ozs7OEJJM0VIQTtnQkFFakJBLGNBQVNBO2dCQUNUQSxhQUFRQTtnQkFDUkEsV0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7K0JKM0VlQTtvQ0FDT0EsS0FBSUE7a0NBQ05BLEtBQUlBO2tDQUNEQSxLQUFJQTtnQ0FFdEJBOzs7O29DQUVPQSxHQUFHQTtnQkFFckJBLG9CQUFlQTtnQkFDZkE7Z0JBQ0FBLE9BQU9BOzs0QkFHTUEsT0FBV0E7Z0JBRXhCQSxpQkFBWUEsSUFBSUEsK0JBQVVBLE9BQU9BOzs7O2dCQU1qQ0E7Z0JBQ0FBOzs7O2dCQUtBQSxLQUFLQSxXQUFXQSxJQUFJQSx5QkFBb0JBO29CQUVwQ0EsMEJBQWFBO29CQUNiQSwwQkFBcUJBOzs7OzRCQUVqQkEsY0FBWUEsMEJBQWFBOzs7Ozs7cUJBRTdCQSxJQUFJQSwwQkFBYUEsaUJBQWlCQSxDQUFDQSwwQkFBYUE7d0JBRTVDQSxvQkFBZUEsMEJBQWFBO3dCQUM1QkEseUJBQW9CQSwwQkFBYUE7d0JBQ2pDQTs7d0JBSUFBLHNCQUFpQkEsMEJBQWFBOzs7OztxQ0FNVkEsR0FBT0E7Z0JBRW5DQTtnQkFDQUEsSUFBSUE7b0JBRUFBLEtBQUtBLHdCQUFXQTtvQkFDaEJBLHlCQUFvQkE7O29CQUlwQkEsS0FBS0EsSUFBSUE7b0JBQ1RBLFFBQVVBOzs7O2dCQUlkQSxzQkFBaUJBO2dCQUNqQkE7Z0JBQ0FBLFdBQVdBLEdBQUdBO2dCQUNkQTtnQkFDQUEsT0FBT0E7O3FDQUdxQkEsR0FBT0E7Z0JBRW5DQSxTQUFTQSxtQkFBY0EsR0FBR0E7Z0JBQzFCQTtnQkFDQUEsT0FBT0E7O21DQUdhQTs7Z0JBRXBCQSwwQkFBcUJBOzs7O3dCQUVqQkEsWUFBWUE7Ozs7Ozs7OztnQkFNaEJBLDBCQUFxQkE7Ozs7d0JBRWpCQSxJQUFJQSxDQUFDQTs0QkFBZUE7Ozs7Ozs7aUJBRXhCQTs7Ozs7Ozs7Ozs7Ozs7OztnQ0t4RnlCQSxLQUFJQTs7NEJBSWJBLGNBQTJCQTs7Z0JBRTNDQSxvQkFBb0JBO2dCQUNwQkEsWUFBWUE7Z0JBQ1pBLGNBQWNBLHlFQUFtRUEsSUFBSUE7Z0JBQ3JGQSxnQkFBZ0JBLGlFQUEyREEsSUFBSUE7Z0JBQy9FQSxXQUFXQTtnQkFDWEEsaUJBQWlCQTtnQkFDakJBLFdBQVdBO2dCQUNYQSw0QkFBNEJBO2dCQUM1QkEsYUFBUUE7Z0JBQ1JBLHNCQUFpQkE7O2dCQUVqQkEsa0JBQWFBLElBQUlBLHdEQUFZQSxVQUFDQTtvQkFFMUJBLGFBQWFBO29CQUNiQTtvQkFDQUEsSUFBSUE7d0JBRUFBLFVBQVVBLDBLQUErQkE7d0JBQ3pDQSw2QkFBV0EsNkJBQTJCQTs7Ozt3QkFNdENBLElBQUlBOzRCQUVBQSxVQUFVQSwwS0FBK0JBOzRCQUN6Q0EsNkJBQVdBLDZCQUEyQkE7O2dDQUVsQ0EsVUFBVUEsMENBQTBDQSw0QkFBb0JBO2dDQUN4RUEsWUFBWUE7Z0NBQ1pBLGtCQUFrQkEsb0RBQU1BLElBQUlBLGlDQUFTQSxJQUFJQTs7Z0NBRXpDQSwwQ0FBMkNBLCtDQUEwQkE7Z0NBQ3JFQSxnQkFBY0EscUJBQXNCQSxtREFBOEJBLDREQUFnQ0E7Ozs7NEJBTXRHQSxVQUFVQTs7Ozs7b0JBS2xCQSxJQUFHQSxXQUFXQTt3QkFDVkEseUJBQXlCQTs7O29CQUU3QkEsZUFBZUEsb0NBQTRCQTs7O29CQUczQ0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSx5QkFBeUJBLDRCQUFvQkE7d0JBQ3hFQSxTQUFTQTt3QkFDVEEsZ0JBQWdCQSw0REFBZ0NBO3dCQUNoREE7d0JBQ0FBLGFBQWFBLDREQUFnQ0E7d0JBQzdDQTt3QkFDQUEscUJBQW1CQSxrQkFBa0JBLFFBQVFBO3dCQUM3Q0EscUJBQW1CQSxrQkFBa0JBLFFBQVFBO3dCQUM3Q0EscUJBQW1CQSxrQkFBa0JBLFFBQVFBO3dCQUM3Q0EscUJBQW1CQSxrQkFBa0JBLFFBQVFBO3dCQUM3Q0EscUJBQW1CQSxrQkFBa0JBLFFBQVFBOzt3QkFFN0NBLHFCQUFxQkEsOERBQXlCQSxJQUFJQSxpQ0FBU0EsSUFBSUE7O3dCQUUvREEsZ0JBQWNBLG1CQUFvQkE7Ozs7OztvQkFNdkNBO2dCQUNIQSxrQkFBYUEsSUFBSUEsd0RBQVlBLFVBQUNBO29CQUUxQkEsVUFBVUE7O29CQUVWQSwrQkFBK0JBLDRCQUEyQkEsMEdBQThCQTs7O29CQUd6RkE7Z0JBQ0hBLGtCQUFhQSxJQUFJQSx3REFBWUEsVUFBQ0E7b0JBRTFCQSxVQUFVQTs7b0JBRVZBLFVBQVVBLDBDQUEwQ0EsNEJBQW9CQTtvQkFDeEVBLFlBQVlBO29CQUNaQSxrQkFBa0JBLG9EQUFLQSxJQUFJQSxpQ0FBU0EsSUFBR0E7O29CQUV2Q0EsMENBQXdDQSwrQ0FBMEJBO29CQUNsRUEsZ0JBQWNBLHFCQUFzQkEsbURBQThCQTs7O29CQUduRUE7Z0JBQ0hBLGVBQTBCQSxVQUFDQTs7b0JBR3ZCQSxVQUFVQTtvQkFDVkEsVUFBVUE7b0JBQ1ZBLFVBQVVBO29CQUNWQSxZQUFZQSw0QkFBb0JBOztvQkFFaENBLFVBQVVBO29CQUNWQSxXQUFXQTtvQkFDWEEsV0FBV0EseUNBQUNBLG9EQUFNQTs7b0JBRWxCQSxTQUFTQSxvQ0FBNEJBOztvQkFFckNBLGNBQVlBLGtCQUFtQkEsSUFBSUEsMkRBQy9CQSwwQ0FBMENBLDZCQUMxQ0EsMENBQTBDQTs7Z0JBRWxEQSxrQkFBYUEsSUFBSUEsd0RBQVlBLFdBQVVBOztnQkFFdkNBLGtCQUFhQSxJQUFJQSx3REFBWUEsVUFBQ0E7O29CQUUxQkEsU0FBU0E7b0JBQ1RBLFVBQVVBO29CQUNWQSxVQUFVQTtvQkFDVkEsWUFBWUEsNEJBQW9CQTs7b0JBRWhDQSxXQUFXQTtvQkFDWEEsYUFBYUE7O29CQUViQSxnQkFBZ0JBO29CQUNoQkEsc0JBQXNCQSwwQ0FBMENBO29CQUNwRUEsZ0JBQWNBLHlCQUEwQkEsbURBQThCQSw0REFBZ0NBO29CQUNsR0EsMEJBQXFCQTs7Ozs0QkFFakJBLGFBQWFBOzRCQUNiQSxlQUFlQSwyRkFBT0EsSUFBSUEsaUNBQVNBLG9CQUFvQkE7NEJBQ3ZEQSxJQUFJQTtnQ0FBZ0JBOzs0QkFDcEJBLElBQUlBO2dDQUFnQkE7OzRCQUNwQkEsSUFBSUE7Z0NBQWdCQTs7NEJBQ3BCQSxJQUFJQTtnQ0FBZ0JBOzs7OzRCQUdwQkEsVUFBVUEsMENBQTBDQTs0QkFDcERBLHFCQUFtQkEsVUFBVUE7NEJBQzdCQSxnQkFBY0Esc0JBQXVCQSxtREFBOEJBLDREQUFnQ0E7Ozs7Ozt5QkFFeEdBO2dCQUNIQSxjQUFTQTs7O29CQUdMQSx3QkFBMEJBO29CQUMxQkEsS0FBS0EsV0FBV0EsSUFBSUEsbUJBQWNBOzt3QkFHOUJBLElBQUlBLENBQUNBOzRCQUFtQ0E7O3dCQUN4Q0EsV0FBV0EsaUJBQVlBOzt3QkFFdkJBLElBQUlBLElBQUlBOzs0QkFHSkEsb0JBQW9CQTs7NEJBRXBCQSwwQkFBb0JBOzs7OztvQ0FHaEJBLElBQUlBLGNBQWNBOzs7d0NBSWRBLFlBQVlBLGtCQUFhQTs7Ozs7Ozs7Ozs7b0JBU3pDQSxzQkFBaUJBOzs7Ozs7O2dCQWtDckJBLE9BQU9BLHVCQUFrQkE7Ozs7Ozs7Ozs7Ozs7cUNBM0JVQSxLQUFJQTs7NEJBR3BCQSxTQUF3QkE7Ozs7O2dCQUV2Q0EsMEJBQWtCQTs7Ozt3QkFFZEEsdUJBQWtCQSx1QkFBZ0JBOzs7Ozs7aUJBRXRDQSxlQUFlQTs7OztpQ0FHS0E7O2dCQUVwQkEsMEJBQXFCQTs7Ozt3QkFFakJBLElBQUlBLENBQUNBLGNBQWNBOzRCQUVmQTs7Ozs7OztpQkFHUkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0NsTmtDQSxBQUEyREEsVUFBQ0E7d0JBQU9BLFFBQVFBLElBQUlBLHlDQUFNQSw0Q0FBZ0JBO3dCQUFxQ0EsUUFBUUEsSUFBSUEseUNBQU1BLDRDQUFnQkE7d0JBQStCQSxRQUFRQSxJQUFJQSx5Q0FBTUEsNENBQWdCQTt3QkFBOEJBLFFBQVFBLElBQUlBLHlDQUFNQSw0Q0FBZ0JBO3dCQUFrQ0EsUUFBUUEsSUFBSUEseUNBQU1BLDRDQUFnQkE7d0JBQXNDQSxRQUFRQSxJQUFJQSx5Q0FBTUEsNENBQWdCQTt3QkFBa0NBLFFBQVFBLElBQUlBLHlDQUFNQSw0Q0FBZ0JBO3dCQUFvQ0EsUUFBUUEsSUFBSUEseUNBQU1BLDRDQUFnQkE7d0JBQWlDQSxRQUFRQSxJQUFJQSx5Q0FBTUEsNENBQWdCQTt3QkFBbUNBLFFBQVFBLElBQUlBLHlDQUFNQSw0Q0FBZ0JBO3dCQUFtQ0EsUUFBUUEsSUFBSUEseUNBQU1BLGtEQUFzQkEsaUxBQXNCQTt3QkFBZUEsUUFBUUEsSUFBSUEseUNBQU1BLGtEQUFzQkE7d0JBQTJCQSxPQUFPQTtzQkFBdjJCQSxLQUFJQTs7OzsyQ0FFN0NBO2dCQUUzQkE7Z0JBQ0FBLElBQUlBLGtDQUE2QkEsT0FBV0E7OztvQkFNeENBLFVBQVFBOztnQkFFWkEsT0FBT0E7O21DQUdjQSxZQUFnQkE7OztnQkFHckNBLDBCQUFxQkE7Ozs7d0JBRWpCQSxJQUFJQSxlQUFjQTs0QkFFZEEsT0FBT0E7Ozs7Ozs7aUJBR2ZBLEtBQUtBLFdBQVdBLElBQUlBLGdDQUEyQkE7b0JBRTNDQSxJQUFJQSwyQ0FBbUJBLEdBQW5CQSw4QkFBeUJBO3dCQUV6QkE7d0JBQ0FBLEtBQUtBLFlBQVlBLEtBQUtBLG9CQUFvQkE7NEJBRXRDQSxJQUFJQSxZQUFZQSxJQUFJQTtnQ0FFaEJBLElBQUlBLHNCQUFxQkE7b0NBRXJCQSxPQUFPQSxxQkFBYUE7O2dDQUV4QkE7Ozs7O2dCQUtoQkEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7NkJDNUNlQTs7NEJBSUpBLGNBQWdDQTs7Z0JBRWxEQSxvQkFBb0JBO2dCQUNwQkEsY0FBY0E7O2dCQUVkQSxnREFBV0E7Ozs7Ozs7Z0JBcUJYQTtnQkFDQUE7Z0JBQ0FBLGFBQWFBO2dCQUNiQSxJQUFJQTtvQkFFQUEsU0FBU0E7b0JBQ1RBLElBQUdBO3dCQUVDQSxXQUFjQSxvQ0FBTUEsaUNBQU5BLGlDQUFzQkE7d0JBQ3BDQSwwQkFBbUJBO3dCQUNuQkEsUUFBUUEsaURBQXVCQTt3QkFDL0JBLDBCQUFtQkEsR0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0J6QlFoQkEsS0FBSUE7K0JBQ0lBLEtBQUlBOzs7OzZCQUVkQSxHQUFLQSxRQUFrQkE7Z0JBRW5DQSxpQkFBWUE7Z0JBQ1pBLGlCQUFZQSxBQUEwQkE7Z0JBQ3RDQSxTQUFTQTs7K0JBR2tCQTtnQkFFM0JBLHFCQUFRQSxHQUFHQSxxQkFBUUE7Z0JBQ25CQSxzQkFBaUJBO2dCQUNqQkEsc0JBQWlCQTs7Ozs7Ozs7Ozs4QzBCOFlnQkE7b0JBRWpDQSxTQUFTQTtvQkFDVEEsSUFBSUEsWUFBV0E7d0JBRVhBLEtBQUtBOztvQkFFVEEsSUFBSUEsWUFBV0E7d0JBRVhBLEtBQUtBOztvQkFFVEEsSUFBSUEsWUFBV0E7d0JBRVhBLEtBQUtBOzs7b0JBR1RBLE9BQU9BOzs4Q0FHMEJBO29CQUVqQ0EsU0FBU0E7b0JBQ1RBLElBQUlBLFlBQVdBO3dCQUVYQSxLQUFLQTs7b0JBRVRBLElBQUlBLFlBQVdBO3dCQUVYQSxLQUFLQTs7b0JBRVRBLElBQUlBLFlBQVdBO3dCQUVYQSxLQUFLQTs7O29CQUdUQSxPQUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkF6Y01BOzs7Ozs7Ozs7b0JBMUJQQSxPQUFPQTs7O29CQUdUQSxhQUFRQTs7Ozs7Ozs7Ozs7OztvQ0EyMUIwQkE7d0NBaDFCSUEsS0FBSUE7d0NBQ0tBLEFBQXdFQSxVQUFDQTt3QkFBT0EsUUFBUUE7d0JBQTZCQSxRQUFRQTt3QkFBNkJBLE9BQU9BO3NCQUFuSUEsS0FBSUE7OzhCQWdCM0RBLElBQUlBOzs0QkFFZEEsYUFBd0JBOzs7O2dCQUd4Q0E7Ozs7Ozs7Ozs7O2dCQUNBQSxxQkFBZ0JBLGtCQUFTQTtnQkFDekJBLEtBQUtBLFdBQVdBLElBQUlBLG9CQUFvQkE7b0JBRXBDQSxzQ0FBY0EsR0FBZEEsdUJBQW1CQSxxQ0FBWUEsR0FBWkE7OztnQkFHdkJBLG1CQUFjQTtnQkFDZEEsaUJBQWlCQTtnQkFDakJBLGlCQUFZQSxJQUFJQTtnQkFDaEJBLGVBQVVBLGtGQUF1RUEsSUFBSUE7Z0JBQ3JGQSxzQkFBaUJBLG9GQUF5RUEsSUFBSUE7Z0JBQzlGQSxpQkFBWUEsZ0ZBQXFFQSxJQUFJQTtnQkFDckZBO2dCQUNBQSxpQkFBWUE7Ozs7Z0JBSVpBLGdCQUFnQkEsMEVBQStEQSxJQUFJQTs7Z0JBRW5GQSxzQkFBaUJBLEtBQUlBO2dCQUNyQkE7O2dCQUVBQSxrQkFBYUE7O2dCQUViQSx3Q0FBbUNBLElBQUlBLDhDQUFrQkEsOExBQTBEQSwrQkFBQ0E7b0JBRWhIQSxlQUFlQSxrQ0FBcUJBO29CQUNwQ0Esa0JBQWtCQTtvQkFDbEJBLGVBQStEQTtvQkFDL0RBLElBQUlBO3dCQUNBQSxXQUFXQSxrQ0FBcUJBOztvQkFDcENBLGNBQXlEQSxBQUFnREE7b0JBQ3pHQSxTQUFnQkEsdUJBQWtCQTs7b0JBRWxDQSxJQUFJQSxZQUFZQTt3QkFFWkEsVUFBVUE7d0JBQ1ZBLFdBQVdBO3dCQUNYQSxXQUFXQSxTQUFTQSxRQUFRQTt3QkFDNUJBLFdBQWFBLEFBQU9BOzt3QkFFcEJBLG1CQUFZQSxZQUFZQSxPQUFPQSxJQUFJQSwyREFDL0JBLGtDQUE2QkEsZ0NBQzdCQSxrQ0FBNkJBOzt3QkFJakNBLFdBQVVBO3dCQUNWQSxZQUFXQTt3QkFDWEEsSUFBSUEsa0JBQWlCQTs0QkFDakJBLFVBQVNBOzs0QkFFVEE7O3dCQUNKQSxZQUFXQSxTQUFTQSxTQUFRQTt3QkFDNUJBLFlBQWFBLEFBQU9BO3dCQUNwQkEsbUJBQVlBLFlBQVlBLFFBQU9BLElBQUlBLDJEQUMvQkEsa0NBQTZCQSxnQkFDN0JBLGtDQUE2QkE7Ozs7Ozs7Ozs7Ozs7Ozs7OztnQkFrQnpDQSx3Q0FBbUNBLElBQUlBLDhDQUFrQkEsK0xBQStCQSwrQkFBQ0E7O29CQUdyRkEsZUFBZUEsa0NBQXFCQTtvQkFDcENBLGNBQXlEQSxBQUFnREE7b0JBQ3pHQSxTQUFnQkEsdUJBQWtCQTtvQkFDbENBLFVBQVVBO29CQUNWQSxXQUFXQTtvQkFDWEEsSUFBSUEsa0JBQWlCQTt3QkFDakJBLFNBQVNBOzt3QkFFVEE7O29CQUNKQSxXQUFXQSxTQUFTQSxRQUFRQTtvQkFDNUJBLFdBQWFBLEFBQU9BO29CQUNwQkEsbUJBQVlBLFlBQVlBLE9BQU9BLElBQUlBLDJEQUMvQkEsa0NBQTZCQSxlQUM3QkEsa0NBQTZCQTs7OztnQkFJckNBLGlCQUFZQSxBQUErREEsVUFBQ0E7d0JBQU9BLFFBQVFBO3dCQUE4QkEsUUFBUUE7d0JBQTZCQSxRQUFRQTt3QkFBaUNBLFFBQVFBO3dCQUFvQ0EsUUFBUUEsaU1BQThCQTt3QkFBd0JBLFFBQVFBLDhMQUEyQkE7d0JBQXFCQSxRQUFRQSxnTUFBNkJBO3dCQUF1QkEsUUFBUUEsZ01BQTZCQTt3QkFBdUJBLFFBQVFBO3dCQUFrQ0EsUUFBUUE7d0JBQXNDQSxRQUFRQTt3QkFBdUNBLFFBQVFBO3dCQUFtQ0EsT0FBT0E7c0JBQWhuQkEsS0FBSUE7O2dCQUU5Q0Esd0JBQW1CQSxBQUErREEsVUFBQ0E7d0JBQU9BLFFBQVFBO3dCQUFvQ0EsUUFBUUE7d0JBQXNDQSxRQUFRQTt3QkFBNENBLFFBQVFBO3dCQUF3Q0EsUUFBUUE7d0JBQXNDQSxRQUFRQSxpTUFBOEJBO3dCQUF3QkEsUUFBUUEsOExBQTJCQTt3QkFBcUJBLFFBQVFBLGdNQUE2QkE7d0JBQXVCQSxRQUFRQSxnTUFBNkJBO3dCQUF1QkEsUUFBUUE7d0JBQWdEQSxRQUFRQTt3QkFBMkNBLE9BQU9BO3NCQUFybkJBLEtBQUlBOzs7Ozs7Ozs7O2dCQVVyREEsT0FBT0EsNEJBQXVCQTtvQkFFMUJBLHdCQUFtQkE7OztxQ0FJR0E7Z0JBRTFCQSxpQkFBaUVBLGtDQUFxQkE7Z0JBQ3RGQSxZQUFZQSxhQUFRQTtnQkFDcEJBLE9BQU9BLDZCQUFXQSxnQkFBU0EsQ0FBQ0E7O3lDQUdLQTtnQkFFakNBLFNBQVNBO2dCQUNUQSxtQkFBbUJBO2dCQUNuQkEsbUJBQW1CQSw0REFBbUJBO2dCQUN0Q0EsdUJBQXVCQTtnQkFDdkJBLE9BQU9BOzs0QkFHTUE7O2dCQUdiQSxZQUFpQkEsQUFBVUE7Z0JBQzNCQSxJQUFJQSxVQUFTQSwwREFBaUJBO29CQUUxQkE7b0JBQ0FBLGVBQVVBOzs7Ozs7Ozs7Z0JBU2RBLElBQUlBLG1CQUFhQTtvQkFFYkEsSUFBSUEsdUNBQWlDQTs7d0JBR2pDQSxzQkFBaUJBLDZDQUF3QkEsOENBQXlCQTs7O29CQUd0RUEsSUFBSUEsbUJBQWFBOzt3QkFHYkE7Ozs7Z0JBSVJBLGlCQUFZQTtnQkFDWkEsSUFBSUEsdUNBQWlDQTtvQkFFakNBLElBQUlBO3dCQUVBQSxhQUFhQSx3QkFBbUJBLG1CQUFjQTt3QkFDOUNBLElBQUlBLGdCQUFlQTs0QkFDZkEsMkJBQXNCQTs7Ozs7Ozs7Ozs7O2dCQVdsQ0EsSUFBSUE7b0JBRUFBLFFBQVFBO3dCQUVKQSxLQUFLQTs0QkFDREE7NEJBQ0FBO3dCQUNKQSxLQUFLQTs0QkFDREE7NEJBQ0FBO3dCQUNKQSxLQUFLQTs0QkFFREE7d0JBQ0pBLEtBQUtBOzs0QkFFREE7NEJBQ0FBO3dCQUNKQTs0QkFFSUE7OztnQkFHWkE7Z0JBQ0FBLGtCQUFhQTs7OztnQkFNYkEsT0FBT0EsMkJBQXNCQSxDQUFDQTs7O2dCQUs5QkEsT0FBT0EsNkJBQXdCQTs7bUNBR1hBLEdBQVVBLGNBQTBCQTs7O2dCQUV4REEsd0JBQXdCQTtnQkFDeEJBLGVBQVVBO2dCQUNWQTtnQkFDQUEsa0JBQW9CQTtnQkFDcEJBLElBQUlBO29CQUFvQkE7O2dCQUN4QkEsMEJBQW1CQSx5QkFBb0JBLGNBQWNBLElBQUlBLDJEQUFzQ0E7Z0JBQy9GQSxxQkFBZ0JBOzs7Ozs7Z0JBUWhCQSxlQUFVQTtnQkFDVkE7Ozt5Q0FJMEJBO2dCQUUxQkEsSUFBSUEsQ0FBQ0E7b0JBQ0RBLGlCQUFZQTs7OztvQ0FJS0E7Z0JBRXJCQTtnQkFDQUEsd0JBQW1CQTs7Z0JBRW5CQTs7Z0JBRUFBLElBQUlBLG1CQUFhQTtvQkFFYkEsc0JBQWlCQSw2Q0FBd0JBLDhDQUF5QkE7OztnQkFHdEVBLGdCQUFnQkE7Z0JBQ2hCQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQSxvQkFBb0JBO2dCQUNwQkE7Z0JBQ0FBLGdDQUE0QkEsa0JBQWFBLGtCQUFhQSxtQ0FBZUEsbUNBQWFBLDhDQUF5QkE7Z0JBQzNHQSxLQUFLQSxXQUFXQSxJQUFJQSxrQkFBSUEsaUJBQVdBO29CQUUvQkEsS0FBS0EsV0FBV0EsSUFBSUEsa0JBQUlBLGlCQUFXQTt3QkFFL0JBLElBQUlBOzRCQUVBQSw4QkFFQUEscUJBQWNBLFNBQ2RBLHFCQUFjQSxTQUFHQTs0QkFDakJBLDhCQUVJQSx1QkFBY0EsVUFBSUEscUJBQ2xCQSxxQkFBY0EsU0FBR0E7O3dCQUV6QkEsSUFBSUEsSUFBSUEsd0JBQWtCQSxJQUFJQTs7NEJBRzFCQSx3QkFBbUJBLFFBQUlBLHlCQUFjQSxxQkFBZUEsTUFBSUEsd0JBQWFBLGdCQUFXQSxnQkFBV0E7NEJBQzNGQSx3QkFBbUJBLE1BQUlBLHdCQUFhQSxNQUFJQSx3QkFBYUEsZ0JBQVdBLGdCQUFXQTs7Ozs7Z0JBS3ZGQSxLQUFLQSxZQUFXQSxLQUFJQSxpQ0FBNEJBOztvQkFHNUNBLGlCQUFxQ0Esa0NBQXFCQTs7b0JBRTFEQSxTQUFTQSxhQUFRQTs7b0JBRWpCQSxVQUFVQTtvQkFDVkEsZ0JBQStCQSxrQ0FBNkJBLEFBQW9CQTtvQkFDaEZBLElBQUlBLG9CQUFtQkE7d0JBRW5CQSxjQUFjQTt3QkFDZEEsY0FBY0E7OztvQkFHbEJBLElBQUlBLG9FQUFlQSw4QkFBc0JBLHVCQUFhQTt3QkFFbERBLG1CQUFZQSw0QkFBZUEsb0JBQW9CQSxJQUFJQSwyREFBK0JBLDRCQUFlQSw4QkFBb0JBOzs7b0JBR3pIQSxRQUFRQTtvQkFDUkEsSUFBSUEsb0JBQW1CQTt3QkFBeURBLElBQUlBOztvQkFDcEZBLElBQUlBLG9CQUFtQkE7d0JBQTBEQSxJQUFJQTs7b0JBQ3JGQSxJQUFJQTt3QkFDQUEsSUFBSUE7O29CQUNSQSxTQUFTQTs7b0JBRVRBLElBQUlBO3dCQUVBQSxjQUF5REE7d0JBQ3pEQSxLQUFLQSw0REFBbUJBOzs7b0JBRzVCQSxJQUFJQTt3QkFFQUEsS0FBS0EsWUFBV0EsS0FBSUEsdUJBQWVBOzRCQUUvQkEsNEJBQWVBLHNCQUFtQkEsOENBQXlCQSxPQUFNQSxHQUFHQTs7Ozt3QkFNeEVBLDRCQUFlQSxnQkFBZUEsVUFBVUEsR0FBR0E7d0JBQzNDQSw0QkFBZUEsd0JBQXVCQSw2Q0FBcUNBLE1BQUlBLG9CQUFjQSxHQUFHQTs7Ozs7OztnQkFPeEdBLHNCQUFzQkEsa0JBQUlBOzs7Ozs7b0JBTXRCQTs7b0JBRUFBLElBQUlBLHVDQUFpQ0E7d0JBRWpDQSxrQkFBYUEsV0FBV0E7d0JBQ3hCQSxJQUFJQTs0QkFFQUEsWUFBY0EsZ0NBQTJCQTs0QkFDekNBLGdDQUE0QkEsR0FBR0Esd0JBQWdCQSxrQkFBS0EsQUFBQ0EsZ0JBQWdCQSx1REFBY0E7Ozt3QkFLdkZBLGdDQUE0QkEsZUFBT0EsK0JBQXVCQTs7OztnQkFJbEVBLGlCQUFpQkEsbUJBQUlBO2dCQUNyQkE7Z0JBQ0FBO2dCQUNBQSxhQUFhQSxtQkFBSUE7O2dCQUVqQkEsbUJBQWNBLFlBQVlBO2dCQUMxQkEsSUFBR0EsQ0FBQ0E7b0JBQ0FBLGNBQVNBLHlCQUFlQTs7O29CQUV4QkE7O29CQUVBQSw4QkFBdUJBLEdBQUdBO29CQUMxQkEsSUFBSUEsZ0JBQVdBLFFBQVFBLENBQUNBLENBQUNBOzs7Ozt3QkFNckJBLDBDQUFxQ0EsdUJBQWtCQTs7d0JBSXZEQSxJQUFJQSxDQUFDQTs0QkFFREEsZUFBVUE7NEJBQ1ZBOzs7Ozs7Z0JBTVpBO2dCQUNBQTs7O2dCQUdBQTtnQkFDQUEsMkJBQXNCQTtnQkFDdEJBLElBQUlBO29CQUVBQTtvQkFDQUEsSUFBSUE7d0JBRUFBOzs7Ozs7OztvREErQ2lDQTtnQkFFekNBLFFBQVFBO2dCQUNSQSxRQUFRQTtnQkFDUkEsZ0JBQWdCQSxJQUFJQSxpQ0FBbUJBLElBQUlBLGlCQUFZQSw0Q0FBZ0JBLGtCQUFhQSxrQkFBSUEsa0JBQVlBLElBQUlBLGlCQUFZQSw0Q0FBZ0JBO2dCQUNwSUEsT0FBT0E7O29DQUdlQSxHQUFPQTs7Z0JBRzdCQSwyQkFBc0JBLEdBQUdBOzs7O2dCQUl6QkE7Z0JBQ0FBLE9BQU9BLG9CQUFlQSxHQUFHQSxHQUFHQSwrQ0FBbUJBOztnQkFFL0NBLE9BQU9BLG9CQUFlQSxHQUFHQSxHQUFHQSw0Q0FBZ0JBOzs7O2dCQUk1Q0E7Z0JBQ0FBLEtBQUtBLFdBQVdBLElBQUlBLHNDQUFpQ0E7b0JBRWpEQSxTQUFTQTtvQkFDVEEsU0FBU0EsaUJBQVFBO29CQUNqQkEsWUFBWUEsdUNBQTBCQTs7b0JBRXRDQSxJQUFJQSw4QkFBeUJBLEdBQUdBO3dCQUU1QkE7d0JBQ0FBO3dCQUNBQSxjQUFjQSxNQUFNQTt3QkFDcEJBO3dCQUNBQSxnQ0FBMkJBLElBQUlBLGtEQUFXQSxJQUFJQSw2QkFBS0EsZ0JBQVFBLGVBQWVBOzt3QkFFMUVBLGtCQUFrQkEsZ0NBQTJCQSxTQUFTQSxJQUFJQSxJQUFJQTs7O3dCQUc5REEsd0JBQXFCQTt3QkFDckJBLElBQUlBLGVBQWNBOzRCQUVkQSxRQUFvREEsQUFBaURBOzRCQUNyR0Esa0NBQTZCQSx5SUFBT0E7NEJBQ3BDQSxJQUFJQSxpQkFBZUE7Z0NBRWZBLGdCQUFjQTs7Ozt3QkFJdEJBLElBQUlBLGVBQWNBOzRCQUVkQSxXQUF1QkEsQUFBaUJBOzRCQUN4Q0EsZ0JBQWNBLDBCQUFpQkE7O3dCQUVuQ0Esc0JBQWVBLGVBQWFBLDRCQUFZQSxJQUFJQTs7Ozs7Ozs7O3NDQVU3QkEsR0FBT0EsR0FBT0EsVUFBb0JBOztnQkFHekRBLEtBQUtBLFdBQVdBLElBQUlBLHNDQUFpQ0E7b0JBRWpEQSxTQUFTQTtvQkFDVEEsU0FBU0EsaUJBQVFBO29CQUNqQkEsWUFBWUEsdUNBQTBCQTs7b0JBRXRDQSxJQUFJQSw4QkFBeUJBLEdBQUdBO3dCQUU1QkEsY0FBY0EsZ0NBQTJCQTt3QkFDekNBLHNCQUF5QkE7d0JBQ3pCQSx3QkFBMkJBO3dCQUMzQkEsSUFBSUE7NEJBRUFBOzRCQUNBQSxvQkFBb0JBLHlCQUFLQSx5REFBbUJBLDJEQUFxQkEsMkRBQXFCQTs7d0JBRTFGQSxJQUFJQSxrQkFBa0JBLG1CQUFrQkE7NEJBRXBDQTs7d0JBRUpBO3dCQUNBQTs7O3dCQUdBQSxnQ0FBMkJBLElBQUlBLGtEQUFXQSxJQUFJQSw2QkFBS0EsZ0JBQVFBLGVBQWVBOzt3QkFFMUVBO3dCQUNBQSxJQUFJQSxtQkFBbUJBOzRCQUNuQkEsY0FBY0EsZ0NBQTJCQSxTQUFTQSxJQUFJQSxJQUFJQTs7NEJBRzFEQSxzQkFBZUEsaUJBQWlCQSxJQUFJQSxJQUFJQTs0QkFDeENBLGNBQWNBOzs7O3dCQUlsQkEsd0JBQXFCQTt3QkFDckJBLElBQUlBLGVBQWNBOzRCQUVkQSxJQUFJQSxxQkFBcUJBO2dDQUVyQkEsZ0JBQWNBOztnQ0FJZEEsUUFBb0RBLEFBQWlEQTtnQ0FDckdBLGtDQUE2QkEseUlBQU9BO2dDQUNwQ0EsSUFBSUEsaUJBQWVBO29DQUVmQSxnQkFBY0E7Ozs7Ozt3QkFNMUJBLElBQUlBLGVBQWNBOzRCQUVkQSxXQUF1QkEsQUFBaUJBOzRCQUN4Q0EsZ0JBQWNBLDBCQUFpQkE7O3dCQUVuQ0Esc0JBQWVBLGVBQWFBLDRCQUFZQSxJQUFJQTs7Ozs7Ozs7O2dCQVNwREEsT0FBT0E7O2dDQUdXQSxZQUFnQkE7O2dCQUdsQ0EsMkJBQXNCQSx3QkFBZ0JBO2dCQUN0Q0EscUNBQThCQTtnQkFDOUJBLDJCQUFzQkEsd0JBQWdCQTtnQkFDdENBLHdDQUFpQ0E7Z0JBQ2pDQSxZQUFZQTtnQkFDWkEsS0FBS0EsV0FBV0EsSUFBSUEsaUNBQTRCQTs7O29CQUk1Q0EsUUFBNEJBLGtDQUFxQkE7b0JBQ2pEQSxJQUFJQSxDQUFDQTt3QkFFREE7O29CQUVKQSxJQUFJQSxDQUFDQTt3QkFFREE7d0JBQ0FBLFlBQVlBO3dCQUNaQSxJQUFJQSxXQUFVQTs0QkFFVkEsUUFBUUE7Ozt3QkFHWkEsV0FBV0E7d0JBQ1hBLFdBQVdBLDBCQUFpQkE7Ozt3QkFHNUJBLDZCQUF3QkEsQUFBS0EsUUFBUUEsTUFBTUEsTUFBTUE7d0JBQ2pEQSxjQUFpQkE7d0JBQ2pCQSxRQUFRQTs0QkFFSkEsS0FBS0E7Z0NBQ0RBO2dDQUNBQTs0QkFDSkEsS0FBS0E7Z0NBQ0RBO2dDQUNBQTs0QkFDSkEsS0FBS0E7Z0NBQ0RBO2dDQUNBQTs0QkFDSkEsS0FBS0E7Z0NBQ0RBOzRCQUNKQTtnQ0FDSUE7O3dCQUVSQSxhQUFhQSw0REFBbUJBOzt3QkFFaENBLHNCQUFlQSxTQUFTQSxrQkFBVUEsTUFBTUE7Ozs7Ozs7O3FDQVN6QkEsWUFBZ0JBLFlBQWdCQTs7Z0JBRXZEQSxvQkFBc0JBO2dCQUN0QkEsMkJBQXNCQSx3QkFBY0E7Z0JBQ3BDQSx5Q0FBa0NBOztnQkFFbENBLGdCQUFnQkE7Z0JBQ2hCQSxLQUFLQSxXQUFXQSxJQUFJQSxpQ0FBNEJBOztvQkFHNUNBLFFBQTRCQSxrQ0FBcUJBO29CQUNqREEsSUFBSUEsQ0FBQ0E7d0JBRURBOztvQkFFSkEsSUFBSUEsQ0FBQ0E7d0JBRURBO3dCQUNBQSxZQUFZQTt3QkFDWkEsSUFBSUEsV0FBVUE7NEJBRVZBLFFBQVFBOzs7O3dCQUlaQSxXQUFXQSwwQkFBaUJBO3dCQUM1QkEsY0FBY0E7d0JBQ2RBLGlCQUFpQkE7d0JBQ2pCQSxpQkFBaUJBO3dCQUNqQkEsSUFBSUE7NEJBQ0FBLE9BQU9BOzRCQUNQQSxVQUFVQSwwQkFBYUE7NEJBQ3ZCQSxhQUFhQTs0QkFDYkEsYUFBYUE7O3dCQUVqQkEsb0JBQWVBLEdBQUdBLE9BQU9BLE1BQU1BOzt3QkFFL0JBLDJCQUFzQkEsWUFBWUE7O3dCQUVsQ0EsS0FBS0EsWUFBWUEsS0FBS0EsOERBQWVBOzRCQUVqQ0EsYUFBYUE7NEJBQ2JBLElBQUlBLGNBQWFBLDZDQUF3Q0EsT0FBTUEsb0ZBQWdDQSx1Q0FBaUNBO2dDQUU1SEEsU0FBU0E7Ozs0QkFHYkEsSUFBSUEsS0FBS0E7Z0NBRUxBLFFBQVdBLG1CQUFjQSxHQUFHQTtnQ0FDNUJBLGdDQUEyQkEsSUFBSUEsa0RBQVdBLElBQUlBLDZCQUMxQ0Esd0JBQ0FBLHdCQUNBQSxpQkFHR0EsMkJBQVFBLElBQVJBO2dDQUNQQSw2QkFBc0JBLEdBQUdBO2dDQUN6QkEsSUFBSUE7b0NBRUFBLEtBQUtBLFFBQVFBLFVBQVVBLE9BQU9BO3dDQUUxQkE7Ozs7Ozs7Z0NBU1JBLGlDQUEyQkE7OzRCQUUvQkEsSUFBSUE7OztnQ0FNQUEsNkJBQTJCQTs7Ozs7Ozs7O3NDQVVuQkEsR0FBdURBLE9BQVdBLEdBQU9BO2dCQUVqR0EsWUFBZUEsYUFBUUE7O2dCQUV2QkEsb0JBQWVBLE9BQU9BLEdBQUdBLEdBQUdBOzs7b0JBR3hCQSw0QkFBdUJBLG9DQUE0QkEsTUFBSUEsb0JBQWNBLEdBQUdBOzs7cUNBSW5EQSxHQUEyQkE7OztnQkFJcERBLFVBQVlBLDJCQUFRQSxJQUFSQTtnQkFDWkEsSUFBSUE7b0JBQ0FBLE9BQU9BLG1CQUFVQSw2QkFBcUJBOztvQkFFdENBOzs7K0JBR2NBO2dCQUVsQkEsT0FBT0Esc0NBQWNBLG9CQUFkQTs7O2tDQUlXQSxNQUFZQTtnQkFFOUJBLElBQUlBO29CQUVBQSxRQUF3QkEsa0JBQXFCQTtvQkFDN0NBLGNBQVNBLEdBQUdBOztvQkFJWkE7Ozs7Z0NBS2NBLE1BQTBCQTtnQkFFNUNBLFFBQVFBLG1CQUFVQTtnQkFDbEJBLDZCQUFzQkEsR0FBR0E7OztnQkFLekJBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQ3R2QjhDQTs7O29CQUFoQ0EsK0RBQWlCQTs7Ozs7b0JBQzZCQTs7O29CQUF2Q0Esc0VBQXdCQTs7Ozs7Ozs7Ozs7OzttQ0F4RXBDQTtrQ0FDREE7NkJBa0hvQkEsSUFBSUE7Ozs7Z0JBN0d2Q0EsMkJBQXNCQSxJQUFJQTs7Z0JBRTFCQTtnQkFDQUE7Z0JBQ0FBO2dCQUNBQSxnQkFBV0E7Ozs7Ozs7OztnQkFTWEEsV0FBV0E7Z0JBQ1hBLGlCQUFrQkE7O2dCQUVsQkEsVUFBVUE7O2dCQUVWQSxVQUF1QkEsSUFBSUEsNkNBQWlCQTtnQkFDNUNBLGFBQWFBOzs7Z0JBR2JBLFFBQVFBO2dCQUNSQSxJQUFJQSxnQkFBZ0JBO29CQUVoQkEsZ0JBQVdBO29CQUNYQTtvQkFDQUE7b0JBQ0FBOzs7Z0JBR0pBLElBQUlBLEtBQUtBO29CQUFvQkEsSUFBSUE7O2dCQUNqQ0EsZUFBZUEsb0NBQVlBLEdBQVpBOztnQkFFZkEsa0JBQTBCQSxJQUFJQSx3Q0FBWUEsTUFBTUEsSUFBSUEscURBQXVDQSxjQUFXQSxpQkFBWUE7Z0JBQ2xIQSxrQkFBYUE7Ozs7Ozs7Z0JBT2JBLG1CQUFxQkE7Z0JBQ3JCQSxJQUFJQTtvQkFFQUEsZUFBZUEsQ0FBQ0EsTUFBS0EsbUNBQVdBLEdBQVhBLHFCQUFpQkE7OztnQkFHMUNBLGtDQUE2QkE7Z0JBQzdCQTtnQkFDQUEsb0JBQWVBLElBQUlBLHlDQUFhQSxpQkFBc0JBLGFBQWFBO2dCQUNuRUEsSUFBSUEsNENBQWFBLG1CQUFjQTtnQkFDL0JBLGdCQUFXQTtnQkFDWEEsb0JBQWVBLElBQUlBO2dCQUNuQkEsaUNBQTRCQTs7Z0JBRTVCQSxtQkFBaUNBLElBQUlBLGtEQUFrQkE7Z0JBQ3ZEQSw2QkFBNkJBLElBQUlBLGtEQUFXQSxJQUFJQTtnQkFDaERBLGtCQUFhQSxJQUFJQSw4Q0FBZUEsY0FBY0E7O2dCQUU5Q0EsK0JBQTBCQTs7OzRCQVNiQTtnQkFFYkE7Z0JBQ0FBLDREQUFjQTtnQkFDZEEsK0RBQWlCQTtnQkFDakJBLElBQUlBLHNDQUFZQTtvQkFFWkEsSUFBSUE7d0JBRUFBLElBQUlBOzRCQUVBQTs7d0JBRUpBO3dCQUNBQSxnQkFBV0E7OztnQkFHbkJBLElBQUlBLHNDQUFZQTtvQkFFWkEsSUFBSUE7d0JBRUFBOzs7Z0JBR1JBLElBQUlBLHNDQUFZQTtvQkFDWkEsSUFBSUE7d0JBRUFBOzs7Ozs7Z0JBUVJBLE9BQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQ2pIUEEsaUJBQVlBLElBQUlBO2dCQUNoQkE7Ozs7O2dCQVNBQTs7NEJBR2FBO2dCQUViQSxJQUFJQTtvQkFFQUE7O2dCQUVKQSxjQUFpQkE7Z0JBQ2pCQSxJQUFJQTtvQkFBMEJBLFVBQVVBOztnQkFDeENBLHNDQUFpQ0EsU0FBU0E7OztnQkFLMUNBLE9BQU9BOzs7Ozs7Ozs7Ozs7Z0NWaUtrQkEsS0FBSUE7Ozs7O2dCQUc3QkEsa0JBQWtCQTs7NkJBR05BLFVBQW1CQTtnQkFFL0JBLFNBQVNBO2dCQUNUQSxrQkFBYUE7OzhCQUdXQSxRQUFtQkEsT0FBV0EsVUFBZ0JBO2dCQUV0RUEsY0FBT0EsUUFBUUEsc0JBQVNBLFFBQVFBLFVBQVVBOztnQ0FHbkJBLFFBQW1CQSxVQUFZQSxVQUFnQkE7Ozs7Ozs7Ozs7NkJBckR0REE7Z0JBRWhCQSxTQUFJQSxJQUFJQSxtREFBU0EsTUFBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ1c5STRCQSxJQUFJQTs7Ozs7Z0JBakJ2REEsT0FBT0E7OzRCQUdNQSxHQUFPQTtnQkFFcEJBLGFBQXFCQSxJQUFJQTtnQkFDekJBLHlCQUFvQkE7Z0JBQ3BCQSxZQUFZQSxHQUFHQTtnQkFDZkE7OzhCQUdlQTs7Ozs7Ozs7Ozs7Ozs7O29CUHVCWEEsT0FBT0E7Ozs7Ozs7Ozs7Ozs7OzhCQTdCSUE7O2dCQUVmQSxpQkFBWUE7Ozs7OEJBUldBOzRCQVdUQSxHQUFPQTtnQkFFckJBLGlCQUFZQSxJQUFJQTtnQkFDaEJBLG9CQUFlQSxHQUFHQTs7OztnQkFNbEJBLE9BQU9BOztrQ0FLWUEsV0FBdUJBLElBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCUWhCbERBLGlCQUFZQSxJQUFJQTtnQkFDaEJBOzs7OztnQkFZQUE7OzRCQUdhQTtnQkFFYkE7Z0JBQ0FBLFNBQXVEQSxBQUFvREE7Z0JBQzNHQSxZQUFPQTtnQkFDUEEsbUVBQTREQTtnQkFDNURBLDBEQUFtREE7Z0JBQ25EQSxJQUFJQTtvQkFFQUEsUUFBUUE7d0JBR0pBLEtBQUtBOzRCQUNEQTs0QkFDQUE7NEJBQ0FBO3dCQUNKQSxLQUFLQTs0QkFDREE7NEJBQ0FBOzRCQUNBQTt3QkFDSkEsS0FBS0E7NEJBQ0RBOzRCQUNBQTs0QkFDQUE7d0JBQ0pBLEtBQUtBOzRCQUNEQTs0QkFDQUE7NEJBQ0FBO3dCQUNKQTs0QkFDSUE7O29CQUVSQSxxREFBZ0RBO29CQUNoREEsdURBQWtEQTtvQkFDbERBLGlFQUE0REE7b0JBQzVEQSxtRUFBOERBOztnQkFFbEVBLElBQUlBO29CQUVBQSxJQUFJQSxPQUFNQTt3QkFFTkE7OztvQkFHSkEsSUFBSUEsT0FBTUE7d0JBRU5BOztvQkFFSkEsd0RBQW1EQSw2REFBZ0VBO29CQUNuSEEsK0ZBQTBGQSw2REFBZ0VBO29CQUMxSkEsa0VBQTZEQTtvQkFDN0RBLGtHQUE2RkE7b0JBQzdGQSxrRUFBNkRBO29CQUM3REEscURBQWdEQTs7OztnQkFJcERBLElBQUlBO29CQUVBQTs7Ozs7Ozs7Ozs7Z0JBYUpBLFlBQU9BO2dCQUNQQTs7O2dCQUtBQSxPQUFPQTs7Ozs7Ozs7O3FDQ3pEMkJBLFdBQWVBO29CQUU3Q0EsT0FBT0EsSUFBSUEsZ0RBQVVBLDZDQUF3QkEsV0FBV0EsOENBQXlCQSxlQUFlQTs7Z0NBR3ZFQSxHQUFRQTtvQkFFakNBLE9BQU9BLElBQUlBLGdEQUFVQSxHQUFHQSw4Q0FBeUJBLDhDQUF5QkEsZUFBZUE7Ozs7Ozs7Ozs7Ozs7OEJBaEI1RUEsTUFBV0EsV0FBZUEsV0FBZUEsaUJBQXVCQTs7Z0JBRTdFQSxZQUFZQTtnQkFDWkEsaUJBQWlCQTtnQkFDakJBLGlCQUFpQkE7Z0JBQ2pCQSx1QkFBdUJBO2dCQUN2QkEscUJBQXFCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQ1RIQSxXQUFlQTs7Z0JBRWpDQSxpQkFBaUJBO2dCQUNqQkEsZUFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OEJkbUpDQSxlQUF3QkEsYUFBc0JBOzs7O2dCQUU5REEscUJBQXFCQTtnQkFDckJBLG1CQUFtQkE7Z0JBQ25CQSxpQkFBaUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCV3JLR0E7Ozs7Ozs7OztnQ0V4QkFBLFFBQW1CQSxVQUFvQkEsVUFBZ0JBO2dCQUUvRUEsNkdBQVlBLFFBQVFBLFVBQVVBLFVBQVVBO2dCQUN4Q0EsVUFBWUE7Z0JBQ1pBO2dCQUNBQTtvQkFFSUEsSUFBSUE7d0JBRUFBLE9BQU9BOzt3QkFJUEEsT0FBT0E7O29CQUVYQSxJQUFJQTt3QkFFQUE7O3dCQUlBQSxRQUFRQSxDQUFDQTs7O2dCQUdqQkEsSUFBSUEsQ0FBQ0E7b0JBRURBLHdCQUF3QkEsZUFBZUEsb0JBQW9CQTs7Ozs7Ozs7O2dDQy9CdkNBLFFBQW1CQSxVQUF5QkEsVUFBZ0JBO2dCQUVwRkEsNEhBQVlBLFFBQVFBLFVBQVVBLFVBQVVBO2dCQUN4Q0EsWUFBY0EsV0FBV0E7Z0JBQ3pCQSxpQkFBbUJBLG9CQUFtQkE7Z0JBQ3RDQTtnQkFDQUE7Z0JBQ0FBLEtBQUtBLFFBQVFBLG9CQUFvQkEsSUFBSUEsa0JBQWtCQTtvQkFFbkRBLGVBQWVBLEtBQUlBO29CQUNuQkE7b0JBQ0FBLFNBQVNBOzs7b0JBR1RBLE9BQU9BLFlBQVlBO3dCQUVmQTt3QkFDQUEsdUJBQVlBOztvQkFFaEJBLElBQUlBLHFCQUFxQkEsVUFBVUEsU0FBT0E7d0JBRXRDQTt3QkFDQUEsK0JBQWdCQTt3QkFDaEJBOztvQkFFSkEsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsYUFBYUEsU0FBU0E7d0JBRTVCQSxnQkFBaUJBLFVBQVVBLFNBQU9BOzs7Ozs7Ozs7Ozs7Z0Nkb0psQkEsUUFBbUJBLFVBQXVCQSxVQUFnQkE7Z0JBRWxGQSx3SEFBWUEsUUFBUUEsVUFBVUEsVUFBVUE7Z0JBQ3hDQSxhQUFtQkE7Z0JBQ25CQSxJQUFJQTtvQkFDQUEsU0FBU0E7O2dCQUNiQSxrQkFBa0JBLDZDQUE0QkEsaUNBQXdCQSwrQkFBc0JBLFdBQVdBIiwKICAic291cmNlc0NvbnRlbnQiOiBbInVzaW5nIEJyaWRnZTtcclxudXNpbmcgQnJpZGdlLkh0bWw1O1xyXG4vL3VzaW5nIEVDUztcclxudXNpbmcgTmV3dG9uc29mdC5Kc29uO1xyXG51c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQ7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nO1xyXG4vL3VzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZDtcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBCcmlkZ2VCdWlsZFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQXBwXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IGJ1ZmZlcjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBib29sIGJ1ZmZlck9uO1xyXG4gICAgICAgIC8vcHJpdmF0ZSBzdGF0aWMgSFRNTFByZUVsZW1lbnQgdGV4dDtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBHYW1lTWFpbiBncjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZXh0Qm9hcmQgVGV4dEJvYXJkO1xyXG4gICAgICAgIC8vcHJpdmF0ZSBzdGF0aWMgU3RyaW5nQnVpbGRlciBzYjtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmdbXSBjb2xvcnM7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IGJ1ZmZlclVuaWNvZGUgPSAtMTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBUZXh0Qm9hcmQgYXV4O1xyXG4gICAgICAgIHN0YXRpYyBEYXRlVGltZSBsYXN0ID0gRGF0ZVRpbWUuTm93O1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIFNldHVwR2FtZShvdXQgR2FtZU1haW4gZ3IsIG91dCBUZXh0Qm9hcmQgVGV4dEJvYXJkKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIFJhbmRvbSBybmQgPSBuZXcgUmFuZG9tKCk7XHJcbiAgICAgICAgICAgIFJhbmRvbVN1cHBsaWVyLkdlbmVyYXRlID0gKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChmbG9hdClybmQuTmV4dERvdWJsZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBnciA9IG5ldyBHYW1lTWFpbigpO1xyXG4gICAgICAgICAgICBUZXh0Qm9hcmQgPSBnci5HZXRCb2FyZCgpO1xyXG4gICAgICAgICAgICBhdXggPSBuZXcgVGV4dEJvYXJkKDMwMCwzMDApO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1haW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGVzdEVudGl0eVN5c3RlbSgpO1xyXG4gICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKFwiR2FtZSBTdGFydFwiKTtcclxuICAgICAgICAgICAgU2V0dXBHYW1lKG91dCBnciwgb3V0IFRleHRCb2FyZCk7XHJcbiAgICAgICAgICAgIGNvbG9ycyA9IG5ldyBzdHJpbmdbMjBdO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGNvbG9ycy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzW2ldID0gQ29sb3JTdHVmZi5jb2xvcnNbaV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gbmV3IEhUTUxTdHlsZUVsZW1lbnQoKTtcclxuICAgICAgICAgICAgc3R5bGUuSW5uZXJIVE1MID0gXCJodG1sLGJvZHkge2ZvbnQtZmFtaWx5OiBDb3VyaWVyOyBiYWNrZ3JvdW5kLWNvbG9yOiMxZjI1MjY7IGhlaWdodDogMTAwJTsgY29sb3I6Izg4ODt9XCIgKyBcIlxcbiAjY2FudmFzLWNvbnRhaW5lciB7d2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgdGV4dC1hbGlnbjpjZW50ZXI7IHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH0gXCI7XHJcbiAgICAgICAgICAgIERvY3VtZW50LkhlYWQuQXBwZW5kQ2hpbGQoc3R5bGUpO1xyXG4gICAgICAgICAgICBidWZmZXIgPSA5O1xyXG4gICAgICAgICAgICBidWZmZXJPbiA9IGZhbHNlO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBEb2N1bWVudC5PbktleVByZXNzICs9IChLZXlib2FyZEV2ZW50IGEpID0+XHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpbnQgY29kZSA9IGEuS2V5Q29kZTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlID09IDApIGNvZGUgPSBhLkNoYXJDb2RlO1xyXG4gICAgICAgICAgICAgICAgaW50IHVuaWNvZGUgPSBjb2RlO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyVW5pY29kZSA9IHVuaWNvZGU7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGUodW5pY29kZSk7XHJcbiAgICAgICAgICAgICAgICAvL2J1ZmZlciA9IGEuQ2hhckNvZGU7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgVXBkYXRlR2FtZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWZ0ZXIgYnVpbGRpbmcgKEN0cmwgKyBTaGlmdCArIEIpIHRoaXMgcHJvamVjdCwgXHJcbiAgICAgICAgICAgIC8vIGJyb3dzZSB0byB0aGUgL2Jpbi9EZWJ1ZyBvciAvYmluL1JlbGVhc2UgZm9sZGVyLlxyXG5cclxuICAgICAgICAgICAgLy8gQSBuZXcgYnJpZGdlLyBmb2xkZXIgaGFzIGJlZW4gY3JlYXRlZCBhbmRcclxuICAgICAgICAgICAgLy8gY29udGFpbnMgeW91ciBwcm9qZWN0cyBKYXZhU2NyaXB0IGZpbGVzLiBcclxuXHJcbiAgICAgICAgICAgIC8vIE9wZW4gdGhlIGJyaWRnZS9pbmRleC5odG1sIGZpbGUgaW4gYSBicm93c2VyIGJ5XHJcbiAgICAgICAgICAgIC8vIFJpZ2h0LUNsaWNrID4gT3BlbiBXaXRoLi4uLCB0aGVuIGNob29zZSBhXHJcbiAgICAgICAgICAgIC8vIHdlYiBicm93c2VyIGZyb20gdGhlIGxpc3RcclxuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgYXBwbGljYXRpb24gd2lsbCB0aGVuIHJ1biBpbiBhIGJyb3dzZXIuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIFRlc3RFbnRpdHlTeXN0ZW0oKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIFVwZGF0ZUdhbWUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRGF0ZVRpbWUgbm93ID0gRGF0ZVRpbWUuTm93O1xyXG4gICAgICAgICAgICB2YXIgc2VjcyA9IChub3cgLSBsYXN0KS5Ub3RhbFNlY29uZHM7XHJcbiAgICAgICAgICAgIGlmIChzZWNzID4gMC4wOCkge1xyXG4gICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoc2Vjcyk7XHJcbiAgICAgICAgICAgICAgICBzZWNzID0gMC4wODtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFRleHRCb2FyZCA9IGdyLkdldEJvYXJkKCk7XHJcbiAgICAgICAgICAgIGdyLkRyYXcoKGZsb2F0KXNlY3MpO1xyXG4gICAgICAgICAgICBsYXN0ID0gbm93O1xyXG4gICAgICAgICAgICBnci5JbnB1dFVuaWNvZGUgPSBidWZmZXJVbmljb2RlO1xyXG4gICAgICAgICAgICBidWZmZXJVbmljb2RlID0gLTE7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW91c2VYID0gU2NyaXB0LkNhbGw8aW50PihcImdldE1vdXNlWFwiKTtcclxuICAgICAgICAgICAgdmFyIG1vdXNlWSA9IFNjcmlwdC5DYWxsPGludD4oXCJnZXRNb3VzZVlcIik7XHJcbiAgICAgICAgICAgIGdyLk1vdXNlLnBvcyA9IG5ldyBQb2ludDJEKG1vdXNlWCwgbW91c2VZKTtcclxuXHJcbiAgICAgICAgICAgIC8vU2NyaXB0LkNhbGwoXCJjbGVhclwiKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBUZXh0Qm9hcmQuSGVpZ2h0OyBqKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgVGV4dEJvYXJkLldpZHRoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhdXguU2FtZUFzKFRleHRCb2FyZCwgeDogaSwgeTogaikpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTY3JpcHQuQ2FsbChcImRyYXdcIiwgaSwgaiwgY29sb3JzW1RleHRCb2FyZC5UZXh0Q29sb3JbaSwgal1dLCBjb2xvcnNbVGV4dEJvYXJkLkJhY2tDb2xvcltpLCBqXV0sIFwiXCIgKyBUZXh0Qm9hcmQuQ2hhckF0KGksIGopKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV4LkNvcHkoVGV4dEJvYXJkLCB4OiBpLCB5OiBqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9TY3JpcHQuQ2FsbChcImRyYXdcIiwgaSwgaiwgY29sb3JzW1RleHRCb2FyZC5UZXh0Q29sb3JbaSwgal1dLCBjb2xvcnNbVGV4dEJvYXJkLkJhY2tDb2xvcltpLCBqXV0sIFwieFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBXaW5kb3cuU2V0VGltZW91dCgoZ2xvYmFsOjpTeXN0ZW0uQWN0aW9uKVVwZGF0ZUdhbWUsIDE1KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQmFzZVV0aWxzXHJcbntcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIEV4dGVuc2lvbnNcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBSYW5kb20gcm5nID0gbmV3IFJhbmRvbSgpO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU2h1ZmZsZTxUPih0aGlzIElMaXN0PFQ+IGxpc3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbiA9IGxpc3QuQ291bnQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChuID4gMSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbi0tO1xyXG4gICAgICAgICAgICAgICAgaW50IGsgPSBybmcuTmV4dChuICsgMSk7XHJcbiAgICAgICAgICAgICAgICBUIHZhbHVlID0gbGlzdFtrXTtcclxuICAgICAgICAgICAgICAgIGxpc3Rba10gPSBsaXN0W25dO1xyXG4gICAgICAgICAgICAgICAgbGlzdFtuXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIiNyZWdpb24gTGljZW5zZVxyXG4vKlxyXG5NSVQgTGljZW5zZVxyXG5Db3B5cmlnaHQgwqkgMjAwNiBUaGUgTW9uby5YbmEgVGVhbVxyXG5cclxuQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuXHJcblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXHJcblNPRlRXQVJFLlxyXG4qL1xyXG4jZW5kcmVnaW9uIExpY2Vuc2VcclxudXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5CYXNlVXRpbHNcclxue1xyXG4gICAgcHVibGljIHN0cnVjdCBQb2ludDJEIDogSUVxdWF0YWJsZTxQb2ludDJEPlxyXG4gICAge1xyXG4gICAgICAgICNyZWdpb24gUHJpdmF0ZSBGaWVsZHNcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUG9pbnQyRCB6ZXJvUG9pbnQgPSBuZXcgUG9pbnQyRCgpO1xyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFByaXZhdGUgRmllbGRzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIFB1YmxpYyBGaWVsZHNcclxuXHJcbiAgICAgICAgcHVibGljIGludCBYO1xyXG4gICAgICAgIHB1YmxpYyBpbnQgWTtcclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBQdWJsaWMgRmllbGRzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIFByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBQb2ludDJEIFplcm9cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB6ZXJvUG9pbnQ7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gUHJvcGVydGllc1xyXG5cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBDb25zdHJ1Y3RvcnNcclxuXHJcbiAgICAgICAgcHVibGljIFBvaW50MkQoaW50IHgsIGludCB5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5YID0geDtcclxuICAgICAgICAgICAgdGhpcy5ZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gQ29uc3RydWN0b3JzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIFB1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBvcGVyYXRvciA9PShQb2ludDJEIGEsIFBvaW50MkQgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLkVxdWFscyhiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBvcGVyYXRvciAhPShQb2ludDJEIGEsIFBvaW50MkQgYilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhYS5FcXVhbHMoYik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoUG9pbnQyRCBvdGhlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKFggPT0gb3RoZXIuWCkgJiYgKFkgPT0gb3RoZXIuWSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgRXF1YWxzKG9iamVjdCBvYmopXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKG9iaiBpcyBQb2ludDJEKSA/IEVxdWFscygoUG9pbnQyRClvYmopIDogZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgaW50IEdldEhhc2hDb2RlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBYIF4gWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgVG9TdHJpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ7e1g6ezB9IFk6ezF9fX1cIiwgWCwgWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uXHJcbiAgICB9XHJcbn1cclxuXHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQmFzZVV0aWxzXHJcbntcclxuICAgIHN0YXRpYyBwdWJsaWMgY2xhc3MgUmFuZG9tU3VwcGxpZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIEZ1bmM8ZmxvYXQ+IEdlbmVyYXRleyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGludCBSYW5nZShpbnQgbWluLCBpbnQgbWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaW50KSAoR2VuZXJhdGUoKSAqIChtYXgtbWluKSttaW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBUIFJhbmRvbUVsZW1lbnQ8VD4oVFtdIGFycmF5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5W1JhbmdlKDAsIGFycmF5Lkxlbmd0aCldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIjcmVnaW9uIExpY2Vuc2VcclxuLypcclxuTUlUIExpY2Vuc2VcclxuQ29weXJpZ2h0IMKpIDIwMDYgVGhlIE1vbm8uWG5hIFRlYW1cclxuXHJcbkFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcblxyXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxyXG5TT0ZUV0FSRS5cclxuKi9cclxuI2VuZHJlZ2lvbiBMaWNlbnNlXHJcblxyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5HbG9iYWxpemF0aW9uO1xyXG51c2luZyBTeXN0ZW0uQ29tcG9uZW50TW9kZWw7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkJhc2VVdGlsc1xyXG57XHJcblxyXG4gICAgcHVibGljIHN0cnVjdCBSZWN0IDogSUVxdWF0YWJsZTxSZWN0PlxyXG4gICAge1xyXG4gICAgICAgICNyZWdpb24gUHJpdmF0ZSBGaWVsZHNcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgUmVjdCBlbXB0eVJlY3RhbmdsZSA9IG5ldyBSZWN0KCk7XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gUHJpdmF0ZSBGaWVsZHNcclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gUHVibGljIEZpZWxkc1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFg7XHJcbiAgICAgICAgcHVibGljIGludCBZO1xyXG4gICAgICAgIHB1YmxpYyBpbnQgV2lkdGg7XHJcbiAgICAgICAgcHVibGljIGludCBIZWlnaHQ7XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gUHVibGljIEZpZWxkc1xyXG5cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBQdWJsaWMgUHJvcGVydGllc1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFJlY3QgRW1wdHlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiBlbXB0eVJlY3RhbmdsZTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBMZWZ0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gdGhpcy5YOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFJpZ2h0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gKHRoaXMuWCArIHRoaXMuV2lkdGgpOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFRvcFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHRoaXMuWTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGludCBCb3R0b21cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiAodGhpcy5ZICsgdGhpcy5IZWlnaHQpOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFB1YmxpYyBQcm9wZXJ0aWVzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIENvbnN0cnVjdG9yc1xyXG5cclxuICAgICAgICBwdWJsaWMgUmVjdChpbnQgeCwgaW50IHksIGludCB3aWR0aCwgaW50IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuWCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuWSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuV2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5IZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIENvbnN0cnVjdG9yc1xyXG5cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBQdWJsaWMgTWV0aG9kc1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgb3BlcmF0b3IgPT0oUmVjdCBhLCBSZWN0IGIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKChhLlggPT0gYi5YKSAmJiAoYS5ZID09IGIuWSkgJiYgKGEuV2lkdGggPT0gYi5XaWR0aCkgJiYgKGEuSGVpZ2h0ID09IGIuSGVpZ2h0KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBDb250YWlucyhpbnQgeCwgaW50IHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKCgoKHRoaXMuWCA8PSB4KSAmJiAoeCA8ICh0aGlzLlggKyB0aGlzLldpZHRoKSkpICYmICh0aGlzLlkgPD0geSkpICYmICh5IDwgKHRoaXMuWSArIHRoaXMuSGVpZ2h0KSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQ29udGFpbnMoVmVjdG9yMkQgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKCgoKHRoaXMuWCA8PSB2YWx1ZS5YKSAmJiAodmFsdWUuWCA8ICh0aGlzLlggKyB0aGlzLldpZHRoKSkpICYmICh0aGlzLlkgPD0gdmFsdWUuWSkpICYmICh2YWx1ZS5ZIDwgKHRoaXMuWSArIHRoaXMuSGVpZ2h0KSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQ29udGFpbnMoUG9pbnQyRCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKCgodGhpcy5YIDw9IHZhbHVlLlgpICYmICh2YWx1ZS5YIDwgKHRoaXMuWCArIHRoaXMuV2lkdGgpKSkgJiYgKHRoaXMuWSA8PSB2YWx1ZS5ZKSkgJiYgKHZhbHVlLlkgPCAodGhpcy5ZICsgdGhpcy5IZWlnaHQpKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBDb250YWlucyhSZWN0IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoKCh0aGlzLlggPD0gdmFsdWUuWCkgJiYgKCh2YWx1ZS5YICsgdmFsdWUuV2lkdGgpIDw9ICh0aGlzLlggKyB0aGlzLldpZHRoKSkpICYmICh0aGlzLlkgPD0gdmFsdWUuWSkpICYmICgodmFsdWUuWSArIHZhbHVlLkhlaWdodCkgPD0gKHRoaXMuWSArIHRoaXMuSGVpZ2h0KSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIG9wZXJhdG9yICE9KFJlY3QgYSwgUmVjdCBiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuICEoYSA9PSBiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE9mZnNldChQb2ludDJEIG9mZnNldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFggKz0gb2Zmc2V0Llg7XHJcbiAgICAgICAgICAgIFkgKz0gb2Zmc2V0Llk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBPZmZzZXQoaW50IG9mZnNldFgsIGludCBvZmZzZXRZKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgWCArPSBvZmZzZXRYO1xyXG4gICAgICAgICAgICBZICs9IG9mZnNldFk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUG9pbnQyRCBDZW50ZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50MkQoKHRoaXMuWCArIHRoaXMuV2lkdGgpIC8gMiwgKHRoaXMuWSArIHRoaXMuSGVpZ2h0KSAvIDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBJbmZsYXRlKGludCBob3Jpem9udGFsVmFsdWUsIGludCB2ZXJ0aWNhbFZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgWCAtPSBob3Jpem9udGFsVmFsdWU7XHJcbiAgICAgICAgICAgIFkgLT0gdmVydGljYWxWYWx1ZTtcclxuICAgICAgICAgICAgV2lkdGggKz0gaG9yaXpvbnRhbFZhbHVlICogMjtcclxuICAgICAgICAgICAgSGVpZ2h0ICs9IHZlcnRpY2FsVmFsdWUgKiAyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNFbXB0eVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKCgodGhpcy5XaWR0aCA9PSAwKSAmJiAodGhpcy5IZWlnaHQgPT0gMCkpICYmICh0aGlzLlggPT0gMCkpICYmICh0aGlzLlkgPT0gMCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoUmVjdCBvdGhlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzID09IG90aGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGJvb2wgRXF1YWxzKG9iamVjdCBvYmopXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKG9iaiBpcyBSZWN0KSA/IHRoaXMgPT0gKChSZWN0KW9iaikgOiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgVG9TdHJpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoXCJ7e1g6ezB9IFk6ezF9IFdpZHRoOnsyfSBIZWlnaHQ6ezN9fX1cIiwgWCwgWSwgV2lkdGgsIEhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgaW50IEdldEhhc2hDb2RlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5YIF4gdGhpcy5ZIF4gdGhpcy5XaWR0aCBeIHRoaXMuSGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEludGVyc2VjdHMoUmVjdCByMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhKHIyLkxlZnQgPiBSaWdodFxyXG4gICAgICAgICAgICAgICAgICAgICB8fCByMi5SaWdodCA8IExlZnRcclxuICAgICAgICAgICAgICAgICAgICAgfHwgcjIuVG9wID4gQm90dG9tXHJcbiAgICAgICAgICAgICAgICAgICAgIHx8IHIyLkJvdHRvbSA8IFRvcFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEludGVyc2VjdHMocmVmIFJlY3QgdmFsdWUsIG91dCBib29sIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICEodmFsdWUuTGVmdCA+IFJpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgIHx8IHZhbHVlLlJpZ2h0IDwgTGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICB8fCB2YWx1ZS5Ub3AgPiBCb3R0b21cclxuICAgICAgICAgICAgICAgICAgICAgfHwgdmFsdWUuQm90dG9tIDwgVG9wXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFB1YmxpYyBNZXRob2RzXHJcbiAgICB9XHJcbn0iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQmFzZVV0aWxzXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUaW1lU3RhbXBcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgZmxvYXQgQ3VycmVudFNuYXA7XHJcblxyXG4gICAgICAgIGludGVybmFsIFRpbWVTdGFtcFNuYXAgR2V0U25hcCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpbWVTdGFtcFNuYXAoQ3VycmVudFNuYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpbnRlcm5hbCB2b2lkIEFkdmFuY2UoZmxvYXQgZGVsdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdXJyZW50U25hcCArPSBkZWx0YTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0cnVjdCBUaW1lU3RhbXBTbmFwXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGZsb2F0IFRpbWVTbmFwO1xyXG5cclxuICAgICAgICBwdWJsaWMgVGltZVN0YW1wU25hcChmbG9hdCBzbmFwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVGltZVNuYXAgPSBzbmFwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQmFzZVV0aWxzXHJcbntcclxuICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgVW5pY29kZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU3BhY2UgPSAzMjtcclxuXHJcbiAgICAgICAgcHVibGljIGNvbnN0IGNoYXIgVXBhcnJvdzIgPSAoY2hhcikyNDtcclxuICAgICAgICBwdWJsaWMgY29uc3QgY2hhciBEb3duYXJyb3cyID0gKGNoYXIpMjU7XHJcbiAgICAgICAgcHVibGljIGNvbnN0IGNoYXIgUmlnaHRhcnJvdzIgPSAoY2hhcikyNjtcclxuICAgICAgICBwdWJsaWMgY29uc3QgY2hhciBMZWZ0YXJyb3cyID0gKGNoYXIpMjc7XHJcbiAgICAgICAgcHVibGljIGNvbnN0IGNoYXIgVXBhcnJvdyA9IChjaGFyKTMwO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBjaGFyIERvd25hcnJvdyA9IChjaGFyKTMxO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBjaGFyIExlZnRhcnJvdyA9IChjaGFyKTE3O1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBjaGFyIFJpZ2h0YXJyb3cgPSAoY2hhcikxNjtcclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG4vL3VzaW5nIFN5c3RlbS5EcmF3aW5nO1xyXG51c2luZyBTeXN0ZW0uR2xvYmFsaXphdGlvbjtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQmFzZVV0aWxzXHJcbntcclxuICAgIFtTZXJpYWxpemFibGVdXHJcbiAgICBwdWJsaWMgc3RydWN0IFZlY3RvcjJEIDogSUVxdWF0YWJsZTxWZWN0b3IyRD5cclxuICAgIHtcclxuICAgICAgICAjcmVnaW9uIFByaXZhdGUgRmllbGRzXHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFZlY3RvcjJEIHplcm9WZWN0b3IgPSBuZXcgVmVjdG9yMkQoMGYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IyRCB1bml0VmVjdG9yID0gbmV3IFZlY3RvcjJEKDFmLCAxZik7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgVmVjdG9yMkQgdW5pdFhWZWN0b3IgPSBuZXcgVmVjdG9yMkQoMWYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IyRCB1bml0WVZlY3RvciA9IG5ldyBWZWN0b3IyRCgwZiwgMWYpO1xyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFByaXZhdGUgRmllbGRzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIFB1YmxpYyBGaWVsZHNcclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IFg7XHJcbiAgICAgICAgcHVibGljIGZsb2F0IFk7XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gUHVibGljIEZpZWxkc1xyXG5cclxuICAgICAgICAjIHJlZ2lvbiBQdWJsaWMgUHJvcGVydGllc1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IFhJbnQgeyBnZXQgeyByZXR1cm4gKGludClYOyB9IH1cclxuICAgICAgICBwdWJsaWMgaW50IFlJbnQgeyBnZXQgeyByZXR1cm4gKGludClZOyB9IH1cclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBQdWJsaWMgUHJvcGVydGllc1xyXG5cclxuICAgICAgICAjcmVnaW9uIENvbnN0YW50c1xyXG4gICAgICAgICNlbmRyZWdpb25cclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gUHJvcGVydGllc1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIFplcm9cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB6ZXJvVmVjdG9yOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIE9uZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHVuaXRWZWN0b3I7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgVW5pdFhcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB1bml0WFZlY3RvcjsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBVbml0WVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHVuaXRZVmVjdG9yOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFByb3BlcnRpZXNcclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gQ29uc3RydWN0b3JzXHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3IyRChmbG9hdCB4LCBmbG9hdCB5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5YID0geDtcclxuICAgICAgICAgICAgdGhpcy5ZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3IyRChmbG9hdCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuWCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLlkgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgSW50ZXJwb2xhdGVSb3VuZGVkKFZlY3RvcjJEIHN0YXJ0UG9zaXRpb24sIFZlY3RvcjJEIGVuZFBvc2l0aW9uLCBmbG9hdCByYXRpbylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoc3RhcnRQb3NpdGlvbiAqICgxIC0gcmF0aW8pICsgZW5kUG9zaXRpb24gKiByYXRpbykuUm91bmQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgVmVjdG9yMkQgUm91bmQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCgoZmxvYXQpTWF0aC5Sb3VuZChYKSwgKGZsb2F0KU1hdGguUm91bmQoWSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBDb25zdHJ1Y3RvcnNcclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gUHVibGljIE1ldGhvZHNcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBBZGQoVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCArPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKz0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQWRkKHJlZiBWZWN0b3IyRCB2YWx1ZTEsIHJlZiBWZWN0b3IyRCB2YWx1ZTIsIG91dCBWZWN0b3IyRCByZXN1bHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHQuWCA9IHZhbHVlMS5YICsgdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gdmFsdWUxLlkgKyB2YWx1ZTIuWTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGZsb2F0IERpc3RhbmNlKFZlY3RvcjJEIHZhbHVlMSwgVmVjdG9yMkQgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgdjEgPSB2YWx1ZTEuWCAtIHZhbHVlMi5YLCB2MiA9IHZhbHVlMS5ZIC0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJldHVybiAoZmxvYXQpTWF0aC5TcXJ0KCh2MSAqIHYxKSArICh2MiAqIHYyKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRGlzdGFuY2UocmVmIFZlY3RvcjJEIHZhbHVlMSwgcmVmIFZlY3RvcjJEIHZhbHVlMiwgb3V0IGZsb2F0IHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHYxID0gdmFsdWUxLlggLSB2YWx1ZTIuWCwgdjIgPSB2YWx1ZTEuWSAtIHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoZmxvYXQpTWF0aC5TcXJ0KCh2MSAqIHYxKSArICh2MiAqIHYyKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGZsb2F0IERpc3RhbmNlU3F1YXJlZChWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHYxID0gdmFsdWUxLlggLSB2YWx1ZTIuWCwgdjIgPSB2YWx1ZTEuWSAtIHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICByZXR1cm4gKHYxICogdjEpICsgKHYyICogdjIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIERpc3RhbmNlU3F1YXJlZChyZWYgVmVjdG9yMkQgdmFsdWUxLCByZWYgVmVjdG9yMkQgdmFsdWUyLCBvdXQgZmxvYXQgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgdjEgPSB2YWx1ZTEuWCAtIHZhbHVlMi5YLCB2MiA9IHZhbHVlMS5ZIC0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICh2MSAqIHYxKSArICh2MiAqIHYyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgU2V0KGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFggPSB4O1xyXG4gICAgICAgICAgICBZID0geTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIERpdmlkZShWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlMS5YIC89IHZhbHVlMi5YO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWSAvPSB2YWx1ZTIuWTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBEaXZpZGUocmVmIFZlY3RvcjJEIHZhbHVlMSwgcmVmIFZlY3RvcjJEIHZhbHVlMiwgb3V0IFZlY3RvcjJEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUxLlggLyB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZTEuWSAvIHZhbHVlMi5ZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBEaXZpZGUoVmVjdG9yMkQgdmFsdWUxLCBmbG9hdCBkaXZpZGVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgZmFjdG9yID0gMSAvIGRpdmlkZXI7XHJcbiAgICAgICAgICAgIHZhbHVlMS5YICo9IGZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gZmFjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIERpdmlkZShyZWYgVmVjdG9yMkQgdmFsdWUxLCBmbG9hdCBkaXZpZGVyLCBvdXQgVmVjdG9yMkQgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgZmFjdG9yID0gMSAvIGRpdmlkZXI7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUxLlggKiBmYWN0b3I7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gdmFsdWUxLlkgKiBmYWN0b3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGZsb2F0IERvdChWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUxLlggKiB2YWx1ZTIuWCkgKyAodmFsdWUxLlkgKiB2YWx1ZTIuWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRG90KHJlZiBWZWN0b3IyRCB2YWx1ZTEsIHJlZiBWZWN0b3IyRCB2YWx1ZTIsIG91dCBmbG9hdCByZXN1bHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAodmFsdWUxLlggKiB2YWx1ZTIuWCkgKyAodmFsdWUxLlkgKiB2YWx1ZTIuWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgYm9vbCBFcXVhbHMob2JqZWN0IG9iailcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChvYmogaXMgVmVjdG9yMkQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBFcXVhbHMoKFZlY3RvcjJEKXRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYm9vbCBFcXVhbHMoVmVjdG9yMkQgb3RoZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKFggPT0gb3RoZXIuWCkgJiYgKFkgPT0gb3RoZXIuWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIFJlZmxlY3QoVmVjdG9yMkQgdmVjdG9yLCBWZWN0b3IyRCBub3JtYWwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBWZWN0b3IyRCByZXN1bHQ7XHJcbiAgICAgICAgICAgIGZsb2F0IHZhbCA9IDIuMGYgKiAoKHZlY3Rvci5YICogbm9ybWFsLlgpICsgKHZlY3Rvci5ZICogbm9ybWFsLlkpKTtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2ZWN0b3IuWCAtIChub3JtYWwuWCAqIHZhbCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gdmVjdG9yLlkgLSAobm9ybWFsLlkgKiB2YWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFJlZmxlY3QocmVmIFZlY3RvcjJEIHZlY3RvciwgcmVmIFZlY3RvcjJEIG5vcm1hbCwgb3V0IFZlY3RvcjJEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHZhbCA9IDIuMGYgKiAoKHZlY3Rvci5YICogbm9ybWFsLlgpICsgKHZlY3Rvci5ZICogbm9ybWFsLlkpKTtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2ZWN0b3IuWCAtIChub3JtYWwuWCAqIHZhbCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gdmVjdG9yLlkgLSAobm9ybWFsLlkgKiB2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIGludCBHZXRIYXNoQ29kZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gWC5HZXRIYXNoQ29kZSgpICsgWS5HZXRIYXNoQ29kZSgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBMZW5ndGgoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChmbG9hdClNYXRoLlNxcnQoKFggKiBYKSArIChZICogWSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IExlbmd0aFNxdWFyZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChYICogWCkgKyAoWSAqIFkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIE1heChWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yMkQodmFsdWUxLlggPiB2YWx1ZTIuWCA/IHZhbHVlMS5YIDogdmFsdWUyLlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTEuWSA+IHZhbHVlMi5ZID8gdmFsdWUxLlkgOiB2YWx1ZTIuWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTWF4KHJlZiBWZWN0b3IyRCB2YWx1ZTEsIHJlZiBWZWN0b3IyRCB2YWx1ZTIsIG91dCBWZWN0b3IyRCByZXN1bHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHQuWCA9IHZhbHVlMS5YID4gdmFsdWUyLlggPyB2YWx1ZTEuWCA6IHZhbHVlMi5YO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZID4gdmFsdWUyLlkgPyB2YWx1ZTEuWSA6IHZhbHVlMi5ZO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBNaW4oVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHZhbHVlMS5YIDwgdmFsdWUyLlggPyB2YWx1ZTEuWCA6IHZhbHVlMi5YLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUxLlkgPCB2YWx1ZTIuWSA/IHZhbHVlMS5ZIDogdmFsdWUyLlkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIE1pbihyZWYgVmVjdG9yMkQgdmFsdWUxLCByZWYgVmVjdG9yMkQgdmFsdWUyLCBvdXQgVmVjdG9yMkQgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZTEuWCA8IHZhbHVlMi5YID8gdmFsdWUxLlggOiB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZTEuWSA8IHZhbHVlMi5ZID8gdmFsdWUxLlkgOiB2YWx1ZTIuWTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgTXVsdGlwbHkoVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAqPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIE11bHRpcGx5KFZlY3RvcjJEIHZhbHVlMSwgZmxvYXQgc2NhbGVGYWN0b3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTXVsdGlwbHkocmVmIFZlY3RvcjJEIHZhbHVlMSwgZmxvYXQgc2NhbGVGYWN0b3IsIG91dCBWZWN0b3IyRCByZXN1bHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHQuWCA9IHZhbHVlMS5YICogc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gdmFsdWUxLlkgKiBzY2FsZUZhY3RvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBNdWx0aXBseShyZWYgVmVjdG9yMkQgdmFsdWUxLCByZWYgVmVjdG9yMkQgdmFsdWUyLCBvdXQgVmVjdG9yMkQgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZTEuWCAqIHZhbHVlMi5YO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZICogdmFsdWUyLlk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIE5lZ2F0ZShWZWN0b3IyRCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlLlggPSAtdmFsdWUuWDtcclxuICAgICAgICAgICAgdmFsdWUuWSA9IC12YWx1ZS5ZO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTmVnYXRlKHJlZiBWZWN0b3IyRCB2YWx1ZSwgb3V0IFZlY3RvcjJEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gLXZhbHVlLlg7XHJcbiAgICAgICAgICAgIHJlc3VsdC5ZID0gLXZhbHVlLlk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBOb3JtYWxpemUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgdmFsID0gMS4wZiAvIChmbG9hdClNYXRoLlNxcnQoKFggKiBYKSArIChZICogWSkpO1xyXG4gICAgICAgICAgICBYICo9IHZhbDtcclxuICAgICAgICAgICAgWSAqPSB2YWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIE5vcm1hbGl6ZShWZWN0b3IyRCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHZhbCA9IDEuMGYgLyAoZmxvYXQpTWF0aC5TcXJ0KCh2YWx1ZS5YICogdmFsdWUuWCkgKyAodmFsdWUuWSAqIHZhbHVlLlkpKTtcclxuICAgICAgICAgICAgdmFsdWUuWCAqPSB2YWw7XHJcbiAgICAgICAgICAgIHZhbHVlLlkgKj0gdmFsO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTm9ybWFsaXplKHJlZiBWZWN0b3IyRCB2YWx1ZSwgb3V0IFZlY3RvcjJEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHZhbCA9IDEuMGYgLyAoZmxvYXQpTWF0aC5TcXJ0KCh2YWx1ZS5YICogdmFsdWUuWCkgKyAodmFsdWUuWSAqIHZhbHVlLlkpKTtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZS5YICogdmFsO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlLlkgKiB2YWw7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgU3VidHJhY3QoVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAtPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgLT0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgU3VidHJhY3QocmVmIFZlY3RvcjJEIHZhbHVlMSwgcmVmIFZlY3RvcjJEIHZhbHVlMiwgb3V0IFZlY3RvcjJEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUxLlggLSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZTEuWSAtIHZhbHVlMi5ZO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIG92ZXJyaWRlIHN0cmluZyBUb1N0cmluZygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdWx0dXJlSW5mbyBjdXJyZW50Q3VsdHVyZSA9IEN1bHR1cmVJbmZvLkN1cnJlbnRDdWx0dXJlO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdChjdXJyZW50Q3VsdHVyZSwgXCJ7e1g6ezB9IFk6ezF9fX1cIiwgbmV3IG9iamVjdFtdIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuWC5Ub1N0cmluZyhjdXJyZW50Q3VsdHVyZSksIHRoaXMuWS5Ub1N0cmluZyhjdXJyZW50Q3VsdHVyZSkgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFB1YmxpYyBNZXRob2RzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIE9wZXJhdG9yc1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIG9wZXJhdG9yIC0oVmVjdG9yMkQgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZS5YID0gLXZhbHVlLlg7XHJcbiAgICAgICAgICAgIHZhbHVlLlkgPSAtdmFsdWUuWTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBvcGVyYXRvciA9PShWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTEuWCA9PSB2YWx1ZTIuWCAmJiB2YWx1ZTEuWSA9PSB2YWx1ZTIuWTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgb3BlcmF0b3IgIT0oVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxLlggIT0gdmFsdWUyLlggfHwgdmFsdWUxLlkgIT0gdmFsdWUyLlk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBvcGVyYXRvciArKFZlY3RvcjJEIHZhbHVlMSwgVmVjdG9yMkQgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggKz0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZICs9IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgb3BlcmF0b3IgLShWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlMS5YIC09IHZhbHVlMi5YO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWSAtPSB2YWx1ZTIuWTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIG9wZXJhdG9yICooVmVjdG9yMkQgdmFsdWUxLCBWZWN0b3IyRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAqPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTE7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IyRCBvcGVyYXRvciAqKFZlY3RvcjJEIHZhbHVlLCBmbG9hdCBzY2FsZUZhY3RvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlLlggKj0gc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIHZhbHVlLlkgKj0gc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIG9wZXJhdG9yICooZmxvYXQgc2NhbGVGYWN0b3IsIFZlY3RvcjJEIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUuWCAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUuWSAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yMkQgb3BlcmF0b3IgLyhWZWN0b3IyRCB2YWx1ZTEsIFZlY3RvcjJEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlMS5YIC89IHZhbHVlMi5YO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWSAvPSB2YWx1ZTIuWTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjJEIG9wZXJhdG9yIC8oVmVjdG9yMkQgdmFsdWUxLCBmbG9hdCBkaXZpZGVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgZmFjdG9yID0gMSAvIGRpdmlkZXI7XHJcbiAgICAgICAgICAgIHZhbHVlMS5YICo9IGZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gZmFjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBPcGVyYXRvcnNcclxuICAgIH1cclxufSIsIi8vIE1JVCBMaWNlbnNlIC0gQ29weXJpZ2h0IChDKSBUaGUgTW9uby5YbmEgVGVhbVxyXG4vLyBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZGVmaW5lZCBpblxyXG4vLyBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG5cclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uRGlhZ25vc3RpY3M7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG51c2luZyBTeXN0ZW0uUnVudGltZS5TZXJpYWxpemF0aW9uO1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5CYXNlVXRpbHNcclxue1xyXG5cclxuICAgIFxyXG4gICAgcHVibGljIHN0cnVjdCBWZWN0b3IzRCA6IElFcXVhdGFibGU8VmVjdG9yM0Q+XHJcbiAgICB7XHJcbiAgICAgICAgI3JlZ2lvbiBQcml2YXRlIEZpZWxkc1xyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCB6ZXJvID0gbmV3IFZlY3RvcjNEKDBmLCAwZiwgMGYpO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIFZlY3RvcjNEIG9uZSA9IG5ldyBWZWN0b3IzRCgxZiwgMWYsIDFmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCB1bml0WCA9IG5ldyBWZWN0b3IzRCgxZiwgMGYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCB1bml0WSA9IG5ldyBWZWN0b3IzRCgwZiwgMWYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCB1bml0WiA9IG5ldyBWZWN0b3IzRCgwZiwgMGYsIDFmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCB1cCA9IG5ldyBWZWN0b3IzRCgwZiwgMWYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCBkb3duID0gbmV3IFZlY3RvcjNEKDBmLCAtMWYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCByaWdodCA9IG5ldyBWZWN0b3IzRCgxZiwgMGYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCBsZWZ0ID0gbmV3IFZlY3RvcjNEKC0xZiwgMGYsIDBmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCBmb3J3YXJkID0gbmV3IFZlY3RvcjNEKDBmLCAwZiwgLTFmKTtcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBWZWN0b3IzRCBiYWNrd2FyZCA9IG5ldyBWZWN0b3IzRCgwZiwgMGYsIDFmKTtcclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBQcml2YXRlIEZpZWxkc1xyXG5cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBQdWJsaWMgRmllbGRzXHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBYO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBwdWJsaWMgZmxvYXQgWTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgcHVibGljIGZsb2F0IFo7XHJcblxyXG4gICAgICAgICNlbmRyZWdpb24gUHVibGljIEZpZWxkc1xyXG5cclxuXHJcbiAgICAgICAgI3JlZ2lvbiBQcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyBhIDxzZWU+VmVjdG9yMzwvc2VlPiB3aXRoIGNvbXBvbmVudHMgMCwgMCwgMC5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgWmVyb1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHplcm87IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyBhIDxzZWU+VmVjdG9yMzwvc2VlPiB3aXRoIGNvbXBvbmVudHMgMSwgMSwgMS5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgT25lXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gb25lOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgYSA8c2VlPlZlY3RvcjM8L3NlZT4gd2l0aCBjb21wb25lbnRzIDEsIDAsIDAuXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIFVuaXRYXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gdW5pdFg7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUmV0dXJucyBhIDxzZWU+VmVjdG9yMzwvc2VlPiB3aXRoIGNvbXBvbmVudHMgMCwgMSwgMC5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgVW5pdFlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiB1bml0WTsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBSZXR1cm5zIGEgPHNlZT5WZWN0b3IzPC9zZWU+IHdpdGggY29tcG9uZW50cyAwLCAwLCAxLlxyXG4gICAgICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBVbml0WlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIHVuaXRaOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIFVwXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gdXA7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgRG93blxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIGRvd247IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgUmlnaHRcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldCB7IHJldHVybiByaWdodDsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBMZWZ0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gbGVmdDsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBGb3J3YXJkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gZm9yd2FyZDsgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBCYWNrd2FyZFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIGJhY2t3YXJkOyB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFByb3BlcnRpZXNcclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gQ29uc3RydWN0b3JzXHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3IzRChmbG9hdCB4LCBmbG9hdCB5LCBmbG9hdCB6KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5YID0geDtcclxuICAgICAgICAgICAgdGhpcy5ZID0geTtcclxuICAgICAgICAgICAgdGhpcy5aID0gejtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgVmVjdG9yM0QoZmxvYXQgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLlggPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5ZID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuWiA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBWZWN0b3IzRChWZWN0b3IyRCB2YWx1ZSwgZmxvYXQgeilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuWCA9IHZhbHVlLlg7XHJcbiAgICAgICAgICAgIHRoaXMuWSA9IHZhbHVlLlk7XHJcbiAgICAgICAgICAgIHRoaXMuWiA9IHo7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgI2VuZHJlZ2lvbiBDb25zdHJ1Y3RvcnNcclxuXHJcblxyXG4gICAgICAgICNyZWdpb24gUHVibGljIE1ldGhvZHNcclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBQZXJmb3JtcyB2ZWN0b3IgYWRkaXRpb24gb24gPHBhcmFtcmVmIG5hbWU9XCJ2YWx1ZTFcIi8+IGFuZCA8cGFyYW1yZWYgbmFtZT1cInZhbHVlMlwiLz4uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZTFcIj5UaGUgZmlyc3QgdmVjdG9yIHRvIGFkZC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInZhbHVlMlwiPlRoZSBzZWNvbmQgdmVjdG9yIHRvIGFkZC48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5UaGUgcmVzdWx0IG9mIHRoZSB2ZWN0b3IgYWRkaXRpb24uPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgQWRkKFZlY3RvcjNEIHZhbHVlMSwgVmVjdG9yM0QgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggKz0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZICs9IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiArPSB2YWx1ZTIuWjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLyA8c3VtbWFyeT5cclxuICAgICAgICAvLy8gUGVyZm9ybXMgdmVjdG9yIGFkZGl0aW9uIG9uIDxwYXJhbXJlZiBuYW1lPVwidmFsdWUxXCIvPiBhbmRcclxuICAgICAgICAvLy8gPHBhcmFtcmVmIG5hbWU9XCJ2YWx1ZTJcIi8+LCBzdG9yaW5nIHRoZSByZXN1bHQgb2YgdGhlXHJcbiAgICAgICAgLy8vIGFkZGl0aW9uIGluIDxwYXJhbXJlZiBuYW1lPVwicmVzdWx0XCIvPi5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInZhbHVlMVwiPlRoZSBmaXJzdCB2ZWN0b3IgdG8gYWRkLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwidmFsdWUyXCI+VGhlIHNlY29uZCB2ZWN0b3IgdG8gYWRkLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicmVzdWx0XCI+VGhlIHJlc3VsdCBvZiB0aGUgdmVjdG9yIGFkZGl0aW9uLjwvcGFyYW0+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIEFkZChyZWYgVmVjdG9yM0QgdmFsdWUxLCByZWYgVmVjdG9yM0QgdmFsdWUyLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZTEuWCArIHZhbHVlMi5YO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZICsgdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5aID0gdmFsdWUxLlogKyB2YWx1ZTIuWjtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIENyb3NzKFZlY3RvcjNEIHZlY3RvcjEsIFZlY3RvcjNEIHZlY3RvcjIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDcm9zcyhyZWYgdmVjdG9yMSwgcmVmIHZlY3RvcjIsIG91dCB2ZWN0b3IxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZlY3RvcjE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQ3Jvc3MocmVmIFZlY3RvcjNEIHZlY3RvcjEsIHJlZiBWZWN0b3IzRCB2ZWN0b3IyLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHggPSB2ZWN0b3IxLlkgKiB2ZWN0b3IyLlogLSB2ZWN0b3IyLlkgKiB2ZWN0b3IxLlo7XHJcbiAgICAgICAgICAgIHZhciB5ID0gLSh2ZWN0b3IxLlggKiB2ZWN0b3IyLlogLSB2ZWN0b3IyLlggKiB2ZWN0b3IxLlopO1xyXG4gICAgICAgICAgICB2YXIgeiA9IHZlY3RvcjEuWCAqIHZlY3RvcjIuWSAtIHZlY3RvcjIuWCAqIHZlY3RvcjEuWTtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB4O1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5aID0gejtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZmxvYXQgRGlzdGFuY2UoVmVjdG9yM0QgdmVjdG9yMSwgVmVjdG9yM0QgdmVjdG9yMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IHJlc3VsdDtcclxuICAgICAgICAgICAgRGlzdGFuY2VTcXVhcmVkKHJlZiB2ZWN0b3IxLCByZWYgdmVjdG9yMiwgb3V0IHJlc3VsdCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoZmxvYXQpTWF0aC5TcXJ0KHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgRGlzdGFuY2UocmVmIFZlY3RvcjNEIHZhbHVlMSwgcmVmIFZlY3RvcjNEIHZhbHVlMiwgb3V0IGZsb2F0IHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERpc3RhbmNlU3F1YXJlZChyZWYgdmFsdWUxLCByZWYgdmFsdWUyLCBvdXQgcmVzdWx0KTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gKGZsb2F0KU1hdGguU3FydChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBmbG9hdCBEaXN0YW5jZVNxdWFyZWQoVmVjdG9yM0QgdmFsdWUxLCBWZWN0b3IzRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmbG9hdCByZXN1bHQ7XHJcbiAgICAgICAgICAgIERpc3RhbmNlU3F1YXJlZChyZWYgdmFsdWUxLCByZWYgdmFsdWUyLCBvdXQgcmVzdWx0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBEaXN0YW5jZVNxdWFyZWQocmVmIFZlY3RvcjNEIHZhbHVlMSwgcmVmIFZlY3RvcjNEIHZhbHVlMiwgb3V0IGZsb2F0IHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICh2YWx1ZTEuWCAtIHZhbHVlMi5YKSAqICh2YWx1ZTEuWCAtIHZhbHVlMi5YKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICh2YWx1ZTEuWSAtIHZhbHVlMi5ZKSAqICh2YWx1ZTEuWSAtIHZhbHVlMi5ZKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICh2YWx1ZTEuWiAtIHZhbHVlMi5aKSAqICh2YWx1ZTEuWiAtIHZhbHVlMi5aKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgRGl2aWRlKFZlY3RvcjNEIHZhbHVlMSwgVmVjdG9yM0QgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggLz0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZIC89IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiAvPSB2YWx1ZTIuWjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgRGl2aWRlKFZlY3RvcjNEIHZhbHVlMSwgZmxvYXQgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgZmFjdG9yID0gMSAvIHZhbHVlMjtcclxuICAgICAgICAgICAgdmFsdWUxLlggKj0gZmFjdG9yO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWSAqPSBmYWN0b3I7XHJcbiAgICAgICAgICAgIHZhbHVlMS5aICo9IGZhY3RvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBEaXZpZGUocmVmIFZlY3RvcjNEIHZhbHVlMSwgZmxvYXQgZGl2aXNvciwgb3V0IFZlY3RvcjNEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IGZhY3RvciA9IDEgLyBkaXZpc29yO1xyXG4gICAgICAgICAgICByZXN1bHQuWCA9IHZhbHVlMS5YICogZmFjdG9yO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZICogZmFjdG9yO1xyXG4gICAgICAgICAgICByZXN1bHQuWiA9IHZhbHVlMS5aICogZmFjdG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIERpdmlkZShyZWYgVmVjdG9yM0QgdmFsdWUxLCByZWYgVmVjdG9yM0QgdmFsdWUyLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZTEuWCAvIHZhbHVlMi5YO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZIC8gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5aID0gdmFsdWUxLlogLyB2YWx1ZTIuWjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgZmxvYXQgRG90KFZlY3RvcjNEIHZlY3RvcjEsIFZlY3RvcjNEIHZlY3RvcjIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdmVjdG9yMS5YICogdmVjdG9yMi5YICsgdmVjdG9yMS5ZICogdmVjdG9yMi5ZICsgdmVjdG9yMS5aICogdmVjdG9yMi5aO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIERvdChyZWYgVmVjdG9yM0QgdmVjdG9yMSwgcmVmIFZlY3RvcjNEIHZlY3RvcjIsIG91dCBmbG9hdCByZXN1bHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB2ZWN0b3IxLlggKiB2ZWN0b3IyLlggKyB2ZWN0b3IxLlkgKiB2ZWN0b3IyLlkgKyB2ZWN0b3IxLlogKiB2ZWN0b3IyLlo7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgYm9vbCBFcXVhbHMob2JqZWN0IG9iailcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghKG9iaiBpcyBWZWN0b3IzRCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3RoZXIgPSAoVmVjdG9yM0Qpb2JqO1xyXG4gICAgICAgICAgICByZXR1cm4gWCA9PSBvdGhlci5YICYmXHJcbiAgICAgICAgICAgICAgICAgICAgWSA9PSBvdGhlci5ZICYmXHJcbiAgICAgICAgICAgICAgICAgICAgWiA9PSBvdGhlci5aO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRXF1YWxzKFZlY3RvcjNEIG90aGVyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFggPT0gb3RoZXIuWCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFkgPT0gb3RoZXIuWSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIFogPT0gb3RoZXIuWjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBpbnQgR2V0SGFzaENvZGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpbnQpKHRoaXMuWCArIHRoaXMuWSArIHRoaXMuWik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IExlbmd0aCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmbG9hdCByZXN1bHQ7XHJcbiAgICAgICAgICAgIERpc3RhbmNlU3F1YXJlZChyZWYgdGhpcywgcmVmIHplcm8sIG91dCByZXN1bHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gKGZsb2F0KU1hdGguU3FydChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IExlbmd0aFNxdWFyZWQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgcmVzdWx0O1xyXG4gICAgICAgICAgICBEaXN0YW5jZVNxdWFyZWQocmVmIHRoaXMsIHJlZiB6ZXJvLCBvdXQgcmVzdWx0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgTXVsdGlwbHkoVmVjdG9yM0QgdmFsdWUxLCBWZWN0b3IzRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAqPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgKj0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHZhbHVlMS5aICo9IHZhbHVlMi5aO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBNdWx0aXBseShWZWN0b3IzRCB2YWx1ZTEsIGZsb2F0IHNjYWxlRmFjdG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggKj0gc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBNdWx0aXBseShyZWYgVmVjdG9yM0QgdmFsdWUxLCBmbG9hdCBzY2FsZUZhY3Rvciwgb3V0IFZlY3RvcjNEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUxLlggKiBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZTEuWSAqIHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICByZXN1bHQuWiA9IHZhbHVlMS5aICogc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTXVsdGlwbHkocmVmIFZlY3RvcjNEIHZhbHVlMSwgcmVmIFZlY3RvcjNEIHZhbHVlMiwgb3V0IFZlY3RvcjNEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUxLlggKiB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZTEuWSAqIHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICByZXN1bHQuWiA9IHZhbHVlMS5aICogdmFsdWUyLlo7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAgICAgLy8vIFJldHVybnMgYSA8c2VlPlZlY3RvcjM8L3NlZT4gcG9pbnRpbmcgaW4gdGhlIG9wcG9zaXRlXHJcbiAgICAgICAgLy8vIGRpcmVjdGlvbiBvZiA8cGFyYW1yZWYgbmFtZT1cInZhbHVlXCIvPi5cclxuICAgICAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInZhbHVlXCI+VGhlIHZlY3RvciB0byBuZWdhdGUuPC9wYXJhbT5cclxuICAgICAgICAvLy8gPHJldHVybnM+VGhlIHZlY3RvciBuZWdhdGlvbiBvZiA8cGFyYW1yZWYgbmFtZT1cInZhbHVlXCIvPi48L3JldHVybnM+XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBOZWdhdGUoVmVjdG9yM0QgdmFsdWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBWZWN0b3IzRCgtdmFsdWUuWCwgLXZhbHVlLlksIC12YWx1ZS5aKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBTdG9yZXMgYSA8c2VlPlZlY3RvcjM8L3NlZT4gcG9pbnRpbmcgaW4gdGhlIG9wcG9zaXRlXHJcbiAgICAgICAgLy8vIGRpcmVjdGlvbiBvZiA8cGFyYW1yZWYgbmFtZT1cInZhbHVlXCIvPiBpbiA8cGFyYW1yZWYgbmFtZT1cInJlc3VsdFwiLz4uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZVwiPlRoZSB2ZWN0b3IgdG8gbmVnYXRlLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPVwicmVzdWx0XCI+VGhlIHZlY3RvciB0aGF0IHRoZSBuZWdhdGlvbiBvZiA8cGFyYW1yZWYgbmFtZT1cInZhbHVlXCIvPiB3aWxsIGJlIHN0b3JlZCBpbi48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBOZWdhdGUocmVmIFZlY3RvcjNEIHZhbHVlLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSAtdmFsdWUuWDtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSAtdmFsdWUuWTtcclxuICAgICAgICAgICAgcmVzdWx0LlogPSAtdmFsdWUuWjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE5vcm1hbGl6ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBOb3JtYWxpemUocmVmIHRoaXMsIG91dCB0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgTm9ybWFsaXplKFZlY3RvcjNEIHZlY3RvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIE5vcm1hbGl6ZShyZWYgdmVjdG9yLCBvdXQgdmVjdG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZlY3RvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBOb3JtYWxpemUocmVmIFZlY3RvcjNEIHZhbHVlLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZmxvYXQgZmFjdG9yO1xyXG4gICAgICAgICAgICBEaXN0YW5jZShyZWYgdmFsdWUsIHJlZiB6ZXJvLCBvdXQgZmFjdG9yKTtcclxuICAgICAgICAgICAgZmFjdG9yID0gMWYgLyBmYWN0b3I7XHJcbiAgICAgICAgICAgIHJlc3VsdC5YID0gdmFsdWUuWCAqIGZhY3RvcjtcclxuICAgICAgICAgICAgcmVzdWx0LlkgPSB2YWx1ZS5ZICogZmFjdG9yO1xyXG4gICAgICAgICAgICByZXN1bHQuWiA9IHZhbHVlLlogKiBmYWN0b3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIFJlZmxlY3QoVmVjdG9yM0QgdmVjdG9yLCBWZWN0b3IzRCBub3JtYWwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBJIGlzIHRoZSBvcmlnaW5hbCBhcnJheVxyXG4gICAgICAgICAgICAvLyBOIGlzIHRoZSBub3JtYWwgb2YgdGhlIGluY2lkZW50IHBsYW5lXHJcbiAgICAgICAgICAgIC8vIFIgPSBJIC0gKDIgKiBOICogKCBEb3RQcm9kdWN0WyBJLE5dICkpXHJcbiAgICAgICAgICAgIFZlY3RvcjNEIHJlZmxlY3RlZFZlY3RvcjtcclxuICAgICAgICAgICAgLy8gaW5saW5lIHRoZSBkb3RQcm9kdWN0IGhlcmUgaW5zdGVhZCBvZiBjYWxsaW5nIG1ldGhvZFxyXG4gICAgICAgICAgICBmbG9hdCBkb3RQcm9kdWN0ID0gKCh2ZWN0b3IuWCAqIG5vcm1hbC5YKSArICh2ZWN0b3IuWSAqIG5vcm1hbC5ZKSkgKyAodmVjdG9yLlogKiBub3JtYWwuWik7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZFZlY3Rvci5YID0gdmVjdG9yLlggLSAoMi4wZiAqIG5vcm1hbC5YKSAqIGRvdFByb2R1Y3Q7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZFZlY3Rvci5ZID0gdmVjdG9yLlkgLSAoMi4wZiAqIG5vcm1hbC5ZKSAqIGRvdFByb2R1Y3Q7XHJcbiAgICAgICAgICAgIHJlZmxlY3RlZFZlY3Rvci5aID0gdmVjdG9yLlogLSAoMi4wZiAqIG5vcm1hbC5aKSAqIGRvdFByb2R1Y3Q7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVmbGVjdGVkVmVjdG9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFJlZmxlY3QocmVmIFZlY3RvcjNEIHZlY3RvciwgcmVmIFZlY3RvcjNEIG5vcm1hbCwgb3V0IFZlY3RvcjNEIHJlc3VsdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIEkgaXMgdGhlIG9yaWdpbmFsIGFycmF5XHJcbiAgICAgICAgICAgIC8vIE4gaXMgdGhlIG5vcm1hbCBvZiB0aGUgaW5jaWRlbnQgcGxhbmVcclxuICAgICAgICAgICAgLy8gUiA9IEkgLSAoMiAqIE4gKiAoIERvdFByb2R1Y3RbIEksTl0gKSlcclxuXHJcbiAgICAgICAgICAgIC8vIGlubGluZSB0aGUgZG90UHJvZHVjdCBoZXJlIGluc3RlYWQgb2YgY2FsbGluZyBtZXRob2RcclxuICAgICAgICAgICAgZmxvYXQgZG90UHJvZHVjdCA9ICgodmVjdG9yLlggKiBub3JtYWwuWCkgKyAodmVjdG9yLlkgKiBub3JtYWwuWSkpICsgKHZlY3Rvci5aICogbm9ybWFsLlopO1xyXG4gICAgICAgICAgICByZXN1bHQuWCA9IHZlY3Rvci5YIC0gKDIuMGYgKiBub3JtYWwuWCkgKiBkb3RQcm9kdWN0O1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZlY3Rvci5ZIC0gKDIuMGYgKiBub3JtYWwuWSkgKiBkb3RQcm9kdWN0O1xyXG4gICAgICAgICAgICByZXN1bHQuWiA9IHZlY3Rvci5aIC0gKDIuMGYgKiBub3JtYWwuWikgKiBkb3RQcm9kdWN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBQZXJmb3JtcyB2ZWN0b3Igc3VidHJhY3Rpb24gb24gPHBhcmFtcmVmIG5hbWU9XCJ2YWx1ZTFcIi8+IGFuZCA8cGFyYW1yZWYgbmFtZT1cInZhbHVlMlwiLz4uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZTFcIj5UaGUgdmVjdG9yIHRvIGJlIHN1YnRyYWN0ZWQgZnJvbS48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInZhbHVlMlwiPlRoZSB2ZWN0b3IgdG8gYmUgc3VidHJhY3RlZCBmcm9tIDxwYXJhbXJlZiBuYW1lPVwidmFsdWUxXCIvPi48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cmV0dXJucz5UaGUgcmVzdWx0IG9mIHRoZSB2ZWN0b3Igc3VidHJhY3Rpb24uPC9yZXR1cm5zPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0QgU3VidHJhY3QoVmVjdG9yM0QgdmFsdWUxLCBWZWN0b3IzRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAtPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgLT0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHZhbHVlMS5aIC09IHZhbHVlMi5aO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLyBQZXJmb3JtcyB2ZWN0b3Igc3VidHJhY3Rpb24gb24gPHBhcmFtcmVmIG5hbWU9XCJ2YWx1ZTFcIi8+IGFuZCA8cGFyYW1yZWYgbmFtZT1cInZhbHVlMlwiLz4uXHJcbiAgICAgICAgLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8gPHBhcmFtIG5hbWU9XCJ2YWx1ZTFcIj5UaGUgdmVjdG9yIHRvIGJlIHN1YnRyYWN0ZWQgZnJvbS48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInZhbHVlMlwiPlRoZSB2ZWN0b3IgdG8gYmUgc3VidHJhY3RlZCBmcm9tIDxwYXJhbXJlZiBuYW1lPVwidmFsdWUxXCIvPi48L3BhcmFtPlxyXG4gICAgICAgIC8vLyA8cGFyYW0gbmFtZT1cInJlc3VsdFwiPlRoZSByZXN1bHQgb2YgdGhlIHZlY3RvciBzdWJ0cmFjdGlvbi48L3BhcmFtPlxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBTdWJ0cmFjdChyZWYgVmVjdG9yM0QgdmFsdWUxLCByZWYgVmVjdG9yM0QgdmFsdWUyLCBvdXQgVmVjdG9yM0QgcmVzdWx0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzdWx0LlggPSB2YWx1ZTEuWCAtIHZhbHVlMi5YO1xyXG4gICAgICAgICAgICByZXN1bHQuWSA9IHZhbHVlMS5ZIC0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5aID0gdmFsdWUxLlogLSB2YWx1ZTIuWjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHN0cmluZyBEZWJ1Z0Rpc3BsYXlTdHJpbmdcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLkNvbmNhdChcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlguVG9TdHJpbmcoKSwgXCIgIFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuWS5Ub1N0cmluZygpLCBcIiAgXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5aLlRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSBzdHJpbmcgVG9TdHJpbmcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKDMyKTtcclxuICAgICAgICAgICAgc2IuQXBwZW5kKFwie1g6XCIpO1xyXG4gICAgICAgICAgICBzYi5BcHBlbmQodGhpcy5YKTtcclxuICAgICAgICAgICAgc2IuQXBwZW5kKFwiIFk6XCIpO1xyXG4gICAgICAgICAgICBzYi5BcHBlbmQodGhpcy5ZKTtcclxuICAgICAgICAgICAgc2IuQXBwZW5kKFwiIFo6XCIpO1xyXG4gICAgICAgICAgICBzYi5BcHBlbmQodGhpcy5aKTtcclxuICAgICAgICAgICAgc2IuQXBwZW5kKFwifVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNiLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vLy8vIDxzdW1tYXJ5PlxyXG4gICAgICAgIC8vLy8vIFRyYW5zZm9ybXMgYSB2ZWN0b3IgYnkgYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLlxyXG4gICAgICAgIC8vLy8vIDwvc3VtbWFyeT5cclxuICAgICAgICAvLy8vLyA8cGFyYW0gbmFtZT1cInZlY1wiPlRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtLjwvcGFyYW0+XHJcbiAgICAgICAgLy8vLy8gPHBhcmFtIG5hbWU9XCJxdWF0XCI+VGhlIHF1YXRlcm5pb24gdG8gcm90YXRlIHRoZSB2ZWN0b3IgYnkuPC9wYXJhbT5cclxuICAgICAgICAvLy8vLyA8cGFyYW0gbmFtZT1cInJlc3VsdFwiPlRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvbi48L3BhcmFtPlxyXG4gICAgICAgIC8vICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgVHJhbnNmb3JtKHJlZiBWZWN0b3IzIHZlYywgcmVmIFF1YXRlcm5pb24gcXVhdCwgb3V0IFZlY3RvcjMgcmVzdWx0KVxyXG4gICAgICAgIC8vICAgICAgICB7XHJcbiAgICAgICAgLy9cdFx0Ly8gVGFrZW4gZnJvbSB0aGUgT3BlbnRUSyBpbXBsZW1lbnRhdGlvbiBvZiBWZWN0b3IzXHJcbiAgICAgICAgLy8gICAgICAgICAgICAvLyBTaW5jZSB2ZWMuVyA9PSAwLCB3ZSBjYW4gb3B0aW1pemUgcXVhdCAqIHZlYyAqIHF1YXReLTEgYXMgZm9sbG93czpcclxuICAgICAgICAvLyAgICAgICAgICAgIC8vIHZlYyArIDIuMCAqIGNyb3NzKHF1YXQueHl6LCBjcm9zcyhxdWF0Lnh5eiwgdmVjKSArIHF1YXQudyAqIHZlYylcclxuICAgICAgICAvLyAgICAgICAgICAgIFZlY3RvcjMgeHl6ID0gcXVhdC5YeXosIHRlbXAsIHRlbXAyO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgVmVjdG9yMy5Dcm9zcyhyZWYgeHl6LCByZWYgdmVjLCBvdXQgdGVtcCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICBWZWN0b3IzLk11bHRpcGx5KHJlZiB2ZWMsIHF1YXQuVywgb3V0IHRlbXAyKTtcclxuICAgICAgICAvLyAgICAgICAgICAgIFZlY3RvcjMuQWRkKHJlZiB0ZW1wLCByZWYgdGVtcDIsIG91dCB0ZW1wKTtcclxuICAgICAgICAvLyAgICAgICAgICAgIFZlY3RvcjMuQ3Jvc3MocmVmIHh5eiwgcmVmIHRlbXAsIG91dCB0ZW1wKTtcclxuICAgICAgICAvLyAgICAgICAgICAgIFZlY3RvcjMuTXVsdGlwbHkocmVmIHRlbXAsIDIsIG91dCB0ZW1wKTtcclxuICAgICAgICAvLyAgICAgICAgICAgIFZlY3RvcjMuQWRkKHJlZiB2ZWMsIHJlZiB0ZW1wLCBvdXQgcmVzdWx0KTtcclxuICAgICAgICAvLyAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uIFB1YmxpYyBtZXRob2RzXHJcblxyXG5cclxuICAgICAgICAjcmVnaW9uIE9wZXJhdG9yc1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgb3BlcmF0b3IgPT0oVmVjdG9yM0QgdmFsdWUxLCBWZWN0b3IzRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxLlggPT0gdmFsdWUyLlhcclxuICAgICAgICAgICAgICAgICYmIHZhbHVlMS5ZID09IHZhbHVlMi5ZXHJcbiAgICAgICAgICAgICAgICAmJiB2YWx1ZTEuWiA9PSB2YWx1ZTIuWjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgYm9vbCBvcGVyYXRvciAhPShWZWN0b3IzRCB2YWx1ZTEsIFZlY3RvcjNEIHZhbHVlMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAhKHZhbHVlMSA9PSB2YWx1ZTIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBvcGVyYXRvciArKFZlY3RvcjNEIHZhbHVlMSwgVmVjdG9yM0QgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggKz0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZICs9IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiArPSB2YWx1ZTIuWjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0Qgb3BlcmF0b3IgLShWZWN0b3IzRCB2YWx1ZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbmV3IFZlY3RvcjNEKC12YWx1ZS5YLCAtdmFsdWUuWSwgLXZhbHVlLlopO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIG9wZXJhdG9yIC0oVmVjdG9yM0QgdmFsdWUxLCBWZWN0b3IzRCB2YWx1ZTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZTEuWCAtPSB2YWx1ZTIuWDtcclxuICAgICAgICAgICAgdmFsdWUxLlkgLT0gdmFsdWUyLlk7XHJcbiAgICAgICAgICAgIHZhbHVlMS5aIC09IHZhbHVlMi5aO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBvcGVyYXRvciAqKFZlY3RvcjNEIHZhbHVlMSwgVmVjdG9yM0QgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggKj0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZICo9IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiAqPSB2YWx1ZTIuWjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0Qgb3BlcmF0b3IgKihWZWN0b3IzRCB2YWx1ZSwgZmxvYXQgc2NhbGVGYWN0b3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YWx1ZS5YICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICB2YWx1ZS5ZICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICB2YWx1ZS5aICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZlY3RvcjNEIG9wZXJhdG9yICooZmxvYXQgc2NhbGVGYWN0b3IsIFZlY3RvcjNEIHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUuWCAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUuWSAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUuWiAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBWZWN0b3IzRCBvcGVyYXRvciAvKFZlY3RvcjNEIHZhbHVlMSwgVmVjdG9yM0QgdmFsdWUyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFsdWUxLlggLz0gdmFsdWUyLlg7XHJcbiAgICAgICAgICAgIHZhbHVlMS5ZIC89IHZhbHVlMi5ZO1xyXG4gICAgICAgICAgICB2YWx1ZTEuWiAvPSB2YWx1ZTIuWjtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVmVjdG9yM0Qgb3BlcmF0b3IgLyhWZWN0b3IzRCB2YWx1ZSwgZmxvYXQgZGl2aWRlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZsb2F0IGZhY3RvciA9IDEgLyBkaXZpZGVyO1xyXG4gICAgICAgICAgICB2YWx1ZS5YICo9IGZhY3RvcjtcclxuICAgICAgICAgICAgdmFsdWUuWSAqPSBmYWN0b3I7XHJcbiAgICAgICAgICAgIHZhbHVlLlogKj0gZmFjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uXHJcbiAgICB9XHJcbn0iLCJ1c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBNb3ZlRGF0YVxyXG4gICAge1xyXG4gICAgICAgIHN0cmluZyBsYWJlbDtcclxuICAgICAgICBpbnRlcm5hbCBMaXN0PFRpY2s+IHVuaXRzID0gbmV3IExpc3Q8VGljaz4oKTtcclxuICAgICAgICBpbnRlcm5hbCBMaXN0PGludD4gdGFncyA9IG5ldyBMaXN0PGludD4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIE1vdmVEYXRhKHN0cmluZyBsYWJlbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IEZpbmRCeUxhYmVsKExpc3Q8TW92ZURhdGE+IG1vdmVEYXRhcywgc3RyaW5nIGxhYmVsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtb3ZlRGF0YXMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYobW92ZURhdGFzW2ldIT1udWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlRGF0YXNbaV0ubGFiZWwgPT0gbGFiZWwpIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFRpY2sgXHJcbiAgICB7XHJcbiAgICAgICAgaW50ZXJuYWwgQ29uZGl0aW9uIGNvbmRpdGlvbjtcclxuICAgICAgICBpbnRlcm5hbCBMaXN0PG9iamVjdD4gdGhpbmdzVG9IYXBwZW4gPSBuZXcgTGlzdDxvYmplY3Q+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBUaWNrKG9iamVjdCBhY3Rpb24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGluZ3NUb0hhcHBlbi5BZGQoYWN0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUaWNrKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGNsYXNzIENvbmRpdGlvblxyXG4gICAge1xyXG4gICAgICAgIGludGVybmFsIHJlYWRvbmx5IENvbmRpdGlvblR5cGUgdHlwZTtcclxuICAgICAgICBpbnRlcm5hbCByZWFkb25seSBUYXJnZXQgdGFyZ2V0O1xyXG4gICAgICAgIGludGVybmFsIHJlYWRvbmx5IEJhc2VVdGlscy5WZWN0b3IyRCB2ZWN0b3I7XHJcblxyXG4gICAgICAgIHB1YmxpYyBDb25kaXRpb24oQ29uZGl0aW9uVHlwZSB0eXBlLCBUYXJnZXQgdGFyZ2V0LCBCYXNlVXRpbHMuVmVjdG9yMkQgdmVjdG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIHRoaXMudmVjdG9yID0gdmVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBDb25kaXRpb25UeXBlXHJcbiAgICB7XHJcbiAgICAgICAgQ2FuTW92ZVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBTdW1tb25FbnRpdHlcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IGVuZW15V2hpY2g7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IFZlY3RvcjJEIHByZWZlcmVudGlhbFJvd0NvbHVtbjtcclxuXHJcbiAgICAgICAgcHVibGljIFN1bW1vbkVudGl0eShpbnQgZW5lbXlXaGljaCwgVmVjdG9yMkQgcHJlZmVyZW50aWFsUm93Q29sdW1uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5lbmVteVdoaWNoID0gZW5lbXlXaGljaDtcclxuICAgICAgICAgICAgdGhpcy5wcmVmZXJlbnRpYWxSb3dDb2x1bW4gPSBwcmVmZXJlbnRpYWxSb3dDb2x1bW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBzdGF0aWMgU3VtbW9uRW50aXR5IEVuZW15KGludCB2LCBWZWN0b3IyRCB2ZWN0b3IyRClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3VtbW9uRW50aXR5KHYsIHZlY3RvcjJEKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBBbmltYXRpb25cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgQXJlYSBhcmVhID0gbnVsbDtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudCBlbGVtZW50ID0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5Ob25lO1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBUYXJnZXQgdGFyZ2V0ID0gVGFyZ2V0Lk5vbmU7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBBbmltYXRpb24oVGFyZ2V0IHRhcmdldClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9wdWJsaWMgQW5pbWF0aW9uKEFyZWEgYXJlYSlcclxuICAgICAgICAvL3tcclxuICAgICAgICAvLyAgICB0aGlzLmFyZWEgPSBhcmVhO1xyXG4gICAgICAgIC8vfVxyXG5cclxuICAgICAgICBwdWJsaWMgQW5pbWF0aW9uKFRhcmdldCB0YXJnZXQsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFuaW1hdGlvbihBcmVhIGFyZWEsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudCA9IFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQuTm9uZSwgVGFyZ2V0IHRhcmdldCA9IFRhcmdldC5Ob25lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5hcmVhID0gYXJlYTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBNb3ZlQWN0aW9uXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IFRhcmdldCB0YXJnZXQ7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IEJhc2VVdGlscy5WZWN0b3IyRCBkaXN0YW5jZTtcclxuXHJcbiAgICAgICAgcHVibGljIE1vdmVBY3Rpb24oVGFyZ2V0IHRhcmdldCwgQmFzZVV0aWxzLlZlY3RvcjJEIGFtb3VudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB0aGlzLmRpc3RhbmNlID0gYW1vdW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRGVhbERhbWFnZUFjdGlvblxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBUYXJnZXQgdGFyZ2V0ID0gVGFyZ2V0Lk5vbmU7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IEFyZWEgYXJlYTtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IGRhbWFnZTtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudCBlbGVtZW50O1xyXG5cclxuICAgICAgICBwdWJsaWMgRGVhbERhbWFnZUFjdGlvbihBcmVhIGFyZWEsIGludCBkYW1hZ2UsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuYXJlYSA9IGFyZWE7XHJcbiAgICAgICAgICAgIHRoaXMuZGFtYWdlID0gZGFtYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB0YXJnZXQgPSBUYXJnZXQuQXJlYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBEZWFsRGFtYWdlQWN0aW9uKFRhcmdldCB0YXJnZXQsIGludCBkYW1hZ2UsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB0aGlzLmRhbWFnZSA9IGRhbWFnZTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEFyZWFcclxuICAgIHtcclxuICAgICAgICAvL3B1YmxpYyByZWFkb25seSBBcmVhIGFyZWE7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IFRhcmdldCB0YXJnZXQ7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IExpc3Q8VmVjdG9yMkQ+IHBvaW50cyA9IG5ldyBMaXN0PFZlY3RvcjJEPigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgQXJlYShUYXJnZXQgdGFyZ2V0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIFRhcmdldFxyXG4gICAge1xyXG4gICAgICAgIE5vbmUsICBTZWxmLCBDbG9zZXN0VGFyZ2V0LCBDbG9zZXN0VGFyZ2V0WCwgQXJlYSAgIFxyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucztcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEFzeW5jVGFza3NcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEFzeW5jVHJhY2tcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGNsYXNzIERlbGF5ZWRBY3Rpb25zXHJcbiAgICB7XHJcbiAgICAgICAgTGlzdDxmbG9hdD4gdGltZXMgPSBuZXcgTGlzdDxmbG9hdD4oKTtcclxuICAgICAgICBMaXN0PElMaXN0PiBsaXN0cyA9IG5ldyBMaXN0PElMaXN0PigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBVcGRhdGUoZmxvYXQgZGVsdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRpbWVzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpbWVzW2ldIC09IGRlbHRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVzW2ldIDw9IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgRXhlY3V0ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICBFbmRUYXNrKGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBhYnN0cmFjdCB2b2lkIEV4ZWN1dGUoaW50IGkpO1xyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIEFkZChmbG9hdCB0aW1lKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGltZXMuQWRkKHRpbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNEb25lKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lcy5Db3VudCA9PSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBFbmRUYXNrKGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGltZXMuUmVtb3ZlQXQoaSk7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBsIGluIGxpc3RzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsLlJlbW92ZUF0KGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBBc3luY1Rhc2tTZXR0ZXI8VD4gOiBEZWxheWVkQWN0aW9uc1xyXG4gICAge1xyXG4gICAgICAgIExpc3Q8VD4gVG9WYWx1ZSA9IG5ldyBMaXN0PFQ+KCk7XHJcbiAgICAgICAgTGlzdDxBY3Rpb248VD4+IHNldHRlcnMgPSBuZXcgTGlzdDxBY3Rpb248VD4+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkZChUIGUsIEFjdGlvbjxUPiBzZXR0ZXIsIGZsb2F0IHRpbWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUb1ZhbHVlLkFkZChlKTtcclxuICAgICAgICAgICAgc2V0dGVycy5BZGQoKGdsb2JhbDo6U3lzdGVtLkFjdGlvbjxUPilzZXR0ZXIpO1xyXG4gICAgICAgICAgICBiYXNlLkFkZCh0aW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIG92ZXJyaWRlIHZvaWQgRXhlY3V0ZShpbnQgaSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNldHRlcnNbaV0oVG9WYWx1ZVtpXSk7XHJcbiAgICAgICAgICAgIFRvVmFsdWUuUmVtb3ZlQXQoaSk7XHJcbiAgICAgICAgICAgIHNldHRlcnMuUmVtb3ZlQXQoaSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuSGFwcHM7XHJcbnVzaW5nIFBpZHJvaC5FQ1M7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkXHJcbntcclxuXHJcblxyXG4gICAgcHVibGljIGNsYXNzIEJhdHRsZU1haW5cclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTGlzdDxCYXR0bGVFbnRpdHk+IGVudGl0aWVzID0gbmV3IExpc3Q8QmF0dGxlRW50aXR5PigpO1xyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVTdGF0ZSBiYXR0bGVTdGF0ZSA9IG5ldyBCYXR0bGVTdGF0ZSgpO1xyXG4gICAgICAgIHB1YmxpYyBIYXBwTWFuYWdlciBoYXBwTWFuYWdlciA9IG5ldyBIYXBwTWFuYWdlcigpO1xyXG4gICAgICAgIERpY3Rpb25hcnk8TW92ZVR5cGUsIFZlY3RvcjJEPiBtb3ZlbWVudE1vdmVzID0gbmV3IERpY3Rpb25hcnk8TW92ZVR5cGUsIFZlY3RvcjJEPigpO1xyXG4gICAgICAgIC8vRGljdGlvbmFyeTxNb3ZlVHlwZSwgUG9pbnQ+IGF0dGFja01vdmVzID0gbmV3IERpY3Rpb25hcnk8TW92ZVR5cGUsIFBvaW50PigpO1xyXG4gICAgICAgIE1vdmVUeXBlW10gZW5lbXlNb3ZlcztcclxuICAgICAgICAvL3B1YmxpYyBMaXN0PElucHV0PiBpbnB1dHMgPSBuZXcgTGlzdDxUdXJuYmFzZWQuSW5wdXQ+KCk7XHJcbiAgICAgICAgcHVibGljIElucHV0SG9sZGVyIGlucHV0cyA9IG5ldyBJbnB1dEhvbGRlcigpO1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PE1vdmVUeXBlPiBwbGF5ZXJIYW5kRml4ZWQgPSBuZXcgTGlzdDxNb3ZlVHlwZT4oKTtcclxuICAgICAgICBwdWJsaWMgTGlzdDxNb3ZlVHlwZT4gcGxheWVySGFuZFVuZml4ZWQgPSBuZXcgTGlzdDxNb3ZlVHlwZT4oKTtcclxuICAgICAgICBwdWJsaWMgTGlzdDxNb3ZlVHlwZT4gcGxheWVySGFuZFBvb2wgPSBuZXcgTGlzdDxNb3ZlVHlwZT4oKTtcclxuXHJcbiAgICAgICAgcHVibGljIGZsb2F0IHRpbWVUb0Nob29zZU1heCA9IDE1ZjtcclxuICAgICAgICBwdWJsaWMgZmxvYXQgdGltZVRvQ2hvb3NlID0gLTE7XHJcblxyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVSZXN1bHQgYmF0dGxlUmVzdWx0ID0gbmV3IEJhdHRsZVJlc3VsdCgpO1xyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIEJhdHRsZUNvbmZpZ3VyZShCYXR0bGVDb25maWcgYmF0dGxlQ29uZmlnKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGJhdHRsZUNvbmZpZyA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYXR0bGVDb25maWcgPSBuZXcgQmF0dGxlQ29uZmlnKG5lZWRLaWxsQWxsRW5lbWllczp0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkJhdHRsZUNvbmZpZyA9IGJhdHRsZUNvbmZpZztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnQgbkVuZW1pZXM7XHJcbiAgICAgICAgcHVibGljIE1vdmVEYXRhRXhlY3V0ZXIgTW92ZURhdGFFeGVjdXRlcjtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IFRpbWVTdGFtcCB0aW1lU3RhbXA7XHJcbiAgICAgICAgcHJpdmF0ZSBRdWlja0FjY2Vzc29yVHdvPEJhdHRsZUVudGl0eSwgUGlja3VwSW5mbz4gcGlja3VwQWNjZXNzb3I7XHJcbiAgICAgICAgaW50ZXJuYWwgRUNTSW50ZWdyYXRpb24gZWNzSW50ZWc7XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY3Rpb24gRW5lbXlHZW5lcmF0ZU1vdmVzO1xyXG5cclxuICAgICAgICBwdWJsaWMgQmF0dGxlQ29uZmlnIEJhdHRsZUNvbmZpZyB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgaW50IEJvYXJkV2lkdGggeyBnZXQ7IGludGVybmFsIHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBpbnQgQm9hcmRIZWlnaHQgeyBnZXQ7IGludGVybmFsIHNldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQmF0dGxlTWFpbihpbnQgbW9kZSwgRUNTTWFuYWdlciBlY3MsIFRpbWVTdGFtcCB0aW1lU3RhbXApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL3RoaXMuZWNzID0gZWNzO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVTdGFtcCA9IHRpbWVTdGFtcDtcclxuICAgICAgICAgICAgcGlja3VwQWNjZXNzb3IgPSBlY3MuUXVpY2tBY2Nlc3NvcjI8QmF0dGxlRW50aXR5LCBQaWNrdXBJbmZvPigpO1xyXG4gICAgICAgICAgICBtb3ZlbWVudE1vdmVzLkFkZChNb3ZlVHlwZS5Nb3ZlVXAsIFZlY3RvcjJELlVuaXRZKTtcclxuICAgICAgICAgICAgbW92ZW1lbnRNb3Zlcy5BZGQoTW92ZVR5cGUuTW92ZURvd24sIC1WZWN0b3IyRC5Vbml0WSk7XHJcbiAgICAgICAgICAgIG1vdmVtZW50TW92ZXMuQWRkKE1vdmVUeXBlLk1vdmVMZWZ0LCAtVmVjdG9yMkQuVW5pdFgpO1xyXG4gICAgICAgICAgICBtb3ZlbWVudE1vdmVzLkFkZChNb3ZlVHlwZS5Nb3ZlUmlnaHQsIFZlY3RvcjJELlVuaXRYKTtcclxuXHJcbiAgICAgICAgICAgIHBsYXllckhhbmRGaXhlZC5DbGVhcigpO1xyXG4gICAgICAgICAgICBwbGF5ZXJIYW5kRml4ZWQuQWRkKE1vdmVUeXBlLk1vdmVSaWdodCk7XHJcbiAgICAgICAgICAgIHBsYXllckhhbmRGaXhlZC5BZGQoTW92ZVR5cGUuTW92ZUxlZnQpO1xyXG4gICAgICAgICAgICBwbGF5ZXJIYW5kRml4ZWQuQWRkKE1vdmVUeXBlLk1vdmVEb3duKTtcclxuICAgICAgICAgICAgcGxheWVySGFuZEZpeGVkLkFkZChNb3ZlVHlwZS5Nb3ZlVXApO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1vZGUgPT0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGxheWVySGFuZFVuZml4ZWQuQWRkKE1vdmVUeXBlLk5vcm1hbFNob3QpO1xyXG4gICAgICAgICAgICAgICAgZW5lbXlNb3ZlcyA9IG5ldyBNb3ZlVHlwZVtdIHtcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlVHlwZS5Nb3ZlVXAsXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZUxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZURvd24sXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZVJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIE1vdmVUeXBlLk5vcm1hbFNob3QsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGxheWVySGFuZFVuZml4ZWQuQWRkKE1vdmVUeXBlLkZpcmUpO1xyXG4gICAgICAgICAgICAgICAgcGxheWVySGFuZFVuZml4ZWQuQWRkKE1vdmVUeXBlLkljZSk7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJIYW5kVW5maXhlZC5BZGQoTW92ZVR5cGUuVGh1bmRlcik7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGVuZW15TW92ZXMgPSBuZXcgTW92ZVR5cGVbXSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZURvd24sXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZUxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZVR5cGUuTW92ZVVwLFxyXG4gICAgICAgICAgICAgICAgICAgIE1vdmVUeXBlLk1vdmVSaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlVHlwZS5GaXJlLFxyXG4gICAgICAgICAgICAgICAgICAgIE1vdmVUeXBlLkljZSxcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlVHlwZS5UaHVuZGVyLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9wbGF5ZXJIYW5kLkFkZChNb3ZlVHlwZS5Ob3JtYWxTaG90KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBib29sIElzVmljdG9yeSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gYmF0dGxlUmVzdWx0LnJlc3VsdCA9PSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQmFzaWNDb25maWcoQmF0dGxlQmFzaWNDb25maWcgYmFzaWNDb25maWcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXR0bGVTdGF0ZS50dXJuc1BlclBoYXNlLlZhbCA9IGJhc2ljQ29uZmlnLm5UdXJucztcclxuICAgICAgICAgICAgbkVuZW1pZXMgPSBiYXNpY0NvbmZpZy5uRW5lbWllcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEluaXQoKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIEJhdHRsZUVudGl0eSBoZXJvID0gbmV3IEJhdHRsZUVudGl0eSgpO1xyXG5cclxuICAgICAgICAgICAgaGVyby5wb3MuU2V0KDEsIDEpO1xyXG4gICAgICAgICAgICBoZXJvLm1pblBvcy5TZXQoMCwgMCk7XHJcbiAgICAgICAgICAgIGhlcm8ubWF4UG9zLlNldCgyLCAyKTtcclxuICAgICAgICAgICAgaGVyby5UeXBlID0gRW50aXR5VHlwZS5oZXJvO1xyXG4gICAgICAgICAgICBoZXJvLmxpZmUgPSAyO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGhlcm8ubW92ZXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlcm8ubW92ZXNbaV0gPSAtMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGVudGl0aWVzLkFkZChoZXJvKTtcclxuICAgICAgICAgICAgZWNzSW50ZWcuSGVyb0NyZWF0ZWQoaGVybyk7XHJcbiAgICAgICAgICAgIGVjc0ludGVnLlNwYXduRW5lbWllcygpO1xyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9HYW1lRW50aXR5IHBpY2t1cCA9IG5ldyBHYW1lRW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAvL3BpY2t1cC5UeXBlID0gRW50aXR5VHlwZS5waWNrdXA7XHJcbiAgICAgICAgICAgICAgICAvL3BpY2t1cC5wb3MuU2V0KDAsIDIpO1xyXG4gICAgICAgICAgICAgICAgLy9waWNrdXAubGlmZSA9IDI7XHJcbiAgICAgICAgICAgICAgICAvL3BpY2t1cC5ncmFwaGljID0gNDtcclxuICAgICAgICAgICAgICAgIC8vZW50aXRpZXMuQWRkKHBpY2t1cCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIEJhdHRsZUVudGl0eSBwYW5lbEVmZmVjdCA9IG5ldyBCYXR0bGVFbnRpdHkoKTtcclxuICAgICAgICAgICAgLy8gICAgcGFuZWxFZmZlY3QuVHlwZSA9IEVudGl0eVR5cGUucGFuZWxlZmZlY3Q7XHJcbiAgICAgICAgICAgIC8vICAgIHBhbmVsRWZmZWN0LnBvcy5TZXQoMCwgMik7XHJcbiAgICAgICAgICAgIC8vICAgIHBhbmVsRWZmZWN0LmxpZmUgPSA1O1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5ncmFwaGljID0gNTtcclxuICAgICAgICAgICAgLy8gICAgcGFuZWxFZmZlY3QucmFuZG9tUG9zaXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5kcmF3TGlmZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5kcmF3VHVybiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyAgICBSYW5kb21Qb3NpdGlvbihwYW5lbEVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vICAgIGVudGl0aWVzLkFkZChwYW5lbEVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIEJhdHRsZUVudGl0eSBwYW5lbEVmZmVjdCA9IG5ldyBCYXR0bGVFbnRpdHkoKTtcclxuICAgICAgICAgICAgLy8gICAgcGFuZWxFZmZlY3QuVHlwZSA9IEVudGl0eVR5cGUucGFuZWxlZmZlY3Q7XHJcbiAgICAgICAgICAgIC8vICAgIHBhbmVsRWZmZWN0LnBvcy5TZXQoMCwgMik7XHJcbiAgICAgICAgICAgIC8vICAgIHBhbmVsRWZmZWN0LmxpZmUgPSA1O1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5ncmFwaGljID0gNTtcclxuICAgICAgICAgICAgLy8gICAgcGFuZWxFZmZlY3QucmFuZG9tUG9zaXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5kcmF3TGlmZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyAgICBwYW5lbEVmZmVjdC5kcmF3VHVybiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyAgICBSYW5kb21Qb3NpdGlvbihwYW5lbEVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vICAgIGVudGl0aWVzLkFkZChwYW5lbEVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgUmVzZXQoKTtcclxuICAgICAgICAgICAgRXhlY3V0ZVBoYXNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgQmF0dGxlRW50aXR5IE5ld0JhdHRsZUVudGl0eSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBCYXR0bGVFbnRpdHkgYmF0dGxlRW50aXR5ID0gbmV3IEJhdHRsZUVudGl0eSgpO1xyXG4gICAgICAgICAgICBlbnRpdGllcy5BZGQoYmF0dGxlRW50aXR5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJhdHRsZUVudGl0eTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgUmVzZXQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBlbnRpdGllcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdGllc1tpXS5saWZlID0gZW50aXRpZXNbaV0ubWF4TGlmZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDaGFuZ2VQaGFzZShCYXR0bGVQaGFzZS5FbmVteU1vdmVDaG9pY2UpO1xyXG4gICAgICAgICAgICBiYXR0bGVTdGF0ZS50dXJuLlZhbCA9IDA7XHJcbiAgICAgICAgICAgIGJhdHRsZVN0YXRlLnRvdGFsVHVybnMgPSAwO1xyXG4gICAgICAgICAgICBiYXR0bGVTdGF0ZS5hY3RpbmdFbnRpdHkgPSAwO1xyXG4gICAgICAgICAgICBiYXR0bGVTdGF0ZS5tb3ZlVGlja19Ob3cuVmFsID0gMDtcclxuICAgICAgICAgICAgYmF0dGxlU3RhdGUubW92ZVRpY2tfVG90YWwgPSAxO1xyXG4gICAgICAgICAgICBiYXR0bGVSZXN1bHQucmVzdWx0ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGJvb2wgSXNPdmVyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBiYXR0bGVSZXN1bHQucmVzdWx0ICE9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBUaWNrKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEZpbmlzaFByZXZpb3VzVGljaygpO1xyXG4gICAgICAgICAgICBib29sIGhlcm9BbGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBib29sIGVuZW15QWxpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgYm9vbCBwaWNrdXBPYmxpZ2F0b3J5RXhpc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLlR5cGUgPT0gRW50aXR5VHlwZS5lbmVteSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5saWZlID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlBbGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5UeXBlID09IEVudGl0eVR5cGUuaGVybylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5saWZlID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVyb0FsaXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHRoaXMucGlja3VwQWNjZXNzb3IuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBwaWNrdXAgPSBwaWNrdXBBY2Nlc3Nvci5Db21wMihpKTtcclxuICAgICAgICAgICAgICAgIGlmIChwaWNrdXAubmVjZXNzYXJ5Rm9yVmljdG9yeSAmJiBwaWNrdXBBY2Nlc3Nvci5Db21wMShpKS5BbGl2ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwaWNrdXBPYmxpZ2F0b3J5RXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaGVyb0FsaXZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYXR0bGVSZXN1bHQucmVzdWx0ID0gMjtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKCFlbmVteUFsaXZlfHwgIUJhdHRsZUNvbmZpZy5uZWVkS2lsbEFsbEVuZW1pZXMpICYmICFwaWNrdXBPYmxpZ2F0b3J5RXhpc3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJhdHRsZVJlc3VsdC5yZXN1bHQgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChiYXR0bGVSZXN1bHQucmVzdWx0ID09IDApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhhcHBNYW5hZ2VyLlRpY2soKTtcclxuICAgICAgICAgICAgICAgIHRpbWVTdGFtcC5BZHZhbmNlKDEpO1xyXG4gICAgICAgICAgICAgICAgRXhlY3V0ZVBoYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBVcGRhdGUoZmxvYXQgZGVsdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodGltZVRvQ2hvb3NlID4gMCAmJiBiYXR0bGVTdGF0ZS5waGFzZSA9PSBCYXR0bGVQaGFzZS5QaWNrSGFuZHMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpbWVUb0Nob29zZSAtPSBkZWx0YTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lVG9DaG9vc2UgPD0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBGaW5pc2hQcmV2aW91c1RpY2soKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQmF0dGxlUGhhc2UgcHJldmlvdXNQaGFzZSA9IGJhdHRsZVN0YXRlLnBoYXNlO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHByZXZpb3VzUGhhc2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQmF0dGxlUGhhc2UuRW5lbXlNb3ZlQ2hvaWNlOlxyXG4gICAgICAgICAgICAgICAgICAgIENoYW5nZVBoYXNlKEJhdHRsZVBoYXNlLkhhbmRSZWNoYXJnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEJhdHRsZVBoYXNlLkhhbmRSZWNoYXJnZTpcclxuICAgICAgICAgICAgICAgICAgICBDaGFuZ2VQaGFzZShCYXR0bGVQaGFzZS5QaWNrSGFuZHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBCYXR0bGVQaGFzZS5QaWNrSGFuZHM6XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhbmdlUGhhc2UoQmF0dGxlUGhhc2UuRXhlY3V0ZU1vdmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBCYXR0bGVQaGFzZS5FeGVjdXRlTW92ZTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmF0dGxlU3RhdGUubW92ZVRpY2tfTm93ID49IGJhdHRsZVN0YXRlLm1vdmVUaWNrX1RvdGFsIC0gMSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZVN0YXRlLm1vdmVUaWNrX05vdy5WYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXR0bGVTdGF0ZS5tb3ZlVGlja19Ub3RhbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgbm9Nb3JlVW5pdHNUb0FjdFRoaXNUdXJuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IGlfaW5pdGlhbCA9IGJhdHRsZVN0YXRlLmFjdGluZ0VudGl0eSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpX2luaXRpYWwgPCBlbnRpdGllcy5Db3VudClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IGlfaW5pdGlhbDsgaSA8IGVudGl0aWVzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudGl0aWVzW2ldLkFsaXZlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUuYWN0aW5nRW50aXR5ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9Nb3JlVW5pdHNUb0FjdFRoaXNUdXJuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub01vcmVVbml0c1RvQWN0VGhpc1R1cm4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiYXR0bGVTdGF0ZS50dXJuID49IGJhdHRsZVN0YXRlLnR1cm5zUGVyUGhhc2UgLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZVBoYXNlKEJhdHRsZVBoYXNlLkVuZW15TW92ZUNob2ljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGUgaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5yYW5kb21Qb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFuZG9tUG9zaXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUuYWN0aW5nRW50aXR5ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXR0bGVTdGF0ZS50dXJuID0gYmF0dGxlU3RhdGUudHVybiArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUudG90YWxUdXJucyArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZVN0YXRlLm1vdmVUaWNrX05vdy5WYWwgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0YXRpYyB2b2lkIFJhbmRvbVBvc2l0aW9uKEJhdHRsZUVudGl0eSBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZS5wb3MuWCA9IFJhbmRvbVN1cHBsaWVyLlJhbmdlKDAsIDUpO1xyXG4gICAgICAgICAgICBlLnBvcy5ZID0gUmFuZG9tU3VwcGxpZXIuUmFuZ2UoMCwgMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQ2hhbmdlUGhhc2UoQmF0dGxlUGhhc2UgcGhhc2UpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBCYXR0bGVQaGFzZSBwcmV2aW91c1BoYXNlID0gYmF0dGxlU3RhdGUucGhhc2U7XHJcbiAgICAgICAgICAgIGlmIChwaGFzZSA9PSBwcmV2aW91c1BoYXNlKSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChwaGFzZSA9PSBCYXR0bGVQaGFzZS5QaWNrSGFuZHMpXHJcbiAgICAgICAgICAgIHtcclxuUGlkcm9oLkJhc2VVdGlscy5FeHRlbnNpb25zLlNodWZmbGU8Z2xvYmFsOjpQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZT4oICAgICAgICAgICAgICAgIHBsYXllckhhbmRQb29sKTtcclxuICAgICAgICAgICAgICAgIHBsYXllckhhbmRVbmZpeGVkLkNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBpbnQgY29tbWFuZHNUb0FkZCA9IDM7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZHNUb0FkZCA+IHBsYXllckhhbmRQb29sLkNvdW50KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzVG9BZGQgPSBwbGF5ZXJIYW5kUG9vbC5Db3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgY29tbWFuZHNUb0FkZDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllckhhbmRVbmZpeGVkLkFkZChwbGF5ZXJIYW5kUG9vbFtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHRpbWVUb0Nob29zZSA9IHRpbWVUb0Nob29zZU1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJldmlvdXNQaGFzZSA9PSBCYXR0bGVQaGFzZS5FeGVjdXRlTW92ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUudHVybi5WYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUuYWN0aW5nRW50aXR5ID0gMDtcclxuICAgICAgICAgICAgICAgIGJhdHRsZVN0YXRlLm1vdmVUaWNrX05vdy5WYWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgYmF0dGxlU3RhdGUubW92ZVRpY2tfVG90YWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGUgaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBlLm1vdmVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5tb3Zlc1tpXSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYXR0bGVTdGF0ZS5waGFzZSA9IHBoYXNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIEV4ZWN1dGVQaGFzZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgcGhhc2UgPSBiYXR0bGVTdGF0ZS5waGFzZTtcclxuICAgICAgICAgICAgc3dpdGNoIChwaGFzZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBCYXR0bGVQaGFzZS5FbmVteU1vdmVDaG9pY2U6XHJcbiAgICAgICAgICAgICAgICAgICAgZWNzSW50ZWcuU3Bhd25FbmVtaWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRW5lbXlHZW5lcmF0ZU1vdmVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEJhdHRsZVBoYXNlLkhhbmRSZWNoYXJnZTpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQmF0dGxlUGhhc2UuUGlja0hhbmRzOlxyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0cy5DbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBoaSBpbiBwbGF5ZXJIYW5kRml4ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHMuQWRkKG5ldyBUdXJuYmFzZWQuSW5wdXQoSW5wdXRUeXBlLk1vdmUsIChpbnQpaGkpLCBJbnB1dFRhZ3MuTU9WRUZJWCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBoaSBpbiBwbGF5ZXJIYW5kVW5maXhlZClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cy5BZGQobmV3IFR1cm5iYXNlZC5JbnB1dChJbnB1dFR5cGUuTW92ZSwgKGludCloaSksIElucHV0VGFncy5NT1ZFVU5GSVgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbnB1dHMuQWRkKG5ldyBUdXJuYmFzZWQuSW5wdXQoSW5wdXRUeXBlLk1pc2NCYXR0bGUsIE1pc2NCYXR0bGVJbnB1dC5SZWRvKSwgSW5wdXRUYWdzLk1JU0MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0cy5BZGQobmV3IFR1cm5iYXNlZC5JbnB1dChJbnB1dFR5cGUuTWlzY0JhdHRsZSwgTWlzY0JhdHRsZUlucHV0LkRvbmUpLCBJbnB1dFRhZ3MuTUlTQyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEJhdHRsZVBoYXNlLkV4ZWN1dGVNb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgIGVjc0ludGVnLlNwYXduRW5lbWllcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIEV4ZWN1dGVNb3ZlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIElucHV0RG9uZShJbnB1dCBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09IElucHV0VHlwZS5Nb3ZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBNb3ZlVHlwZSBhcmcxID0gKE1vdmVUeXBlKWlucHV0LmFyZzE7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGUoXCJJTlBVVFRFRDFcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxheWVySGFuZEZpeGVkLkNvbnRhaW5zKGFyZzEpIHx8IHBsYXllckhhbmRVbmZpeGVkLkNvbnRhaW5zKGFyZzEpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIklOUFVUVEVEMlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBNb3ZlQ2hvc2VuKGFyZzEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gSW5wdXRUeXBlLk1pc2NCYXR0bGUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE1pc2NCYXR0bGVJbnB1dCBtaXNjID0gKE1pc2NCYXR0bGVJbnB1dClpbnB1dC5hcmcxO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pc2MgPT0gTWlzY0JhdHRsZUlucHV0LlJlZG8pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGUgaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5UeXBlID09IEVudGl0eVR5cGUuaGVybylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBlLm1vdmVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLm1vdmVzW2ldID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLm1vdmVzW2ldID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludCB2YWx1ZSA9IGUubW92ZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAtMSB8fCBpID09IGJhdHRsZVN0YXRlLnR1cm5zUGVyUGhhc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubW92ZXNbaSAtIDFdID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobWlzYyA9PSBNaXNjQmF0dGxlSW5wdXQuRG9uZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBUaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGJvb2wgQmF0dGxlRGVjaWRlZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgaGVyb2VzID0gMDtcclxuICAgICAgICAgICAgaW50IGVuZW1pZXMgPSAwO1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgZSBpbiBlbnRpdGllcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBFbnRpdHlUeXBlLmhlcm8pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuQWxpdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlcm9lcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBFbnRpdHlUeXBlLmVuZW15KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLkFsaXZlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmVtaWVzKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhlcm9lcyA9PSAwIHx8IGVuZW1pZXMgPT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIE1vdmVDaG9zZW4oTW92ZVR5cGUgbW92ZVR5cGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgZSBpbiBlbnRpdGllcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBFbnRpdHlUeXBlLmhlcm8pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBlLm1vdmVzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludCB2YWx1ZSA9IGUubW92ZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLm1vdmVzW2ldID0gKGludCkgbW92ZVR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEV4ZWN1dGVNb3ZlcygpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlKFwiYmxhXCIgKyBiYXR0bGVTdGF0ZS50dXJuLlZhbCk7XHJcbiAgICAgICAgICAgIC8vQ29uc29sZS5SZWFkKCk7XHJcbiAgICAgICAgICAgIEJhdHRsZUVudGl0eSBhdHRhY2tlciA9IGVudGl0aWVzW2JhdHRsZVN0YXRlLmFjdGluZ0VudGl0eV07XHJcbiAgICAgICAgICAgIGludCB0dXJuID0gYmF0dGxlU3RhdGUudHVybjtcclxuICAgICAgICAgICAgRXhlY3V0ZU1vdmUoYXR0YWNrZXIsIHR1cm4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRXhlY3V0ZU1vdmUoQmF0dGxlRW50aXR5IGFjdG9yLCBpbnQgdHVybilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIE1vdmVEYXRhRXhlY3V0ZXIuRXhlY3V0ZU1vdmUoYWN0b3IsIHR1cm4pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBmbG9hdCBDYWxjdWxhdGVBdHRhY2tNdWx0aXBsaWVyKEJhdHRsZUVudGl0eSBhY3RvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlRCA9IGFjdG9yLmRhbWFnZU11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBlIGluIGVudGl0aWVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAhPSBhY3RvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wb3MgPT0gYWN0b3IucG9zKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBFbnRpdHlUeXBlLnBhbmVsZWZmZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlRCAqPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBiYXNlRDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgZmxvYXQgQ2FsY3VsYXRlRGVmZW5kZXJNdWx0aXBsaWVyKEJhdHRsZUVudGl0eSBhY3RvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlRCA9IDE7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBlIGluIGVudGl0aWVzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAhPSBhY3RvcilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wb3MgPT0gYWN0b3IucG9zKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBFbnRpdHlUeXBlLnBhbmVsZWZmZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlRCAqPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBiYXNlRDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjbGFzcyBCYXR0bGVTdGF0ZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHVibGljIFZhbHVlIHR1cm4gPSBuZXcgVmFsdWUoKTtcclxuICAgICAgICAgICAgcHVibGljIGludCB0b3RhbFR1cm5zO1xyXG4gICAgICAgICAgICBwdWJsaWMgVmFsdWUgdHVybnNQZXJQaGFzZSA9IG5ldyBWYWx1ZSgpO1xyXG4gICAgICAgICAgICBwdWJsaWMgVmFsdWUgbW92ZVRpY2tfTm93ID0gbmV3IFZhbHVlKCk7XHJcbiAgICAgICAgICAgIHB1YmxpYyBpbnQgbW92ZVRpY2tfVG90YWwgPSAwO1xyXG4gICAgICAgICAgICBwdWJsaWMgaW50IGFjdGluZ0VudGl0eSA9IDA7XHJcbiAgICAgICAgICAgIHB1YmxpYyBCYXR0bGVQaGFzZSBwaGFzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjbGFzcyBCYXR0bGVFbnRpdHlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyBpbnQgbGlmZTtcclxuICAgICAgICAgICAgcHVibGljIFZlY3RvcjJEIHBvcyA9IG5ldyBWZWN0b3IyRCgpO1xyXG4gICAgICAgICAgICBwdWJsaWMgVmVjdG9yMkQgbWluUG9zID0gbmV3IFZlY3RvcjJEKCk7XHJcbiAgICAgICAgICAgIHB1YmxpYyBWZWN0b3IyRCBtYXhQb3MgPSBuZXcgVmVjdG9yMkQoKTtcclxuICAgICAgICAgICAgcHVibGljIGludFtdIG1vdmVzID0gbmV3IGludFsxMF07XHJcbiAgICAgICAgICAgIHB1YmxpYyBpbnQgZ3JhcGhpYztcclxuICAgICAgICAgICAgcHVibGljIGludCBncmFwaGljUmVwZWF0ZWRJbmRleDtcclxuICAgICAgICAgICAgcHVibGljIGZsb2F0IGRhbWFnZU11bHRpcGxpZXIgPSAxO1xyXG4gICAgICAgICAgICBpbnRlcm5hbCBib29sIGRyYXdMaWZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaW50ZXJuYWwgYm9vbCBkcmF3VHVybiA9IHRydWU7XHJcbiAgICAgICAgICAgIGludGVybmFsIGJvb2wgcmFuZG9tUG9zaXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgcHVibGljIEVsZW1lbnQgZWxlbWVudCA9IFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQuTm9uZTtcclxuICAgICAgICAgICAgaW50ZXJuYWwgaW50IG1heExpZmUgPSAzO1xyXG5cclxuICAgICAgICAgICAgcHVibGljIEVudGl0eVR5cGUgVHlwZSB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgICAgIHB1YmxpYyBWZWN0b3IyRCBQb3NpdGlvblYyRCB7IGdldCB7IHJldHVybiBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKHBvcy5YLCBwb3MuWSk7IH0gfVxyXG5cclxuICAgICAgICAgICAgcHVibGljIGJvb2wgRGVhZCB7IGdldCB7IHJldHVybiBsaWZlIDw9IDA7IH0gfVxyXG5cclxuICAgICAgICAgICAgcHVibGljIGJvb2wgQWxpdmUgeyBnZXQgeyByZXR1cm4gIXRoaXMuRGVhZDsgfSB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGVudW0gTW92ZVR5cGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERvTm90aGluZyxcclxuICAgICAgICAgICAgTW92ZVVwLFxyXG4gICAgICAgICAgICBNb3ZlTGVmdCxcclxuICAgICAgICAgICAgTW92ZURvd24sXHJcbiAgICAgICAgICAgIE1vdmVSaWdodCxcclxuICAgICAgICAgICAgTm9ybWFsU2hvdCxcclxuICAgICAgICAgICAgRmlyZSxcclxuICAgICAgICAgICAgSWNlLFxyXG4gICAgICAgICAgICBUaHVuZGVyLFxyXG4gICAgICAgICAgICBJY2VCb21iLFxyXG4gICAgICAgICAgICBUaHVuZGVyQm9tYixcclxuICAgICAgICAgICAgU3VtbW9uRW50aXR5XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZW51bSBIYXBwVGFnXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBBdHRhY2tIaXQsXHJcbiAgICAgICAgICAgIEF0dGFja01pc3MsXHJcbiAgICAgICAgICAgIERhbWFnZVRha2VuLFxyXG4gICAgICAgICAgICBNb3ZlbWVudEZhaWxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBlbnVtIEJhdHRsZVBoYXNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbmVteU1vdmVDaG9pY2UsXHJcbiAgICAgICAgICAgIEhhbmRSZWNoYXJnZSxcclxuICAgICAgICAgICAgUGlja0hhbmRzLFxyXG4gICAgICAgICAgICBFeGVjdXRlTW92ZSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBlbnVtIEVudGl0eVR5cGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlcm8sIGVuZW15LCBwaWNrdXAsIHBhbmVsZWZmZWN0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZW51bSBFbGVtZW50XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBGaXJlLCBJY2UsIFRodW5kZXIsXHJcbiAgICAgICAgICAgIE5vbmVcclxuICAgICAgICB9XHJcblxuICAgIFxucHJpdmF0ZSBpbnQgX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX0JvYXJkV2lkdGg9Njtwcml2YXRlIGludCBfX1Byb3BlcnR5X19Jbml0aWFsaXplcl9fQm9hcmRIZWlnaHQ9Mzt9XHJcblxyXG5cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgVmFsdWVcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgZmxvYXQgVmFsIHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIEVudW0gdmFsQXNFbnVtIHsgc2V0IHsgVmFsID0gQ29udmVydC5Ub1NpbmdsZSh2YWx1ZSk7IH0gfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFNldChpbnQgdilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFZhbCA9IHY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIFZhbHVlIG9wZXJhdG9yICsoVmFsdWUgYzEsIGZsb2F0IGMyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYzEuVmFsICs9IGMyO1xyXG4gICAgICAgICAgICByZXR1cm4gYzE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGZsb2F0IG9wZXJhdG9yIC0oVmFsdWUgYzEsIGZsb2F0IGMyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGMxLlZhbCAtIGMyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIG9wZXJhdG9yID09KFZhbHVlIGMxLCBWYWx1ZSBjMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJvb2wgYzJudWxsID0gb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhjMiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGJvb2wgYzFudWxsID0gb2JqZWN0LlJlZmVyZW5jZUVxdWFscyhjMSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGlmIChjMm51bGwgJiYgYzFudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjMW51bGwgfHwgYzJudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGMxLlZhbCA9PSBjMi5WYWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgb3BlcmF0b3IgIT0oVmFsdWUgYzEsIFZhbHVlIGMyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYm9vbCBjMm51bGwgPSBvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGMyLCBudWxsKTtcclxuICAgICAgICAgICAgYm9vbCBjMW51bGwgPSBvYmplY3QuUmVmZXJlbmNlRXF1YWxzKGMxLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKGMybnVsbCAmJiBjMW51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChjMW51bGwgfHwgYzJudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYzEuVmFsICE9IGMyLlZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW1wbGljaXQgb3BlcmF0b3IgZmxvYXQoVmFsdWUgZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBkLlZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW1wbGljaXQgb3BlcmF0b3IgaW50KFZhbHVlIGQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGludClkLlZhbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGNsYXNzIEJhdHRsZVJlc3VsdFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBpbnQgcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdHJ1Y3QgQmF0dGxlQmFzaWNDb25maWdcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IG5FbmVtaWVzO1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgblR1cm5zO1xyXG5cclxuICAgICAgICBwdWJsaWMgQmF0dGxlQmFzaWNDb25maWcoaW50IG5FbmVtaWVzLCBpbnQgblR1cm5zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5uRW5lbWllcyA9IG5FbmVtaWVzO1xyXG4gICAgICAgICAgICB0aGlzLm5UdXJucyA9IG5UdXJucztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0cnVjdCBJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBJbnB1dFR5cGUgdHlwZTtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IGFyZzE7XHJcblxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIElucHV0KElucHV0VHlwZSB0eXBlLCBpbnQgYXJnMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuYXJnMSA9IGFyZzE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgSW5wdXQoSW5wdXRUeXBlIHR5cGUsIEVudW0gYXJnMSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuYXJnMSA9IENvbnZlcnQuVG9JbnQzMihhcmcxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVudW0gSW5wdXRUeXBlXHJcbiAgICB7XHJcbiAgICAgICAgTm9uZSwgTW92ZSwgTWlzY0JhdHRsZVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIE1pc2NCYXR0bGVJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIERvbmUsIFJlZG9cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBQaWRyb2guRUNTO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIEJhdHRsZVNldHVwXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIEVDU01hbmFnZXIgZWNzO1xyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVNYWluIGJhdHRsZU1haW47XHJcbiAgICAgICAgcHVibGljIFRpbWVTdGFtcCB0aW1lU3RhbXA7XHJcblxyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVTZXR1cChpbnQgbW9kZSwgQmF0dGxlQmFzaWNDb25maWcgYmF0dGxlQmFzaWNDb25maWcsIGludCBkaWZmaWN1bHR5LCBFQ1NNYW5hZ2VyIGVjcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZWNzID0gZWNzO1xyXG4gICAgICAgICAgICB0aW1lU3RhbXAgPSBuZXcgVGltZVN0YW1wKCk7XHJcbiAgICAgICAgICAgIGJhdHRsZU1haW4gPSBuZXcgQmF0dGxlTWFpbihtb2RlLCBlY3MsIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgIHZhciBtY3AgPSBuZXcgTW92ZUNyZWF0b3JQcm9nKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RhZ2VzID0gZWNzLlF1aWNrQWNjZXNzb3IxPFN0YWdlRGF0YT4oKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaXhlZEF0dGFjayA9IHN0YWdlcy5FbnRpdHkoZGlmZmljdWx0eSkuR2V0Q29tcG9uZW50PEZpeGVkQXR0YWNrU3RhZ2U+KCk7XHJcbiAgICAgICAgICAgIHZhciBwbGF5ZXJIYW5kUG9vbCA9IGJhdHRsZU1haW4ucGxheWVySGFuZFBvb2w7XHJcbiAgICAgICAgICAgIGlmIChmaXhlZEF0dGFjayAhPSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIGZpeGVkQXR0YWNrLm1vdmVzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYXllckhhbmRQb29sLkFkZCgoQmF0dGxlTWFpbi5Nb3ZlVHlwZSlpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBsYXllckhhbmRQb29sLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLkZpcmUpO1xyXG4gICAgICAgICAgICAgICAgcGxheWVySGFuZFBvb2wuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuSWNlKTtcclxuICAgICAgICAgICAgICAgIHBsYXllckhhbmRQb29sLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBzdGFnZSA9IHN0YWdlcy5Db21wMShkaWZmaWN1bHR5KTtcclxuICAgICAgICAgICAgdmFyIGVubXlzID0gc3RhZ2UuZW5lbXlTcGF3bnM7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIGVubXlzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlY3MuQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYmF0dGxlTWFpbi5Nb3ZlRGF0YUV4ZWN1dGVyID0gbmV3IE1vdmVEYXRhRXhlY3V0ZXIoYmF0dGxlTWFpbiwgbWNwLm1vdmVEYXRhcywgZWNzLCB0aW1lU3RhbXApO1xyXG5cclxuICAgICAgICAgICAgTGlzdDxzdHJpbmc+IGVudGl0eVJlbmRlclRleHRzID0gbmV3IExpc3Q8c3RyaW5nPigpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVuZW15RGF0YXMgPSBuZXcgRW5lbXlEYXRhQ3JlYXRvcihlbnRpdHlSZW5kZXJUZXh0cyxtY3ApLmVuZW15RGF0YXM7XHJcbiAgICAgICAgICAgIHZhciBiYXR0bGVTdGF0ZSA9IGJhdHRsZU1haW4uYmF0dGxlU3RhdGU7XHJcblxyXG4gICAgICAgICAgICBiYXR0bGVNYWluLkJhc2ljQ29uZmlnKGJhc2ljQ29uZmlnOmJhdHRsZUJhc2ljQ29uZmlnKTtcclxuICAgICAgICAgICAgYmF0dGxlTWFpbi5CYXR0bGVDb25maWd1cmUoc3RhZ2UuYmF0dGxlQ29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbmVteUZhY3RvcnkgPSBuZXcgU3Bhd25FbnRpdHlGYWN0b3J5KGVjcywgZW5lbXlEYXRhcywgYmF0dGxlTWFpbik7XHJcbiAgICAgICAgICAgIGJhdHRsZU1haW4uZWNzSW50ZWcgPSBuZXcgRUNTSW50ZWdyYXRpb24oZW5lbXlGYWN0b3J5LCBlY3MpO1xyXG4gICAgICAgICAgICAvL2JhdHRsZU1haW4uRW5lbXlGYWN0b3J5ID0gZW5lbXlGYWN0b3J5O1xyXG5cclxuICAgICAgICAgICAgdmFyIGVuZW15QWlzID0gZWNzLlF1aWNrQWNjZXNzb3IyPEVuZW15QUksIEJhdHRsZU1haW4uQmF0dGxlRW50aXR5PigpO1xyXG4gICAgICAgICAgICB2YXIgZW5lbXlBaVN0YXRlbGVzcyA9IGVjcy5DcmVhdGVBY2Nlc3NvcihuZWNlc3Nhcnk6IG5ldyBUeXBlW10geyB0eXBlb2YoRW5lbXlBSSkgfSwgbm90OiBuZXcgVHlwZVtdIHsgdHlwZW9mKEVuZW15QUlTdGF0ZSkgfSk7XHJcbiAgICAgICAgICAgIGJhdHRsZU1haW4uRW5lbXlHZW5lcmF0ZU1vdmVzID0gKCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGVuZW15QWlTdGF0ZWxlc3MuTGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteUFpU3RhdGVsZXNzLkdldCgwKS5BZGRDb21wb25lbnQ8RW5lbXlBSVN0YXRlPigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgZW5lbXlBaXMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFpID0gZW5lbXlBaXMuQ29tcDEoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhdHRsZXIgPSBlbmVteUFpcy5Db21wMihpKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWlTdGF0ZSA9IGVuZW15QWlzLkVudGl0eShpKS5HZXRDb21wb25lbnQ8RW5lbXlBSVN0YXRlPigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb3ZlcyA9IGFpLm1vdmVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSAwOyBqIDwgYmF0dGxlU3RhdGUudHVybnNQZXJQaGFzZTsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IGFpUHJvID0gKGorIGFpU3RhdGUucHJvZ3Jlc3MpICUgbW92ZXMuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb3ZlID0gbW92ZXNbYWlQcm9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW92ZSBpcyBNb3ZlVXNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmF0dGxlci5tb3Zlc1tqXSA9IChtb3ZlIGFzIE1vdmVVc2UpLm1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iZS5tb3Zlc1tqXSA9IDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYWlTdGF0ZS5wcm9ncmVzcyArPSBiYXR0bGVTdGF0ZS50dXJuc1BlclBoYXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAvLy8gZGF0YSB0aGF0IHdpbGwgYmUgYSBwYXJ0IG9mIHN0YWdlZGF0YSBzbyBlYWNoIHN0YWdlIGNhbiBoYXZlIGl0J3MgY29uZmlnXHJcbiAgICAvLy8gSXQgd2lsbCBhbHNvIGJlIGNvbnRhaW5lZCBpbiBiYXR0bGVtYWluLlxyXG4gICAgLy8vIFNob3VsZCBiZSBzdGF0aWMsIG9uY2UgY3JlYXRlZC5cclxuICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICBwdWJsaWMgY2xhc3MgQmF0dGxlQ29uZmlnXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IExpc3Q8aW50PiBlbmVtaWVzVG9TdW1tb24gPW5ldyBMaXN0PGludD4oKTtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgYm9vbCBuZWVkS2lsbEFsbEVuZW1pZXMgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVDb25maWcoaW50W10gZW5lbWllc1RvU3VtbW9uKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5lbmVtaWVzVG9TdW1tb24uQWRkUmFuZ2UoZW5lbWllc1RvU3VtbW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVDb25maWcoYm9vbCBuZWVkS2lsbEFsbEVuZW1pZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm5lZWRLaWxsQWxsRW5lbWllcyA9IG5lZWRLaWxsQWxsRW5lbWllcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDb2xvclN0dWZmXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc3RyaW5nIEdvb2RNYWluO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgc3RyaW5nIG5ldXRyYWxEYXJrID0gXCIjMTkwMTNiXCI7XHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgbmV1dHJhbFN0cm9uZyA9IFwiIzJjM2U0M1wiO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHN0cmluZyBHb29kU3ViO1xyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHN0cmluZyBFdmlsTWFpbjtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIHN0cmluZ1tdIGNvbG9ycyA9IG5ldyBzdHJpbmdbMjBdO1xyXG5cclxuICAgICAgICBzdGF0aWMgQ29sb3JTdHVmZigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGNvbG9ycy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzW2ldID0gXCIjMUExQTFBXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9jb2xvcnNbQ29sb3JzLkhlcm9dID0gXCIjMDA5YzhkXCI7XHJcbiAgICAgICAgICAgIC8vY29uc3Qgc3RyaW5nIGhlcm9TdWIgPSBcIiMwMDVmOTFcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQ29sb3JzLkhlcm9UdXJuXSA9IGhlcm9TdWI7XHJcbiAgICAgICAgICAgIC8vY29sb3JzW0NvbG9ycy5FbmVteV0gPSBcIiNmZjAzNTNcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQ29sb3JzLkdyaWRIZXJvXSA9IGhlcm9TdWI7XHJcbiAgICAgICAgICAgIC8vY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuR3JpZEVuZW15XSA9IFwiIzhlMDA2MFwiO1xyXG4gICAgICAgICAgICAvL2NvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLkVuZW15VHVybl0gPSBcIiM4ZTAwNjBcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5Cb2FyZF0gPSBcIiMxZTQ4NmVcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5pbnB1dEtleV0gPSBcIiM2ODg2OTBcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5XaW5kb3dMYWJlbF0gPSBcIiMxZTQ4NmVcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5GaXJlQXVyYV0gPSBcIiM3OTMxMDBcIjtcclxuICAgICAgICAgICAgLy9jb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5JY2VBdXJhXSA9IFwiIzAwNTU5MFwiO1xyXG4gICAgICAgICAgICAvL2NvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLlRodW5kZXJBdXJhXSA9IFwiIzAwNTgzZFwiO1xyXG5cclxuICAgICAgICAgICAgY29sb3JzW1BpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkhlcm9dID0gXCIjOGFkODk2XCI7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZyBoZXJvU3ViID0gXCIjNGM2ZDUwXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5IZXJvVHVybl0gPSBoZXJvU3ViO1xyXG4gICAgICAgICAgICBjb2xvcnNbUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuRW5lbXldID0gXCIjZmY3Njk0XCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVyb10gPSBoZXJvU3ViO1xyXG4gICAgICAgICAgICBjb25zdCBzdHJpbmcgZW5lbXlzdWIgPSBcIiNhNzQ2NGZcIjtcclxuICAgICAgICAgICAgY29sb3JzW1BpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkdyaWRFbmVteV0gPSBlbmVteXN1YjtcclxuICAgICAgICAgICAgY29sb3JzW1BpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkVuZW15VHVybl0gPSBlbmVteXN1YjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuQm9hcmRdID0gXCIjMWU0ODZlXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLmlucHV0S2V5XSA9IFwiIzY4ODY5MFwiO1xyXG4gICAgICAgICAgICBjb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5XaW5kb3dMYWJlbF0gPSBcIiMxZTQ4NmVcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuRmlyZUF1cmFdID0gXCIjNzkzMTAwXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLkljZUF1cmFdID0gXCIjMDA1NTkwXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLlRodW5kZXJBdXJhXSA9IFwiIzAwNTgzZFwiO1xyXG4gICAgICAgICAgICBjb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5GaXJlU2hvdF0gPSBcIiNmODJiMzZcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuSWNlU2hvdF0gPSBcIiMwMDdlZmZcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuVGh1bmRlclNob3RdID0gXCIjYTM3YzAwXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tCYXR0bGVSZW5kZXIuQ29sb3JzLkJhY2tncm91bmRJbnB1dF0gPSBcIiMwODA4MDhcIjtcclxuXHJcblxyXG4gICAgICAgICAgICBjb2xvcnNbQmF0dGxlUmVuZGVyLkNvbG9ycy5pbnB1dEtleV0gPSBcIiM5RTg2NjRcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuSW5wdXREZXNjcmlwdGlvbl0gPSBcIiM4MDgwODBcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuQmFja0JhdHRsZV0gPSBcIiMwMDAwMDBcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuQmFja2dyb3VuZElucHV0XSA9IFwiIzFBMUExQVwiO1xyXG4gICAgICAgICAgICBjb2xvcnNbUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuSGVyb1R1cm5dID0gXCIjMDBCMkIyXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5FbmVteVR1cm5dID0gXCIjRkYwMDQwXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkRW5lbXldID0gXCIjMDA0NjhDXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVyb10gPSBcIiM4QzAwMjNcIjtcclxuICAgICAgICAgICAgY29sb3JzW1BpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkhlcm9dID0gXCIjNjZGRkZGXCI7XHJcbiAgICAgICAgICAgIGNvbG9yc1tQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5FbmVteV0gPSBcIiNEOTAwMzZcIjtcclxuICAgICAgICAgICAgY29sb3JzW0JhdHRsZVJlbmRlci5Db2xvcnMuV2luZG93TGFiZWxdID0gXCIjNjY2NjY2XCI7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuRGVidWdFeHRyYVxyXG57XHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIERlYnVnRXhcclxuICAgIHtcclxuICAgICAgICBzdGF0aWMgTGlzdDxzdHJpbmc+IG1lc3NhZ2VzID0gbmV3IExpc3Q8c3RyaW5nPigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgTG9nKHN0cmluZyB2KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbWVzc2FnZXMuQWRkKHYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNob3coKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQ29uc29sZS5DbGVhcigpO1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgaXRlbSBpbiBtZXNzYWdlcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQ29uc29sZS5Xcml0ZUxpbmUoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBDb25zb2xlLlJlYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgUGlkcm9oLkVDUztcclxudXNpbmcgU3lzdGVtO1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcbiAgICBpbnRlcm5hbCBjbGFzcyBFQ1NJbnRlZ3JhdGlvblxyXG4gICAge1xyXG5cclxuICAgICAgICBTcGF3bkVudGl0eUZhY3RvcnkgZW5lbXlGYWN0b3J5O1xyXG4gICAgICAgIEVDU01hbmFnZXIgZWNzO1xyXG5cclxuICAgICAgICBwdWJsaWMgRUNTSW50ZWdyYXRpb24oU3Bhd25FbnRpdHlGYWN0b3J5IGVuZW15RmFjdG9yeSwgRUNTTWFuYWdlciBlY3MpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15RmFjdG9yeSA9IGVuZW15RmFjdG9yeTtcclxuICAgICAgICAgICAgdGhpcy5lY3MgPSBlY3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIEhlcm9DcmVhdGVkKEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IGhlcm8pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgU3Bhd25FbmVtaWVzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGVuZW15RmFjdG9yeS5TcGF3bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgRW5lbXlBSVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBMaXN0PG9iamVjdD4gbW92ZXMgPSBuZXcgTGlzdDxvYmplY3Q+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEVuZW15QUlTdGF0ZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBpbnQgcHJvZ3Jlc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIExvb3BcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTGlzdDxvYmplY3Q+IGFjdGlvbnMgPSBuZXcgTGlzdDxvYmplY3Q+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIE1vdmVVc2VcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IG1vdmU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBNb3ZlVXNlKGludCBtb3ZlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlID0gbW92ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iLCJ1c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBQaWRyb2guRUNTO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFNwYXduRW50aXR5RmFjdG9yeVxyXG4gICAge1xyXG5cclxuICAgICAgICBFQ1NNYW5hZ2VyIGVjcztcclxuICAgICAgICBMaXN0PEVuZW15RGF0YT4gZW5lbXlEYXRhcztcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IEJhdHRsZU1haW4gYmF0dGxlTWFpbjtcclxuICAgICAgICBwcml2YXRlIFF1aWNrQWNjZXNzb3JPbmU8U3Bhd25EYXRhPiBzcGF3bnM7XHJcblxyXG4gICAgICAgIHB1YmxpYyBTcGF3bkVudGl0eUZhY3RvcnkoRUNTTWFuYWdlciBlY3MsIExpc3Q8RW5lbXlEYXRhPiBlbmVteURhdGFzLCBCYXR0bGVNYWluIGJhdHRsZU1haW4pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVjcyA9IGVjcztcclxuICAgICAgICAgICAgLy9lY3MuUXVpY2tBY2Nlc3NvcjE8RW5lbXlEYXRhPigpO1xyXG4gICAgICAgICAgICBzcGF3bnMgPSBlY3MuUXVpY2tBY2Nlc3NvcjE8U3Bhd25EYXRhPigpO1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15RGF0YXMgPSBlbmVteURhdGFzO1xyXG4gICAgICAgICAgICB0aGlzLmJhdHRsZU1haW4gPSBiYXR0bGVNYWluO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU3Bhd24oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50IHNwYXduZWQgPSAwO1xyXG4gICAgICAgICAgICAvL2ZvciAoaW50IGkgPSAwOyBpIDwgc3Bhd25zLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHdoaWxlIChzcGF3bnMuQ291bnQgPiAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBTcGF3bkRhdGEgc3Bhd24gPSBzcGF3bnMuQ29tcDEoMCk7XHJcbiAgICAgICAgICAgICAgICBzcGF3bnMuRW50aXR5KDApLlJlbW92ZUNvbXBvbmVudChzcGF3bik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBzcGF3bi5pZDtcclxuICAgICAgICAgICAgICAgIEJhdHRsZU1haW4uRW50aXR5VHlwZSBlbnRUeXBlID0gKEJhdHRsZU1haW4uRW50aXR5VHlwZSlzcGF3bi5lbnRpdHlUeXBlO1xyXG4gICAgICAgICAgICAgICAgaWYoZW50VHlwZSA9PSBCYXR0bGVNYWluLkVudGl0eVR5cGUucGlja3VwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZSA9IGJhdHRsZU1haW4uTmV3QmF0dGxlRW50aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmUuVHlwZSA9IGVudFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgUGlja3VwSW5mbyBwaWNrdXAgPSBuZXcgUGlja3VwSW5mbyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGlja3VwRSA9IGVjcy5DcmVhdGVFbnRpdHlXaXRoQ29tcG9uZW50KHBpY2t1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGlja3VwRS5BZGRDb21wb25lbnQoYmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlLnBvcyA9IHNwYXduLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlLmxpZmUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlLm1heExpZmUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlLmRyYXdMaWZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYmUuZHJhd1R1cm4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBiZS5ncmFwaGljID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlbnRUeXBlID09IEJhdHRsZU1haW4uRW50aXR5VHlwZS5lbmVteSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW5lbXlBSSA9IGVuZW15RGF0YXNbaWRdLmVuZW15QUk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZW15ID0gZWNzLkNyZWF0ZUVudGl0eVdpdGhDb21wb25lbnQoZW5lbXlBSSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJlID0gYmF0dGxlTWFpbi5OZXdCYXR0bGVFbnRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBiZS5wb3MgPSBzcGF3bi5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBiZS5saWZlID0gZW5lbXlEYXRhc1tpZF0uaHA7XHJcbiAgICAgICAgICAgICAgICAgICAgYmUubWF4TGlmZSA9IGJlLmxpZmU7XHJcbiAgICAgICAgICAgICAgICAgICAgYmUuZ3JhcGhpYyA9IGVuZW15RGF0YXNbaWRdLnJlbmRlcjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXRpZXMgPSBiYXR0bGVNYWluLmVudGl0aWVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIGVudGl0aWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gIT0gYmUgJiYgaXRlbS5ncmFwaGljID09IGJlLmdyYXBoaWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlLmdyYXBoaWNSZXBlYXRlZEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmUubWluUG9zID0gbmV3IFZlY3RvcjJEKDMsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJlLm1heFBvcyA9IG5ldyBWZWN0b3IyRCg1LCAyKTtcclxuICAgICAgICAgICAgICAgICAgICBiZS5UeXBlID0gQmF0dGxlTWFpbi5FbnRpdHlUeXBlLmVuZW15O1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZW15LkFkZENvbXBvbmVudChiZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRW5lbXlBSVN0YXRlIGVuZW15QWlTdGF0ZSA9IG5ldyBFbmVteUFJU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbmVteUFpU3RhdGUucHJvZ3Jlc3MgPSBzcGF3bmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZW15LkFkZENvbXBvbmVudChlbmVteUFpU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIlNQQVdOXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwYXduZWQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgUGlja3VwSW5mb1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBib29sIG5lY2Vzc2FyeUZvclZpY3Rvcnk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBQaWNrdXBJbmZvKGJvb2wgbmVjZXNzYXJ5Rm9yVmljdG9yeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubmVjZXNzYXJ5Rm9yVmljdG9yeSA9IG5lY2Vzc2FyeUZvclZpY3Rvcnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBFbmVteURhdGFcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgRW5lbXlBSSBlbmVteUFJO1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgaHA7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGludCByZW5kZXI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBFbmVteURhdGEoRW5lbXlBSSBlbmVteUFJLCBpbnQgaHAsIGludCByZW5kZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVuZW15QUkgPSBlbmVteUFJO1xyXG4gICAgICAgICAgICB0aGlzLmhwID0gaHA7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyID0gcmVuZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgRW5lbXlEYXRhQ3JlYXRvclxyXG4gICAge1xyXG4gICAgICAgIExpc3Q8c3RyaW5nPiByZW5kZXJUZXh0cztcclxuICAgICAgICBwdWJsaWMgTGlzdDxFbmVteURhdGE+IGVuZW15RGF0YXMgPSBuZXcgTGlzdDxFbmVteURhdGE+KCk7XHJcbiAgICAgICAgTW92ZUNyZWF0b3JQcm9nIG1vdmVDcmVhdG9yUHJvZztcclxuXHJcbiAgICAgICAgcHVibGljIEVuZW15RGF0YUNyZWF0b3IoTGlzdDxzdHJpbmc+IHJlbmRlclRleHRzLCBNb3ZlQ3JlYXRvclByb2cgbW92ZUNyZWF0b3JQcm9nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJUZXh0cyA9IHJlbmRlclRleHRzO1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVDcmVhdG9yUHJvZyA9IG1vdmVDcmVhdG9yUHJvZztcclxuICAgICAgICAgICAgQWRkRW5lbXkoYWk6IEFjdGlvbnMoXHJcbiAgICAgICAgICAgICAgICBNb3ZlcyhQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlTGVmdCxQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlRG93biwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuRmlyZSwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZVJpZ2h0LCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlVXAsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXIpXHJcbiAgICAgICAgICAgICAgICApLCBocDoyLCByZW5kZXJUZXh0OlwiJVwiKTtcclxuICAgICAgICAgICAgQWRkRW5lbXkoYWk6IEFjdGlvbnMoXHJcbiAgICAgICAgICAgICAgICBNb3ZlcyhQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5JY2VCb21iLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Eb05vdGhpbmcsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLkRvTm90aGluZylcclxuICAgICAgICAgICAgICAgICksIGhwOiAzLCByZW5kZXJUZXh0OiBcIiNcIik7XHJcbiAgICAgICAgICAgIEFkZEVuZW15KGFpOiBBY3Rpb25zKFxyXG4gICAgICAgICAgICAgICBNb3ZlcyhcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLkljZUJvbWIsXHJcbiAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlTGVmdCxcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXJCb21iLFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGVcclxuLk1vdmVSaWdodFxyXG4gICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICApLCBocDogNiwgcmVuZGVyVGV4dDogXCImXCIpO1xyXG4gICAgICAgICAgICBBZGRFbmVteShhaTogQWN0aW9ucyhcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuSWNlQm9tYixcclxuICAgICAgICAgICAgICAgICAgIFwiU3VtbW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlTGVmdCxcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXJCb21iLFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZVJpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGVcclxuLkZpcmVcclxuXHJcblxyXG4gICAgICAgICAgICAgICApLCBocDogNDUsIHJlbmRlclRleHQ6IFwiJFwiKTtcclxuICAgICAgICAgICAgQWRkRW5lbXkoYWk6IEFjdGlvbnMoXHJcblxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZVVwLFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZUxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlUmlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlRG93bixcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLk1vdmVMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZURvd24sXHJcbiAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZVxyXG4uTW92ZVVwXHJcblxyXG5cclxuICAgICAgICAgICAgICAgKSwgaHA6IDMsIHJlbmRlclRleHQ6IFwiSFwiKTtcclxuICAgICAgICAgICAgQWRkRW5lbXkoYWk6IEFjdGlvbnMoXHJcblxyXG4gICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuSWNlLFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuRG9Ob3RoaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGVcclxuLkRvTm90aGluZ1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICApLCBocDogMywgcmVuZGVyVGV4dDogXCJKXCIpO1xyXG4gICAgICAgICAgICBBZGRFbmVteShhaTogQWN0aW9ucyhcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLkRvTm90aGluZyxcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlXHJcbi5Eb05vdGhpbmdcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgKSwgaHA6IDMsIHJlbmRlclRleHQ6IFwiTFwiKTtcclxuICAgICAgICAgICAgQWRkRW5lbXkoYWk6IEFjdGlvbnMoXHJcblxyXG4gICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUuRmlyZSxcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlLkRvTm90aGluZyxcclxuICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlXHJcbi5Eb05vdGhpbmdcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgKSwgaHA6IDMsIHJlbmRlclRleHQ6IFwiS1wiKTtcclxuICAgICAgICAgICAgLy9BZGRFbmVteShhaTogQWN0aW9ucygpLCBocDogMywgcmVuZGVyVGV4dDogXCIkXCIpO1xyXG4gICAgICAgICAgICAvL0FkZEVuZW15KGFpOiBBY3Rpb25zKCksIGhwOiA1LCByZW5kZXJUZXh0OiBcIiNcIik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBFbmVteUFJIEFjdGlvbnMocGFyYW1zIG9iamVjdFtdIG9icylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBhaSA9IG5ldyBFbmVteUFJKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgbyBpbiBvYnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChvIGlzIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGFpLm1vdmVzLkFkZChuZXcgTW92ZVVzZSgoaW50KW8pKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvIGlzIHN0cmluZylcclxuICAgICAgICAgICAgICAgIHsgICBcclxuICAgICAgICAgICAgICAgICAgICBhaS5tb3Zlcy5BZGQobmV3IE1vdmVVc2UobW92ZUNyZWF0b3JQcm9nLkdldE1vdmVJZChvIGFzIHN0cmluZykpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvIGlzIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlW10pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gbyBhcyBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZVtdKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWkubW92ZXMuQWRkKG5ldyBNb3ZlVXNlKChpbnQpaXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFpLm1vdmVzLkFkZChvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYWk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlW10gTW92ZXMocGFyYW1zIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlW10gbW92ZXMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQWRkRW5lbXkoRW5lbXlBSSBhaSwgaW50IGhwLCBzdHJpbmcgcmVuZGVyVGV4dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCByZW5kZXIgPSByZW5kZXJUZXh0cy5Db3VudDtcclxuICAgICAgICAgICAgcmVuZGVyVGV4dHMuQWRkKHJlbmRlclRleHQpO1xyXG4gICAgICAgICAgICBlbmVteURhdGFzLkFkZChuZXcgRW5lbXlEYXRhKGFpLCBocCwgcmVuZGVyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5CYXNlVXRpbHM7XHJcbnVzaW5nIFBpZHJvaC5FQ1M7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFN0YWdlRGF0YUNyZWF0b3JcclxuICAgIHtcclxuICAgICAgICAvL3B1YmxpYyBMaXN0PFN0YWdlRGF0YT4gc3RhZ2VzID0gbmV3IExpc3Q8U3RhZ2VEYXRhPigpO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgRUNTTWFuYWdlciBlY3M7XHJcblxyXG4gICAgICAgIHB1YmxpYyBTdGFnZURhdGFDcmVhdG9yKEVDU01hbmFnZXIgZWNzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5lY3MgPSBlY3M7XHJcbiAgICAgICAgICAgIEFkZChuZXcgU3RhZ2VEYXRhKFxyXG4gICAgICAgICAgICAgICAgLy9FbmVteSgwLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDQsIDApKSxcclxuICAgICAgICAgICAgICAgIFBpY2t1cCgwLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDAsIDApKSxcclxuICAgICAgICAgICAgICAgIFBpY2t1cCgwLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDIsIDIpKVxyXG4gICAgICAgICAgICAgICAgKS5IaWRlTGlmZVVJKCksIG5ldyBGaXhlZEF0dGFja1N0YWdlKCkpO1xyXG4gICAgICAgICAgICBBZGQobmV3IFN0YWdlRGF0YShcclxuICAgICAgICAgICAgICAgIC8vRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg0LCAwKSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQmF0dGxlQ29uZmlnKG5lZWRLaWxsQWxsRW5lbWllczpmYWxzZSksXHJcbiAgICAgICAgICAgICAgICBQaWNrdXAoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCgyLCAxKSksXHJcbiAgICAgICAgICAgICAgICBQaWNrdXAoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCgwLCAyKSksXHJcbiAgICAgICAgICAgICAgICBFbmVteSg0LCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDUsIDEpKVxyXG4gICAgICAgICAgICAgICAgKS5IaWRlTGlmZVVJKCksIG5ldyBGaXhlZEF0dGFja1N0YWdlKCkpO1xyXG4gICAgICAgICAgICBBZGQobmV3IFN0YWdlRGF0YShcclxuICAgICAgICAgICAgICAgIC8vRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg0LCAwKSksXHJcbiAgICAgICAgICAgICAgICBuZXcgQmF0dGxlQ29uZmlnKG5lZWRLaWxsQWxsRW5lbWllczogZmFsc2UpLFxyXG4gICAgICAgICAgICAgICAgUGlja3VwKDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMiwgMikpLFxyXG4gICAgICAgICAgICAgICAgUGlja3VwKDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMSwgMikpLFxyXG4gICAgICAgICAgICAgICAgUGlja3VwKDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMCwgMikpLFxyXG4gICAgICAgICAgICAgICAgRW5lbXkoNSwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg1LCAyKSlcclxuICAgICAgICAgICAgICAgICksIG5ldyBGaXhlZEF0dGFja1N0YWdlKCkpO1xyXG4gICAgICAgICAgICBBZGQobmV3IFN0YWdlRGF0YShcclxuICAgICAgICAgICAgICAgIC8vRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg0LCAwKSksXHJcbiAgICAgICAgICAgICAgICBFbmVteSg2LCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDUsIDApKVxyXG4gICAgICAgICAgICAgICAgKSwgbmV3IEZpeGVkQXR0YWNrU3RhZ2UoXHJcbiAgICAgICAgICAgICAgICAgICAgKGludClCYXR0bGVNYWluLk1vdmVUeXBlLkZpcmUpKTtcclxuICAgICAgICAgICAgQWRkKG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgIC8vRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg0LCAwKSksXHJcbiAgICAgICAgICAgICAgIEVuZW15KDQsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNCwgMSkpXHJcbiAgICAgICAgICAgICAgICksIG5ldyBGaXhlZEF0dGFja1N0YWdlKFxyXG4gICAgICAgICAgICAgICAgICAgKGludClCYXR0bGVNYWluLk1vdmVUeXBlLkZpcmUpKTtcclxuICAgICAgICAgICAgQWRkKG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgIC8vRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg0LCAwKSksXHJcbiAgICAgICAgICAgICAgIEVuZW15KDUsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNCwgMSkpXHJcbiAgICAgICAgICAgICAgICksIG5ldyBGaXhlZEF0dGFja1N0YWdlKFxyXG4gICAgICAgICAgICAgICAgICAgKGludClCYXR0bGVNYWluLk1vdmVUeXBlLkZpcmUpKTtcclxuICAgICAgICAgICAgQWRkKG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgLy9FbmVteSgwLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDQsIDApKSxcclxuICAgICAgICAgICAgICBFbmVteSg1LCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDQsIDEpKSxcclxuICAgICAgICAgICAgICBFbmVteSg3LCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDMsIDApKVxyXG4gICAgICAgICAgICAgICksIG5ldyBGaXhlZEF0dGFja1N0YWdlKFxyXG4gICAgICAgICAgICAgICAgICAoaW50KUJhdHRsZU1haW4uTW92ZVR5cGUuRmlyZSwgKGludClCYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXIgKSk7XHJcbiAgICAgICAgICAgIEFkZChcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgbmV3IFN0YWdlRGF0YShcclxuICAgICAgICAgICAgICAgIEVuZW15KDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMywgMCkpLFxyXG4gICAgICAgICAgICAgICAgRW5lbXkoMCwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg1LCAyKSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICxcclxuICAgICAgICAgICAgICAgIG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgICBFbmVteSgxLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDMsIDIpKSxcclxuICAgICAgICAgICAgICAgIEVuZW15KDIsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNSwgMSkpXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAsXHJcbiAgICAgICAgICAgICAgICAgbmV3IFN0YWdlRGF0YShcclxuICAgICAgICAgICAgICAgIEVuZW15KDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNCwgMSkpLFxyXG4gICAgICAgICAgICAgICAgRW5lbXkoMSwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg1LCAxKSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICxcclxuICAgICAgICAgICAgICAgIG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgICBFbmVteSgwLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDMsIDIpKSxcclxuICAgICAgICAgICAgICAgIEVuZW15KDIsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMywgMSkpLFxyXG4gICAgICAgICAgICAgICAgRW5lbXkoMiwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg1LCAxKSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICxcclxuICAgICAgICAgICAgICAgIG5ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJhdHRsZUNvbmZpZyhuZXcgaW50W10geyAxIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIEVuZW15KDMsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNCwgMSkpXHJcbiAgICAgICAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgICAgICAgLy8sXHJcblxyXG4gICAgICAgICAgICAgICAgLy8sXHJcbiAgICAgICAgICAgICAgICAvL25ldyBTdGFnZURhdGEoXHJcbiAgICAgICAgICAgICAgICAvL25ldyBFbmVteVNwYXduRGF0YSgxLCBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDQsIDEpKSxcclxuICAgICAgICAgICAgICAgIC8vbmV3IEVuZW15U3Bhd25EYXRhKDEsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNSwgMSkpKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQWRkKHBhcmFtcyBvYmplY3RbXSBjb21wcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgZSA9IGVjcy5DcmVhdGVFbnRpdHkoKTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gY29tcHMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGUuQWRkQ29tcG9uZW50KGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBTcGF3bkRhdGEgUGlja3VwKGludCB2LCBWZWN0b3IyRCB2ZWN0b3IyRClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3Bhd25EYXRhKHYsIHZlY3RvcjJELCAoaW50KUJhdHRsZU1haW4uRW50aXR5VHlwZS5waWNrdXApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBTcGF3bkRhdGEgRW5lbXkoaW50IHYsIFZlY3RvcjJEIHZlY3RvcjJEKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTcGF3bkRhdGEodiwgdmVjdG9yMkQsIChpbnQpQmF0dGxlTWFpbi5FbnRpdHlUeXBlLmVuZW15KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBBZGQocGFyYW1zIFN0YWdlRGF0YVtdIHN0YWdlRGF0YTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgaXRlbSBpbiBzdGFnZURhdGExKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlY3MuQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL3N0YWdlcy5BZGRSYW5nZShzdGFnZURhdGExKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFN0YWdlRGF0YVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PFNwYXduRGF0YT4gZW5lbXlTcGF3bnMgPSBuZXcgTGlzdDxTcGF3bkRhdGE+KCk7XHJcbiAgICAgICAgcHVibGljIEJhdHRsZUNvbmZpZyBiYXR0bGVDb25maWc7XHJcbiAgICAgICAgcHVibGljIGJvb2wgaGlkZUxpZmVVSSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwdWJsaWMgU3RhZ2VEYXRhKHBhcmFtcyBTcGF3bkRhdGFbXSBzcGF3bnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBlbmVteVNwYXducy5BZGRSYW5nZShzcGF3bnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFN0YWdlRGF0YShCYXR0bGVDb25maWcgYmF0dGxlQ29uZmlnLCBwYXJhbXMgU3Bhd25EYXRhW10gc3Bhd25zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZW5lbXlTcGF3bnMuQWRkUmFuZ2Uoc3Bhd25zKTtcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVDb25maWcgPSBiYXR0bGVDb25maWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgU3RhZ2VEYXRhIEhpZGVMaWZlVUkoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaGlkZUxpZmVVSSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgRml4ZWRBdHRhY2tTdGFnZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PGludD4gbW92ZXMgPSBuZXcgTGlzdDxpbnQ+KCk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBGaXhlZEF0dGFja1N0YWdlKGludCBtb3ZlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW92ZXMuQWRkKG1vdmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEZpeGVkQXR0YWNrU3RhZ2UocGFyYW1zIGludFtdIG1vdmUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtb3Zlcy5BZGRSYW5nZShtb3ZlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBGaXhlZEF0dGFja1N0YWdlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBTcGF3bkRhdGFcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgaW50IGlkO1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgZW50aXR5VHlwZTtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgQmFzZVV0aWxzLlZlY3RvcjJEIHBvc2l0aW9uO1xyXG5cclxuICAgICAgICBwdWJsaWMgU3Bhd25EYXRhKGludCBpZCwgVmVjdG9yMkQgcG9zaXRpb24sIGludCB0eXBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuZW50aXR5VHlwZSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5IYXBwcztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZDtcclxudXNpbmcgUGlkcm9oLkJhc2VVdGlscztcclxudXNpbmcgUGlkcm9oLkVDUztcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIE1vdmVEYXRhRXhlY3V0ZXJcclxuICAgIHtcclxuICAgICAgICBCYXR0bGVNYWluIGJhdHRsZU1haW47XHJcbiAgICAgICAgTGlzdDxNb3ZlRGF0YT4gbW92ZURhdGFzO1xyXG4gICAgICAgIHByaXZhdGUgSGFwcE1hbmFnZXIgaGFwcE1hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBMaXN0PEJhdHRsZU1haW4uQmF0dGxlRW50aXR5PiBlbnRpdGllcztcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IEVDU01hbmFnZXIgZWNzO1xyXG4gICAgICAgIFRpbWVTdGFtcCB0aW1lU3RhbXA7XHJcbiAgICAgICAgTGlzdDxWZWN0b3IyRD4gYXV4ID0gbmV3IExpc3Q8VmVjdG9yMkQ+KCk7XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgTW92ZURhdGFFeGVjdXRlcihCYXR0bGVNYWluIHR1cm5CYXNlLCBMaXN0PE1vdmVEYXRhPiBtb3ZlRGF0YXMsIEVDU01hbmFnZXIgZWNzLCBUaW1lU3RhbXAgdGltZVN0YW1wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVNYWluID0gdHVybkJhc2U7XHJcbiAgICAgICAgICAgIHRoaXMubW92ZURhdGFzID0gbW92ZURhdGFzO1xyXG4gICAgICAgICAgICB0aGlzLmVjcyA9IGVjcztcclxuICAgICAgICAgICAgdGhpcy50aW1lU3RhbXAgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBFeGVjdXRlTW92ZShCYXR0bGVNYWluLkJhdHRsZUVudGl0eSBhY3RvciwgaW50IHR1cm4pXHJcbiAgICAgICAge1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBiYXR0bGVTdGF0ZSA9IHRoaXMuYmF0dGxlTWFpbi5iYXR0bGVTdGF0ZTtcclxuICAgICAgICAgICAgZW50aXRpZXMgPSB0aGlzLmJhdHRsZU1haW4uZW50aXRpZXM7XHJcbiAgICAgICAgICAgIGludCB1c2VySWQgPSBlbnRpdGllcy5JbmRleE9mKGFjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBtb3ZlSWQgPSBhY3Rvci5tb3Zlc1t0dXJuXTtcclxuICAgICAgICAgICAgaWYgKG1vdmVJZCA8IDApIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIG1kID0gbW92ZURhdGFzW21vdmVJZF07XHJcbiAgICAgICAgICAgIGlmIChtZCA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIGJhdHRsZVN0YXRlLm1vdmVUaWNrX1RvdGFsID0gbWQudW5pdHMuQ291bnQ7XHJcbiAgICAgICAgICAgIGludCBtb3ZlVGljayA9IGJhdHRsZVN0YXRlLm1vdmVUaWNrX05vdztcclxuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBtZC51bml0c1ttb3ZlVGlja10udGhpbmdzVG9IYXBwZW47XHJcbiAgICAgICAgICAgIGhhcHBNYW5hZ2VyID0gYmF0dGxlTWFpbi5oYXBwTWFuYWdlcjtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGEgaW4gYWN0aW9ucylcclxuICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhIGlzIE1vdmVBY3Rpb24pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgTW92ZUFjdGlvbiBtYSA9IGEgYXMgTW92ZUFjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG1hLmRpc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdG9yLnBvcyArPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvb2wgaW52YWxpZE1vdmUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rvci5wb3MuWCA8IGFjdG9yLm1pblBvcy5YXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFjdG9yLnBvcy5ZIDwgYWN0b3IubWluUG9zLllcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgYWN0b3IucG9zLlkgPiBhY3Rvci5tYXhQb3MuWVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBhY3Rvci5wb3MuWCA+IGFjdG9yLm1heFBvcy5YO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBlIGluIGVudGl0aWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgIT0gYWN0b3IgJiYgZS5BbGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdG9yLnBvcyA9PSBlLnBvcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkTW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBCYXR0bGVNYWluLkVudGl0eVR5cGUucGlja3VwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5saWZlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0b3IuZGFtYWdlTXVsdGlwbGllciA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRNb3ZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLlR5cGUgPT0gQmF0dGxlTWFpbi5FbnRpdHlUeXBlLnBhbmVsZWZmZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZE1vdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludmFsaWRNb3ZlKSBicmVhaztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZhbGlkTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZUxpbmUoXCJJbnZhbGlkIG1vdmUgZ2VuZXJhdGVcIiArIGJhdHRsZVN0YXRlLm1vdmVUaWNrX05vdy5WYWwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IGFjdG9ySWQgPSBlbnRpdGllcy5JbmRleE9mKGFjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlSGFwcChtZCwgbmV3IEhhcHBNb3ZlRGF0YShhY3RvcklkKSwgbmV3IEhhcHBNb3ZlbWVudEZhaWwoYWN0b3IucG9zKSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYmF0dGxlTWFpbi5oYXBwTWFuYWdlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLkFkZChuZXcgSGFwcChCYXR0bGVNYWluLkhhcHBUYWcuTW92ZW1lbnRGYWlsKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5BZGRBdHRyaWJ1dGUobmV3IEhhcHAuQXR0cmlidXRlKCkuU2V0VmFsdWUoYWN0b3JJZCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuQWRkQXR0cmlidXRlKG5ldyBIYXBwLkF0dHJpYnV0ZSgpLlNldFZhbHVlKGFjdG9yLnBvcy5YKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5BZGRBdHRyaWJ1dGUobmV3IEhhcHAuQXR0cmlidXRlKCkuU2V0VmFsdWUoYWN0b3IucG9zLlkpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZVN0YXRlLm1vdmVUaWNrX1RvdGFsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0b3IucG9zIC09IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGEgaXMgRGVhbERhbWFnZUFjdGlvbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGRhID0gYSBhcyBEZWFsRGFtYWdlQWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRhY2tFbGVtZW50ID0gZGRhLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRkYS50YXJnZXQgPT0gVGFyZ2V0LkFyZWEpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IGRkYS5hcmVhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmZXJlbmNlVXNlck9mQXJlYSA9IFJlc29sdmVUYXJnZXQoYWN0b3IsIGVudGl0aWVzLCBhcmVhLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludCBtaXJyb3JpbmdYID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdG9yLlR5cGUgPT0gQmF0dGxlTWFpbi5FbnRpdHlUeXBlLmVuZW15KSAvL2VuZW1pZXMgYWN0IG9uIG9wcG9zaXRlIHNpZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlycm9yaW5nWCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBwb2ludCBpbiBhcmVhLnBvaW50cylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlYXJjaFBvcyA9IHBvaW50ICogbmV3IEJhc2VVdGlscy5WZWN0b3IyRChtaXJyb3JpbmdYLCAxKSArIHJlZmVyZW5jZVVzZXJPZkFyZWEucG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlTGluZShcIlNlYXJjaCBwb2ludCBcIitzZWFyY2hQb3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBlbnRpdGllcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdGllc1tpXS5wb3MgPT0gc2VhcmNoUG9zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVhbERhbWFnZShhY3RvciwgZGRhLCBlbnRpdGllc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbmQgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IHRhcmdldCA9IFJlc29sdmVUYXJnZXQoYWN0b3IsIGVudGl0aWVzLCBkZGEudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWFsRGFtYWdlKGFjdG9yLCBkZGEsIHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGEgaXMgU3VtbW9uRW50aXR5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZSA9IGEgYXMgU3VtbW9uRW50aXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmVteVdoaWNoID0gc2UuZW5lbXlXaGljaDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW5lbXlJZCA9IGJhdHRsZU1haW4uQmF0dGxlQ29uZmlnLmVuZW1pZXNUb1N1bW1vbltlbmVteVdoaWNoXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXRpZXMgPSBiYXR0bGVNYWluLmVudGl0aWVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbnMgPSBHZXRFbXB0eVNwb3RzKHNpZGU6MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9ucy5Db3VudCA9PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFZlY3RvcjJEIHN1bW1vblBvcyA9IHNlLnByZWZlcmVudGlhbFJvd0NvbHVtbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9ucy5Db250YWlucyhzdW1tb25Qb3MpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VtbW9uUG9zID0gcG9zaXRpb25zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlY3MuQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChuZXcgU3Bhd25EYXRhKGVuZW15SWQsIHN1bW1vblBvcywgKGludClCYXR0bGVNYWluLkVudGl0eVR5cGUuZW5lbXkpKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhIGlzIEFuaW1hdGlvbilcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbSA9IGEgYXMgQW5pbWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IHRhcmdldCA9IFJlc29sdmVUYXJnZXQoYWN0b3IsIGVudGl0aWVzLCBhbmltLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBhbmltLmFyZWE7XHJcbiAgICAgICAgICAgICAgICAgICAgSGFwcEFyZWEgaGFwcEFyZWEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmVhICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmZXJlbmNlVXNlck9mQXJlYSA9IFJlc29sdmVUYXJnZXQoYWN0b3IsIGVudGl0aWVzLCBhcmVhLnRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnQgbWlycm9yaW5nWCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rvci5UeXBlID09IEJhdHRsZU1haW4uRW50aXR5VHlwZS5lbmVteSkgLy9lbmVtaWVzIGFjdCBvbiBvcHBvc2l0ZSBzaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvcmluZ1ggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXBwQXJlYSA9IG5ldyBIYXBwQXJlYShhcmVhLCByZWZlcmVuY2VVc2VyT2ZBcmVhLnBvcywgbWlycm9yaW5nWCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGludCB0YXJnZXRJZCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSBlbnRpdGllcy5JbmRleE9mKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlSGFwcChtZCwgaGFwcEFyZWEsIG5ldyBIYXBwTW92ZURhdGEodXNlcklkLCB0YXJnZXRJZCwgYW5pbS5lbGVtZW50KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltLnRhcmdldCAhPSBUYXJnZXQuTm9uZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhcHBNYW5hZ2VyXHJcbi5BZGQobmV3IEhhcHAoQmF0dGxlTWFpbi5IYXBwVGFnLkF0dGFja0hpdCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5BZGRBdHRyaWJ1dGUobmV3IEhhcHAuQXR0cmlidXRlKCkuU2V0VmFsdWUoZW50aXRpZXMuSW5kZXhPZih0YXJnZXQpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLkFkZEF0dHJpYnV0ZShuZXcgSGFwcC5BdHRyaWJ1dGUoKS5TZXRWYWx1ZSh1c2VySWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuQWRkQXR0cmlidXRlKG5ldyBIYXBwLkF0dHJpYnV0ZSgpLlNldFZhbHVlKChpbnQpYW5pbS5lbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChtb3ZlVGljayA9PSBtZC51bml0cy5Db3VudCAtIDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIG1kLnVuaXRzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBhY3QgaW4gaXRlbS50aGluZ3NUb0hhcHBlbilcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3QgaXMgRGVhbERhbWFnZUFjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlRWxlbWVudChhY3RvciwgKGFjdCBhcyBEZWFsRGFtYWdlQWN0aW9uKS5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgTGlzdDxWZWN0b3IyRD4gR2V0RW1wdHlTcG90cyhpbnQgc2lkZSA9IC0xKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXV4LkNsZWFyKCk7XHJcbiAgICAgICAgICAgIGludCBvZmZYID0gMDtcclxuICAgICAgICAgICAgaWYgKHNpZGUgPT0gMSkgb2ZmWCA9IDM7XHJcbiAgICAgICAgICAgIGludCB3aWR0aCA9IGJhdHRsZU1haW4uQm9hcmRXaWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGlmIChzaWRlID09IC0xKVxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSBiYXR0bGVNYWluLkJvYXJkV2lkdGg7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgd2lkdGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBiYXR0bGVNYWluLkJvYXJkSGVpZ2h0OyBqKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGF1eC5BZGQobmV3IFZlY3RvcjJEKGkrb2ZmWCxqKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGVudGl0aWVzID0gYmF0dGxlTWFpbi5lbnRpdGllcztcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGUgaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLkFsaXZlICYmIGF1eC5Db250YWlucyhlLnBvcykpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV4LlJlbW92ZShlLnBvcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGF1eDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQ2hhbmdlRWxlbWVudChCYXR0bGVNYWluLkJhdHRsZUVudGl0eSBhY3RvciwgQmF0dGxlTWFpbi5FbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoYWN0b3IuZWxlbWVudCA9PSBlbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgICAgIGFjdG9yLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB2YXIgdGggPSBuZXcgSGFwcFRhZ3MoKGludClNaXNjSGFwcFRhZ3MuQ2hhbmdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGVjcy5DcmVhdGVFbnRpdHlXaXRoQ29tcG9uZW50KHRoLCBuZXcgSGFwcE1vdmVEYXRhKGVudGl0aWVzLkluZGV4T2YoYWN0b3IpLCAtMSwgZWxlbWVudCkpLkFkZENvbXBvbmVudCh0aW1lU3RhbXAuR2V0U25hcCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBDcmVhdGVIYXBwKE1vdmVEYXRhIG1kLCBvYmplY3QgY29tcDEsIG9iamVjdCBjb21wMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciB0aCA9IG5ldyBIYXBwVGFncyhtZC50YWdzKTtcclxuICAgICAgICAgICAgdmFyIGUgPSBlY3MuQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudCh0aCwgdGltZVN0YW1wLkdldFNuYXAoKSk7XHJcbiAgICAgICAgICAgIGlmIChjb21wMSAhPSBudWxsKSBlLkFkZENvbXBvbmVudChjb21wMSk7XHJcbiAgICAgICAgICAgIGlmIChjb21wMiAhPSBudWxsKSBlLkFkZENvbXBvbmVudChjb21wMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQ3JlYXRlSGFwcChpbnQgdGFnLCBvYmplY3QgY29tcDEsIG9iamVjdCBjb21wMilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciB0aCA9IG5ldyBIYXBwVGFncyh0YWcpO1xyXG4gICAgICAgICAgICB2YXIgZSA9IGVjcy5DcmVhdGVFbnRpdHlXaXRoQ29tcG9uZW50KHRoLCB0aW1lU3RhbXAuR2V0U25hcCgpKTtcclxuICAgICAgICAgICAgaWYgKGNvbXAxICE9IG51bGwpIGUuQWRkQ29tcG9uZW50KGNvbXAxKTtcclxuICAgICAgICAgICAgaWYgKGNvbXAyICE9IG51bGwpIGUuQWRkQ29tcG9uZW50KGNvbXAyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBEZWFsRGFtYWdlKEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IGFjdG9yLCBEZWFsRGFtYWdlQWN0aW9uIGRkYSwgQmF0dGxlTWFpbi5CYXR0bGVFbnRpdHkgdGFyZ2V0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgQmF0dGxlTWFpbi5FbGVtZW50IGF0dGFja0VsZW1lbnQgPSBkZGEuZWxlbWVudDtcclxuICAgICAgICAgICAgYm9vbCBlbGVtZW50YWxCbG9jayA9IGF0dGFja0VsZW1lbnQgPT0gdGFyZ2V0LmVsZW1lbnQgJiYgYXR0YWNrRWxlbWVudCAhPSBCYXR0bGVNYWluLkVsZW1lbnQuTm9uZTtcclxuICAgICAgICAgICAgYm9vbCBzdXBlckVmZmVjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpbnQgZGFtYWdlID0gMDtcclxuICAgICAgICAgICAgaW50IHRhcmdldElkID0gZW50aXRpZXMuSW5kZXhPZih0YXJnZXQpO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudGFsQmxvY2spXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnRhbEJsb2NrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtdWwgPSBiYXR0bGVNYWluLkNhbGN1bGF0ZUF0dGFja011bHRpcGxpZXIoYWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIG11bCAqPSBiYXR0bGVNYWluLkNhbGN1bGF0ZURlZmVuZGVyTXVsdGlwbGllcih0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2tFbGVtZW50ID09IEJhdHRsZU1haW4uRWxlbWVudC5GaXJlICYmIHRhcmdldC5lbGVtZW50ID09IEJhdHRsZU1haW4uRWxlbWVudC5JY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgYXR0YWNrRWxlbWVudCA9PSBCYXR0bGVNYWluLkVsZW1lbnQuVGh1bmRlciAmJiB0YXJnZXQuZWxlbWVudCA9PSBCYXR0bGVNYWluLkVsZW1lbnQuRmlyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBhdHRhY2tFbGVtZW50ID09IEJhdHRsZU1haW4uRWxlbWVudC5JY2UgJiYgdGFyZ2V0LmVsZW1lbnQgPT0gQmF0dGxlTWFpbi5FbGVtZW50LlRodW5kZXIpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWwgKj0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJFZmZlY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZSA9IGRkYS5kYW1hZ2UgKiAoaW50KW11bDtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQubGlmZSAtPSBkYW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0b3IuZGFtYWdlTXVsdGlwbGllciA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaGFwcE1hbmFnZXIuQWRkKG5ldyBIYXBwKEJhdHRsZU1haW4uSGFwcFRhZy5EYW1hZ2VUYWtlbikpXHJcbiAgICAgICAgICAgICAgICAgICAgLkFkZEF0dHJpYnV0ZShuZXcgSGFwcC5BdHRyaWJ1dGUoKS5TZXRWYWx1ZSh0YXJnZXRJZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuQ3JlYXRlSGFwcCgoaW50KU1pc2NIYXBwVGFncy5EYW1hZ2UsIG5ldyBIYXBwRGFtYWdlRGF0YSh0YXJnZXQuZWxlbWVudCwgZGRhLmVsZW1lbnQsIGVudGl0aWVzLkluZGV4T2YodGFyZ2V0KSwgZGFtYWdlLCBzdXBlckVmZmVjdGl2ZSwgZWxlbWVudGFsQmxvY2spLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5saWZlIDw9IDAgJiYgIXN1cGVyRWZmZWN0aXZlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBDcmVhdGVIYXBwKChpbnQpTWlzY0hhcHBUYWdzLkRlYXRoLCBuZXcgSGFwcE1vdmVEYXRhKHRhcmdldElkKSwgbnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IFJlc29sdmVUYXJnZXQoQmF0dGxlTWFpbi5CYXR0bGVFbnRpdHkgYWN0b3IsIExpc3Q8QmF0dGxlTWFpbi5CYXR0bGVFbnRpdHk+IGVudGl0aWVzLCBUYXJnZXQgdGFyZ2V0VHlwZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXRUeXBlID09IFRhcmdldC5TZWxmKSByZXR1cm4gYWN0b3I7XHJcbiAgICAgICAgICAgIEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IHRhcmdldCA9IG51bGw7XHJcbiAgICAgICAgICAgIGZsb2F0IG1pbkRpcyA9IDEwO1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgZTIgaW4gZW50aXRpZXMpXHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZTIuRGVhZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0b3IuVHlwZSAhPSBlMi5UeXBlXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgZTIuVHlwZSAhPSBCYXR0bGVNYWluLkVudGl0eVR5cGUucGFuZWxlZmZlY3RcclxuICAgICAgICAgICAgICAgICAgICAmJiBlMi5UeXBlICE9IEJhdHRsZU1haW4uRW50aXR5VHlwZS5waWNrdXApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9vbCBzYW1lSGVpZ2h0ID0gYWN0b3IucG9zLlkgPT0gZTIucG9zLlk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYW1lSGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgZGlzID0gYWN0b3IucG9zLlggLSBlMi5wb3MuWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcyA8IDApIGRpcyAqPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcyA8IG1pbkRpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzID0gZGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSGFwcFRhZ3NcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTGlzdDxpbnQ+IHRhZ3MgPSBuZXcgTGlzdDxpbnQ+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwVGFncyhMaXN0PGludD4gdGFncylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudGFncy5BZGRSYW5nZSh0YWdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwVGFncyhpbnQgaSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRhZ3MuQWRkKGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBNaXNjSGFwcFRhZ3N7XHJcbiAgICAgICAgQ2hhbmdlRWxlbWVudCA9IDUwMCxcclxuICAgICAgICBEYW1hZ2UgPSA1MDEsXHJcbiAgICAgICAgRGVhdGggPSA1MDJcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSGFwcERhbWFnZURhdGFcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgQmF0dGxlTWFpbi5FbGVtZW50IHRhcmdldEUsIGRhbWFnZUU7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGludCB0YXJnZXQ7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGludCBhbW91bnQ7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGJvb2wgc3VwZXJFZmZlY3RpdmU7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGJvb2wgZWxlbWVudGFsQmxvY2s7XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwRGFtYWdlRGF0YShCYXR0bGVNYWluLkVsZW1lbnQgdGFyZ2V0RSwgQmF0dGxlTWFpbi5FbGVtZW50IGRhbWFnZUUsIGludCB0YXJnZXQsIGludCBhbW91bnQsIGJvb2wgc3VwZXJFZmZlY3RpdmUsIGJvb2wgZWxlbWVudGFsQmxvY2spXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldEUgPSB0YXJnZXRFO1xyXG4gICAgICAgICAgICB0aGlzLmRhbWFnZUUgPSBkYW1hZ2VFO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIHRoaXMuc3VwZXJFZmZlY3RpdmUgPSBzdXBlckVmZmVjdGl2ZTtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50YWxCbG9jayA9IGVsZW1lbnRhbEJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSGFwcE1vdmVEYXRhXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGludCB1c2VyO1xyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgdGFyZ2V0ID0gLTE7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IEJhdHRsZU1haW4uRWxlbWVudCBlbGVtZW50ID0gQmF0dGxlTWFpbi5FbGVtZW50Lk5vbmU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwTW92ZURhdGEoaW50IHVzZXIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEhhcHBNb3ZlRGF0YShpbnQgdXNlciwgaW50IHRhcmdldCwgQmF0dGxlTWFpbi5FbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgcHVibGljIGNsYXNzIEhhcHBNb3ZlbWVudEZhaWxcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgVmVjdG9yMkQgbW92ZVRvO1xyXG5cclxuICAgICAgICBwdWJsaWMgSGFwcE1vdmVtZW50RmFpbChWZWN0b3IyRCBtb3ZlVG8pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmVUbyA9IG1vdmVUbztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEhhcHBBcmVhXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IEFyZWEgYXJlYTtcclxuICAgICAgICBwdWJsaWMgVmVjdG9yMkQgb2Zmc2V0ID0gbmV3IFZlY3RvcjJEKCk7XHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGludCBtaXJyb3JpbmdYO1xyXG5cclxuICAgICAgICBwdWJsaWMgSGFwcEFyZWEoQXJlYSBhcmVhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5hcmVhID0gYXJlYTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwQXJlYShBcmVhIGFyZWEsIFZlY3RvcjJEIG9mZnNldCwgaW50IG1pcnJvcmluZ1gpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmFyZWEgPSBhcmVhO1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5taXJyb3JpbmdYID0gbWlycm9yaW5nWDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5EZWJ1Z0V4dHJhO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkhhcHBzXHJcbntcclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSGFwcE1hbmFnZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgaW50IEN1cnJlbnRUaW1lIHsgZ2V0OyBwcml2YXRlIHNldDsgfVxyXG4gICAgICAgIExpc3Q8SGFwcD4gSGFwcHMgPSBuZXcgTGlzdDxIYXBwPigpO1xyXG4gICAgICAgIExpc3Q8SGFwcEhhbmRsZXI+IGhhbmRsZXJzID0gbmV3IExpc3Q8SGFwcEhhbmRsZXI+KCk7XHJcbiAgICAgICAgaW50IGxhdGVzdEhhbmRsZWQgPSAtMTtcclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgQWRkSGFuZGxlcihIYXBwSGFuZGxlciBoaClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLkFkZChoaCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBUcnlIYW5kbGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYobGF0ZXN0SGFuZGxlZCAhPSBDdXJyZW50VGltZSlcclxuICAgICAgICAgICAgICAgIEhhbmRsZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIEhhbmRsZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYXRlc3RIYW5kbGVkID0gQ3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBoIGluIGhhbmRsZXJzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gSGFwcHMuQ291bnQgLSAxOyBpID49IDA7IGktLSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgY2hlY2sgYXNzdW1lcyBoYXBwcyBhcmUgb3JkZXJlZCBieSB0aW1lIHN0YW1wXHJcbiAgICAgICAgICAgICAgICAgICAgLy93aGljaCB0aGV5IHNob3VsZCBiZSBhdXRvbWF0aWNhbGx5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEhhcHBzW2ldLlRpbWVTdGFtcCAhPSBDdXJyZW50VGltZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnRXguTG9nKFwiSGFwcGVuaW5nIG5vdCBlcXVhbCB0byBjdXJyZW50IHRpbWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBib29sIGhhc1RhZ3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB0YWdzTmVlZGVkIGluIGgubmVjZXNzYXJ5VGFncylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghSGFwcHNbaV0uSGFzVGFnKHRhZ3NOZWVkZWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNUYWdzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzVGFncylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnRXguTG9nKFwiSGFwcGVuaW5nIGhhbmRsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguSGFuZGxlKEhhcHBzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWdFeC5Mb2coXCJIYXBwZW5pbmcgdGFnIGlzIGRpZmZlcmVudFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBIYXBwIEFkZChIYXBwIGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoLlRpbWVTdGFtcCA9IEN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICBIYXBwcy5BZGQoaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgVGljaygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBDdXJyZW50VGltZSsrO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgSGFwcFxyXG4gICAge1xyXG4gICAgICAgIC8vcHVibGljIHN0cmluZyBNYWluVGFnO1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PGludD4gdGFncyA9IG5ldyBMaXN0PGludD4oKTtcclxuICAgICAgICBwdWJsaWMgaW50IFRpbWVTdGFtcDtcclxuICAgICAgICBMaXN0PEF0dHJpYnV0ZT4gYXR0cnMgPSBuZXcgTGlzdDxBdHRyaWJ1dGU+KCk7XHJcblxyXG4gICAgICAgIC8vcHVibGljIEhhcHAoSUNvbnZlcnRpYmxlIGMpXHJcbiAgICAgICAgLy97XHJcbiAgICAgICAgLy8gICAgdGFncy5BZGQoQ29udmVydC5Ub0ludDMyKGMpKTtcclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgcHVibGljIEhhcHAob2JqZWN0IG1haW5UYWcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL01haW5UYWcgPSBtYWluVGFnLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHRhZ3MuQWRkKENvbnZlcnQuVG9JbnQzMihtYWluVGFnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgY2xhc3MgQXR0cmlidXRlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwdWJsaWMgZmxvYXQgVmFsdWUgeyBnZXQ7IHByaXZhdGUgc2V0OyB9XHJcbiAgICAgICAgICAgIHB1YmxpYyBBdHRyaWJ1dGUgU2V0VmFsdWUoZmxvYXQgZilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVmFsdWUgPSBmO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHVibGljIFRhZ0hvbGRlciB0YWdzID0gbmV3IFRhZ0hvbGRlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEhhcHAgQWRkQXR0cmlidXRlKEF0dHJpYnV0ZSBhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXR0cnMuQWRkKGEpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGludCBHZXRBdHRyaWJ1dGVfSW50KGludCBpbmRleClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaW50KWF0dHJzW2luZGV4XS5WYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGJvb2wgSGFzVGFnKGludCB0YWdzTmVlZGVkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhZ3MuQ29udGFpbnModGFnc05lZWRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBIYXBwSGFuZGxlclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PGludD4gbmVjZXNzYXJ5VGFncyA9IG5ldyBMaXN0PGludD4oKTtcclxuICAgICAgICBwdWJsaWMgQWN0aW9uPEhhcHA+IEhhbmRsZTtcclxuXHJcbiAgICAgICAgcHVibGljIEhhcHBIYW5kbGVyKG9iamVjdCBtYWluVGFnLCBBY3Rpb248SGFwcD4gaGFuZGxlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5uZWNlc3NhcnlUYWdzLkFkZChDb252ZXJ0LlRvSW50MzIobWFpblRhZykpO1xyXG4gICAgICAgICAgICBIYW5kbGUgPSBoYW5kbGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBUYWdIb2xkZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTGlzdDxvYmplY3Q+IFRhZ3MgeyBnZXQ7IHByaXZhdGUgc2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIEhhc1RhZyhvYmplY3QgdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBUYWdzLkNvbnRhaW5zKHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBBZGQob2JqZWN0IHYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUYWdzLkFkZCh2KTtcclxuICAgICAgICB9XHJcblxuICAgIFxucHJpdmF0ZSBMaXN0PG9iamVjdD4gX19Qcm9wZXJ0eV9fSW5pdGlhbGl6ZXJfX1RhZ3M9bmV3IExpc3Q8b2JqZWN0PigpO31cclxuXHJcblxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgSW5wdXRIb2xkZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgTGlzdDxJbnB1dD4gaW5wdXRzID0gbmV3IExpc3Q8SW5wdXQ+KCk7XHJcbiAgICAgICAgTGlzdDxJbnB1dFRhZ3M+IHRhZ3MgPSBuZXcgTGlzdDxJbnB1dFRhZ3M+KCk7XHJcblxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIENsZWFyKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlucHV0cy5DbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBBZGQoSW5wdXQgaW5wdXQsIElucHV0VGFncyB0YWcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnB1dHMuQWRkKGlucHV0KTtcclxuICAgICAgICAgICAgdGFncy5BZGQodGFnKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBib29sIFRhZ0lzKGludCBpMiwgSW5wdXRUYWdzIHRhZylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh0YWdzLkNvdW50IDw9IGkyKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0YWdzW2kyXSA9PSB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbnVtIElucHV0VGFnc3tcclxuICAgICAgICBOT05FLCBNT1ZFRklYLCBNT1ZFVU5GSVgsIE1JU0NcclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBQaWRyb2guQmFzZVV0aWxzO1xyXG51c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIE1vdmVDcmVhdG9yUHJvZ1xyXG4gICAge1xyXG4gICAgICAgIGludGVybmFsIExpc3Q8TW92ZURhdGE+IG1vdmVEYXRhcyA9IG5ldyBMaXN0PE1vdmVEYXRhPigpO1xyXG4gICAgICAgIGludGVybmFsIExpc3Q8TW92ZVJlbmRlckRhdGE+IG1vdmVSZW5kZXJzID0gbmV3IExpc3Q8TW92ZVJlbmRlckRhdGE+KCk7XHJcbiAgICAgICAgQXJlYUNyZWF0aW9uVXRpbHMgYXJlYVV0aWxzID0gbmV3IEFyZWFDcmVhdGlvblV0aWxzKCk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBNb3ZlQ3JlYXRvclByb2coKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW92ZURhdGFzLkFkZChudWxsKTsgLy9kbyBub3RoaW5nXHJcbiAgICAgICAgICAgIEJhc2VVdGlscy5WZWN0b3IyRFtdIGRpcmVjdGlvbnMgPSBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEW10ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDAsIDEpLFxyXG4gICAgICAgICAgICAgICAgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCgtMSwgMCksXHJcbiAgICAgICAgICAgICAgICBuZXcgQmFzZVV0aWxzLlZlY3RvcjJEKDAsIC0xKSxcclxuICAgICAgICAgICAgICAgIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoMSwgMCksIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzdHJpbmdbXSBtb3ZlTGFiZWxzID0gbmV3IHN0cmluZ1tdIHtcclxuICAgICAgICAgICAgICAgIFwiTW92ZSBVcFwiLFxyXG4gICAgICAgICAgICAgICAgXCJNb3ZlIExlZnRcIixcclxuICAgICAgICAgICAgICAgIFwiTW92ZSBEb3duXCIsXHJcbiAgICAgICAgICAgICAgICBcIk1vdmUgUmlnaHRcIixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc3RyaW5nW10gbW92ZUFicmV2ID0gbmV3IHN0cmluZ1tdIHtcclxuICAgICAgICAgICAgICAgIFwiXlwiLFxyXG4gICAgICAgICAgICAgICAgXCI8XCIsXHJcbiAgICAgICAgICAgICAgICBcInZcIixcclxuICAgICAgICAgICAgICAgIFwiPlwiLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGRpcmVjdGlvbnMuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIE5ld01vdmVEYXRhKGxhYmVsOm1vdmVMYWJlbHNbaV0sIGNvbmRpdGlvbjogbmV3IENvbmRpdGlvbihDb25kaXRpb25UeXBlLkNhbk1vdmUsIFRhcmdldC5TZWxmLCBkaXJlY3Rpb25zW2ldKSwgYWN0aW9uOiBuZXcgTW92ZUFjdGlvbihUYXJnZXQuU2VsZiwgZGlyZWN0aW9uc1tpXSksIHRhZ3M6IFRhZ0FycmF5KE1vdmVEYXRhVGFncy5Nb3ZlbWVudCwgIE1vdmVEYXRhVGFncy5IZXJvSW5pdGlhbCkpO1xyXG4gICAgICAgICAgICAgICAgTmV3TW92ZVRleHRSZW5kZXJEYXRhKG5hbWU6bW92ZUxhYmVsc1tpXSwgYWJyZXY6bW92ZUFicmV2W2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBOZXdNb3ZlRGF0YShcIkd1blwiLCB0aWNrczogT25lVGlja1BlckFjdGlvbihuZXcgQW5pbWF0aW9uKFRhcmdldC5DbG9zZXN0VGFyZ2V0WCksIG5ldyBEZWFsRGFtYWdlQWN0aW9uKFRhcmdldC5DbG9zZXN0VGFyZ2V0WCwgMSwgQmF0dGxlTWFpbi5FbGVtZW50Lk5vbmUpKSwgdGFnczogVGFnQXJyYXkoTW92ZURhdGFUYWdzLlNob290KSk7XHJcbiAgICAgICAgICAgIE5ld01vdmVUZXh0UmVuZGVyRGF0YShcIkd1blwiLCBcIkdcIik7XHJcblxyXG4gICAgICAgICAgICBOZXdNb3ZlRGF0YShcIkZpcmVndW5cIiwgdGlja3M6IE9uZVRpY2tQZXJBY3Rpb24obmV3IEFuaW1hdGlvbihUYXJnZXQuQ2xvc2VzdFRhcmdldFgsIEJhdHRsZU1haW4uRWxlbWVudC5GaXJlKSwgbmV3IERlYWxEYW1hZ2VBY3Rpb24oVGFyZ2V0LkNsb3Nlc3RUYXJnZXRYLCAxLCBCYXR0bGVNYWluLkVsZW1lbnQuRmlyZSkpLCB0YWdzOiBUYWdBcnJheShNb3ZlRGF0YVRhZ3MuU2hvb3QpKTtcclxuICAgICAgICAgICAgTmV3TW92ZVRleHRSZW5kZXJEYXRhKFwiRmlyZWd1blwiLCBcIkZHXCIpO1xyXG5cclxuICAgICAgICAgICAgTmV3TW92ZURhdGEoXCJJY2VndW5cIiwgdGlja3M6IE9uZVRpY2tQZXJBY3Rpb24obmV3IEFuaW1hdGlvbihUYXJnZXQuQ2xvc2VzdFRhcmdldFgsIEJhdHRsZU1haW4uRWxlbWVudC5JY2UpLCBuZXcgRGVhbERhbWFnZUFjdGlvbihUYXJnZXQuQ2xvc2VzdFRhcmdldFgsIDEsIEJhdHRsZU1haW4uRWxlbWVudC5JY2UpKSwgdGFnczogVGFnQXJyYXkoTW92ZURhdGFUYWdzLlNob290KSk7XHJcbiAgICAgICAgICAgIE5ld01vdmVUZXh0UmVuZGVyRGF0YShcIkljZWd1blwiLCBcIklHXCIpO1xyXG5cclxuICAgICAgICAgICAgTmV3TW92ZURhdGEoXCJUaHVuZGVyZ3VuXCIsIHRpY2tzOiBPbmVUaWNrUGVyQWN0aW9uKG5ldyBBbmltYXRpb24oVGFyZ2V0LkNsb3Nlc3RUYXJnZXRYLCBCYXR0bGVNYWluLkVsZW1lbnQuVGh1bmRlciksIG5ldyBEZWFsRGFtYWdlQWN0aW9uKFRhcmdldC5DbG9zZXN0VGFyZ2V0WCwgMSwgQmF0dGxlTWFpbi5FbGVtZW50LlRodW5kZXIpKSwgdGFnczogVGFnQXJyYXkoTW92ZURhdGFUYWdzLlNob290KSk7XHJcbiAgICAgICAgICAgIE5ld01vdmVUZXh0UmVuZGVyRGF0YShcIlRodW5kZXJndW5cIiwgXCJUR1wiKTtcclxuXHJcbiAgICAgICAgICAgIEFyZWEgYXJlYSA9IEFyZWFVc2VyKCkuUm93Rm9yd2FyZCh3aWR0aDogMSwgWERpczogMyk7XHJcbiAgICAgICAgICAgIE5ld01vdmVEYXRhKFwiSWNlYm9tYlwiLCB0aWNrczogT25lVGlja1BlckFjdGlvbihuZXcgQW5pbWF0aW9uKGFyZWEsIEJhdHRsZU1haW4uRWxlbWVudC5JY2UpLCBuZXcgRGVhbERhbWFnZUFjdGlvbihhcmVhLCAxLCBCYXR0bGVNYWluLkVsZW1lbnQuSWNlKSksIHRhZ3M6IFRhZ0FycmF5KE1vdmVEYXRhVGFncy5Cb21iKSk7XHJcbiAgICAgICAgICAgIE5ld01vdmVUZXh0UmVuZGVyRGF0YShcIkljZWJvbWJcIiwgXCJJQlwiKTtcclxuXHJcbiAgICAgICAgICAgIE5ld01vdmVEYXRhKFwiVGh1bmRlcmJvbWJcIiwgdGlja3M6IE9uZVRpY2tQZXJBY3Rpb24obmV3IEFuaW1hdGlvbihhcmVhLCBCYXR0bGVNYWluLkVsZW1lbnQuVGh1bmRlciksIG5ldyBEZWFsRGFtYWdlQWN0aW9uKGFyZWEsIDEsIEJhdHRsZU1haW4uRWxlbWVudC5UaHVuZGVyKSksIHRhZ3M6IFRhZ0FycmF5KE1vdmVEYXRhVGFncy5Cb21iKSk7XHJcbiAgICAgICAgICAgIE5ld01vdmVUZXh0UmVuZGVyRGF0YShcIlRodW5kZXJib21iXCIsIFwiVEJcIik7XHJcblxyXG4gICAgICAgICAgICBOZXdNb3ZlRGF0YShcIlN1bW1vblwiLCB0aWNrczogT25lVGlja1BlckFjdGlvbihTdW1tb25FbnRpdHkuRW5lbXkoMCwgbmV3IFZlY3RvcjJEKDUsMCkpKSwgdGFnczogVGFnQXJyYXkoTW92ZURhdGFUYWdzLlN1bW1vbikpO1xyXG4gICAgICAgICAgICBOZXdNb3ZlVGV4dFJlbmRlckRhdGEoXCJTdW1tb25cIiwgXCJTVVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGludCBHZXRNb3ZlSWQoc3RyaW5nIHYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gTW92ZURhdGEuRmluZEJ5TGFiZWwobW92ZURhdGFzLCB2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgQXJlYUNyZWF0aW9uVXRpbHMgQXJlYVVzZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYXJlYVV0aWxzLnRhcmdldCA9IFRhcmdldC5TZWxmO1xyXG4gICAgICAgICAgICByZXR1cm4gYXJlYVV0aWxzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGNsYXNzIEFyZWFDcmVhdGlvblV0aWxzXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwdWJsaWMgVGFyZ2V0IHRhcmdldDtcclxuICAgICAgICAgICAgaW50IGhlaWdodCA9IDM7XHJcblxyXG4gICAgICAgICAgICBpbnRlcm5hbCBBcmVhIFJvd0ZvcndhcmQoaW50IHdpZHRoLCBpbnQgWERpcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhID0gbmV3IEFyZWEodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGludCBvZmZzZXRZID0gKGludClNYXRoLkZsb29yKChmbG9hdCloZWlnaHQgLyAyZik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHdpZHRoOyBpKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBoZWlnaHQ7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYS5wb2ludHMuQWRkKG5ldyBWZWN0b3IyRChpK1hEaXMsIGotb2Zmc2V0WSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBOZXdNb3ZlVGV4dFJlbmRlckRhdGEoc3RyaW5nIG5hbWUsIHN0cmluZyBhYnJldilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1vdmVSZW5kZXJzLkFkZChuZXcgTW92ZVJlbmRlckRhdGEobmFtZSwgYWJyZXYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBOZXdNb3ZlRGF0YShzdHJpbmcgbGFiZWwsIFRpY2tbXSB0aWNrcywgb2JqZWN0W10gdGFncylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBtdiA9IG5ldyBNb3ZlRGF0YShsYWJlbCk7XHJcbiAgICAgICAgICAgIG12LnVuaXRzLkFkZFJhbmdlKHRpY2tzKTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gdGFncylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbXYudGFncy5BZGQoQ29udmVydC5Ub0ludDMyKGl0ZW0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbW92ZURhdGFzLkFkZChtdik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgTmV3TW92ZURhdGEoc3RyaW5nIGxhYmVsLCBDb25kaXRpb24gY29uZGl0aW9uLCBvYmplY3QgYWN0aW9uLCBvYmplY3RbXSB0YWdzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIG12ID0gbmV3IE1vdmVEYXRhKGxhYmVsKTtcclxuICAgICAgICAgICAgVGljayB0aWNrID0gbmV3IFRpY2soKTtcclxuICAgICAgICAgICAgdGljay5jb25kaXRpb24gPSBjb25kaXRpb247XHJcbiAgICAgICAgICAgIHRpY2sudGhpbmdzVG9IYXBwZW4uQWRkKGFjdGlvbik7XHJcbiAgICAgICAgICAgIG12LnVuaXRzLkFkZCh0aWNrKTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gdGFncylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbXYudGFncy5BZGQoQ29udmVydC5Ub0ludDMyKGl0ZW0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtb3ZlRGF0YXMuQWRkKG12KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgVGlja1tdIE9uZVRpY2tQZXJBY3Rpb24ocGFyYW1zIG9iamVjdFtdIGFjdGlvbnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUaWNrW10gdGlja3MgPSBuZXcgVGlja1thY3Rpb25zLkxlbmd0aF07XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdGlja3MuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRpY2tzW2ldID0gbmV3IFRpY2soYWN0aW9uc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRpY2tzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvYmplY3RbXSBUYWdBcnJheShwYXJhbXMgb2JqZWN0W10gYXJncylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmdzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgTW92ZVJlbmRlckRhdGFcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nIExhYmVsO1xyXG4gICAgICAgIHB1YmxpYyBzdHJpbmcgQWJyZXY7XHJcblxyXG4gICAgICAgIHB1YmxpYyBNb3ZlUmVuZGVyRGF0YShzdHJpbmcgbGFiZWwsIHN0cmluZyBhYnJldilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuTGFiZWwgPSBsYWJlbDtcclxuICAgICAgICAgICAgdGhpcy5BYnJldiA9IGFicmV2O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkVDU1xyXG57XHJcblxyXG4gICAgcHVibGljIGNsYXNzIEFjY2Vzc29yXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGludCBMZW5ndGggeyBnZXQgeyByZXR1cm4gU2VsZWN0ZWRFbnRpdGllcy5Db3VudDsgfSB9XHJcblxyXG4gICAgICAgIGludGVybmFsIFR5cGVbXSBUeXBlc1Byb2hpYml0ZWQgeyBnZXQ7IHNldDsgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBUeXBlW10gVHlwZXNOZWNlc3Nhcnk7XHJcbiAgICAgICAgaW50ZXJuYWwgTGlzdDxFbnRpdHk+IFNlbGVjdGVkRW50aXRpZXMgPSBuZXcgTGlzdDxFbnRpdHk+KCk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBBY2Nlc3NvcihwYXJhbXMgVHlwZVtdIHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBUeXBlc05lY2Vzc2FyeSA9IHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBib29sIEVudGl0eUFkZGVkKEVudGl0eSBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNlbGVjdGVkRW50aXRpZXMuQ29udGFpbnMoZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRW50aXR5IEdldChpbnQgaSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3RlZEVudGl0aWVzW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgUXVpY2tBY2Nlc3Nvck9uZTxUMT5cclxuICAgIHtcclxuXHJcbiAgICAgICAgcHVibGljIFF1aWNrQWNjZXNzb3JPbmUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWNjZXNzb3IgPSBuZXcgQWNjZXNzb3IodHlwZW9mKFQxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBBY2Nlc3NvciBhY2Nlc3NvcjtcclxuICAgICAgICBwdWJsaWMgaW50IENvdW50IHsgZ2V0IHsgcmV0dXJuIGFjY2Vzc29yLkxlbmd0aDsgfSB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBUMSBDb21wMShpbnQgaSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3Nvci5TZWxlY3RlZEVudGl0aWVzW2ldLkdldENvbXBvbmVudDxUMT4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBFbnRpdHkgRW50aXR5KGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc29yLlNlbGVjdGVkRW50aXRpZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGNsYXNzIFF1aWNrQWNjZXNzb3JUd288VDEsIFQyPiBcclxuICAgIHtcclxuXHJcbiAgICAgICAgaW50ZXJuYWwgQWNjZXNzb3IgYWNjZXNzb3I7XHJcbiAgICAgICAgcHVibGljIGludCBMZW5ndGggeyBnZXQgeyByZXR1cm4gYWNjZXNzb3IuTGVuZ3RoOyB9IH1cclxuXHJcbiAgICAgICAgcHVibGljIFQxIENvbXAxKGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc29yLlNlbGVjdGVkRW50aXRpZXNbaV0uR2V0Q29tcG9uZW50PFQxPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEVudGl0eSBFbnRpdHkoaW50IGkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzb3IuU2VsZWN0ZWRFbnRpdGllc1tpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBRdWlja0FjY2Vzc29yVHdvKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFjY2Vzc29yID0gbmV3IEFjY2Vzc29yKHR5cGVvZihUMSksIHR5cGVvZihUMikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHB1YmxpYyBUMiBDb21wMihpbnQgaSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3Nvci5TZWxlY3RlZEVudGl0aWVzW2ldLkdldENvbXBvbmVudDxUMj4oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5FQ1Ncclxue1xyXG4gICAgcHVibGljIGNsYXNzIEVDU01hbmFnZXJcclxuICAgIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgRUNTTWFuYWdlcltdIG1hbmFnZXJzID0gbmV3IEVDU01hbmFnZXJbMjBdO1xyXG4gICAgICAgIERpY3Rpb25hcnk8VHlwZSwgb2JqZWN0W10+IGNvbXBzID0gbmV3IERpY3Rpb25hcnk8VHlwZSwgb2JqZWN0W10+KCk7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgRUNTSWQ7XHJcblxyXG4gICAgICAgIHByaXZhdGUgRUNTTWFuYWdlcigpIHsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgUHJvY2Vzc29yQWNjZXNzb3IgQ3JlYXRlUHJvY2Vzc29yKEFjY2Vzc29yIGFjY2Vzc29yLCBBY3Rpb248QWNjZXNzb3I+IGFjdGlvbilcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb2Nlc3NvckFjY2Vzc29yKGFjdGlvbiwgYWNjZXNzb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEFjY2Vzc29yIENyZWF0ZUFjY2Vzc29yKFR5cGVbXSBuZWNlc3NhcnksIFR5cGVbXSBub3QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgYWNjID0gbmV3IEFjY2Vzc29yKG5lY2Vzc2FyeSk7XHJcbiAgICAgICAgICAgIGFjYy5UeXBlc1Byb2hpYml0ZWQgPSBub3Q7XHJcbiAgICAgICAgICAgIEFkZEFjY2Vzc29yKGFjYyk7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2M7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFF1aWNrQWNjZXNzb3JUd288VDEsVDI+IFF1aWNrQWNjZXNzb3IyPFQxLCBUMj4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUXVpY2tBY2Nlc3NvclR3bzxUMSwgVDI+IGFjY2Vzc29yID0gbmV3IFF1aWNrQWNjZXNzb3JUd288VDEsIFQyPigpO1xyXG4gICAgICAgICAgICBBZGRBY2Nlc3NvcihhY2Nlc3Nvci5hY2Nlc3Nvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3NvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBRdWlja0FjY2Vzc29yT25lPFQxPiBRdWlja0FjY2Vzc29yMTxUMT4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUXVpY2tBY2Nlc3Nvck9uZTxUMT4gYWNjZXNzb3IgPSBuZXcgUXVpY2tBY2Nlc3Nvck9uZTxUMT4oKTtcclxuICAgICAgICAgICAgQWRkQWNjZXNzb3IoYWNjZXNzb3IuYWNjZXNzb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjZXNzb3I7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnQgZW50aXR5SWRNYXggPSAtMTtcclxuICAgICAgICBMaXN0PEFjY2Vzc29yPiBhY2Nlc3NvcnMgPSBuZXcgTGlzdDxBY2Nlc3Nvcj4oKTtcclxuXHJcbiAgICAgICAgI3JlZ2lvbiBzdGF0aWMgbWV0aG9kc1xyXG5cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgc3RhdGljIEVDU01hbmFnZXIgR2V0SW5zdGFuY2UoRW50aXR5IGUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFuYWdlcnNbZS5lY3NdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBFQ1NNYW5hZ2VyIENyZWF0ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBtYW5hZ2Vycy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hbmFnZXJzW2ldID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW5hZ2Vyc1tpXSA9IG5ldyBFQ1NNYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlcnNbaV0uRUNTSWQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYW5hZ2Vyc1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAjZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIHB1YmxpYyBFbnRpdHkgQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChvYmplY3QgdilcclxuICAgICAgICB7XHJcbkVudGl0eSBlO1xuICAgICAgICAgICAgQ3JlYXRlRW50aXR5KG91dCBlKTtcclxuICAgICAgICAgICAgQWRkQ29tcG9uZW50KGUsIHYpO1xyXG4gICAgICAgICAgICByZXR1cm4gZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBFbnRpdHkgQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChvYmplY3Qgdiwgb2JqZWN0IHYyKVxyXG4gICAgICAgIHtcclxuRW50aXR5IGU7XG4gICAgICAgICAgICBDcmVhdGVFbnRpdHkob3V0IGUpO1xyXG4gICAgICAgICAgICBBZGRDb21wb25lbnQoZSwgdik7XHJcbiAgICAgICAgICAgIEFkZENvbXBvbmVudChlLCB2Mik7XHJcbiAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEVudGl0eSBDcmVhdGVFbnRpdHkob3V0IEVudGl0eSBlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZW50aXR5SWRNYXgrKztcclxuICAgICAgICAgICAgRW50aXR5IGVudGl0eSA9IG5ldyBFbnRpdHkodGhpcy5FQ1NJZCwgZW50aXR5SWRNYXgpO1xyXG4gICAgICAgICAgICBlID0gZW50aXR5O1xyXG4gICAgICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIEVudGl0eSBDcmVhdGVFbnRpdHkoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZW50aXR5SWRNYXgrKztcclxuICAgICAgICAgICAgRW50aXR5IGVudGl0eSA9IG5ldyBFbnRpdHkodGhpcy5FQ1NJZCwgZW50aXR5SWRNYXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZW50aXR5O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBQcm9jZXNzb3JGbGV4PFQxLFQyPiBRdWlja1Byb2Nlc3NvckZsZXg8VDEsIFQyPihBY3Rpb248UXVpY2tBY2Nlc3NvclR3bzxUMSwgVDI+PiBwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgUHJvY2Vzc29yRmxleDxUMSwgVDI+IHByb2Nlc3NvckZsZXggPSBuZXcgUHJvY2Vzc29yRmxleDxUMSwgVDI+KHApO1xyXG4gICAgICAgICAgICBRdWlja0FjY2Vzc29yVHdvPFQxLCBUMj4gYWNjZXNzb3IgPSBwcm9jZXNzb3JGbGV4LmFjY2Vzc29yO1xyXG4gICAgICAgICAgICBBY2Nlc3NvciBhY2Nlc3NvcjEgPSBhY2Nlc3Nvci5hY2Nlc3NvcjtcclxuICAgICAgICAgICAgQWRkQWNjZXNzb3IoYWNjZXNzb3IxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NvckZsZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHZvaWQgQWRkQWNjZXNzb3IoQWNjZXNzb3IgYWNjZXNzb3IxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYWNjZXNzb3JzLkFkZChhY2Nlc3NvcjEpO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8PSBlbnRpdHlJZE1heDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBVcGRhdGVBY2Nlc3NvckVudGl0eShhY2Nlc3NvcjEsIGkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFVwZGF0ZUFjY2Vzc29yRW50aXR5KEFjY2Vzc29yIGFjY2Vzc29yLCBpbnQgZW50aXR5SWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBFbnRpdHkgZW50aXR5ID0gbmV3IEVudGl0eShFQ1NJZCwgZW50aXR5SWQpO1xyXG4gICAgICAgICAgICBib29sIGJlbG9uZyA9IEhhc0FsbENvbXBzKGFjY2Vzc29yLlR5cGVzTmVjZXNzYXJ5LCBlbnRpdHlJZCkgJiYgSGFzTm9uZU9mVGhlc2VDb21wcyhhY2Nlc3Nvci5UeXBlc1Byb2hpYml0ZWQsIGVudGl0eUlkKTtcclxuICAgICAgICAgICAgYm9vbCBtZW1iZXIgPSBhY2Nlc3Nvci5FbnRpdHlBZGRlZChlbnRpdHkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGJlbG9uZyAhPSBtZW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChiZWxvbmcpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3IuU2VsZWN0ZWRFbnRpdGllcy5BZGQoZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBhY2Nlc3Nvci5TZWxlY3RlZEVudGl0aWVzLlJlbW92ZShlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgLy9pZiAoaXRlbS5FbnRpdHlBZGRlZChlKSlcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgLy9lbHNlXHJcbiAgICAgICAgICAgIC8ve1xyXG4gICAgICAgICAgICAvLyAgICBpZiAoSGFzQWxsQ29tcG9uZW50cyhlLCBpdGVtLlR5cGVzTmVjZXNzYXJ5KSlcclxuICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgaXRlbS5TZWxlY3RlZEVudGl0aWVzLkFkZChlKTtcclxuICAgICAgICAgICAgLy8gICAgfVxyXG4gICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgaW50ZXJuYWwgVCBBZGRDb21wb25lbnQ8VD4oRW50aXR5IGUpIHdoZXJlIFQgOiBuZXcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVCB0ID0gbmV3IFQoKTtcclxuICAgICAgICAgICAgQWRkQ29tcG9uZW50KGUsIHQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGRDb21wb25lbnQoRW50aXR5IGUsIG9iamVjdCB0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVHlwZSB0eXBlID0gdC5HZXRUeXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghY29tcHMuQ29udGFpbnNLZXkodHlwZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbXBzLkFkZCh0eXBlLCBuZXcgb2JqZWN0WzMwMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbXBzW3R5cGVdW2UuaWRdID0gdDtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gYWNjZXNzb3JzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBVcGRhdGVBY2Nlc3NvckVudGl0eShpdGVtLCBlLmlkKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZW1vdmVDb21wb25lbnQoRW50aXR5IGUsIG9iamVjdCB0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVHlwZSB0eXBlID0gdC5HZXRUeXBlKCk7XHJcbiAgICAgICAgICAgIGlmICghY29tcHMuQ29udGFpbnNLZXkodHlwZSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbXBzLkFkZCh0eXBlLCBuZXcgb2JqZWN0WzMwMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbXBzW3R5cGVdW2UuaWRdID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gYWNjZXNzb3JzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBVcGRhdGVBY2Nlc3NvckVudGl0eShpdGVtLCBlLmlkKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBIYXNBbGxDb21wb25lbnRzKEVudGl0eSBlLCBUeXBlW10gdHlwZXNOZWNlc3NhcnkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgaWQgPSBlLmlkO1xyXG4gICAgICAgICAgICByZXR1cm4gSGFzQWxsQ29tcHModHlwZXNOZWNlc3NhcnksIGlkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYm9vbCBIYXNBbGxDb21wcyhUeXBlW10gdHlwZXNOZWNlc3NhcnksIGludCBpZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciB0eXBlIGluIHR5cGVzTmVjZXNzYXJ5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBzLkNvbnRhaW5zS2V5KHR5cGUpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcHNbdHlwZV1baWRdID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBib29sIEhhc05vbmVPZlRoZXNlQ29tcHMoVHlwZVtdIHR5cGVzUHJvaGliaXRlZCwgaW50IGlkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVzUHJvaGliaXRlZCA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIHR5cGUgaW4gdHlwZXNQcm9oaWJpdGVkKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcHMuQ29udGFpbnNLZXkodHlwZSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBzW3R5cGVdW2lkXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBUIEdldENvbXBvbmVudDxUPihFbnRpdHkgZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFR5cGUgdHlwZSA9IHR5cGVvZihUKTtcclxuICAgICAgICAgICAgaWYgKCFjb21wcy5Db250YWluc0tleSh0eXBlKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9jb21wcy5BZGQodHlwZSwgbmV3IG9iamVjdFszMDBdKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0KFQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoVCkgY29tcHNbdHlwZV1bZS5pZF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5FQ1Ncclxue1xyXG4gICAgcHVibGljIHN0cnVjdCBFbnRpdHkgOiBJRXF1YXRhYmxlPEVudGl0eT5cclxuICAgIHtcclxuICAgICAgICByZWFkb25seSBpbnRlcm5hbCBpbnQgZWNzO1xyXG4gICAgICAgIHJlYWRvbmx5IGludGVybmFsIGludCBpZDtcclxuXHJcbiAgICAgICAgcHVibGljIEVudGl0eShpbnQgZWNzLCBpbnQgaWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmVjcyA9IGVjcztcclxuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgRXF1YWxzKEVudGl0eSBvdGhlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBvdGhlci5pZCA9PSB0aGlzLmlkICYmIG90aGVyLmVjcyA9PSB0aGlzLmVjcztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIEV4dGVuc2lvbk1ldGhvZHNcclxuICAgIHtcclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFJlbW92ZUNvbXBvbmVudCh0aGlzIEVudGl0eSBlLCBvYmplY3QgY29tcClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEVDU01hbmFnZXIuR2V0SW5zdGFuY2UoZSkuUmVtb3ZlQ29tcG9uZW50KGUsIGNvbXApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBUIEFkZENvbXBvbmVudDxUPih0aGlzIEVudGl0eSBlKSB3aGVyZSBUOiBuZXcoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIEVDU01hbmFnZXIuR2V0SW5zdGFuY2UoZSkuQWRkQ29tcG9uZW50PFQ+KGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQWRkQ29tcG9uZW50KHRoaXMgRW50aXR5IGUsIG9iamVjdCBjb21wKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRUNTTWFuYWdlci5HZXRJbnN0YW5jZShlKS5BZGRDb21wb25lbnQoZSwgY29tcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgVCBHZXRDb21wb25lbnQ8VD4odGhpcyBFbnRpdHkgZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBFQ1NNYW5hZ2VyLkdldEluc3RhbmNlKGUpLkdldENvbXBvbmVudDxUPihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkVDU1xyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgUHJvY2Vzc29yRmxleDxUMSwgVDI+XHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBBY3Rpb248UXVpY2tBY2Nlc3NvclR3bzxUMSwgVDI+PiBwO1xyXG4gICAgICAgIGludGVybmFsIFF1aWNrQWNjZXNzb3JUd288VDEsIFQyPiBhY2Nlc3NvcjtcclxuXHJcbiAgICAgICAgcHVibGljIFByb2Nlc3NvckZsZXgoQWN0aW9uPFF1aWNrQWNjZXNzb3JUd288VDEsIFQyPj4gcClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucCA9IHA7XHJcbiAgICAgICAgICAgIGFjY2Vzc29yID0gbmV3IFF1aWNrQWNjZXNzb3JUd288VDEsIFQyPigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUnVuKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHAoYWNjZXNzb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgUHJvY2Vzc29yQWNjZXNzb3JcclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIEFjdGlvbjxBY2Nlc3Nvcj4gcDtcclxuXHJcbiAgICAgICAgQWNjZXNzb3IgYTtcclxuXHJcbiAgICAgICAgcHVibGljIFByb2Nlc3NvckFjY2Vzc29yKEFjdGlvbjxBY2Nlc3Nvcj4gcCwgQWNjZXNzb3IgYSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMucCA9IHA7XHJcbiAgICAgICAgICAgIHRoaXMuYSA9IGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSdW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcChhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgUGlkcm9oLkJhc2VVdGlscztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnM7XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLlRleHRSZW5kZXJpbmdcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFRleHRXb3JsZFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBQYWxldHRlIHBhbGV0dGUgPSBEZWZhdWx0UGFsZXR0ZXMuQzRLaXJvS2F6ZTtcclxuICAgICAgICBMaXN0PFRleHRFbnRpdHk+IGFjdGl2ZUFnZW50cyA9IG5ldyBMaXN0PFRleHRFbnRpdHk+KCk7XHJcbiAgICAgICAgTGlzdDxUZXh0RW50aXR5PiBmcmVlQm9hcmRzID0gbmV3IExpc3Q8VGV4dEVudGl0eT4oKTtcclxuICAgICAgICBMaXN0PFRleHRBbmltYXRpb24+IGFuaW1hdGlvbnMgPSBuZXcgTGlzdDxUZXh0QW5pbWF0aW9uPigpO1xyXG4gICAgICAgIHB1YmxpYyBUZXh0Qm9hcmQgbWFpbkJvYXJkO1xyXG4gICAgICAgIGludCBsYXRlc3RJZCA9IC0xO1xyXG5cclxuICAgICAgICBwdWJsaWMgVCBBZGRBbmltYXRpb248VD4oVCB0YSkgd2hlcmUgVCA6IFRleHRBbmltYXRpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbnMuQWRkKHRhKTtcclxuICAgICAgICAgICAgdGEuUmVnaXN0ZXJMaXN0cygpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBJbml0KGludCB3aWR0aCwgaW50IGhlaWdodClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1haW5Cb2FyZCA9IG5ldyBUZXh0Qm9hcmQod2lkdGgsIGhlaWdodCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhdygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtYWluQm9hcmQuUmVzZXQoKTtcclxuICAgICAgICAgICAgRHJhd0NoaWxkcmVuKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3Q2hpbGRyZW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBhY3RpdmVBZ2VudHMuQ291bnQ7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlQWdlbnRzW2ldLlJlc2V0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgYW5pbSBpbiBhbmltYXRpb25zKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW0uTW9kaWZ5KGFjdGl2ZUFnZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQWdlbnRzW2ldLmZyZWVJZklkbGUgJiYgIWFjdGl2ZUFnZW50c1tpXS5hbmltYXRpbmcpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlZUJvYXJkcy5BZGQoYWN0aXZlQWdlbnRzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVBZ2VudHMuUmVtb3ZlKGFjdGl2ZUFnZW50c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1haW5Cb2FyZC5JbnNlcnQoYWN0aXZlQWdlbnRzW2ldLkFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVGV4dEVudGl0eSBHZXRGcmVlRW50aXR5KGludCB3LCBpbnQgaClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRleHRFbnRpdHkgdGU7XHJcbiAgICAgICAgICAgIGlmIChmcmVlQm9hcmRzLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGUgPSBmcmVlQm9hcmRzW2ZyZWVCb2FyZHMuQ291bnQgLSAxXTtcclxuICAgICAgICAgICAgICAgIGZyZWVCb2FyZHMuUmVtb3ZlQXQoZnJlZUJvYXJkcy5Db3VudCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGUgPSBuZXcgVGV4dEVudGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgdGUuaWQgPSArK2xhdGVzdElkO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWN0aXZlQWdlbnRzLkFkZCh0ZSk7XHJcbiAgICAgICAgICAgIHRlLmZyZWVJZklkbGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGUuU2V0U2l6ZSh3LCBoKTtcclxuICAgICAgICAgICAgdGUuUmVzZXRGdWxsKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0RW50aXR5IEdldFRlbXBFbnRpdHkoaW50IHcsIGludCBoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHRlID0gR2V0RnJlZUVudGl0eSh3LCBoKTtcclxuICAgICAgICAgICAgdGUuZnJlZUlmSWRsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIEFkdmFuY2VUaW1lKGZsb2F0IHYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgYW5pbSBpbiBhbmltYXRpb25zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhbmltLlVwZGF0ZSh2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgSXNEb25lKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBhbmltIGluIGFuaW1hdGlvbnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICghYW5pbS5Jc0RvbmUoKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xhc3MgVGV4dEVudGl0eVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBpbnQgaWQ7XHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBPcmlnaW47XHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBBbmltYXRpb247XHJcbiAgICAgICAgcHVibGljIGJvb2wgZnJlZUlmSWRsZSA9IGZhbHNlO1xyXG4gICAgICAgIGludGVybmFsIGJvb2wgYW5pbWF0aW5nO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IEhlaWdodCB7IGdldCB7IHJldHVybiBPcmlnaW4uSGVpZ2h0OyB9IH1cclxuICAgICAgICBwdWJsaWMgaW50IFdpZHRoIHsgZ2V0IHsgcmV0dXJuIE9yaWdpbi5XaWR0aDsgfSB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0QW5pbWF0aW9uLkJhc2VEYXRhIEFuaW1CYXNlKGZsb2F0IGxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dEFuaW1hdGlvbi5CYXNlRGF0YShsZW5ndGgsIDAsIGlkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIFZlY3RvcjJEIEdldFBvc2l0aW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBPcmlnaW4uUG9zaXRpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFJlc2V0QW5pbWF0aW9uKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGFuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBBbmltYXRpb24uU2V0KE9yaWdpbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFJlc2V0RnVsbCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBPcmlnaW4uUmVzZXRJbnZpc2libGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgU2V0UG9zaXRpb24oaW50IHgsIGludCB5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgT3JpZ2luLlBvc2l0aW9uID0gbmV3IFZlY3RvcjJEKHgseSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFNldFBvc2l0aW9uKFZlY3RvcjJEIHZlY3RvcjJEKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgT3JpZ2luLlBvc2l0aW9uID0gdmVjdG9yMkQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFNldFNpemUoaW50IHcsIGludCBoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKE9yaWdpbiA9PSBudWxsKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBPcmlnaW4gPSBuZXcgVGV4dEJvYXJkKHcsIGgpO1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uID0gbmV3IFRleHRCb2FyZCh3LCBoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPcmlnaW4uUmVzaXplKHcsIGgpO1xyXG4gICAgICAgICAgICBBbmltYXRpb24uUmVzaXplKHcsIGgpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERlbGF5c0FuaW1hdGlvbiA6IFRleHRBbmltYXRpb25cclxuICAgIHtcclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBSZXF1ZXN0UmVnaXN0ZXJMaXN0cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgRGVsYXkoZmxvYXQgdilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIEFkZChuZXcgQmFzZURhdGEodiwgMCwgLTEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBQb3NpdGlvbkFuaW1hdGlvbiA6IFRleHRBbmltYXRpb248UG9zaXRpb25BbmltYXRpb24uUG9zaXRpb25EYXRhPlxyXG4gICAge1xyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBNb2RpZnkoVGV4dEVudGl0eSBlbnRpdHksIFBvc2l0aW9uRGF0YSBtYWluRGF0YSwgZmxvYXQgcHJvZ3Jlc3MsIGZsb2F0IGxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJhc2UuTW9kaWZ5KGVudGl0eSwgbWFpbkRhdGEsIHByb2dyZXNzLCBsZW5ndGgpO1xyXG4gICAgICAgICAgICBUZXh0Qm9hcmQgdGFyZ2V0ID0gZW50aXR5LkFuaW1hdGlvbjtcclxuICAgICAgICAgICAgaWYgKG1haW5EYXRhLnBlcm1hbmVudClcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IGVudGl0eS5PcmlnaW47XHJcbiAgICAgICAgICAgIHRhcmdldC5Qb3NpdGlvbiA9IFZlY3RvcjJELkludGVycG9sYXRlUm91bmRlZChtYWluRGF0YS5zdGFydFBvc2l0aW9uLCBtYWluRGF0YS5lbmRQb3NpdGlvbiwgcHJvZ3Jlc3MgLyBsZW5ndGgpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJ1Y3QgUG9zaXRpb25EYXRhXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwdWJsaWMgcmVhZG9ubHkgYm9vbCBwZXJtYW5lbnQ7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBWZWN0b3IyRCBzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIHB1YmxpYyBQb3NpdGlvbkRhdGEoVmVjdG9yMkQgc3RhcnRQb3NpdGlvbiwgVmVjdG9yMkQgZW5kUG9zaXRpb24sIGJvb2wgcGVybSA9IGZhbHNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmRQb3NpdGlvbiA9IGVuZFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJtYW5lbnQgPSBwZXJtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBUZXh0QW5pbWF0aW9uPFQ+IDogVGV4dEFuaW1hdGlvblxyXG4gICAge1xyXG4gICAgICAgIHByb3RlY3RlZCBMaXN0PFQ+IG1haW5EYXRhID0gbmV3IExpc3Q8VD4oKTtcclxuICAgICAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdm9pZCBSZXF1ZXN0UmVnaXN0ZXJMaXN0cygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLlJlZ2lzdGVyTGlzdChtYWluRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZGQoQmFzZURhdGEgYmFzZURhdGEsIFQgbWFpbkQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLkFkZChiYXNlRGF0YSk7XHJcbiAgICAgICAgICAgIG1haW5EYXRhLkFkZChtYWluRCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb3ZlcnJpZGUgdm9pZCBNb2RpZnkoVGV4dEVudGl0eSBlbnRpdHksIGludCBpbmRleCwgZmxvYXQgcHJvZ3Jlc3MsIGZsb2F0IGxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIE1vZGlmeShlbnRpdHksIG1haW5EYXRhW2luZGV4XSwgcHJvZ3Jlc3MsIGxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIE1vZGlmeShUZXh0RW50aXR5IGVudGl0eSwgVCBtYWluRGF0YSwgZmxvYXQgcHJvZ3Jlc3MsIGZsb2F0IGxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2ludGVybmFsIG92ZXJyaWRlIHZvaWQgRXhlY3V0ZShpbnQgaW5kZXgsIEJhc2VEYXRhIGJhc2VEYXRhKVxyXG4gICAgICAgIC8ve1xyXG4gICAgICAgIC8vICAgIHRoaXMuRXhlY3V0ZShtYWluRGF0YVtpbmRleF0sIGJhc2VEYXRhKTtcclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgLy9wdWJsaWMgYWJzdHJhY3Qgdm9pZCBFeGVjdXRlKFQgbWFpbkRhdGEsIEJhc2VEYXRhIGJhc2VEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgVGV4dEFuaW1hdGlvblxyXG4gICAge1xyXG5cclxuICAgICAgICBwdWJsaWMgc3RydWN0IEJhc2VEYXRhXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZmxvYXQgbGVuZ3RoO1xyXG4gICAgICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZmxvYXQgcHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgdGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgcHVibGljIEJhc2VEYXRhKGZsb2F0IGxlbmd0aCwgZmxvYXQgcHJvZ3Jlc3MsIGludCB0YXJnZXQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgTGlzdDxmbG9hdD4gbGVuZ3RoID0gbmV3IExpc3Q8ZmxvYXQ+KCk7XHJcbiAgICAgICAgTGlzdDxmbG9hdD4gcHJvZ3Jlc3MgPSBuZXcgTGlzdDxmbG9hdD4oKTtcclxuICAgICAgICBMaXN0PGludD4gdGFyZ2V0cyA9IG5ldyBMaXN0PGludD4oKTtcclxuICAgICAgICBMaXN0PElMaXN0PiBsaXN0cyA9IG5ldyBMaXN0PElMaXN0PigpO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBSZWdpc3Rlckxpc3RzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxpc3RzLkFkZChsZW5ndGgpO1xyXG4gICAgICAgICAgICBsaXN0cy5BZGQocHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICBsaXN0cy5BZGQodGFyZ2V0cyk7XHJcbiAgICAgICAgICAgIFJlcXVlc3RSZWdpc3Rlckxpc3RzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgdm9pZCBSZXF1ZXN0UmVnaXN0ZXJMaXN0cygpO1xyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBVcGRhdGUoZmxvYXQgZGVsdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHByb2dyZXNzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzW2ldICs9IGRlbHRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzW2ldID49IGxlbmd0aFtpXSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBFbmRUYXNrKGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vRXhlY3V0ZShpLCBuZXcgQmFzZURhdGEobGVuZ3RoW2ldLHByb2dyZXNzW2ldLCB0YXJnZXRzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vaW50ZXJuYWwgYWJzdHJhY3Qgdm9pZCBFeGVjdXRlKGludCBpbmRleCwgQmFzZURhdGEgYmFzZURhdGEpO1xyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIEFkZChCYXNlRGF0YSBiZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb2dyZXNzLkFkZChiZC5wcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIHRhcmdldHMuQWRkKGJkLnRhcmdldCk7XHJcbiAgICAgICAgICAgIGxlbmd0aC5BZGQoYmQubGVuZ3RoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBib29sIElzRG9uZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgaXRlbSBpbiBsaXN0cylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uQ291bnQgIT0gcHJvZ3Jlc3MuQ291bnQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHMuVHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9ncmVzcy5Db3VudCA9PSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBFbmRUYXNrKGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGwgaW4gbGlzdHMpXHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsLlJlbW92ZUF0KGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIFJlZ2lzdGVyTGlzdChJTGlzdCBtYWluRGF0YSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxpc3RzLkFkZChtYWluRGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCB2b2lkIE1vZGlmeShUZXh0RW50aXR5IGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHByb2dyZXNzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChhLmlkID09IHRhcmdldHNbaV0pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgTW9kaWZ5KGEsIGksIHByb2dyZXNzW2ldLCBsZW5ndGhbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZpcnR1YWwgdm9pZCBNb2RpZnkoVGV4dEVudGl0eSBlbnRpdHksIGludCBpbmRleCwgZmxvYXQgcHJvZ3Jlc3MsIGZsb2F0IGxlbmd0aClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5UZXh0UmVuZGVyaW5nXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBQYWxldHRlXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIHN0cmluZ1tdIEh0bWxDb2xvcnM7XHJcblxyXG5cclxuICAgICAgICBwdWJsaWMgUGFsZXR0ZShwYXJhbXMgc3RyaW5nW10gY29sb3JzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgSHRtbENvbG9ycyA9IGNvbG9ycztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIERlZmF1bHRQYWxldHRlc1xyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUGFsZXR0ZSBDNEtpcm9LYXplID0gbmV3IFBhbGV0dGUoXCIjMzMyYzUwXCIsIFwiIzQ2ODc4ZlwiLCBcIiM5NGUzNDRcIiwgXCIjZTJmM2U0XCIpO1xyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgUGFsZXR0ZSBDNFJlYWRlciA9IG5ldyBQYWxldHRlKFwiIzI2MjYyNlwiLCBcIiM4YjhjYmFcIiwgXCIjOGJiYTkxXCIsIFwiIzY0OWY4ZFwiKTtcclxuICAgICAgICBwdWJsaWMgc3RhdGljIFBhbGV0dGUgQzROb3ZlbCA9IG5ldyBQYWxldHRlKFwiIzI2MjYyNlwiLCBcIiMzNDJkNDFcIiwgXCIjYjhiOGI4XCIsIFwiIzhiOGNiYVwiKTtcclxuICAgICAgICBwdWJsaWMgY29uc3QgaW50IEM0QmxhY2sgPSAwO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgQzRCbGFja05ldXRyYWwgPSAxO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgQzRXaGl0ZU5ldXRyYWwgPSAyO1xyXG4gICAgICAgIHB1YmxpYyBjb25zdCBpbnQgQzRXaGl0ZSA9IDM7XHJcblxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5CYXNlVXRpbHM7XHJcbnVzaW5nIFBpZHJvaC5UdXJuQmFzZWQuVGV4dFJlbmRlcmluZztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLlRleHRSZW5kZXJpbmcuR2FtZVNjcmVlblxyXG57XHJcbiAgICBwdWJsaWMgc3RydWN0IE1vdXNlSG92ZXJcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgUmVjdCByZWN0O1xyXG4gICAgICAgIHB1YmxpYyBpbnQgdHlwZTtcclxuICAgICAgICBwdWJsaWMgaW50IGlkO1xyXG5cclxuICAgICAgICBwdWJsaWMgTW91c2VIb3ZlcihSZWN0IHJlY3QsIGludCB0eXBlLCBpbnQgaWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnJlY3QgPSByZWN0O1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBNb3VzZUhvdmVyTWFuYWdlclxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBMaXN0PE1vdXNlSG92ZXI+IG1vdXNlSG92ZXJzID0gbmV3IExpc3Q8TW91c2VIb3Zlcj4oKTtcclxuICAgICAgICBwdWJsaWMgTGlzdDxNb3VzZUhvdmVyPiBtb3VzZUhvdmVyc0FjdGl2ZSA9IG5ldyBMaXN0PE1vdXNlSG92ZXI+KCk7XHJcbiAgICAgICAgcHVibGljIE1vdXNlSU8gbW91c2VJTztcclxuXHJcbiAgICAgICAgcHVibGljIE1vdXNlSG92ZXJNYW5hZ2VyKE1vdXNlSU8gbW91c2VJTylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VJTyA9IG1vdXNlSU87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBVcGRhdGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW91c2VIb3ZlcnNBY3RpdmUuQ2xlYXIoKTtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gbW91c2VIb3ZlcnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnJlY3QuQ29udGFpbnMobW91c2VJTy5wb3MpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlSG92ZXJzQWN0aXZlLkFkZChpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5CYXNlVXRpbHM7XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guVGV4dFJlbmRlcmluZ1xyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgVGV4dEJvYXJkXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIGNvbnN0IGNoYXIgTk9DSEFOR0VDSEFSID0gKGNoYXIpMTtcclxuICAgICAgICBwdWJsaWMgY29uc3QgY2hhciBJTlZJU0lCTEVDSEFSID0gKGNoYXIpMjtcclxuICAgICAgICBwdWJsaWMgY29uc3QgaW50IE5PQ0hBTkdFQ09MT1IgPSAtMjtcclxuICAgICAgICBwdWJsaWMgY29uc3QgaW50IElOVklTSUJMRUNPTE9SID0gLTE7XHJcbiAgICAgICAgY2hhclssXSBjaGFycztcclxuICAgICAgICBwdWJsaWMgaW50WyxdIFRleHRDb2xvciB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgaW50WyxdIEJhY2tDb2xvciB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuICAgICAgICAvL1N0cmluZ0J1aWxkZXIgc3RyaW5nQnVpbGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7XHJcbiAgICAgICAgaW50IGN1cnNvclggPSAwO1xyXG4gICAgICAgIGludCBjdXJzb3JZID0gMDtcclxuICAgICAgICBwdWJsaWMgVmVjdG9yMkQgUG9zaXRpb24geyBnZXQ7IHNldDsgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZChpbnQgd2lkdGgsIGludCBoZWlnaHQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL1NldE1heFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIFJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdPbkNlbnRlcihzdHJpbmcgbWVzc2FnZSwgaW50IGNvbG9yLCBpbnQgeE9mZiA9IDAsIGludCB5T2ZmID0gMCwgYm9vbCBhbGlnblN0cmluZyA9IHRydWUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgeCA9IChXaWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBpZiAoYWxpZ25TdHJpbmcpIHggLT0gbWVzc2FnZS5MZW5ndGggLyAyO1xyXG4gICAgICAgICAgICBpbnQgeSA9IEhlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIERyYXcobWVzc2FnZSwgeCArIHhPZmYsIHkgKyB5T2ZmLCBjb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFNldE1heFNpemUoaW50IHdpZHRoLCBpbnQgaGVpZ2h0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2hhcnMgPSBuZXcgY2hhclt3aWR0aCwgaGVpZ2h0XTtcclxuICAgICAgICAgICAgVGV4dENvbG9yID0gbmV3IGludFt3aWR0aCwgaGVpZ2h0XTtcclxuICAgICAgICAgICAgQmFja0NvbG9yID0gbmV3IGludFt3aWR0aCwgaGVpZ2h0XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFJlc2V0KClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERyYXdSZXBlYXRlZCgnICcsIDAsIDAsIFdpZHRoLCBIZWlnaHQsIDAsIDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgUmVzZXRJbnZpc2libGUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd1JlcGVhdGVkKElOVklTSUJMRUNIQVIsIDAsIDAsIFdpZHRoLCBIZWlnaHQsIElOVklTSUJMRUNPTE9SLCBJTlZJU0lCTEVDT0xPUik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIGludCBXaWR0aCB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgSW5zZXJ0KFRleHRCb2FyZCBzZWNvbmRCb2FyZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgc2Vjb25kQm9hcmQuV2lkdGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBzZWNvbmRCb2FyZC5IZWlnaHQ7IGorKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgeCA9IChpbnQpc2Vjb25kQm9hcmQuUG9zaXRpb24uWCArIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHkgPSAoaW50KXNlY29uZEJvYXJkLlBvc2l0aW9uLlkgKyBqO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWNvbmRCb2FyZC5jaGFyc1tpLCBqXSAhPSBJTlZJU0lCTEVDSEFSKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyc1t4LCB5XSA9IHNlY29uZEJvYXJkLmNoYXJzW2ksIGpdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWNvbmRCb2FyZC5UZXh0Q29sb3JbaSwgal0gIT0gSU5WSVNJQkxFQ09MT1IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRDb2xvclt4LCB5XSA9IHNlY29uZEJvYXJkLlRleHRDb2xvcltpLCBqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kQm9hcmQuQmFja0NvbG9yW2ksIGpdICE9IElOVklTSUJMRUNPTE9SKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBCYWNrQ29sb3JbeCwgeV0gPSBzZWNvbmRCb2FyZC5CYWNrQ29sb3JbaSwgal07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG5cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgSGVpZ2h0IHsgZ2V0OyBwcml2YXRlIHNldDsgfVxyXG4gICAgICAgIHB1YmxpYyBpbnQgQ3Vyc29yWFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZ2V0IHsgcmV0dXJuIGN1cnNvclg7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnNvclggPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgaW50IEN1cnNvclkgeyBnZXQgeyByZXR1cm4gY3Vyc29yWTsgfVxyXG4gICAgICAgICAgICBzZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yWSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3T25lRGlnaXQoaW50IGksIGludCB4LCBpbnQgeSwgaW50IGNvbG9yID0gTk9DSEFOR0VDT0xPUiwgaW50IGJhY2tncm91bmQgPSBOT0NIQU5HRUNPTE9SKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2hhciBjID0gKGNoYXIpKGkgKyAnMCcpO1xyXG4gICAgICAgICAgICBEcmF3Q2hhcihjLCB4LCB5LCBjb2xvciwgYmFja2dyb3VuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3VHdvRGlnaXRzKGludCBpLCBpbnQgeCwgaW50IHksIGludCBjb2xvciA9IE5PQ0hBTkdFQ09MT1IsIGludCBiYWNrZ3JvdW5kID0gTk9DSEFOR0VDT0xPUilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIERyYXdPbmVEaWdpdChpLzEwLHgseSxjb2xvcixiYWNrZ3JvdW5kKTtcclxuICAgICAgICAgICAgRHJhd09uZURpZ2l0KGkgJTEwLCB4KzEsIHksIGNvbG9yLCBiYWNrZ3JvdW5kKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGJvb2wgU2FtZUFzKFRleHRCb2FyZCB0ZXh0Qm9hcmQsIGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYXJzW3gsIHldID09IHRleHRCb2FyZC5jaGFyc1t4LCB5XVxyXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5CYWNrQ29sb3JbeCx5XSA9PSB0ZXh0Qm9hcmQuQmFja0NvbG9yW3gseV1cclxuICAgICAgICAgICAgICAgICYmIHRoaXMuVGV4dENvbG9yW3gseV0gPT0gdGV4dEJvYXJkLlRleHRDb2xvclt4LHldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBDb3B5KFRleHRCb2FyZCB0ZXh0Qm9hcmQsIGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhcnNbeCwgeV0gPSB0ZXh0Qm9hcmQuY2hhcnNbeCwgeV07XHJcbiAgICAgICAgICAgIHRoaXMuVGV4dENvbG9yW3gsIHldID0gdGV4dEJvYXJkLlRleHRDb2xvclt4LCB5XTtcclxuICAgICAgICAgICAgdGhpcy5CYWNrQ29sb3JbeCwgeV0gPSB0ZXh0Qm9hcmQuQmFja0NvbG9yW3gsIHldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBEcmF3X0N1cnNvcl9Vbmljb2RlTGFiZWwoaW50IHYsIGludCBjb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBsZW4gPSBEcmF3VW5pY29kZUxhYmVsKHYsIGN1cnNvclgsIGN1cnNvclksIGNvbG9yKTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQWR2YW5jZUN1cnNvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgaW50IERyYXdVbmljb2RlTGFiZWwoaW50IHVuaWNvZGUsIGludCB4LCBpbnQgeSwgaW50IGNvbG9yKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHVuaWNvZGUgPj0gJ2EnICYmIHVuaWNvZGUgPD0gJ3onKSB7XHJcbiAgICAgICAgICAgICAgICBEcmF3Q2hhcigoY2hhcikodW5pY29kZSArICdBJyAtICdhJyksIHgsIHksIGNvbG9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1bmljb2RlID49ICcwJyAmJiB1bmljb2RlIDw9ICc5JylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRHJhd0NoYXIoKGNoYXIpKHVuaWNvZGUpLCB4LCB5LCBjb2xvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJpbmcgbGFiZWwgPSBcIlwiO1xyXG4gICAgICAgICAgICBpZiAodW5pY29kZSA9PSAzMilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwgPSBcIlNQQUNFXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgRHJhdyhsYWJlbCwgeCwgeSwgY29sb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gbGFiZWwuTGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBTZXQoVGV4dEJvYXJkIG9yaWdpbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuUG9zaXRpb24gPSBvcmlnaW4uUG9zaXRpb247XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgV2lkdGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBIZWlnaHQ7IGorKylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJzW2ksIGpdID0gb3JpZ2luLmNoYXJzW2ksIGpdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQmFja0NvbG9yW2ksIGpdID0gb3JpZ2luLkJhY2tDb2xvcltpLCBqXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlRleHRDb2xvcltpLCBqXSA9IG9yaWdpbi5UZXh0Q29sb3JbaSwgal07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgUmVzaXplKGludCB3LCBpbnQgaClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChjaGFycyA9PSBudWxsIHx8IHcgPiBjaGFycy5HZXRMZW5ndGgoMCkgfHwgaCA+IGNoYXJzLkdldExlbmd0aCgxKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgU2V0TWF4U2l6ZSh3LCBoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBXaWR0aCA9IHc7XHJcbiAgICAgICAgICAgIEhlaWdodCA9IGg7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGNoYXIgQ2hhckF0KGludCBpLCBpbnQgailcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFyc1tpLCBqXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldEN1cnNvckF0KGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGN1cnNvclggPSB4O1xyXG4gICAgICAgICAgICBjdXJzb3JZID0geTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdfQ3Vyc29yKHN0cmluZyB2KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yZWFjaCAodmFyIGMgaW4gdilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRHJhd19DdXJzb3IoYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdfQ3Vyc29yKHN0cmluZyB2LCBpbnQgY29sb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgYyBpbiB2KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBEcmF3X0N1cnNvcihjLCBjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIGJvb2wgQ2FuRHJhd19DdXJzb3JfU21hcnRMaW5lQnJlYWsoc3RyaW5nIHYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgY3VycmVudFggPSBjdXJzb3JYO1xyXG4gICAgICAgICAgICBpbnQgY3VycmVudFkgPSBjdXJzb3JZO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB2Lkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib29sIGxpbmVCcmVhayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYm9vbCBzaG91bGRDaGVja0ZvckxpbmVCcmVha3MgPSAoaSA9PSAwIHx8IHZbaV0gPT0gJyAnKSAmJiBpICE9IHYuTGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGlmIChzaG91bGRDaGVja0ZvckxpbmVCcmVha3MpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDE7IGogPCB2Lkxlbmd0aCAtIGk7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqICsgY3VycmVudFggPj0gV2lkdGgpIC8vcmVhY2ggZW5kIG9mIHRoZSBsaW5lIHdpdGhvdXQgZW5kaW5nIHRoZSB3b3JkLCBzaG91bGQgbGluZSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodltpXSA9PSAnICcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrOyAvL3NraXAgdGhyb3VnaCB0aGUgc3BhY2UgaWYgaXQncyBhIG5ldyBsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lQnJlYWsgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZbaSArIGpdID09ICcgJykgLy9uZXcgd29yZCBiZWdpbnMgc28gbm8gbmVlZCB0byBsaW5lIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmVCcmVhaylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50WSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRYID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnRYKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFggPj0gV2lkdGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFkrKztcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50WCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFggPj0gV2lkdGggfHwgY3VycmVudFkgPj0gSGVpZ2h0KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIERyYXdDdXJzb3JSZXN1bHQgRHJhd19DdXJzb3JfU21hcnRMaW5lQnJlYWsoc3RyaW5nIHYsIGludCBjb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBvZmZTdGFydCA9IDA7XHJcbiAgICAgICAgICAgIGludCBvZmZFbmQgPSB2Lkxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHJldHVybiBEcmF3X0N1cnNvcl9TbWFydExpbmVCcmVhayh2LCBjb2xvciwgb2ZmU3RhcnQsIG9mZkVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgRHJhd0N1cnNvclJlc3VsdCBEcmF3X0N1cnNvcl9TbWFydExpbmVCcmVhayhzdHJpbmcgdiwgaW50IGNvbG9yLCBpbnQgb2ZmU3RhcnQsIGludCBvZmZFbmQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgVmVjdG9yMkQgc3RhcnQgPSBuZXcgVmVjdG9yMkQoQ3Vyc29yWCwgQ3Vyc29yWSk7XHJcbiAgICAgICAgICAgIGludCBlbmRJbmRleCA9IG9mZkVuZCArIDE7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSBvZmZTdGFydDsgaSA8IGVuZEluZGV4OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCBvcmlnaW5YID0gY3Vyc29yWDtcclxuICAgICAgICAgICAgICAgIGJvb2wgbGluZUJyZWFrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBib29sIHNob3VsZENoZWNrRm9yTGluZUJyZWFrcyA9IChpID09IDAgfHwgdltpXSA9PSAnICcpICYmIGkgIT0gZW5kSW5kZXggLSAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZENoZWNrRm9yTGluZUJyZWFrcylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBqID0gMTsgaiA8IGVuZEluZGV4IC0gaTsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogKyBvcmlnaW5YID49IFdpZHRoKSAvL3JlYWNoIGVuZCBvZiB0aGUgbGluZSB3aXRob3V0IGVuZGluZyB0aGUgd29yZCwgc2hvdWxkIGxpbmUgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZbaV0gPT0gJyAnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsgLy9za2lwIHRocm91Z2ggdGhlIHNwYWNlIGlmIGl0J3MgYSBuZXcgbGluZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUJyZWFrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2W2kgKyBqXSA9PSAnICcpIC8vbmV3IHdvcmQgYmVnaW5zIHNvIG5vIG5lZWQgdG8gbGluZSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaW5lQnJlYWspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ3Vyc29yTmV3TGluZSgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIERyYXdfQ3Vyc29yKHZbaV0sIGNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBWZWN0b3IyRCBlbmQgPSBuZXcgVmVjdG9yMkQoQ3Vyc29yWCwgQ3Vyc29yWSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRHJhd0N1cnNvclJlc3VsdChQb3NpdGlvblRvSW5kZXgoc3RhcnQpLCBQb3NpdGlvblRvSW5kZXgoZW5kKSwgc3RhcnQsIGVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGludCBQb3NpdGlvblRvSW5kZXgoVmVjdG9yMkQgc3RhcnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gKGludCkoc3RhcnQuWCArIHN0YXJ0LlkgKiBXaWR0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3T25lRGlnaXRfQ3Vyc29yKGludCBpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgRHJhd19DdXJzb3IoKGNoYXIpKGkgKyAnMCcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdfQ3Vyc29yKGNoYXIgYylcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBEcmF3Q2hhcihjLCBjdXJzb3JYLCBjdXJzb3JZKTtcclxuICAgICAgICAgICAgQWR2YW5jZUN1cnNvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd19DdXJzb3IoY2hhciBjLCBpbnQgY29sb3IpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgRHJhd0NoYXIoYywgY3Vyc29yWCwgY3Vyc29yWSwgY29sb3IpO1xyXG4gICAgICAgICAgICBBZHZhbmNlQ3Vyc29yKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBBZHZhbmNlQ3Vyc29yKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGN1cnNvclgrKztcclxuICAgICAgICAgICAgaWYgKGN1cnNvclggPj0gV2lkdGgpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnNvclggPSAwO1xyXG4gICAgICAgICAgICAgICAgY3Vyc29yWSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBDdXJzb3JOZXdMaW5lKGludCB4KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY3Vyc29yWSsrO1xyXG4gICAgICAgICAgICBjdXJzb3JYID0geDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdDaGFyKGNoYXIgdiwgaW50IHgsIGludCB5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh2ICE9IE5PQ0hBTkdFQ0hBUikge1xyXG4gICAgICAgICAgICAgICAgY2hhcnNbeCwgeV0gPSB2O1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3Q2hhcihjaGFyIHYsIGludCB4LCBpbnQgeSwgaW50IGNvbG9yLCBpbnQgYmFja0NvbG9yID0gTk9DSEFOR0VDT0xPUilcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBEcmF3Q2hhcih2LCB4LCB5KTtcclxuICAgICAgICAgICAgU2V0Q29sb3IoY29sb3IsIHgsIHkpO1xyXG4gICAgICAgICAgICBTZXRCYWNrQ29sb3IoYmFja0NvbG9yLCB4LCB5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGludGVybmFsIHZvaWQgU2V0QWxsKGNoYXIgdGV4dCwgaW50IHRleHRDb2xvciA9IE5PQ0hBTkdFQ09MT1IsIGludCBiYWNrQ29sb3I9IE5PQ0hBTkdFQ09MT1IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBEcmF3UmVwZWF0ZWQodGV4dCwgMCwgMCwgV2lkdGgsIEhlaWdodCwgdGV4dENvbG9yLCBiYWNrQ29sb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd1dpdGhHcmlkKHN0cmluZyB0ZXh0LCBpbnQgeCwgaW50IHksIGludCBncmlkQ29sb3IsIGludCB0ZXh0Q29sb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgd2lkdGggPSB0ZXh0Lkxlbmd0aDtcclxuICAgICAgICAgICAgRHJhd0dyaWQoeCwgeSwgd2lkdGggKyAyLCAzLCBncmlkQ29sb3IpO1xyXG4gICAgICAgICAgICBEcmF3KHRleHQsIHggKyAxLCB5ICsgMSwgdGV4dENvbG9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXcoc3RyaW5nIHYsIGludCB4LCBpbnQgeSwgaW50IGNvbG9yLCBpbnQgYmFja0NvbG9yID0gTk9DSEFOR0VDT0xPUilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdi5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IHgyID0geCArIGk7XHJcbiAgICAgICAgICAgICAgICBpbnQgeTIgPSB5O1xyXG4gICAgICAgICAgICAgICAgaWYoeDIgPj0gV2lkdGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDIgLT0gV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgeTIrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIERyYXdDaGFyKHZbaV0sIHgyLCB5MiwgY29sb3IsIGJhY2tDb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXdXaXRoTGluZWJyZWFrcyhzdHJpbmcgdiwgaW50IHgsIGludCB5LCBpbnQgbmV3bGluZVgsIGludCBjb2xvciwgaW50IGJhY2tDb2xvciA9IE5PQ0hBTkdFQ09MT1IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgbGluZWJyZWFrcyA9IDA7XHJcbiAgICAgICAgICAgIGludCB4T2Zmc2V0bmV3bGluZXMgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHYuTGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCB4MiA9IHggKyBpKyB4T2Zmc2V0bmV3bGluZXM7XHJcbiAgICAgICAgICAgICAgICBpbnQgeTIgPSB5O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoeDIgPj0gV2lkdGgpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDIgLT0gV2lkdGgrbmV3bGluZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgeTIrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIERyYXdDaGFyKHZbaV0sIHgyLCB5MitsaW5lYnJlYWtzLCBjb2xvciwgYmFja0NvbG9yKTtcclxuICAgICAgICAgICAgICAgIGlmICh2W2ldID09ICdcXG4nKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVicmVha3MrKztcclxuICAgICAgICAgICAgICAgICAgICB4T2Zmc2V0bmV3bGluZXMgKz0gbmV3bGluZVggLSB4Mi0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhdyhJRW51bWVyYWJsZTxjaGFyPiB2LCBpbnQgeCwgaW50IHksIGludCBjb2xvciwgaW50IGJhY2tDb2xvciA9IE5PQ0hBTkdFQ09MT1IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFN5c3RlbS5MaW5xLkVudW1lcmFibGUuQ291bnQ8Y2hhcj4odik7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRHJhd0NoYXIoU3lzdGVtLkxpbnEuRW51bWVyYWJsZS5FbGVtZW50QXQ8Y2hhcj4odixpKSwgeCArIGksIHksIGNvbG9yLCBiYWNrQ29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3R3JpZChpbnQgeCwgaW50IHksIGludCB3aWR0aCwgaW50IGhlaWdodCwgaW50IGNvbG9yKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIERyYXdSZXBlYXRlZCgoY2hhcikxNzksIHgsIHksIDEsIGhlaWdodCwgY29sb3IpO1xyXG4gICAgICAgICAgICBEcmF3UmVwZWF0ZWQoKGNoYXIpMTc5LCB4ICsgd2lkdGggLSAxLCB5LCAxLCBoZWlnaHQsIGNvbG9yKTtcclxuICAgICAgICAgICAgRHJhd1JlcGVhdGVkKChjaGFyKTE5NiwgeCwgeSwgd2lkdGgsIDEsIGNvbG9yKTtcclxuICAgICAgICAgICAgRHJhd1JlcGVhdGVkKChjaGFyKTE5NiwgeCwgeSArIGhlaWdodCAtIDEsIHdpZHRoLCAxLCBjb2xvcik7XHJcblxyXG4gICAgICAgICAgICBEcmF3UmVwZWF0ZWQoKGNoYXIpMjE4LCB4LCB5LCAxLCAxLCBjb2xvcik7XHJcbiAgICAgICAgICAgIERyYXdSZXBlYXRlZCgoY2hhcikxOTIsIHgsICAgICAgICAgICAgICB5K2hlaWdodC0xLCAxLCAxLCBjb2xvcik7XHJcbiAgICAgICAgICAgIERyYXdSZXBlYXRlZCgoY2hhcikyMTcsIHgrd2lkdGgtMSwgICAgICB5KyBoZWlnaHQgLSAxLCAxLCAxLCBjb2xvcik7XHJcbiAgICAgICAgICAgIERyYXdSZXBlYXRlZCgoY2hhcikxOTEsIHggKyB3aWR0aCAtIDEsICB5LCAxLCAxLCBjb2xvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3UmVwZWF0ZWQoY2hhciBjLCBpbnQgeCwgaW50IHksIGludCB3aWR0aCwgaW50IGhlaWdodCwgaW50IGNvbG9yLCBpbnQgYmFja0NvbG9yID0gTk9DSEFOR0VDT0xPUilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSB4OyBpIDwgeCArIHdpZHRoOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSB5OyBqIDwgeSArIGhlaWdodDsgaisrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIERyYXdDaGFyKGMsIGksIGosIGNvbG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU2V0QmFja0NvbG9yKGJhY2tDb2xvciwgaSwgaik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldENvbG9yKGludCBjb2xvciwgaW50IHgsIGludCB5KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGNvbG9yICE9IE5PQ0hBTkdFQ09MT1IpXHJcbiAgICAgICAgICAgICAgICBUZXh0Q29sb3JbeCwgeV0gPSBjb2xvcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIFNldEJhY2tDb2xvcihpbnQgY29sb3IsIGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChjb2xvciAhPSBOT0NIQU5HRUNPTE9SKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBCYWNrQ29sb3JbeCwgeV0gPSBjb2xvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhdyhzdHJpbmcgdiwgaW50IHgyLCBpbnQgeTIsIG9iamVjdCBpbnB1dClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0dyaWQoaW50IHYxLCBpbnQgdjIsIGludCB2MywgaW50IHY0LCBvYmplY3QgYm9hcmQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFeGNlcHRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdHJ1Y3QgRHJhd0N1cnNvclJlc3VsdFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcHVibGljIGludCBTdGFydEluZGV4O1xyXG4gICAgICAgICAgICBwdWJsaWMgaW50IEVuZEluZGV4O1xyXG4gICAgICAgICAgICBwdWJsaWMgVmVjdG9yMkQgU3RhcnRQb3NpdGlvbjtcclxuICAgICAgICAgICAgcHVibGljIFZlY3RvcjJEIEVuZFBvc2l0aW9uO1xyXG5cclxuICAgICAgICAgICAgcHVibGljIERyYXdDdXJzb3JSZXN1bHQoaW50IHN0YXJ0SW5kZXgsIGludCBlbmRJbmRleCwgVmVjdG9yMkQgc3RhcnRQb3NpdGlvbiwgVmVjdG9yMkQgZW5kUG9zaXRpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFN0YXJ0SW5kZXggPSBzdGFydEluZGV4O1xyXG4gICAgICAgICAgICAgICAgRW5kSW5kZXggPSBlbmRJbmRleDtcclxuICAgICAgICAgICAgICAgIFN0YXJ0UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgRW5kUG9zaXRpb24gPSBlbmRQb3NpdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJ1c2luZyBQaWRyb2guVGV4dFJlbmRlcmluZztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLlRleHRSZW5kZXJpbmdcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFRleHRTY3JlZW5OIDogSVRleHRTY3JlZW4sIElNb3VzZUlucHV0LCBJS2V5Ym9hcmRJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBUZXh0V29ybGQgVGV4dFdvcmxkO1xyXG5cclxuICAgICAgICBwdWJsaWMgdmlydHVhbCB2b2lkIFVwZGF0ZShmbG9hdCBmKSB7IH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRTY3JlZW5OKClcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVGV4dFNjcmVlbk4oVGV4dFdvcmxkIHRleHRXb3JsZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRleHRXb3JsZCA9IHRleHRXb3JsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyAgdm9pZCBJbml0KGludCB3LCBpbnQgaClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRleHRXb3JsZCA9IG5ldyBUZXh0V29ybGQoKTtcclxuICAgICAgICAgICAgVGV4dFdvcmxkLkluaXQodywgaCk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBHZXRCb2FyZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVGV4dFdvcmxkLm1haW5Cb2FyZDtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgTW91c2VFdmVudChNb3VzZUV2ZW50cyBtb3VzZURvd24sIGludCB2MSwgaW50IHYyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IElucHV0VW5pY29kZSB7IHNldDsgZ2V0OyB9XHJcbiAgICAgICAgaW50IElucHV0QXNOdW1iZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGdldFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5wdXRVbmljb2RlIC0gNDg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGludGVyZmFjZSBJVGV4dFNjcmVlblxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIFRleHRCb2FyZCBHZXRCb2FyZCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZvaWQgVXBkYXRlKGZsb2F0IGYpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbnRlcmZhY2UgSU1vdXNlSW5wdXRcclxuICAgIHtcclxuICAgICAgICB2b2lkIE1vdXNlRXZlbnQoTW91c2VFdmVudHMgZXZlbnRUeXBlLCBpbnQgdjEsIGludCB2Mik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGludGVyZmFjZSBJS2V5Ym9hcmRJbnB1dFxyXG4gICAge1xyXG4gICAgICAgIGludCBJbnB1dFVuaWNvZGUgeyBzZXQ7IH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW51bSBNb3VzZUV2ZW50c1xyXG4gICAgeyBcclxuICAgICAgICBNb3VzZURvd24sXHJcbiAgICAgICAgTm9uZVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGFzcyBUZXh0U2NyZWVuSG9sZGVyXHJcbiAgICB7XHJcbiAgICAgICAgcHVibGljIElUZXh0U2NyZWVuIFNjcmVlbiB7IGdldDsgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIElNb3VzZUlucHV0IE1vdXNlIHsgZ2V0OyBzZXQ7IH1cclxuICAgICAgICBwdWJsaWMgSUtleWJvYXJkSW5wdXQgS2V5IHsgZ2V0OyBzZXQ7IH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBTZXRBbGwob2JqZWN0IGRucylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFNjcmVlbiA9IGRucyBhcyBJVGV4dFNjcmVlbjtcclxuICAgICAgICAgICAgTW91c2UgPSBkbnMgYXMgSU1vdXNlSW5wdXQ7XHJcbiAgICAgICAgICAgIEtleSA9IGRucyBhcyBJS2V5Ym9hcmRJbnB1dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgUGlkcm9oLkJhc2VVdGlscztcclxudXNpbmcgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkO1xyXG51c2luZyBQaWRyb2guRUNTO1xyXG51c2luZyBQaWRyb2guVGV4dFJlbmRlcmluZztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLlR1cm5CYXNlZC5UZXh0UmVuZGVyaW5nXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBIYXBwSGFuZGxpbmdcclxuICAgIHtcclxuICAgICAgICBCYXR0bGVSZW5kZXIgYmF0dGxlUmVuZGVyO1xyXG4gICAgICAgIEVDU01hbmFnZXIgZWNzO1xyXG4gICAgICAgIHB1YmxpYyBBY3Rpb24gSGFuZGxlO1xyXG4gICAgICAgIExpc3Q8SGFwcEhhbmRsZXI+IGhhbmRsZXJzID0gbmV3IExpc3Q8SGFwcEhhbmRsZXI+KCk7XHJcbiAgICAgICAgcHJpdmF0ZSBRdWlja0FjY2Vzc29yVHdvPEhhcHBUYWdzLCBUaW1lU3RhbXBTbmFwPiBoYXBwcztcclxuICAgICAgICBwcml2YXRlIGZsb2F0IGhpZ2hlc3RIYW5kbGVkO1xyXG5cclxuICAgICAgICBwdWJsaWMgSGFwcEhhbmRsaW5nKEJhdHRsZVJlbmRlciBiYXR0bGVSZW5kZXIsIEJhdHRsZVNldHVwIGJhdHRsZVNldHVwKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5iYXR0bGVSZW5kZXIgPSBiYXR0bGVSZW5kZXI7XHJcbiAgICAgICAgICAgIHZhciB3b3JsZCA9IGJhdHRsZVJlbmRlci50ZXh0V29ybGQ7XHJcbiAgICAgICAgICAgIHZhciBwb3NBbmltID0gd29ybGQuQWRkQW5pbWF0aW9uPGdsb2JhbDo6UGlkcm9oLlRleHRSZW5kZXJpbmcuUG9zaXRpb25BbmltYXRpb24+KG5ldyBQb3NpdGlvbkFuaW1hdGlvbigpKTtcclxuICAgICAgICAgICAgdmFyIGJsaW5rQW5pbSA9IHdvcmxkLkFkZEFuaW1hdGlvbjxnbG9iYWw6OlBpZHJvaC5UZXh0UmVuZGVyaW5nLkJsaW5rQW5pbT4obmV3IEJsaW5rQW5pbSgpKTtcclxuICAgICAgICAgICAgdGhpcy5lY3MgPSBiYXR0bGVTZXR1cC5lY3M7XHJcbiAgICAgICAgICAgIHZhciBiYXR0bGVNYWluID0gYmF0dGxlU2V0dXAuYmF0dGxlTWFpbjtcclxuICAgICAgICAgICAgdmFyIHRpbWUgPSBiYXR0bGVTZXR1cC50aW1lU3RhbXA7XHJcbiAgICAgICAgICAgIGJhdHRsZVJlbmRlci5IYXBwSGFuZGxpbmcgPSB0aGlzO1xyXG4gICAgICAgICAgICBoYXBwcyA9IGVjcy5RdWlja0FjY2Vzc29yMjxIYXBwVGFncywgVGltZVN0YW1wU25hcD4oKTtcclxuICAgICAgICAgICAgaGlnaGVzdEhhbmRsZWQgPSAtMTtcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZXJzLkFkZChuZXcgSGFwcEhhbmRsZXIoKGUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYW1hZ2UgPSBlLkdldENvbXBvbmVudDxIYXBwRGFtYWdlRGF0YT4oKTtcclxuICAgICAgICAgICAgICAgIHN0cmluZyBtZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhbWFnZS5lbGVtZW50YWxCbG9jaylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZGFtYWdlLmRhbWFnZUUgKyBcIiBhYnNvcmJzIFwiICsgZGFtYWdlLnRhcmdldEUrXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlICs9IGJhdHRsZVJlbmRlci5HZXRFbnRpdHlOYW1lKGRhbWFnZS50YXJnZXQpK1wiIGlzIHVuYWZlY3R0ZWQuXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9tZXNzYWdlID0gYmF0dGxlUmVuZGVyLkdldEVudGl0eU5hbWUoZGFtYWdlLnRhcmdldCkgKyBcIiBnZXRzIGhpdCFcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGFtYWdlLnN1cGVyRWZmZWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGRhbWFnZS5kYW1hZ2VFICsgXCIgcmF2YWdlcyBcIiArIGRhbWFnZS50YXJnZXRFICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBiYXR0bGVSZW5kZXIuR2V0RW50aXR5TmFtZShkYW1hZ2UudGFyZ2V0KStcIiB0YWtlcyBhIGhlYXZ5IGhpdCFcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGJhdHRsZVJlbmRlci5CYXR0bGVFbnRpdHlUb1NjcmVlblBvc2l0aW9uKGJhdHRsZU1haW4uZW50aXRpZXNbZGFtYWdlLnRhcmdldF0ucG9zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibGFzdCA9IGJhdHRsZVJlbmRlci50ZXh0V29ybGQuR2V0VGVtcEVudGl0eSg1LCA1KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYXN0LlNldFBvc2l0aW9uKHBvcyArIG5ldyBWZWN0b3IyRCgtMiwgLTIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibGFzdC5PcmlnaW4uRHJhd1JlcGVhdGVkKCcgJywgMSwgMSwgMywgMywgVGV4dEJvYXJkLklOVklTSUJMRUNPTE9SLCBCYXR0bGVSZW5kZXIuQ29sb3JzLkVuZW15KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsaW5rQW5pbS5BZGQoYmxhc3QuQW5pbUJhc2UoMC4yZiksIEJsaW5rQW5pbS5CbGlua0RhdGEuQmFja0NvbG9yKEJhdHRsZVJlbmRlci5FbGVtZW50VG9Qcm9qQ29sb3IoZGFtYWdlLmRhbWFnZUUpLCAwLjA1ZikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZSA9IGJhdHRsZVJlbmRlci5HZXRFbnRpdHlOYW1lKGRhbWFnZS50YXJnZXQpICsgXCIgZ2V0cyBodXJ0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGlmKG1lc3NhZ2UgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBiYXR0bGVSZW5kZXIuU2hvd01lc3NhZ2UobWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVuZGVyID0gYmF0dGxlUmVuZGVyLmJhdHRsZXJSZW5kZXJzW2RhbWFnZS50YXJnZXRdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdmFyIGZlID0gYmF0dGxlUmVuZGVyLnRleHRXb3JsZC5HZXRUZW1wRW50aXR5KGRlZmVuZGVyLldpZHRoLCBkZWZlbmRlci5IZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkYW1hZ2Uuc3VwZXJFZmZlY3RpdmUgJiYgIWRhbWFnZS5lbGVtZW50YWxCbG9jayAmJiBiYXR0bGVNYWluLmVudGl0aWVzW2RhbWFnZS50YXJnZXRdLkFsaXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZlID0gYmF0dGxlUmVuZGVyLnRleHRXb3JsZC5HZXRUZW1wRW50aXR5KDMsIDMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiYWNrQ29sb3IgPSBCYXR0bGVSZW5kZXIuRWxlbWVudFRvUHJvakNvbG9yKGRhbWFnZS5kYW1hZ2VFKTtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrQ29sb3IgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCB4Q29sb3IgPSBCYXR0bGVSZW5kZXIuRWxlbWVudFRvUHJvakNvbG9yKGRhbWFnZS5kYW1hZ2VFKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyIGRhbWFnZUNoYXIgPSAnWCc7XHJcbiAgICAgICAgICAgICAgICAgICAgZmUuT3JpZ2luLkRyYXdDaGFyKGRhbWFnZUNoYXIsIDEsIDAsIHhDb2xvciwgYmFja0NvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBmZS5PcmlnaW4uRHJhd0NoYXIoZGFtYWdlQ2hhciwgMSwgMSwgeENvbG9yLCBiYWNrQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZlLk9yaWdpbi5EcmF3Q2hhcihkYW1hZ2VDaGFyLCAxLCAyLCB4Q29sb3IsIGJhY2tDb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZmUuT3JpZ2luLkRyYXdDaGFyKGRhbWFnZUNoYXIsIDAsIDEsIHhDb2xvciwgYmFja0NvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBmZS5PcmlnaW4uRHJhd0NoYXIoZGFtYWdlQ2hhciwgMiwgMSwgeENvbG9yLCBiYWNrQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZmUuT3JpZ2luLkRyYXdDaGFyKFRleHRCb2FyZC5OT0NIQU5HRUNIQVIsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGZlLk9yaWdpbi5Qb3NpdGlvbiA9IGRlZmVuZGVyLkdldFBvc2l0aW9uKCkgKyBuZXcgVmVjdG9yMkQoLTEsIC0xKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYmxpbmtBbmltLkFkZChmZS5BbmltQmFzZSgwLjM1ZiksIEJsaW5rQW5pbS5CbGlua0RhdGEuQ2hhcignWicsIDAuMDVmKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ibGlua0FuaW0uQWRkKGZlLkFuaW1CYXNlKDAuMzVmKSwgQmxpbmtBbmltLkJsaW5rRGF0YS5CYWNrQ29sb3IoQmF0dGxlUmVuZGVyLkNvbG9ycy5IZXJvLCAwLjA1ZikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGUoXCJDSEFOR0UgRUxFXCIpO1xyXG5cclxuICAgICAgICAgICAgfSwgTWlzY0hhcHBUYWdzLkRhbWFnZSkpO1xyXG4gICAgICAgICAgICBoYW5kbGVycy5BZGQobmV3IEhhcHBIYW5kbGVyKChlKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaG1kID0gZS5HZXRDb21wb25lbnQ8SGFwcE1vdmVEYXRhPigpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJhdHRsZVJlbmRlci5TaG93QmF0dGxlTWVzc2FnZShiYXR0bGVSZW5kZXIuR2V0RW50aXR5TmFtZShobWQudXNlcikgKyBcIiBpcyBlbWl0dGluZyBcIiArIGhtZC5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIkNIQU5HRSBFTEVcIik7XHJcblxyXG4gICAgICAgICAgICB9LCBNaXNjSGFwcFRhZ3MuQ2hhbmdlRWxlbWVudCkpO1xyXG4gICAgICAgICAgICBoYW5kbGVycy5BZGQobmV3IEhhcHBIYW5kbGVyKChlKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaG1kID0gZS5HZXRDb21wb25lbnQ8SGFwcE1vdmVEYXRhPigpO1xyXG4gICAgICAgICAgICAgICAgLy92YXIgZGVmZW5kZXIgPSBiYXR0bGVSZW5kZXIuYmF0dGxlclJlbmRlcnNbaG1kLnRhcmdldF07XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gYmF0dGxlUmVuZGVyLkJhdHRsZUVudGl0eVRvU2NyZWVuUG9zaXRpb24oYmF0dGxlTWFpbi5lbnRpdGllc1tobWQudXNlcl0ucG9zKTtcclxuICAgICAgICAgICAgICAgIHZhciBibGFzdCA9IGJhdHRsZVJlbmRlci50ZXh0V29ybGQuR2V0VGVtcEVudGl0eSgzLDMpO1xyXG4gICAgICAgICAgICAgICAgYmxhc3QuU2V0UG9zaXRpb24ocG9zKyBuZXcgVmVjdG9yMkQoLTEsLTEpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYmxhc3QuT3JpZ2luLkRyYXdSZXBlYXRlZCgnICcsMSwxLCAxLDEsIFRleHRCb2FyZC5JTlZJU0lCTEVDT0xPUiwgQmF0dGxlUmVuZGVyLkNvbG9ycy5FbmVteSk7XHJcbiAgICAgICAgICAgICAgICBibGlua0FuaW0uQWRkKGJsYXN0LkFuaW1CYXNlKDAuMmYpLCBCbGlua0FuaW0uQmxpbmtEYXRhLkJhY2tDb2xvcihCYXR0bGVSZW5kZXIuQ29sb3JzLkhlcm8sIDAuMDVmKSk7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGUoXCJDSEFOR0UgRUxFXCIpO1xyXG5cclxuICAgICAgICAgICAgfSwgTWlzY0hhcHBUYWdzLkRlYXRoKSk7XHJcbiAgICAgICAgICAgIEFjdGlvbjxFbnRpdHk+IG1vdmVNaXNzID0gKGUpID0+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZUxpbmUoXCJIQU5ETEUhM1wiKTtcclxuICAgICAgICAgICAgICAgIHZhciBobWQgPSBlLkdldENvbXBvbmVudDxIYXBwTW92ZURhdGE+KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaG1mID0gZS5HZXRDb21wb25lbnQ8SGFwcE1vdmVtZW50RmFpbD4oKTtcclxuICAgICAgICAgICAgICAgIGludCBlSWQgPSBobWQudXNlcjtcclxuICAgICAgICAgICAgICAgIHZhciBtb3ZlciA9IGJhdHRsZU1haW4uZW50aXRpZXNbZUlkXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gbW92ZXIuUG9zaXRpb25WMkQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zMiA9IGhtZi5tb3ZlVG87XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zRiA9IChwb3MgKyBwb3MyKSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZlID0gYmF0dGxlUmVuZGVyLmJhdHRsZXJSZW5kZXJzW2VJZF07XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKFwiTW92ZSBmYWlsXCIpO1xyXG4gICAgICAgICAgICAgICAgcG9zQW5pbS5BZGQoZmUuQW5pbUJhc2UoMC4yZiksIG5ldyBQb3NpdGlvbkFuaW1hdGlvbi5Qb3NpdGlvbkRhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlUmVuZGVyLkJhdHRsZUVudGl0eVRvU2NyZWVuUG9zaXRpb24obW92ZXIuUG9zaXRpb25WMkQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhdHRsZVJlbmRlci5CYXR0bGVFbnRpdHlUb1NjcmVlblBvc2l0aW9uKHBvc0YpKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLkFkZChuZXcgSGFwcEhhbmRsZXIobW92ZU1pc3MsIE1vdmVEYXRhVGFncy5Nb3ZlbWVudCkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaGFuZGxlcnMuQWRkKG5ldyBIYXBwSGFuZGxlcigoZSkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhID0gZS5HZXRDb21wb25lbnQ8SGFwcEFyZWE+KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaG1kID0gZS5HZXRDb21wb25lbnQ8SGFwcE1vdmVEYXRhPigpO1xyXG4gICAgICAgICAgICAgICAgaW50IGVJZCA9IGhtZC51c2VyO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vdmVyID0gYmF0dGxlTWFpbi5lbnRpdGllc1tlSWRdO1xyXG4gICAgICAgICAgICAgICAgLy92YXIgdXNlclJlbmRlciA9IGJhdHRsZVJlbmRlci5iYXR0bGVyRW50aXRpZXNbZUlkXTtcclxuICAgICAgICAgICAgICAgIHZhciBhcmVhID0gaGEuYXJlYTtcclxuICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSBhcmVhLnBvaW50cztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlRWZmZWN0ID0gd29ybGQuR2V0VGVtcEVudGl0eSgxLCAxKTtcclxuICAgICAgICAgICAgICAgIHVzZUVmZmVjdC5TZXRQb3NpdGlvbihiYXR0bGVSZW5kZXIuQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihtb3Zlci5wb3MpKTtcclxuICAgICAgICAgICAgYmxpbmtBbmltLkFkZCh1c2VFZmZlY3QuQW5pbUJhc2UoMC41ZiksIEJsaW5rQW5pbS5CbGlua0RhdGEuQmFja0NvbG9yKEJhdHRsZVJlbmRlci5FbGVtZW50VG9Qcm9qQ29sb3IoaG1kLmVsZW1lbnQpLCAwLjE1ZikpO1xyXG4gICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIGl0ZW0gaW4gcG9pbnRzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHkgPSB3b3JsZC5HZXRUZW1wRW50aXR5KDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbFBvcyA9IGl0ZW0gKiBuZXcgVmVjdG9yMkQoaGEubWlycm9yaW5nWCwgMSkgKyBoYS5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmFsUG9zLlggPCAwKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmluYWxQb3MuWSA8IDApIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaW5hbFBvcy5YID4gNSkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmFsUG9zLlkgPiAyKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGUoZmluYWxQb3MuWEludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlKGZpbmFsUG9zLllJbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBiYXR0bGVSZW5kZXIuQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihmaW5hbFBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5LlNldFBvc2l0aW9uKHBvcy5YSW50LCBwb3MuWUludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxpbmtBbmltLkFkZChlbnRpdHkuQW5pbUJhc2UoMC41ZiksIEJsaW5rQW5pbS5CbGlua0RhdGEuQmFja0NvbG9yKEJhdHRsZVJlbmRlci5FbGVtZW50VG9Qcm9qQ29sb3IoaG1kLmVsZW1lbnQpLCAwLjE1ZikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBNb3ZlRGF0YVRhZ3MuQm9tYikpO1xyXG4gICAgICAgICAgICBIYW5kbGUgPSAoKSA9PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKFwiSEFORExFIVwiKTtcclxuICAgICAgICAgICAgICAgIGZsb2F0IG5ld0hpZ2hlc3RIYW5kbGVkID0gaGlnaGVzdEhhbmRsZWQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGhhcHBzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIkFEVlwiK2JhdHRsZVJlbmRlci5DYW5BZHZhbmNlR3JhcGhpY3MoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiYXR0bGVSZW5kZXIuQ2FuQWR2YW5jZUdyYXBoaWNzKCkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWdzID0gaGFwcHMuQ29tcDEoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoaGFwcHMuQ29tcDIoaSkuVGltZVNuYXAgPiBoaWdoZXN0SGFuZGxlZClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IGhpZ2hlc3RIYW5kbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXdIaWdoZXN0SGFuZGxlZCA9IGhhcHBzLkNvbXAyKGkpLlRpbWVTbmFwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdIaWdoZXN0SGFuZGxlZCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZUxpbmUoXCJIQU5ETEUhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgaGFuIGluIGhhbmRsZXJzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0NvbnNvbGUuV3JpdGVMaW5lKFwiSEFORExFIXhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFuLkNhbkhhbmRsZSh0YWdzLnRhZ3MpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZUxpbmUoaGFwcHMuQ29tcDIoaSkuVGltZVNuYXAgKyBcIiAtIFwiICsgdGltZS5DdXJyZW50U25hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlTGluZShcIkhBTkRMRSEyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbi5IYW5kbGVyKGhhcHBzLkVudGl0eShpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlTGluZShoYXBwcy5Db21wMihpKS5UaW1lU25hcCtcIiAtIFwiKyB0aW1lLkN1cnJlbnRTbmFwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoaWdoZXN0SGFuZGxlZCA9IG5ld0hpZ2hlc3RIYW5kbGVkO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjbGFzcyBIYXBwSGFuZGxlclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50ZXJuYWwgTGlzdDxpbnQ+IG5lY2Vzc2FyeVRhZ3MgPSBuZXcgTGlzdDxpbnQ+KCk7XHJcbiAgICAgICAgICAgIGludGVybmFsIEFjdGlvbjxFbnRpdHk+IEhhbmRsZXI7XHJcblxyXG4gICAgICAgICAgICBwdWJsaWMgSGFwcEhhbmRsZXIoQWN0aW9uPEVudGl0eT4gaGFuZGxlciwgcGFyYW1zIG9iamVjdFtdIHRhZ3MpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciB0IGluIHRhZ3MpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5VGFncy5BZGQoQ29udmVydC5Ub0ludDMyKHQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuSGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludGVybmFsIGJvb2wgQ2FuSGFuZGxlKExpc3Q8aW50PiB0YWdzKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3JlYWNoICh2YXIgaXRlbSBpbiBuZWNlc3NhcnlUYWdzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFncy5Db250YWlucyhpdGVtKSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgYm9vbCBJc0RvbmUoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhpZ2hlc3RIYW5kbGVkID49IGhhcHBzLkxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5CYXNlVXRpbHM7XHJcbnVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZDtcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLlR1cm5CYXNlZC5UZXh0UmVuZGVyaW5nXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBJbnB1dEhhbmRsaW5nXHJcbiAgICB7XHJcbiAgICAgICAgaW50W10gdW5maXhlZENvbW1hbmRLZXlzID0geycxJywgJzInLCczJywnNCcgfTtcclxuICAgICAgICBEaWN0aW9uYXJ5PElucHV0LCBpbnQ+IGZpeGVkTW92ZUJ1dHRvbnMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgRGljdGlvbmFyeTxJbnB1dCwgaW50PigpLChfbzEpPT57X28xLkFkZChuZXcgSW5wdXQoSW5wdXRUeXBlLk1vdmUsIEJhdHRsZU1haW4uTW92ZVR5cGUuTm9ybWFsU2hvdCksJ2cnKTtfbzEuQWRkKG5ldyBJbnB1dChJbnB1dFR5cGUuTW92ZSwgQmF0dGxlTWFpbi5Nb3ZlVHlwZS5GaXJlKSwnZicpO19vMS5BZGQobmV3IElucHV0KElucHV0VHlwZS5Nb3ZlLCBCYXR0bGVNYWluLk1vdmVUeXBlLkljZSksJ2knKTtfbzEuQWRkKG5ldyBJbnB1dChJbnB1dFR5cGUuTW92ZSwgQmF0dGxlTWFpbi5Nb3ZlVHlwZS5JY2VCb21iKSwnYicpO19vMS5BZGQobmV3IElucHV0KElucHV0VHlwZS5Nb3ZlLCBCYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXJCb21iKSwneScpO19vMS5BZGQobmV3IElucHV0KElucHV0VHlwZS5Nb3ZlLCBCYXR0bGVNYWluLk1vdmVUeXBlLlRodW5kZXIpLCd0Jyk7X28xLkFkZChuZXcgSW5wdXQoSW5wdXRUeXBlLk1vdmUsIEJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZVJpZ2h0KSwnZCcpO19vMS5BZGQobmV3IElucHV0KElucHV0VHlwZS5Nb3ZlLCBCYXR0bGVNYWluLk1vdmVUeXBlLk1vdmVVcCksJ3cnKTtfbzEuQWRkKG5ldyBJbnB1dChJbnB1dFR5cGUuTW92ZSwgQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlRG93biksJ3MnKTtfbzEuQWRkKG5ldyBJbnB1dChJbnB1dFR5cGUuTW92ZSwgQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlTGVmdCksJ2EnKTtfbzEuQWRkKG5ldyBJbnB1dChJbnB1dFR5cGUuTWlzY0JhdHRsZSwgTWlzY0JhdHRsZUlucHV0LkRvbmUpLFVuaWNvZGUuU3BhY2UpO19vMS5BZGQobmV3IElucHV0KElucHV0VHlwZS5NaXNjQmF0dGxlLCBNaXNjQmF0dGxlSW5wdXQuUmVkbyksJ3InKTtyZXR1cm4gX28xO30pO1xyXG5cclxuICAgICAgICBwdWJsaWMgaW50IEdldEZpeGVkTW92ZVVuaWNvZGUoSW5wdXQgaW5wdXQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgdmFsdWU7XHJcbiAgICAgICAgICAgIGlmIChmaXhlZE1vdmVCdXR0b25zLlRyeUdldFZhbHVlKGlucHV0LCBvdXQgdmFsdWUpKVxyXG4gICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgSW5wdXQgUGlja2luZ0hhbmQoaW50IHVuaWNvZGVLZXksIElucHV0SG9sZGVyIGlucHV0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlTGluZShcIiBpbnB1dCArIFwiKyhjaGFyKXVuaWNvZGVLZXkpO1xyXG4gICAgICAgICAgICBmb3JlYWNoICh2YXIgaXRlbSBpbiBmaXhlZE1vdmVCdXR0b25zKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5WYWx1ZSA9PSB1bmljb2RlS2V5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLktleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHVuZml4ZWRDb21tYW5kS2V5cy5MZW5ndGg7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVuZml4ZWRDb21tYW5kS2V5c1tpXSA9PSB1bmljb2RlS2V5KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGludCB1bmZpeGVkQ29tbWFuZFBvcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaTIgPSAwOyBpMiA8IGlucHV0LmlucHV0cy5Db3VudDsgaTIrKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5UYWdJcyhpMiwgSW5wdXRUYWdzLk1PVkVVTkZJWCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmZpeGVkQ29tbWFuZFBvcyA9PSBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC5pbnB1dHNbaTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5maXhlZENvbW1hbmRQb3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdChJbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZDtcclxudXNpbmcgUGlkcm9oLlRleHRSZW5kZXJpbmc7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nLkdhbWVTY3JlZW47XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5UdXJuQmFzZWQuVGV4dFJlbmRlcmluZ1xyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgTW91c2VIb3ZlclRleHRcclxuICAgIHtcclxuICAgICAgICBwdWJsaWMgc3RyaW5nW11bXSB0ZXh0cyA9IG5ldyBzdHJpbmdbMl1bXTtcclxuICAgICAgICBwdWJsaWMgTW91c2VIb3Zlck1hbmFnZXIgaG92ZXJNYW5hZ2VyO1xyXG4gICAgICAgIHB1YmxpYyBUZXh0RW50aXR5IGVudGl0eTtcclxuXHJcbiAgICAgICAgcHVibGljIE1vdXNlSG92ZXJUZXh0KE1vdXNlSG92ZXJNYW5hZ2VyIGhvdmVyTWFuYWdlciwgVGV4dEVudGl0eSBlbnRpdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmhvdmVyTWFuYWdlciA9IGhvdmVyTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIC8vdGV4dHNbMF0gPSBuZXcgc3RyaW5nW0VudW0uR2V0VmFsdWVzKHR5cGVvZihCYXR0bGVNYWluLk1vdmVUeXBlKSkuTGVuZ3RoXTtcclxuICAgICAgICAgICAgdGV4dHNbMF0gPSBuZXcgc3RyaW5nW10ge1xyXG4gICAgICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgICAgIFwiTW92ZSB1cFwiLFxyXG4gICAgICAgICAgICAgICAgXCJNb3ZlIGxlZnRcIixcclxuICAgICAgICAgICAgICAgIFwiTW92ZSBkb3duXCIsXHJcbiAgICAgICAgICAgICAgICBcIk1vdmUgcmlnaHRcIixcclxuICAgICAgICAgICAgICAgIFwiU2hvb3RzIGZvcndhcmRcIixcclxuICAgICAgICAgICAgICAgIFwiU2hvb3RzIGZpcmUgZm9yd2FyZFwiLFxyXG4gICAgICAgICAgICAgICAgXCJTaG9vdHMgaWNlIGZvcndhcmRcIixcclxuICAgICAgICAgICAgICAgIFwiU2hvb3RzIHRodW5kZXIgZm9yd2FyZFwiLFxyXG4gICAgICAgICAgICAgICAgXCJUaHJvd3MgaWNlIGJvbWIgdGhyZWUgc3F1YXJlcyBmb3J3YXJkXCIsXHJcbiAgICAgICAgICAgICAgICBcIlRocm93cyB0aHVuZGVyIGJvbWIgdGhyZWUgc3F1YXJlcyBmb3J3YXJkXCIsXHJcbiAgICAgICAgICAgICAgICBcIlN1bW1vbnMgYW5vdGhlciBlbmVteVwiLFxyXG4gICAgICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgVXBkYXRlKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGVudGl0eS5SZXNldEZ1bGwoKTtcclxuICAgICAgICAgICAgaG92ZXJNYW5hZ2VyLlVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gaG92ZXJNYW5hZ2VyLm1vdXNlSG92ZXJzQWN0aXZlO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlLkNvdW50ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaW50IGlkID0gYWN0aXZlWzBdLmlkO1xyXG4gICAgICAgICAgICAgICAgaWYoaWQgPj0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdGV4dCA9IHRleHRzW2FjdGl2ZVswXS50eXBlXVtpZF07XHJcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5Lk9yaWdpbi5EcmF3KHRleHQsIDAsIDAsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCB4ID0gYWN0aXZlWzBdLnJlY3QuWCArIDEgLSB0ZXh0Lkxlbmd0aC8yO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eS5TZXRQb3NpdGlvbih4LCBhY3RpdmVbMF0ucmVjdC5ZICsgMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwidXNpbmcgUGlkcm9oLkJhc2VVdGlscztcclxudXNpbmcgUGlkcm9oLlRleHRSZW5kZXJpbmc7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nLkdhbWVTY3JlZW47XHJcbnVzaW5nIFBpZHJvaC5UdXJuQmFzZWQuVGV4dFJlbmRlcmluZztcclxudXNpbmcgU3lzdGVtO1xyXG51c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYztcclxudXNpbmcgU3lzdGVtLkxpbnE7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZFxyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQmF0dGxlUmVuZGVyIDogSVRleHRTY3JlZW5fXHJcbiAgICB7XHJcbiAgICAgICAgcHJpdmF0ZSBCYXR0bGVNYWluIHR1cm5CYXNlVHJ5O1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgU3RhZ2VEYXRhIHN0YWdlRGF0YTtcclxuICAgICAgICBwcml2YXRlIFBvc2l0aW9uQW5pbWF0aW9uIHBvc0FuaW07XHJcbiAgICAgICAgcHJpdmF0ZSBDaGFyQnlDaGFyQW5pbWF0aW9uIGNoYXJCeUNoYXJBbmltO1xyXG4gICAgICAgIHByaXZhdGUgRGVsYXlzQW5pbWF0aW9uIGRlbGF5QW5pbTtcclxuICAgICAgICBwdWJsaWMgVGV4dFdvcmxkIHRleHRXb3JsZDtcclxuXHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBUZXh0Qm9hcmQgeyBnZXQ7IHNldDsgfVxyXG4gICAgICAgIGludCBpbnB1dDtcclxuICAgICAgICBwdWJsaWMgaW50IElucHV0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZXQgeyByZXR1cm4gaW5wdXQ7IH1cclxuICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlucHV0ID0gdmFsdWU7IC8vQ29uc29sZS5Xcml0ZUxpbmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgSGFwcEhhbmRsaW5nIEhhcHBIYW5kbGluZyB7IGdldDsgaW50ZXJuYWwgc2V0OyB9XHJcbiAgICAgICAgcHVibGljIGludCBJbnB1dFVuaWNvZGUgeyBzZXQ7IGdldDsgfVxyXG4gICAgICAgIHB1YmxpYyBNb3VzZUlPIE1vdXNlIHsgc2V0OyBnZXQ7IH1cclxuICAgICAgICBwdWJsaWMgTW91c2VIb3Zlck1hbmFnZXIgbW91c2VIb3ZlcjtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgTGlzdDxEZWxheWVkQWN0aW9ucz4gdGFza3MgPSBuZXcgTGlzdDxEZWxheWVkQWN0aW9ucz4oKTtcclxuICAgICAgICBEaWN0aW9uYXJ5PG9iamVjdCwgc3RyaW5nPiBtb3ZlQ2hhcnM7XHJcbiAgICAgICAgRGljdGlvbmFyeTxvYmplY3QsIHN0cmluZz4gbW92ZURlc2NyaXB0aW9ucyA9IG5ldyBEaWN0aW9uYXJ5PG9iamVjdCwgc3RyaW5nPigpO1xyXG4gICAgICAgIERpY3Rpb25hcnk8TWlzY0JhdHRsZUlucHV0LCBzdHJpbmc+IG1pc2NEZXNjcmlwdGlvbnMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgRGljdGlvbmFyeTxNaXNjQmF0dGxlSW5wdXQsIHN0cmluZz4oKSwoX28xKT0+e19vMS5BZGQoTWlzY0JhdHRsZUlucHV0LkRvbmUsXCJET05FXCIpO19vMS5BZGQoTWlzY0JhdHRsZUlucHV0LlJlZG8sXCJSRURPXCIpO3JldHVybiBfbzE7fSk7XHJcbiAgICAgICAgcHJpdmF0ZSBEaWN0aW9uYXJ5PElucHV0LCBzdHJpbmc+IG1vdmVCdXR0b25zO1xyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgZGVidWdPbiA9IHRydWU7XHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgZ3JpZFNjYWxlO1xyXG4gICAgICAgIHByaXZhdGUgaW50IGdyaWRPZmZzZXR4O1xyXG4gICAgICAgIHByaXZhdGUgaW50IGdyaWRPZmZzZXR5O1xyXG4gICAgICAgIGludGVybmFsIExpc3Q8VGV4dEVudGl0eT4gYmF0dGxlclJlbmRlcnM7XHJcblxyXG4gICAgICAgIGNoYXJbXVtdIGVudGl0aWVzQ2hhcnM7XHJcbiAgICAgICAgcHJpdmF0ZSBib29sIE1lc3NhZ2VEb05vdEhpZGU7XHJcbiAgICAgICAgc3RyaW5nIG1lc3NhZ2UgPSBudWxsO1xyXG4gICAgICAgIHByaXZhdGUgYm9vbCB3YWl0aW5nRm9yTWVzc2FnZUlucHV0O1xyXG4gICAgICAgIHByaXZhdGUgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uQmF0dGxlUGhhc2UgbGFzdFBoYXNlO1xyXG4gICAgICAgIHByaXZhdGUgVGV4dEVudGl0eSBtZXNzYWdlRW50O1xyXG5cclxuICAgICAgICBwdWJsaWMgSW5wdXRIYW5kbGluZyBpbnB1dEggPSBuZXcgSW5wdXRIYW5kbGluZygpO1xyXG5cclxuICAgICAgICBwdWJsaWMgQmF0dGxlUmVuZGVyKEJhdHRsZU1haW4gYmF0dGxlTG9naWMsIFN0YWdlRGF0YSBzdGFnZURhdGEpXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgc3RyaW5nW10gZW50aXR5VGV4dHMgPSB7IFwiQFwiLCBcIiZcIiwgXCIlXCIsIFwiJFwiLCBcIk9cIiwgXCJYXCIsIFwiSlwiLCBcIllcIixcIlpcIiB9O1xyXG4gICAgICAgICAgICBlbnRpdGllc0NoYXJzID0gbmV3IGNoYXJbZW50aXR5VGV4dHMuTGVuZ3RoXVtdO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IGVudGl0eVRleHRzLkxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdGllc0NoYXJzW2ldID0gZW50aXR5VGV4dHNbaV0uVG9DaGFyQXJyYXkoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHVybkJhc2VUcnkgPSBiYXR0bGVMb2dpYztcclxuICAgICAgICAgICAgdGhpcy5zdGFnZURhdGEgPSBzdGFnZURhdGE7XHJcbiAgICAgICAgICAgIHRleHRXb3JsZCA9IG5ldyBUZXh0V29ybGQoKTtcclxuICAgICAgICAgICAgcG9zQW5pbSA9IHRleHRXb3JsZC5BZGRBbmltYXRpb248Z2xvYmFsOjpQaWRyb2guVGV4dFJlbmRlcmluZy5Qb3NpdGlvbkFuaW1hdGlvbj4obmV3IFBvc2l0aW9uQW5pbWF0aW9uKCkpO1xyXG4gICAgICAgICAgICBjaGFyQnlDaGFyQW5pbSA9IHRleHRXb3JsZC5BZGRBbmltYXRpb248Z2xvYmFsOjpQaWRyb2guVGV4dFJlbmRlcmluZy5DaGFyQnlDaGFyQW5pbWF0aW9uPihuZXcgQ2hhckJ5Q2hhckFuaW1hdGlvbigpKTtcclxuICAgICAgICAgICAgZGVsYXlBbmltID0gdGV4dFdvcmxkLkFkZEFuaW1hdGlvbjxnbG9iYWw6OlBpZHJvaC5UZXh0UmVuZGVyaW5nLkRlbGF5c0FuaW1hdGlvbj4obmV3IERlbGF5c0FuaW1hdGlvbigpKTtcclxuICAgICAgICAgICAgdGV4dFdvcmxkLkluaXQoNzAsIDQ2KTtcclxuICAgICAgICAgICAgVGV4dEJvYXJkID0gdGV4dFdvcmxkLm1haW5Cb2FyZDtcclxuICAgICAgICAgICAgLy9UZXh0Qm9hcmQgPSBuZXcgVGV4dEJvYXJkKDcwLCAyNSk7XHJcblxyXG4gICAgICAgICAgICAvL3ZhciBwb3NBbmltID0gdGV4dFdvcmxkLkFkZEFuaW1hdGlvbihuZXcgUG9zaXRpb25BbmltYXRpb24oKSk7XHJcbiAgICAgICAgICAgIHZhciBibGlua0FuaW0gPSB0ZXh0V29ybGQuQWRkQW5pbWF0aW9uPGdsb2JhbDo6UGlkcm9oLlRleHRSZW5kZXJpbmcuQmxpbmtBbmltPihuZXcgQmxpbmtBbmltKCkpO1xyXG5cclxuICAgICAgICAgICAgYmF0dGxlclJlbmRlcnMgPSBuZXcgTGlzdDxUZXh0RW50aXR5PigpO1xyXG4gICAgICAgICAgICBVcGRhdGVCYXR0bGVSZW5kZXJDb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgbWVzc2FnZUVudCA9IHRleHRXb3JsZC5HZXRGcmVlRW50aXR5KDQwLCA0KTtcclxuXHJcbiAgICAgICAgICAgIHR1cm5CYXNlVHJ5LmhhcHBNYW5hZ2VyLkFkZEhhbmRsZXIobmV3IEhhcHBzLkhhcHBIYW5kbGVyKFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkhhcHBUYWcuQXR0YWNrSGl0LCAoaCkgPT5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dGFja2VyID0gdHVybkJhc2VUcnkuZW50aXRpZXNbaC5HZXRBdHRyaWJ1dGVfSW50KDEpXTtcclxuICAgICAgICAgICAgICAgIGludCBkZWZlbmRlckVJRCA9IGguR2V0QXR0cmlidXRlX0ludCgwKTtcclxuICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkJhdHRsZUVudGl0eSBkZWZlbmRlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmZW5kZXJFSUQgPj0gMClcclxuICAgICAgICAgICAgICAgICAgICBkZWZlbmRlciA9IHR1cm5CYXNlVHJ5LmVudGl0aWVzW2RlZmVuZGVyRUlEXTtcclxuICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudCA9IChQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50KWguR2V0QXR0cmlidXRlX0ludCgyKTtcclxuICAgICAgICAgICAgICAgIFRleHRFbnRpdHkgZmUgPSBHZXRQcm9qVGV4dEVudGl0eShlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmZW5kZXIgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gYXR0YWNrZXIuUG9zaXRpb25WMkQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvczIgPSBkZWZlbmRlci5Qb3NpdGlvblYyRDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeERpcyA9IE1hdGguQWJzKHBvcy5YIC0gcG9zMi5YKTtcclxuICAgICAgICAgICAgICAgICAgICBmbG9hdCB0aW1lID0gKGZsb2F0KXhEaXMgKiAwLjFmO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwb3NBbmltLkFkZChmZS5BbmltQmFzZSh0aW1lKSwgbmV3IFBvc2l0aW9uQW5pbWF0aW9uLlBvc2l0aW9uRGF0YShcclxuICAgICAgICAgICAgICAgICAgICAgICAgQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihhdHRhY2tlci5Qb3NpdGlvblYyRCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJhdHRsZUVudGl0eVRvU2NyZWVuUG9zaXRpb24oZGVmZW5kZXIuUG9zaXRpb25WMkQpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGF0dGFja2VyLlBvc2l0aW9uVjJEO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MyID0gcG9zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2tlci5UeXBlID09IEJhdHRsZU1haW4uRW50aXR5VHlwZS5lbmVteSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zMi5YID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MyLlggPSA2O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4RGlzID0gTWF0aC5BYnMocG9zLlggLSBwb3MyLlgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgPSAoZmxvYXQpeERpcyAqIDAuMWY7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zQW5pbS5BZGQoZmUuQW5pbUJhc2UodGltZSksIG5ldyBQb3NpdGlvbkFuaW1hdGlvbi5Qb3NpdGlvbkRhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJhdHRsZUVudGl0eVRvU2NyZWVuUG9zaXRpb24ocG9zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihwb3MyKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgLy90dXJuQmFzZVRyeS5oYXBwTWFuYWdlci5BZGRIYW5kbGVyKG5ldyBIYXBwcy5IYXBwSGFuZGxlcihCYXR0bGVNYWluLkhhcHBUYWcuRGFtYWdlVGFrZW4sIChoKSA9PlxyXG4gICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgLy8gICAgdmFyIGRlZmVuZGVyID0gdHVybkJhc2VUcnkuZW50aXRpZXNbaC5HZXRBdHRyaWJ1dGVfSW50KDApXTtcclxuICAgICAgICAgICAgLy8gICAgdmFyIGZlID0gdGV4dFdvcmxkLkdldFRlbXBFbnRpdHkoMSwgMSk7XHJcbiAgICAgICAgICAgIC8vICAgIGZlLk9yaWdpbi5EcmF3Q2hhcihUZXh0Qm9hcmQuTk9DSEFOR0VDSEFSLCAwLCAwKTtcclxuICAgICAgICAgICAgLy8gICAgZmUuT3JpZ2luLlBvc2l0aW9uID0gQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihkZWZlbmRlci5Qb3NpdGlvblYyRCk7XHJcbiAgICAgICAgICAgIC8vICAgIGJsaW5rQW5pbS5BZGQoZmUuQW5pbUJhc2UoMC41ZiksIEJsaW5rQW5pbS5CbGlua0RhdGEuQ2hhcignICcsIDAuMWYpKTtcclxuICAgICAgICAgICAgLy8gICAgLy9TaG93TWVzc2FnZShcIkdvdCBkYW1hZ2VkXCIpO1xyXG4gICAgICAgICAgICAvL30pKTtcclxuXHJcbiAgICAgICAgICAgIHR1cm5CYXNlVHJ5LmhhcHBNYW5hZ2VyLkFkZEhhbmRsZXIobmV3IEhhcHBzLkhhcHBIYW5kbGVyKEJhdHRsZU1haW4uSGFwcFRhZy5BdHRhY2tNaXNzLCAoaCkgPT5cclxuICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhdHRhY2tlciA9IHR1cm5CYXNlVHJ5LmVudGl0aWVzW2guR2V0QXR0cmlidXRlX0ludCgwKV07XHJcbiAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50IGVsZW1lbnQgPSAoUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudCloLkdldEF0dHJpYnV0ZV9JbnQoMSk7XHJcbiAgICAgICAgICAgICAgICBUZXh0RW50aXR5IGZlID0gR2V0UHJvalRleHRFbnRpdHkoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gYXR0YWNrZXIuUG9zaXRpb25WMkQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zMiA9IHBvcztcclxuICAgICAgICAgICAgICAgIGlmIChhdHRhY2tlci5UeXBlID09IEJhdHRsZU1haW4uRW50aXR5VHlwZS5lbmVteSlcclxuICAgICAgICAgICAgICAgICAgICBwb3MyLlggPSAtMTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBwb3MyLlggPSA2O1xyXG4gICAgICAgICAgICAgICAgdmFyIHhEaXMgPSBNYXRoLkFicyhwb3MuWCAtIHBvczIuWCk7XHJcbiAgICAgICAgICAgICAgICBmbG9hdCB0aW1lID0gKGZsb2F0KXhEaXMgKiAwLjFmO1xyXG4gICAgICAgICAgICAgICAgcG9zQW5pbS5BZGQoZmUuQW5pbUJhc2UodGltZSksIG5ldyBQb3NpdGlvbkFuaW1hdGlvbi5Qb3NpdGlvbkRhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihwb3MpLFxyXG4gICAgICAgICAgICAgICAgICAgIEJhdHRsZUVudGl0eVRvU2NyZWVuUG9zaXRpb24ocG9zMikpKTtcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIG1vdmVDaGFycyA9IGdsb2JhbDo6QnJpZGdlLlNjcmlwdC5DYWxsRm9yKG5ldyBEaWN0aW9uYXJ5PG9iamVjdCwgc3RyaW5nPigpLChfbzIpPT57X28yLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLkZpcmUsXCJGXCIpO19vMi5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5JY2UsXCJJXCIpO19vMi5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5UaHVuZGVyLFwiVFwiKTtfbzIuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuTm9ybWFsU2hvdCxcIkdcIik7X28yLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLk1vdmVSaWdodCxVbmljb2RlLlJpZ2h0YXJyb3cyK1wiXCIpO19vMi5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlVXAsVW5pY29kZS5VcGFycm93MitcIlwiKTtfbzIuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZURvd24sVW5pY29kZS5Eb3duYXJyb3cyK1wiXCIpO19vMi5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlTGVmdCxVbmljb2RlLkxlZnRhcnJvdzIrXCJcIik7X28yLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLkljZUJvbWIsXCJJQlwiKTtfbzIuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuVGh1bmRlckJvbWIsXCJUQlwiKTtfbzIuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuU3VtbW9uRW50aXR5LFwiU1VcIik7X28yLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLkRvTm90aGluZyxcIiBcIik7cmV0dXJuIF9vMjt9KTtcclxuXHJcbiAgICAgICAgICAgIG1vdmVEZXNjcmlwdGlvbnMgPSBnbG9iYWw6OkJyaWRnZS5TY3JpcHQuQ2FsbEZvcihuZXcgRGljdGlvbmFyeTxvYmplY3QsIHN0cmluZz4oKSwoX28zKT0+e19vMy5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5JY2UsXCJJY2UgU2hvdFwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuRmlyZSxcIkZpcmUgU2hvdFwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuVGh1bmRlcixcIlRodW5kZXIgU2hvdFwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuSWNlQm9tYixcIkljZSBCb21iXCIpO19vMy5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Ob3JtYWxTaG90LFwiR3VuXCIpO19vMy5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5Nb3ZlUmlnaHQsVW5pY29kZS5SaWdodGFycm93MitcIlwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZVVwLFVuaWNvZGUuVXBhcnJvdzIrXCJcIik7X28zLkFkZChCYXR0bGVNYWluLk1vdmVUeXBlLk1vdmVEb3duLFVuaWNvZGUuRG93bmFycm93MitcIlwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuTW92ZUxlZnQsVW5pY29kZS5MZWZ0YXJyb3cyK1wiXCIpO19vMy5BZGQoQmF0dGxlTWFpbi5Nb3ZlVHlwZS5UaHVuZGVyQm9tYixcIlRodW5kZXIgQm9tYlwiKTtfbzMuQWRkKEJhdHRsZU1haW4uTW92ZVR5cGUuU3VtbW9uRW50aXR5LFwiU3VtbW9uXCIpO3JldHVybiBfbzM7fSk7XHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAvL0NvbnNvbGUuUmVhZExpbmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBVcGRhdGVCYXR0bGVSZW5kZXJDb3VudCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB3aGlsZSAoYmF0dGxlclJlbmRlcnMuQ291bnQgPCB0aGlzLnR1cm5CYXNlVHJ5LmVudGl0aWVzLkNvdW50KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYXR0bGVyUmVuZGVycy5BZGQodGV4dFdvcmxkLkdldEZyZWVFbnRpdHkoMiwgMikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbCBzdHJpbmcgR2V0RW50aXR5TmFtZShpbnQgdXNlcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkJhdHRsZUVudGl0eSBnYW1lRW50aXR5ID0gdHVybkJhc2VUcnkuZW50aXRpZXNbdXNlcl07XHJcbiAgICAgICAgICAgIHZhciBjaGFycyA9IEdldENoYXIoZ2FtZUVudGl0eSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgc3RyaW5nKGNoYXJzKSArIChnYW1lRW50aXR5LmdyYXBoaWNSZXBlYXRlZEluZGV4ICsgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIFRleHRFbnRpdHkgR2V0UHJvalRleHRFbnRpdHkoUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudCBlbGVtZW50KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGZlID0gdGV4dFdvcmxkLkdldFRlbXBFbnRpdHkoMSwgMSk7XHJcbiAgICAgICAgICAgIGZlLk9yaWdpbi5EcmF3Q2hhcihUZXh0Qm9hcmQuSU5WSVNJQkxFQ0hBUiwgMCwgMCk7XHJcbiAgICAgICAgICAgIGludCBlbGVtZW50Q29sb3IgPSBFbGVtZW50VG9Qcm9qQ29sb3IoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGZlLk9yaWdpbi5TZXRCYWNrQ29sb3IoZWxlbWVudENvbG9yLCAwLCAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhdyhmbG9hdCBkZWx0YSlcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICBJbnB1dEtleSBpbnB1dCA9IChJbnB1dEtleSlJbnB1dDtcclxuICAgICAgICAgICAgaWYgKGlucHV0ICE9IElucHV0S2V5Lk5PTkUgJiYgd2FpdGluZ0Zvck1lc3NhZ2VJbnB1dClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2FpdGluZ0Zvck1lc3NhZ2VJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9pZiAoaW5wdXQgIT0gSW5wdXRLZXkuTk9ORSkgQ29uc29sZS5Xcml0ZUxpbmUoaW5wdXQpO1xyXG4gICAgICAgICAgICAvL2ludCBpbnB1dE51bWJlciA9IGlucHV0IC0gJzAnO1xyXG4gICAgICAgICAgICAvL2lmIChkZWJ1Z09uICYmIGlucHV0ID09ICdrJylcclxuICAgICAgICAgICAgLy97XHJcbiAgICAgICAgICAgIC8vICAgIERlYnVnRXh0cmEuRGVidWdFeC5TaG93KCk7XHJcbiAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxhc3RQaGFzZSAhPSB0dXJuQmFzZVRyeS5iYXR0bGVTdGF0ZS5waGFzZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnBoYXNlID09IFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkJhdHRsZVBoYXNlLlBpY2tIYW5kcylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1Nob3dNZXNzYWdlKFwiUGljayB5b3VyIGNvbW1hbmRzXCIsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuU2V0QWxsKFRleHRCb2FyZC5OT0NIQU5HRUNIQVIsIFRleHRCb2FyZC5OT0NIQU5HRUNPTE9SLCBDb2xvcnMuRmlyZUF1cmEpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsYXN0UGhhc2UgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uQmF0dGxlUGhhc2UuUGlja0hhbmRzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIlhfX1hcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgSGlkZU1lc3NhZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5TZXRBbGwoVGV4dEJvYXJkLk5PQ0hBTkdFQ0hBUiwgVGV4dEJvYXJkLk5PQ0hBTkdFQ09MT1IsIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhc3RQaGFzZSA9IHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnBoYXNlO1xyXG4gICAgICAgICAgICBpZiAodHVybkJhc2VUcnkuYmF0dGxlU3RhdGUucGhhc2UgPT0gQmF0dGxlTWFpbi5CYXR0bGVQaGFzZS5QaWNrSGFuZHMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChJbnB1dFVuaWNvZGUgPj0gMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRYID0gaW5wdXRILlBpY2tpbmdIYW5kKElucHV0VW5pY29kZSwgdHVybkJhc2VUcnkuaW5wdXRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRYLnR5cGUgIT0gSW5wdXRUeXBlLk5vbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR1cm5CYXNlVHJ5LklucHV0RG9uZShpbnB1dFgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vZm9yZWFjaCAodmFyIGl0ZW0gaW4gbW92ZUtleXMpXHJcbiAgICAgICAgICAgICAgICAvL3tcclxuICAgICAgICAgICAgICAgIC8vICAgIGlmIChpdGVtLlZhbHVlID09IGlucHV0KVxyXG4gICAgICAgICAgICAgICAgLy8gICAge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHR1cm5CYXNlVHJ5LklucHV0RG9uZShpdGVtLktleSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoQ2FuQWR2YW5jZV9Mb2dpYygpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnBoYXNlKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQmF0dGxlTWFpbi5CYXR0bGVQaGFzZS5FbmVteU1vdmVDaG9pY2U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR1cm5CYXNlVHJ5LlRpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCYXR0bGVNYWluLkJhdHRsZVBoYXNlLkhhbmRSZWNoYXJnZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVybkJhc2VUcnkuVGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEJhdHRsZU1haW4uQmF0dGxlUGhhc2UuUGlja0hhbmRzOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBCYXR0bGVNYWluLkJhdHRsZVBoYXNlLkV4ZWN1dGVNb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1N5c3RlbS5UaHJlYWRpbmcuVGhyZWFkLlNsZWVwKDMwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR1cm5CYXNlVHJ5LlRpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFVwZGF0ZUJhdHRsZVJlbmRlckNvdW50KCk7XHJcbiAgICAgICAgICAgIERyYXdHcmFwaGljcyhkZWx0YSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGJvb2wgQ2FuQWR2YW5jZUdyYXBoaWNzKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0V29ybGQuSXNEb25lKCkgJiYgIXdhaXRpbmdGb3JNZXNzYWdlSW5wdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGJvb2wgQ2FuQWR2YW5jZV9Mb2dpYygpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gQ2FuQWR2YW5jZUdyYXBoaWNzKCkgJiYgSGFwcEhhbmRsaW5nLklzRG9uZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgU2hvd01lc3NhZ2Uoc3RyaW5nIHMsIGJvb2wgd2FpdEZvcklucHV0ID0gdHJ1ZSwgYm9vbCBkb05vdEhpZGUgPSBmYWxzZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuTWVzc2FnZURvTm90SGlkZSA9IGRvTm90SGlkZTtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IHM7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VFbnQuT3JpZ2luLlJlc2V0SW52aXNpYmxlKCk7XHJcbiAgICAgICAgICAgIGZsb2F0IHRpbWVUb1dyaXRlID0gbWVzc2FnZS5MZW5ndGggKiAwLjAxNWY7XHJcbiAgICAgICAgICAgIGlmICh0aW1lVG9Xcml0ZSA+IDAuNGYpIHRpbWVUb1dyaXRlID0gMC40ZjtcclxuICAgICAgICAgICAgY2hhckJ5Q2hhckFuaW0uQWRkKG1lc3NhZ2VFbnQuQW5pbUJhc2UodGltZVRvV3JpdGUpLCBuZXcgQ2hhckJ5Q2hhckFuaW1hdGlvbi5DaGFyQnlDaGFyRGF0YSgwLCBtZXNzYWdlLkxlbmd0aCArIDEpKTtcclxuICAgICAgICAgICAgZGVsYXlBbmltLkRlbGF5KHRpbWVUb1dyaXRlICsgMC44Zik7XHJcblxyXG4gICAgICAgICAgICAvL3dhaXRpbmdGb3JNZXNzYWdlSW5wdXQgPSB3YWl0Rm9ySW5wdXQ7XHJcbiAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIk06IFwiK3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgSGlkZU1lc3NhZ2UoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHdhaXRpbmdGb3JNZXNzYWdlSW5wdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy9Db25zb2xlLldyaXRlKFwiTTogXCIrcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBTaG93QmF0dGxlTWVzc2FnZShzdHJpbmcgcylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICghdHVybkJhc2VUcnkuQmF0dGxlRGVjaWRlZCgpKVxyXG4gICAgICAgICAgICAgICAgU2hvd01lc3NhZ2Uocyk7XHJcbiAgICAgICAgICAgIC8vQ29uc29sZS5Xcml0ZShcIk06IFwiK3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRHJhd0dyYXBoaWNzKGZsb2F0IGRlbHRhKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbW91c2VIb3Zlci5tb3VzZUhvdmVycy5DbGVhcigpO1xyXG4gICAgICAgICAgICB0dXJuQmFzZVRyeS5VcGRhdGUoZGVsdGEpO1xyXG4gICAgICAgICAgICAvL2NsZWFyIGdyaWRcclxuICAgICAgICAgICAgVGV4dEJvYXJkLlJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobGFzdFBoYXNlID09IFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkJhdHRsZVBoYXNlLlBpY2tIYW5kcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVGV4dEJvYXJkLlNldEFsbChUZXh0Qm9hcmQuTk9DSEFOR0VDSEFSLCBUZXh0Qm9hcmQuTk9DSEFOR0VDT0xPUiwgQ29sb3JzLkJhY2tncm91bmRJbnB1dCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludCBjb250cm9sc1kgPSBncmlkU2NhbGUgKiAzICsgMTAgKyAzICsgNDtcclxuICAgICAgICAgICAgZ3JpZFNjYWxlID0gNTtcclxuICAgICAgICAgICAgZ3JpZE9mZnNldHggPSAyO1xyXG4gICAgICAgICAgICBncmlkT2Zmc2V0eSA9IDE7XHJcbiAgICAgICAgICAgIGludCBlbmVteUdyaWRPZmZYID0gZ3JpZFNjYWxlICogMztcclxuICAgICAgICAgICAgYm9vbCBkcmF3RG90ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3UmVwZWF0ZWQoJyAnLCBncmlkT2Zmc2V0eCwgZ3JpZE9mZnNldHksIGdyaWRTY2FsZSAqIDYsIGdyaWRTY2FsZSozLCBUZXh0Qm9hcmQuTk9DSEFOR0VDT0xPUiwgQ29sb3JzLkJhY2tCYXR0bGUpO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IDMgKiBncmlkU2NhbGU7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCAzICogZ3JpZFNjYWxlOyBqKyspXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYXdEb3QpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd0NoYXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZE9mZnNldHggKyBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkT2Zmc2V0eSArIGosIENvbG9ycy5HcmlkSGVybyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3Q2hhcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRPZmZzZXR4ICsgaSArIGVuZW15R3JpZE9mZlgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkT2Zmc2V0eSArIGosIENvbG9ycy5HcmlkRW5lbXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAlIGdyaWRTY2FsZSA9PSAwICYmIGogJSBncmlkU2NhbGUgPT0gMClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd0dyaWQoaSArIGdyaWRPZmZzZXR4ICsgZW5lbXlHcmlkT2ZmWCwgaiArIGdyaWRPZmZzZXR5LCBncmlkU2NhbGUsIGdyaWRTY2FsZSwgQ29sb3JzLkdyaWRFbmVteSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3R3JpZChpICsgZ3JpZE9mZnNldHgsIGogKyBncmlkT2Zmc2V0eSwgZ3JpZFNjYWxlLCBncmlkU2NhbGUsIENvbG9ycy5HcmlkSGVybyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHR1cm5CYXNlVHJ5LmVudGl0aWVzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICBCYXR0bGVNYWluLkJhdHRsZUVudGl0eSBnYW1lRW50aXR5ID0gdHVybkJhc2VUcnkuZW50aXRpZXNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVjID0gR2V0Q2hhcihnYW1lRW50aXR5KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gZ2FtZUVudGl0eS5Qb3NpdGlvblYyRDtcclxuICAgICAgICAgICAgICAgIEJhc2VVdGlscy5WZWN0b3IyRCBzY3JlZW5Qb3MgPSBCYXR0bGVFbnRpdHlUb1NjcmVlblBvc2l0aW9uKChCYXNlVXRpbHMuVmVjdG9yMkQpcG9zKTtcclxuICAgICAgICAgICAgICAgIGlmIChnYW1lRW50aXR5LlR5cGUgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRW50aXR5VHlwZS5wYW5lbGVmZmVjdClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5Qb3MuWSA9IHNjcmVlblBvcy5ZICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5Qb3MuWCA9IHNjcmVlblBvcy5YIC0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vYmF0dGxlckVudGl0aWVzW2ldLm9yaWdpbi5Qb3NpdGlvbiA9IHNjcmVlblBvcztcclxuICAgICAgICAgICAgICAgIGlmIChiYXR0bGVyUmVuZGVyc1tpXS5PcmlnaW4uUG9zaXRpb24gIT0gc2NyZWVuUG9zICYmIHRleHRXb3JsZC5Jc0RvbmUoKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NBbmltLkFkZChiYXR0bGVyUmVuZGVyc1tpXS5BbmltQmFzZSgwLjE1ZiksIG5ldyBQb3NpdGlvbkFuaW1hdGlvbi5Qb3NpdGlvbkRhdGEoYmF0dGxlclJlbmRlcnNbaV0uT3JpZ2luLlBvc2l0aW9uLCBzY3JlZW5Qb3MsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IENvbG9ycy5IZXJvO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdhbWVFbnRpdHkuVHlwZSA9PSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbnRpdHlUeXBlLmVuZW15KSBjID0gQ29sb3JzLkVuZW15O1xyXG4gICAgICAgICAgICAgICAgaWYgKGdhbWVFbnRpdHkuVHlwZSA9PSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbnRpdHlUeXBlLnBpY2t1cCkgYyA9IENvbG9ycy5pbnB1dEtleTtcclxuICAgICAgICAgICAgICAgIGlmIChnYW1lRW50aXR5LkRlYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IFRleHRCb2FyZC5JTlZJU0lCTEVDT0xPUjtcclxuICAgICAgICAgICAgICAgIGludCBiYyA9IFRleHRCb2FyZC5JTlZJU0lCTEVDT0xPUjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZUVudGl0eS5BbGl2ZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50IGVsZW1lbnQgPSBnYW1lRW50aXR5LmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYmMgPSBFbGVtZW50VG9BdXJhQ29sb3IoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGdhbWVFbnRpdHkuRGVhZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGludCBqID0gMDsgaiA8IGVjLkxlbmd0aCArIDE7IGorKylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhdHRsZXJSZW5kZXJzW2ldLk9yaWdpbi5EcmF3Q2hhcihUZXh0Qm9hcmQuSU5WSVNJQkxFQ0hBUiwgaiwgMCwgYywgYmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmF0dGxlclJlbmRlcnNbaV0uT3JpZ2luLkRyYXcoZWMsIDAsIDAsIGMsIGJjKTtcclxuICAgICAgICAgICAgICAgICAgICBiYXR0bGVyUmVuZGVyc1tpXS5PcmlnaW4uRHJhd09uZURpZ2l0KGdhbWVFbnRpdHkuZ3JhcGhpY1JlcGVhdGVkSW5kZXggKyAxLCAwICsgZWMuTGVuZ3RoLCAwLCBjLCBiYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGludCB0ZXh0Qm9hcmRIZWlnaHQgPSAzICogZ3JpZFNjYWxlO1xyXG5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy9pbnQgeSA9IDI7XHJcbiAgICAgICAgICAgICAgICAvL2ludCB4ID0gNiAqIGdyaWRTY2FsZSArIDIwO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpbnQgeCA9IDM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnBoYXNlID09IEJhdHRsZU1haW4uQmF0dGxlUGhhc2UuUGlja0hhbmRzKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIERyYXdDb250cm9scyhjb250cm9sc1ksIHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0dXJuQmFzZVRyeS50aW1lVG9DaG9vc2UgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQgcmF0aW8gPSB0dXJuQmFzZVRyeS50aW1lVG9DaG9vc2UgLyB0dXJuQmFzZVRyeS50aW1lVG9DaG9vc2VNYXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3UmVwZWF0ZWQoJyAnLCB4LCBjb250cm9sc1kgKyAxNiwgKGludCkocmF0aW8gKiAxNSksIDEsIENvbG9ycy5Cb2FyZCwgQ29sb3JzLkdyaWRIZXJvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dEJvYXJkLkRyYXdSZXBlYXRlZCgnICcsIHggLSAxLCBjb250cm9sc1kgLSAxLCAxNSwgMTUsIENvbG9ycy5Cb2FyZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGludCB0dXJuT3JkZXJYID0gNiAqIGdyaWRTY2FsZSArIDU7XHJcbiAgICAgICAgICAgIGludCB0dXJuT3JkZXJZID0gMjtcclxuICAgICAgICAgICAgdHVybk9yZGVyWCA9IDI7XHJcbiAgICAgICAgICAgIHR1cm5PcmRlclkgPSAzICogZ3JpZFNjYWxlICsgMiA7XHJcblxyXG4gICAgICAgICAgICBEcmF3VHVybk9yZGVyKHR1cm5PcmRlclgsIHR1cm5PcmRlclkpO1xyXG4gICAgICAgICAgICBpZighc3RhZ2VEYXRhLmhpZGVMaWZlVUkpXHJcbiAgICAgICAgICAgICAgICBEcmF3TGlmZSh0dXJuT3JkZXJYKzI1LCB0dXJuT3JkZXJZKTtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW50IFggPSAyO1xyXG4gICAgICAgICAgICAgICAgLy9jb25zdCBpbnQgWSA9IDE2O1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUVudC5TZXRQb3NpdGlvbihYLCBjb250cm9sc1kgLSAyKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlICE9IG51bGwgJiYgKCFDYW5BZHZhbmNlR3JhcGhpY3MoKSkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UZXh0Qm9hcmQuRHJhd0dyaWQoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgbWVzc2FnZUVudC5PcmlnaW4uUG9zaXRpb24uWEludCwgbWVzc2FnZUVudC5PcmlnaW4uUG9zaXRpb24uWUludCwgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgbWVzc2FnZUVudC5XaWR0aCwgbWVzc2FnZUVudC5IZWlnaHQsIENvbG9ycy5Cb2FyZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tZXNzYWdlRW50Lk9yaWdpbi5EcmF3R3JpZCgwLCAwLCA0MCwgNCwgQ29sb3JzLkJvYXJkKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRW50Lk9yaWdpbi5EcmF3V2l0aExpbmVicmVha3MobWVzc2FnZSwgMSwgMCwgMSwgQ29sb3JzLkhlcm9UdXJuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIU1lc3NhZ2VEb05vdEhpZGUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUVudC5PcmlnaW4uU2V0QWxsKCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3UmVwZWF0ZWQoJyAnLFgsIFksIDQwLCA0LCBDb2xvcnMuQm9hcmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFRleHRCb2FyZC5DdXJzb3JOZXdMaW5lKDEpO1xyXG4gICAgICAgICAgICBUZXh0Qm9hcmQuQ3Vyc29yTmV3TGluZSgxKTtcclxuICAgICAgICAgICAgLy90ZXh0Qm9hcmQuRHJhd19DdXJzb3IodHVybkJhc2VUcnkuYmF0dGxlU3RhdGUucGhhc2UuVG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgICAgICB0ZXh0V29ybGQuRHJhd0NoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRleHRXb3JsZC5BZHZhbmNlVGltZShkZWx0YSk7XHJcbiAgICAgICAgICAgIGlmIChDYW5BZHZhbmNlR3JhcGhpY3MoKSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgSGFwcEhhbmRsaW5nLkhhbmRsZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKENhbkFkdmFuY2VHcmFwaGljcygpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHR1cm5CYXNlVHJ5LmhhcHBNYW5hZ2VyLlRyeUhhbmRsZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vaWYgKENhbkFkdmFuY2UoKSlcclxuICAgICAgICAgICAgLy97XHJcblxyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzdGF0aWMgaW50IEVsZW1lbnRUb0F1cmFDb2xvcihQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50IGVsZW1lbnQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpbnQgYmMgPSBUZXh0Qm9hcmQuSU5WSVNJQkxFQ09MT1I7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09IFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQuRmlyZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmMgPSBDb2xvcnMuRmlyZUF1cmE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5JY2UpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJjID0gQ29sb3JzLkljZUF1cmE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5UaHVuZGVyKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYyA9IENvbG9ycy5UaHVuZGVyQXVyYTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGJjO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBpbnQgRWxlbWVudFRvUHJvakNvbG9yKFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkVsZW1lbnQgZWxlbWVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludCBiYyA9IENvbG9ycy5pbnB1dEtleTtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5GaXJlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBiYyA9IENvbG9ycy5GaXJlU2hvdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50LkljZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmMgPSBDb2xvcnMuSWNlQXVyYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50LlRodW5kZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJjID0gQ29sb3JzLlRodW5kZXJBdXJhO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYmM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVmVjdG9yMkQgQmF0dGxlRW50aXR5VG9TY3JlZW5Qb3NpdGlvbihCYXNlVXRpbHMuVmVjdG9yMkQgcG9zKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIHggPSBwb3MuWDtcclxuICAgICAgICAgICAgdmFyIHkgPSBwb3MuWTtcclxuICAgICAgICAgICAgdmFyIHNjcmVlblBvcyA9IG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoeCAqIGdyaWRTY2FsZSArIGdyaWRTY2FsZSAvIDIgKyBncmlkT2Zmc2V0eCwgMiAqIGdyaWRTY2FsZSAtIHkgKiBncmlkU2NhbGUgKyBncmlkU2NhbGUgLyAyICsgZ3JpZE9mZnNldHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2NyZWVuUG9zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIERyYXdDb250cm9scyhpbnQgeSwgaW50IHgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3R3JpZCh4IC0gMiwgeSAtIDEsIDIwLCAxNSwgQ29sb3JzLkJvYXJkKTtcclxuICAgICAgICAgICAgVGV4dEJvYXJkLlNldEN1cnNvckF0KHgsIHkpO1xyXG4gICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3X0N1cnNvcihcIkNvbnRyb2xzXCIsIENvbG9ycy5XaW5kb3dMYWJlbCk7XHJcblxyXG4gICAgICAgICAgICAvL0lucHV0VGFncyBpbnB1dFRhZyA9IElucHV0VGFncy5NT1ZFRklYO1xyXG4gICAgICAgICAgICBpbnQgeU9mZiA9IDA7XHJcbiAgICAgICAgICAgIHlPZmYgPSBEcmF3SW5wdXRzX0ZpeCh5LCB4LCBJbnB1dFRhZ3MuTU9WRUZJWCwgeU9mZik7XHJcbiAgICAgICAgICAgIC8veU9mZisrO1xyXG4gICAgICAgICAgICB5T2ZmID0gRHJhd0lucHV0c19GaXgoeSwgeCwgSW5wdXRUYWdzLk1JU0MsIHlPZmYpO1xyXG4gICAgICAgICAgICAvL3lPZmYrKztcclxuICAgICAgICAgICAgLy95T2ZmID0gRHJhd0lucHV0c19GaXgoeSwgeCwgSW5wdXRUYWdzLk1PVkVVTkZJWCwgeU9mZik7XHJcblxyXG4gICAgICAgICAgICBpbnQgYXR0YWNrTnVtYmVyID0gMTtcclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB0dXJuQmFzZVRyeS5pbnB1dHMuaW5wdXRzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCB4MiA9IHg7XHJcbiAgICAgICAgICAgICAgICBpbnQgeTIgPSB5ICsgMiArIHlPZmY7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0dXJuQmFzZVRyeS5pbnB1dHMuaW5wdXRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0dXJuQmFzZVRyeS5pbnB1dHMuVGFnSXMoaSwgSW5wdXRUYWdzLk1PVkVVTkZJWCkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgeU9mZisrO1xyXG4gICAgICAgICAgICAgICAgICAgIHlPZmYrKztcclxuICAgICAgICAgICAgICAgICAgICBpbnQgdW5pY29kZSA9ICcwJyArIGF0dGFja051bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICBhdHRhY2tOdW1iZXIrKztcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZUhvdmVyLm1vdXNlSG92ZXJzLkFkZChuZXcgTW91c2VIb3ZlcihuZXcgUmVjdCh4MiAtIDIsIHkyLCAyMCwgMSksIDAsIGlucHV0LmFyZzEpKTtcclxuICAgICAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3Q2hhcignWycsIHgyIC0gMSwgeTIsIENvbG9ycy5IZXJvVHVybik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aEJuYW1lID0gVGV4dEJvYXJkLkRyYXdVbmljb2RlTGFiZWwodW5pY29kZSwgeDIsIHkyLCBDb2xvcnMuaW5wdXRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXdDaGFyKCddJywgeDIgKyBsZW5ndGhCbmFtZSwgeTIsIENvbG9ycy5IZXJvVHVybik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBkZXNjcmlwdGlvbiA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSBJbnB1dFR5cGUuTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLk1vdmVUeXBlIG0gPSAoUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUpaW5wdXQuYXJnMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZURlc2NyaXB0aW9ucy5UcnlHZXRWYWx1ZShtLCBvdXQgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24gPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBtLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09IElucHV0VHlwZS5NaXNjQmF0dGxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTWlzY0JhdHRsZUlucHV0IGFyZzEgPSAoTWlzY0JhdHRsZUlucHV0KWlucHV0LmFyZzE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gbWlzY0Rlc2NyaXB0aW9uc1thcmcxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgVGV4dEJvYXJkLkRyYXcoZGVzY3JpcHRpb24sIHgyICsgMiArIDUsIHkyLCBDb2xvcnMuSW5wdXREZXNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy92YXIgYyA9IG1vdmVDaGFyc1ttb3ZlXTtcclxuICAgICAgICAgICAgICAgIC8vRHJhd01vdmUobW92ZSwgQ29sb3JzLkhlcm9UdXJuKTtcclxuICAgICAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXcoYywgeDIgKyAzLCB5MiwgQ29sb3JzLkhlcm9UdXJuKTtcclxuICAgICAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXdXaXRoR3JpZChjK1wiXCIsIHgyLCB5ICsgMiwgQ29sb3JzLkhlcm9UdXJuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbnQgRHJhd0lucHV0c19GaXgoaW50IHksIGludCB4LCBJbnB1dFRhZ3MgaW5wdXRUYWcsIGludCB5T2ZmKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgdHVybkJhc2VUcnkuaW5wdXRzLmlucHV0cy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbnQgeDIgPSB4O1xyXG4gICAgICAgICAgICAgICAgaW50IHkyID0geSArIDIgKyB5T2ZmO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdHVybkJhc2VUcnkuaW5wdXRzLmlucHV0c1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHVybkJhc2VUcnkuaW5wdXRzLlRhZ0lzKGksIGlucHV0VGFnKSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdW5pY29kZSA9IGlucHV0SC5HZXRGaXhlZE1vdmVVbmljb2RlKGlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZm9yY2VJbnB1dExhYmVsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgZm9yY2VDb21tYW5kTGFiZWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmljb2RlID09ICd3JylcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlSW5wdXRMYWJlbCA9IFwiV0FTRFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZUNvbW1hbmRMYWJlbCA9IFwiXCIgKyBVbmljb2RlLlVwYXJyb3cyICsgVW5pY29kZS5MZWZ0YXJyb3cyICsgVW5pY29kZS5Eb3duYXJyb3cyICsgVW5pY29kZS5SaWdodGFycm93MjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaWNvZGUgPT0gJ2EnIHx8IHVuaWNvZGUgPT0gJ3MnIHx8IHVuaWNvZGUgPT0gJ2QnKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHlPZmYrKztcclxuICAgICAgICAgICAgICAgICAgICB5T2ZmKys7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtb3VzZUhvdmVyLm1vdXNlSG92ZXJzLkFkZChuZXcgTW91c2VIb3ZlcihuZXcgUmVjdCh4MiAtIDIsIHkyLCAyMCwgMSksIDAsIGlucHV0LmFyZzEpKTtcclxuICAgICAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3Q2hhcignWycsIHgyIC0gMSwgeTIsIENvbG9ycy5IZXJvVHVybik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IGxlbmd0aEJuYW1lID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2VJbnB1dExhYmVsID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aEJuYW1lID0gVGV4dEJvYXJkLkRyYXdVbmljb2RlTGFiZWwodW5pY29kZSwgeDIsIHkyLCBDb2xvcnMuaW5wdXRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3KGZvcmNlSW5wdXRMYWJlbCwgeDIsIHkyLCBDb2xvcnMuaW5wdXRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGhCbmFtZSA9IGZvcmNlSW5wdXRMYWJlbC5MZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXdDaGFyKCddJywgeDIgKyBsZW5ndGhCbmFtZSwgeTIsIENvbG9ycy5IZXJvVHVybik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBkZXNjcmlwdGlvbiA9IHN0cmluZy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSBJbnB1dFR5cGUuTW92ZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JjZUNvbW1hbmRMYWJlbCAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGZvcmNlQ29tbWFuZExhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uTW92ZVR5cGUgbSA9IChQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5Nb3ZlVHlwZSlpbnB1dC5hcmcxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZURlc2NyaXB0aW9ucy5UcnlHZXRWYWx1ZShtLCBvdXQgZGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBtLlRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSBJbnB1dFR5cGUuTWlzY0JhdHRsZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1pc2NCYXR0bGVJbnB1dCBhcmcxID0gKE1pc2NCYXR0bGVJbnB1dClpbnB1dC5hcmcxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IG1pc2NEZXNjcmlwdGlvbnNbYXJnMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3KGRlc2NyaXB0aW9uLCB4MiArIDIgKyA1LCB5MiwgQ29sb3JzLklucHV0RGVzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdmFyIGMgPSBtb3ZlQ2hhcnNbbW92ZV07XHJcbiAgICAgICAgICAgICAgICAvL0RyYXdNb3ZlKG1vdmUsIENvbG9ycy5IZXJvVHVybik7XHJcbiAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3KGMsIHgyICsgMywgeTIsIENvbG9ycy5IZXJvVHVybik7XHJcbiAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3V2l0aEdyaWQoYytcIlwiLCB4MiwgeSArIDIsIENvbG9ycy5IZXJvVHVybik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB5T2ZmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIERyYXdMaWZlKGludCB0dXJuT3JkZXJYLCBpbnQgdHVybk9yZGVyWSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXdHcmlkKHR1cm5PcmRlclggLSAxLCB0dXJuT3JkZXJZIC0gMSwgMjAsIDksIENvbG9ycy5XaW5kb3dMYWJlbCk7XHJcbiAgICAgICAgICAgIFRleHRCb2FyZC5TZXRDdXJzb3JBdCh0dXJuT3JkZXJYICsgMSwgdHVybk9yZGVyWSk7XHJcbiAgICAgICAgICAgIFRleHRCb2FyZC5EcmF3X0N1cnNvcihcIkxpZmVcIiwgQ29sb3JzLldpbmRvd0xhYmVsKTtcclxuICAgICAgICAgICAgVGV4dEJvYXJkLlNldEN1cnNvckF0KHR1cm5PcmRlclggKyA4LCB0dXJuT3JkZXJZKTtcclxuICAgICAgICAgICAgVGV4dEJvYXJkLkRyYXdfQ3Vyc29yKFwiRWxlbWVudFwiLCBDb2xvcnMuV2luZG93TGFiZWwpO1xyXG4gICAgICAgICAgICBpbnQgaW5kZXggPSAtMTsgLy91c2luZyB0aGlzIGJlY2F1c2Ugbm90IGFsbCB1bml0cyBnZXQgZHJhd25cclxuICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB0dXJuQmFzZVRyeS5lbnRpdGllcy5Db3VudDsgaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL0NvbnNvbGVcclxuXHJcbiAgICAgICAgICAgICAgICBCYXR0bGVNYWluLkJhdHRsZUVudGl0eSBlID0gdHVybkJhc2VUcnkuZW50aXRpZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuZHJhd0xpZmUpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuRGVhZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCBjb2xvciA9IENvbG9ycy5IZXJvVHVybjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5UeXBlID09IEJhdHRsZU1haW4uRW50aXR5VHlwZS5lbmVteSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gQ29sb3JzLkVuZW15VHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UZXh0Qm9hcmQuRHJhd09uZURpZ2l0X0N1cnNvcigoaW50KWUubGlmZS5WYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCB4T2ZmID0gdHVybk9yZGVyWCArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHlPZmYgPSB0dXJuT3JkZXJZICsgMiArIGluZGV4KjI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9EcmF3RW50aXR5Q2hhcihlLCBjb2xvciwgeE9mZiwgeU9mZik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UZXh0Qm9hcmQuRHJhd0NoYXIoR2V0Q2hhcihlKSwgeE9mZiwgdHVybk9yZGVyWSArIDIsIGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd1R3b0RpZ2l0cygoaW50KWUubGlmZSwgeE9mZiwgeU9mZiwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyBlbGVtZW50ID0gc3RyaW5nLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50LkZpcmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gXCJGaXJlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlTWFpbi5FbGVtZW50LkljZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBcIkljZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5UaHVuZGVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IFwiVGh1bmRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZU1haW4uRWxlbWVudC5Ob25lOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVDb2xvciA9IEVsZW1lbnRUb0F1cmFDb2xvcihlLmVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhdyhlbGVtZW50LCB4T2ZmICsgNywgeU9mZiwgZUNvbG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3T25lRGlnaXRfQ3Vyc29yKChpbnQpZS5saWZlLlZhbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9UZXh0Qm9hcmQuQ3Vyc29yTmV3TGluZSh4OiAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIERyYXdUdXJuT3JkZXIoaW50IHR1cm5PcmRlclgsIGludCB0dXJuT3JkZXJZLCBib29sIGhvcml6b250YWwgPSB0cnVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgVmFsdWUgdHVybnNQZXJQaGFzZSA9IHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnR1cm5zUGVyUGhhc2U7XHJcbiAgICAgICAgICAgIFRleHRCb2FyZC5TZXRDdXJzb3JBdCh0dXJuT3JkZXJYKzMsIHR1cm5PcmRlclkpO1xyXG4gICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd19DdXJzb3IoXCJDb21tYW5kc1wiLCBDb2xvcnMuV2luZG93TGFiZWwpO1xyXG5cclxuICAgICAgICAgICAgaW50IGRyYXdpbmdJZCA9IC0xO1xyXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IHR1cm5CYXNlVHJ5LmVudGl0aWVzLkNvdW50OyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICBCYXR0bGVNYWluLkJhdHRsZUVudGl0eSBlID0gdHVybkJhc2VUcnkuZW50aXRpZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuZHJhd1R1cm4pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuRGVhZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3aW5nSWQrKztcclxuICAgICAgICAgICAgICAgICAgICBpbnQgY29sb3IgPSBDb2xvcnMuSGVyb1R1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuVHlwZSA9PSBCYXR0bGVNYWluLkVudGl0eVR5cGUuZW5lbXkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IENvbG9ycy5FbmVteVR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL1RleHRCb2FyZC5EcmF3T25lRGlnaXRfQ3Vyc29yKChpbnQpZS5saWZlLlZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHhPZmYgPSB0dXJuT3JkZXJYICsgMSArIGRyYXdpbmdJZCAqIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50IHlFbnRpdHkgPSB0dXJuT3JkZXJZICsgMjtcclxuICAgICAgICAgICAgICAgICAgICBpbnQgeUZpcnN0TW92ZSA9IHR1cm5PcmRlclkgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGludCB4Rmlyc3RNb3ZlID0geE9mZjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4T2ZmID0gdHVybk9yZGVyWDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeUVudGl0eSA9IHR1cm5PcmRlclkrMitkcmF3aW5nSWQqMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeUZpcnN0TW92ZSA9IHlFbnRpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhGaXJzdE1vdmUgPSB0dXJuT3JkZXJYKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIERyYXdFbnRpdHlDaGFyKGUsIGNvbG9yLCB4T2ZmLCB5RW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuU2V0Q3Vyc29yQXQoeEZpcnN0TW92ZSwgeUZpcnN0TW92ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGkyID0gMDsgaTIgPCB0dXJuc1BlclBoYXNlOyBpMisrKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50IGNvbG9yMiA9IGNvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJhd2luZ0lkID09IHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLmFjdGluZ0VudGl0eSAmJiBpMiA9PSB0dXJuQmFzZVRyeS5iYXR0bGVTdGF0ZS50dXJuICYmIHR1cm5CYXNlVHJ5LmJhdHRsZVN0YXRlLnBoYXNlID09IEJhdHRsZU1haW4uQmF0dGxlUGhhc2UuRXhlY3V0ZU1vdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yMiA9IENvbG9ycy5IZXJvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaTIgPCB0dXJuc1BlclBoYXNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgYyA9IEdldENoYXJPZk1vdmUoZSwgaTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VIb3Zlci5tb3VzZUhvdmVycy5BZGQobmV3IE1vdXNlSG92ZXIobmV3IFJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEJvYXJkLkN1cnNvclgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGV4dEJvYXJkLkN1cnNvclksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5MZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCwgZS5tb3Zlc1tpMl0pKTsgLy9hZGQgaGVyZS4uLj8gQF9AXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd19DdXJzb3IoYywgY29sb3IyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3Jpem9udGFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSBjLkxlbmd0aDsgaiA8IDM7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCb2FyZC5BZHZhbmNlQ3Vyc29yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVGV4dEJvYXJkLkRyYXdfQ3Vyc29yKCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd19DdXJzb3IoJyAnLCBjb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuQ3Vyc29yTmV3TGluZSh4OiB4Rmlyc3RNb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy9UZXh0Qm9hcmQuQ3Vyc29yTmV3TGluZSh4OiAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIERyYXdFbnRpdHlDaGFyKFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVNYWluLkJhdHRsZUVudGl0eSBlLCBpbnQgY29sb3IsIGludCB4LCBpbnQgeSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNoYXJbXSBjaGFycyA9IEdldENoYXIoZSk7XHJcblxyXG4gICAgICAgICAgICBUZXh0Qm9hcmQuRHJhdyhjaGFycywgeCwgeSwgY29sb3IpO1xyXG4gICAgICAgICAgICAvL2lmIChlLmdyYXBoaWNSZXBlYXRlZEluZGV4ID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVGV4dEJvYXJkLkRyYXdPbmVEaWdpdChlLmdyYXBoaWNSZXBlYXRlZEluZGV4ICsgMSwgeCArIGNoYXJzLkxlbmd0aCwgeSwgY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHN0cmluZyBHZXRDaGFyT2ZNb3ZlKEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IGUsIGludCBpMilcclxuICAgICAgICB7XHJcblxyXG5cclxuICAgICAgICAgICAgZmxvYXQgdmFsID0gZS5tb3Zlc1tpMl07XHJcbiAgICAgICAgICAgIGlmICh2YWwgPj0gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb3ZlQ2hhcnNbKEJhdHRsZU1haW4uTW92ZVR5cGUpdmFsXTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiIFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGNoYXJbXSBHZXRDaGFyKEJhdHRsZU1haW4uQmF0dGxlRW50aXR5IGdhbWVFbnRpdHkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZW50aXRpZXNDaGFyc1tnYW1lRW50aXR5LmdyYXBoaWNdO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBEcmF3TW92ZShWYWx1ZSBtb3ZlLCBpbnQgY29sb3IpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAobW92ZS5WYWwgPj0gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgQmF0dGxlTWFpbi5Nb3ZlVHlwZSBtID0gKEJhdHRsZU1haW4uTW92ZVR5cGUpbW92ZS5WYWw7XHJcbiAgICAgICAgICAgICAgICBEcmF3TW92ZShtLCBjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd19DdXJzb3IoJyAnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdm9pZCBEcmF3TW92ZShCYXR0bGVNYWluLk1vdmVUeXBlIG1vdmUsIGludCBjb2xvcilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBjID0gbW92ZUNoYXJzW21vdmVdO1xyXG4gICAgICAgICAgICBUZXh0Qm9hcmQuRHJhd19DdXJzb3IoYywgY29sb3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBHZXRCb2FyZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gVGV4dEJvYXJkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBjbGFzcyBDb2xvcnNcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgR3JpZEhlcm8gPSAxO1xyXG4gICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IEdyaWRFbmVteSA9IDI7XHJcbiAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgSGVybyA9IDM7XHJcbiAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgRW5lbXkgPSA0O1xyXG4gICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IEhlcm9UdXJuID0gNTtcclxuICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBFbmVteVR1cm4gPSA2O1xyXG4gICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IGlucHV0S2V5ID0gNztcclxuICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBCb2FyZCA9IDg7XHJcbiAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgV2luZG93TGFiZWwgPSA5O1xyXG4gICAgICAgICAgICBpbnRlcm5hbCBzdGF0aWMgaW50IEZpcmVBdXJhID0gMTA7XHJcbiAgICAgICAgICAgIGludGVybmFsIHN0YXRpYyBpbnQgSWNlQXVyYSA9IDExO1xyXG4gICAgICAgICAgICBpbnRlcm5hbCBzdGF0aWMgaW50IFRodW5kZXJBdXJhID0gMTI7XHJcbiAgICAgICAgICAgIGludGVybmFsIHN0YXRpYyBpbnQgRmlyZVNob3QgPSAxMztcclxuICAgICAgICAgICAgaW50ZXJuYWwgc3RhdGljIGludCBJY2VTaG90ID0gMTQ7XHJcbiAgICAgICAgICAgIGludGVybmFsIHN0YXRpYyBpbnQgVGh1bmRlclNob3QgPSAxNTtcclxuICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBCYWNrZ3JvdW5kSW5wdXQgPSAxNjtcclxuICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBJbnB1dERlc2NyaXB0aW9uID0gMTc7XHJcbiAgICAgICAgICAgIGludGVybmFsIHN0YXRpYyBpbnQgQmFja0JhdHRsZSA9IDE4O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBlbnVtIElucHV0S2V5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBOT05FLCBMRUZULCBSSUdIVCwgRE9XTiwgVVAsIEZJUkUsIFJFRE8sIERPTkUsXHJcbiAgICAgICAgICAgIElDRSxcclxuICAgICAgICAgICAgVEhVTkRFUixcclxuICAgICAgICAgICAgTk9STUFMU0hPVFxyXG4gICAgICAgIH1cclxuXG5cclxuXHJcbiAgICBcbnByaXZhdGUgaW50IF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19JbnB1dFVuaWNvZGU9LTE7fVxyXG5cclxufVxyXG4iLCJ1c2luZyBTeXN0ZW07XHJcbnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljO1xyXG51c2luZyBTeXN0ZW0uTGlucTtcclxudXNpbmcgU3lzdGVtLlRleHQ7XHJcbnVzaW5nIFBpZHJvaC5FQ1M7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nO1xyXG51c2luZyBQaWRyb2guVGV4dFJlbmRlcmluZy5HYW1lU2NyZWVuO1xyXG51c2luZyBQaWRyb2guVHVybkJhc2VkLlRleHRSZW5kZXJpbmc7XHJcblxyXG5uYW1lc3BhY2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBHYW1lTWFpbiA6IElUZXh0U2NyZWVuX1xyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgQmF0dGxlTWFpbiBiYXR0bGVNYWluO1xyXG4gICAgICAgIHByaXZhdGUgQmF0dGxlUmVuZGVyIGJhdHRsZVJlbmRlcjtcclxuICAgICAgICBwcml2YXRlIE1vZGVTZWxlY3Rpb25TY3JlZW4gbW9kZVNlbGVjdGlvblNjcmVlbjtcclxuICAgICAgICBJVGV4dFNjcmVlbl8gbWFpbkRyYXc7XHJcbiAgICAgICAgcHJpdmF0ZSBSZXN1bHRTY3JlZW4gcmVzdWx0U2NyZWVuO1xyXG4gICAgICAgIC8vSVRleHRTY3JlZW5bXSBzY3JlZW5zID0gbmV3IElUZXh0U2NyZWVuWzVdO1xyXG4gICAgICAgIGludCBkaWZmaWN1bHR5O1xyXG4gICAgICAgIGludFtdIGVuZW15QW1vdW50ID0gbmV3IGludFtdICAgeyAxLCAxLCAyLCAxLCAyLCAzLCAyLCAzLCAxLCAyLCAzLCAzIH07XHJcbiAgICAgICAgaW50W10gdHVybkFtb3VudCA9IG5ldyBpbnRbXSB7IDIsIDQsIDIsIDYsIDQsIDIsIDYsIDQsIDgsIDgsIDYsIDggfTtcclxuICAgICAgICBwcml2YXRlIE1vdXNlSG92ZXJUZXh0IG1vdXNlSG92ZXI7XHJcblxyXG4gICAgICAgIHB1YmxpYyBHYW1lTWFpbigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtb2RlU2VsZWN0aW9uU2NyZWVuID0gbmV3IE1vZGVTZWxlY3Rpb25TY3JlZW4oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFJlc2V0KCk7XHJcbiAgICAgICAgICAgIG1vZGVTZWxlY3Rpb25TY3JlZW4ubW9kZSA9IDE7XHJcbiAgICAgICAgICAgIG1vZGVTZWxlY3Rpb25TY3JlZW4ud2FubmFMZWF2ZSA9IDE7XHJcbiAgICAgICAgICAgIG1haW5EcmF3ID0gbW9kZVNlbGVjdGlvblNjcmVlbjtcclxuICAgICAgICAgICAgLy9SZXNldCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB2b2lkIFJlc2V0KClcclxuICAgICAgICB7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIGludCBtb2RlID0gbW9kZVNlbGVjdGlvblNjcmVlbi5tb2RlO1xyXG4gICAgICAgICAgICBib29sIHRpbWVBdHRhY2sgPSBtb2RlU2VsZWN0aW9uU2NyZWVuLnRpbWVBdHRhY2s7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWNzID0gRUNTTWFuYWdlci5DcmVhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIFN0YWdlRGF0YUNyZWF0b3Igc2RjID0gbmV3IFN0YWdlRGF0YUNyZWF0b3IoZWNzKTtcclxuICAgICAgICAgICAgdmFyIHN0YWdlcyA9IGVjcy5RdWlja0FjY2Vzc29yMTxTdGFnZURhdGE+KCk7XHJcbiAgICAgICAgICAgIC8vdmFyIHN0YWdlcyA9IHNkYy5zdGFnZXM7XHJcblxyXG4gICAgICAgICAgICBpbnQgZCA9IGRpZmZpY3VsdHk7XHJcbiAgICAgICAgICAgIGlmIChzdGFnZXMuQ291bnQgPD0gZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbWFpbkRyYXcgPSBtb2RlU2VsZWN0aW9uU2NyZWVuO1xyXG4gICAgICAgICAgICAgICAgbW9kZVNlbGVjdGlvblNjcmVlbi5SZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgZGlmZmljdWx0eSA9IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9kID0gMjAwO1xyXG4gICAgICAgICAgICBpZiAoZCA+PSBlbmVteUFtb3VudC5MZW5ndGgpIGQgPSBlbmVteUFtb3VudC5MZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBpbnQgbkVuZW1pZXMgPSBlbmVteUFtb3VudFtkXTtcclxuXHJcbiAgICAgICAgICAgIEJhdHRsZVNldHVwIGJhdHRsZVNldHVwID0gbmV3IEJhdHRsZVNldHVwKG1vZGUsIG5ldyBCYXR0bGVCYXNpY0NvbmZpZyhuVHVybnM6IDUsIG5FbmVtaWVzOiBuRW5lbWllcyksIGRpZmZpY3VsdHksIGVjcyk7XHJcbiAgICAgICAgICAgIGJhdHRsZU1haW4gPSBiYXR0bGVTZXR1cC5iYXR0bGVNYWluO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vZWNzLkNyZWF0ZUVudGl0eVdpdGhDb21wb25lbnQobmV3IEVuZW15U3Bhd25EYXRhKDAsIG5ldyBCYXNlVXRpbHMuVmVjdG9yMkQoNCwgMSkpKTtcclxuICAgICAgICAgICAgLy9lY3MuQ3JlYXRlRW50aXR5V2l0aENvbXBvbmVudChuZXcgRW5lbXlTcGF3bkRhdGEoMSwgbmV3IEJhc2VVdGlscy5WZWN0b3IyRCg1LCAxKSkpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGZsb2F0IHRpbWVUb0Nob29zZSA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGltZUF0dGFjaylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGltZVRvQ2hvb3NlID0gKDVmICogdHVybkFtb3VudFtkXSkgKiBuRW5lbWllcztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhdHRsZU1haW4udGltZVRvQ2hvb3NlTWF4ID0gdGltZVRvQ2hvb3NlO1xyXG4gICAgICAgICAgICBiYXR0bGVNYWluLkluaXQoKTtcclxuICAgICAgICAgICAgYmF0dGxlUmVuZGVyID0gbmV3IEJhdHRsZVJlbmRlcihiYXR0bGVNYWluLCBzdGFnZURhdGE6c3RhZ2VzLkNvbXAxKGRpZmZpY3VsdHkpKTtcclxuICAgICAgICAgICAgbmV3IEhhcHBIYW5kbGluZyhiYXR0bGVSZW5kZXIsIGJhdHRsZVNldHVwKTtcclxuICAgICAgICAgICAgbWFpbkRyYXcgPSBiYXR0bGVSZW5kZXI7XHJcbiAgICAgICAgICAgIHJlc3VsdFNjcmVlbiA9IG5ldyBSZXN1bHRTY3JlZW4oKTtcclxuICAgICAgICAgICAgcmVzdWx0U2NyZWVuLmJhdHRsZVJlc3VsdCA9IGJhdHRsZU1haW4uYmF0dGxlUmVzdWx0O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgTW91c2VIb3Zlck1hbmFnZXIgaG92ZXJNYW5hZ2VyID0gbmV3IE1vdXNlSG92ZXJNYW5hZ2VyKE1vdXNlKTtcclxuICAgICAgICAgICAgaG92ZXJNYW5hZ2VyLm1vdXNlSG92ZXJzLkFkZChuZXcgTW91c2VIb3ZlcihuZXcgQmFzZVV0aWxzLlJlY3QoNSw1LDUsNSksIDAsMCkpO1xyXG4gICAgICAgICAgICBtb3VzZUhvdmVyID0gbmV3IE1vdXNlSG92ZXJUZXh0KGhvdmVyTWFuYWdlciwgYmF0dGxlUmVuZGVyLnRleHRXb3JsZC5HZXRGcmVlRW50aXR5KDUwLCAxKSk7XHJcblxyXG4gICAgICAgICAgICBiYXR0bGVSZW5kZXIubW91c2VIb3ZlciA9IGhvdmVyTWFuYWdlcjtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW50IElucHV0IHsgc2V0IHsgbWFpbkRyYXcuSW5wdXQgPSB2YWx1ZTsgfSBnZXQgeyByZXR1cm4gJ2MnOyB9IH1cclxuICAgICAgICBwdWJsaWMgaW50IElucHV0VW5pY29kZSB7IHNldCB7IG1haW5EcmF3LklucHV0VW5pY29kZSA9IHZhbHVlOyB9IGdldCB7IHJldHVybiAnYyc7IH0gfVxyXG5cclxuICAgICAgICBwdWJsaWMgTW91c2VJTyBNb3VzZSB7IHNldDsgZ2V0OyB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXcoZmxvYXQgZilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG1vdXNlSG92ZXIuVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIG1haW5EcmF3LkRyYXcoZik7XHJcbiAgICAgICAgICAgIG1haW5EcmF3Lk1vdXNlID0gTW91c2U7XHJcbiAgICAgICAgICAgIGlmIChtYWluRHJhdyA9PSBiYXR0bGVSZW5kZXIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChiYXR0bGVNYWluLklzT3ZlcigpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYXR0bGVNYWluLklzVmljdG9yeSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRTY3JlZW4uRW50ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBtYWluRHJhdyA9IHJlc3VsdFNjcmVlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWFpbkRyYXcgPT0gcmVzdWx0U2NyZWVuKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0U2NyZWVuLndhbm5hTGVhdmUgPT0gMSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBSZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtYWluRHJhdyA9PSBtb2RlU2VsZWN0aW9uU2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZVNlbGVjdGlvblNjcmVlbi53YW5uYUxlYXZlID09IDEpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzZXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBUZXh0Qm9hcmQgR2V0Qm9hcmQoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1haW5EcmF3LkdldEJvYXJkKCk7XHJcbiAgICAgICAgfVxyXG5cbiAgICBcbnByaXZhdGUgTW91c2VJTyBfX1Byb3BlcnR5X19Jbml0aWFsaXplcl9fTW91c2U9bmV3IE1vdXNlSU8oKTt9XHJcbn1cclxuIiwidXNpbmcgUGlkcm9oLlRleHRSZW5kZXJpbmc7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nLkdhbWVTY3JlZW47XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWRcclxue1xyXG4gICAgcHVibGljIGNsYXNzIFJlc3VsdFNjcmVlbiA6IElUZXh0U2NyZWVuX1xyXG4gICAge1xyXG4gICAgICAgIHByaXZhdGUgVGV4dFdvcmxkIHRleHRXb3JsZDtcclxuICAgICAgICBzdHJpbmcgeW91V2luID0gXCJZb3UgV2luXCI7XHJcbiAgICAgICAgcHVibGljIE1vdXNlSU8gTW91c2UgeyBzZXQ7IGdldDsgfVxyXG4gICAgICAgIHN0cmluZyB5b3VMb3NlID0gXCJZb3UgbG9zZVwiO1xyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVSZXN1bHQgYmF0dGxlUmVzdWx0O1xyXG4gICAgICAgIHB1YmxpYyBSZXN1bHRTY3JlZW4oKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGV4dFdvcmxkID0gbmV3IFRleHRXb3JsZCgpO1xyXG4gICAgICAgICAgICB0ZXh0V29ybGQuSW5pdCg3MCwgMjUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgaW50IHdhbm5hTGVhdmU7XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnQgSW5wdXQgeyBzZXQ7IGdldDsgfVxyXG4gICAgICAgIHB1YmxpYyBpbnQgSW5wdXRVbmljb2RlIHsgc2V0OyBnZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIHZvaWQgRW50ZXIoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2FubmFMZWF2ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBEcmF3KGZsb2F0IGYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoSW5wdXRVbmljb2RlID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2FubmFMZWF2ZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyaW5nIG1lc3NhZ2UgPSB5b3VXaW47XHJcbiAgICAgICAgICAgIGlmIChiYXR0bGVSZXN1bHQucmVzdWx0ID09IDIpIG1lc3NhZ2UgPSB5b3VMb3NlO1xyXG4gICAgICAgICAgICB0ZXh0V29ybGQubWFpbkJvYXJkLkRyYXdPbkNlbnRlcihtZXNzYWdlLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5Cb2FyZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgVGV4dEJvYXJkIEdldEJvYXJkKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0V29ybGQubWFpbkJvYXJkO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5UZXh0O1xyXG5cclxubmFtZXNwYWNlIFBpZHJvaC5UZXh0UmVuZGVyaW5nXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBUZXN0R2FtZSA6IElUZXh0R2FtZVxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBUZXh0U2NyZWVuSG9sZGVyIFNjcmVlbkhvbGRlciB7IGdldDsgcHJpdmF0ZSBzZXQ7IH1cclxuXHJcbiAgICAgICAgcHVibGljIFBhbGV0dGUgR2V0UGFsZXR0ZSgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gRGVmYXVsdFBhbGV0dGVzLkM0Tm92ZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBJbml0KGludCB3LCBpbnQgaClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFRleHRTY3JlZW5OIHNjcmVlbiA9IG5ldyBUZXN0U2NyZWVuKCk7XHJcbiAgICAgICAgICAgIFNjcmVlbkhvbGRlci5TZXRBbGwoc2NyZWVuKTtcclxuICAgICAgICAgICAgc2NyZWVuLkluaXQodywgaCk7XHJcbiAgICAgICAgICAgIHNjcmVlbi5HZXRCb2FyZCgpLkRyYXcoXCJUZXN0XCIsIDAsMCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBVcGRhdGUoZmxvYXQgZGVsdGEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxuICAgIFxucHJpdmF0ZSBUZXh0U2NyZWVuSG9sZGVyIF9fUHJvcGVydHlfX0luaXRpYWxpemVyX19TY3JlZW5Ib2xkZXI9bmV3IFRleHRTY3JlZW5Ib2xkZXIoKTt9XHJcblxyXG4gICAgcHVibGljIGNsYXNzIFRlc3RTY3JlZW4gOiBUZXh0U2NyZWVuTlxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIFVwZGF0ZShmbG9hdCBmKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZDtcclxudXNpbmcgUGlkcm9oLlRleHRSZW5kZXJpbmc7XHJcbnVzaW5nIFBpZHJvaC5UZXh0UmVuZGVyaW5nLkdhbWVTY3JlZW47XHJcbnVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guVHVybkJhc2VkLlRleHRSZW5kZXJpbmdcclxue1xyXG4gICAgcHVibGljIGNsYXNzIE1vZGVTZWxlY3Rpb25TY3JlZW4gOiBJVGV4dFNjcmVlbl9cclxuICAgIHtcclxuICAgICAgICBwcml2YXRlIFRleHRXb3JsZCB0ZXh0V29ybGQ7XHJcbiAgICAgICAgc3RyaW5nIHlvdVdpbiA9IFwiWW91IFdpblwiO1xyXG4gICAgICAgIHN0cmluZyB5b3VMb3NlID0gXCJZb3UgbG9zZVwiO1xyXG4gICAgICAgIHB1YmxpYyBNb3VzZUlPIE1vdXNlIHsgc2V0OyBnZXQ7IH1cclxuICAgICAgICBpbnQgc2VsZWN0aW9uO1xyXG4gICAgICAgIHB1YmxpYyBCYXR0bGVSZXN1bHQgYmF0dGxlUmVzdWx0O1xyXG4gICAgICAgIHB1YmxpYyBNb2RlU2VsZWN0aW9uU2NyZWVuKClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRleHRXb3JsZCA9IG5ldyBUZXh0V29ybGQoKTtcclxuICAgICAgICAgICAgdGV4dFdvcmxkLkluaXQoNzAsIDI1KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGludCB3YW5uYUxlYXZlO1xyXG4gICAgICAgIHB1YmxpYyBpbnQgbW9kZTtcclxuICAgICAgICBwdWJsaWMgYm9vbCB0aW1lQXR0YWNrID0gZmFsc2U7XHJcbiAgICAgICAgcHVibGljIGludCBzY3JlZW5TdGFnZTtcclxuXHJcbiAgICAgICAgcHVibGljIGludCBJbnB1dCB7IHNldDsgZ2V0OyB9XHJcbiAgICAgICAgcHVibGljIGludCBJbnB1dFVuaWNvZGUgeyBzZXQ7IGdldDsgfVxyXG5cclxuICAgICAgICBwdWJsaWMgdm9pZCBFbnRlcigpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB3YW5uYUxlYXZlID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyB2b2lkIERyYXcoZmxvYXQgZilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRleHRXb3JsZC5tYWluQm9hcmQuUmVzZXQoKTtcclxuICAgICAgICAgICAgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5JbnB1dEtleSBpayA9IChQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLklucHV0S2V5KSBJbnB1dDtcclxuICAgICAgICAgICAgbW9kZSA9IC0xO1xyXG4gICAgICAgICAgICB0ZXh0V29ybGQubWFpbkJvYXJkLkRyYXcoXCJQcm9nQmF0dGxlIFByb3RvdHlwZSB2MC4zXCIsIDEsIDEsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkdyaWRIZXJvKTtcclxuICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3KFwiQSBnYW1lIGJ5IFBpZHJvaFwiLCAxLCAyLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVybyk7XHJcbiAgICAgICAgICAgIGlmIChzY3JlZW5TdGFnZSA9PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGlrKVxyXG4gICAgICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuSW5wdXRLZXkuTEVGVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuU3RhZ2UgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lQXR0YWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5JbnB1dEtleS5SSUdIVDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuU3RhZ2UgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lQXR0YWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLklucHV0S2V5LkRPV046XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVBdHRhY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLklucHV0S2V5LlVQOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUF0dGFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRleHRXb3JsZC5tYWluQm9hcmQuRHJhd09uQ2VudGVyKFwiW3ddIFZhbmlsbGFcIiwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuR3JpZEhlcm8sIHlPZmY6IDQsIGFsaWduU3RyaW5nOiBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0V29ybGQubWFpbkJvYXJkLkRyYXdPbkNlbnRlcihcIlthXSBFbGVtZW50YWxcIiwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuR3JpZEhlcm8sIHlPZmY6IDUsIGFsaWduU3RyaW5nOiBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0V29ybGQubWFpbkJvYXJkLkRyYXdPbkNlbnRlcihcIltzXSBWYW5pbGxhIFRpbWUgQXR0YWNrXCIsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkdyaWRIZXJvLCB5T2ZmOiA2LCBhbGlnblN0cmluZzogZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3T25DZW50ZXIoXCJbZF0gRWxlbWVudGFsIFRpbWUgQXR0YWNrXCIsIFBpZHJvaC5Db25zb2xlQXBwLlR1cm5iYXNlZC5CYXR0bGVSZW5kZXIuQ29sb3JzLkdyaWRIZXJvLCB5T2ZmOiA3LCBhbGlnblN0cmluZzogZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzY3JlZW5TdGFnZSA9PSAxKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWsgPT0gUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5JbnB1dEtleS5VUClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpayA9PSBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLklucHV0S2V5LkRPV04pXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuU3RhZ2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3T25DZW50ZXIoXCJFbGVtZW50YWwgTW9kZVwiLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVybywgeU9mZjogLTUpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3T25DZW50ZXIoXCJGaXJlIGJlYXRzIEljZSwgSWNlIGJlYXRzIFRodW5kZXIsIFRodW5kZXIgYmVhdHMgZmlyZVwiLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVybywgeU9mZjogLTIpO1xyXG4gICAgICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3T25DZW50ZXIoXCJTYW1lIGVsZW1lbnQgPSBubyBkYW1hZ2VcIiwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuR3JpZEhlcm8sIHlPZmY6IDApO1xyXG4gICAgICAgICAgICAgICAgdGV4dFdvcmxkLm1haW5Cb2FyZC5EcmF3T25DZW50ZXIoXCJJdCBpcyBiZXN0IHRvIGhhdmUgaGFkIHNvbWUgZXhwZXJpZW5jZSB3aXRoIHZhbmlsbGEgbW9kZVwiLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVybywgeU9mZjogMSk7XHJcbiAgICAgICAgICAgICAgICB0ZXh0V29ybGQubWFpbkJvYXJkLkRyYXdPbkNlbnRlcihcIlt3XSBTdGFydCBFbGVtZW50YWwgTW9kZVwiLCBQaWRyb2guQ29uc29sZUFwcC5UdXJuYmFzZWQuQmF0dGxlUmVuZGVyLkNvbG9ycy5HcmlkSGVybywgeU9mZjogNCwgYWxpZ25TdHJpbmc6IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRleHRXb3JsZC5tYWluQm9hcmQuRHJhd09uQ2VudGVyKFwiW3NdIEdvIGJhY2tcIiwgUGlkcm9oLkNvbnNvbGVBcHAuVHVybmJhc2VkLkJhdHRsZVJlbmRlci5Db2xvcnMuR3JpZEhlcm8sIHlPZmY6IDUsIGFsaWduU3RyaW5nOiBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAobW9kZSA+PSAwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3YW5uYUxlYXZlID0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgLy9zdHJpbmcgbWVzc2FnZSA9IHlvdVdpbjtcclxuICAgICAgICAgICAgLy9pZiAoYmF0dGxlUmVzdWx0LnJlc3VsdCA9PSAyKSBtZXNzYWdlID0geW91TG9zZTtcclxuICAgICAgICAgICAgLy90ZXh0V29ybGQubWFpbkJvYXJkLkRyYXdPbkNlbnRlcihtZXNzYWdlLCBDb2xvcnMuQm9hcmQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWwgdm9pZCBSZXNldCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtb2RlID0gLTE7XHJcbiAgICAgICAgICAgIHdhbm5hTGVhdmUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIFRleHRCb2FyZCBHZXRCb2FyZCgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dFdvcmxkLm1haW5Cb2FyZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcbiIsInVzaW5nIFN5c3RlbTtcclxudXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7XHJcbnVzaW5nIFN5c3RlbS5MaW5xO1xyXG51c2luZyBTeXN0ZW0uVGV4dDtcclxuXHJcbm5hbWVzcGFjZSBQaWRyb2guVGV4dFJlbmRlcmluZ1xyXG57XHJcbiAgICBwdWJsaWMgY2xhc3MgQmxpbmtBbmltIDogVGV4dEFuaW1hdGlvbjxCbGlua0FuaW0uQmxpbmtEYXRhPlxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIE1vZGlmeShUZXh0RW50aXR5IGVudGl0eSwgQmxpbmtEYXRhIG1haW5EYXRhLCBmbG9hdCBwcm9ncmVzcywgZmxvYXQgbGVuZ3RoKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmFzZS5Nb2RpZnkoZW50aXR5LCBtYWluRGF0YSwgcHJvZ3Jlc3MsIGxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZsb2F0IGF1eCA9IHByb2dyZXNzO1xyXG4gICAgICAgICAgICBib29sIGJsaW5rID0gdHJ1ZTtcclxuICAgICAgICAgICAgd2hpbGUgKHRydWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmIChibGluaylcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXggLT0gbWFpbkRhdGEuYmxpbmtBY3RpdmVUaW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGF1eCAtPSBtYWluRGF0YS5ibGlua0luYWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF1eCA8IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxpbmsgPSAhYmxpbms7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFibGluaylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZW50aXR5LkFuaW1hdGlvbi5TZXRBbGwobWFpbkRhdGEudGV4dCwgbWFpbkRhdGEudGV4dENvbG9yLCBtYWluRGF0YS5iYWNrQ29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHVibGljIHN0cnVjdCBCbGlua0RhdGFcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBjaGFyIHRleHQ7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBpbnQgYmFja0NvbG9yLCB0ZXh0Q29sb3I7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBmbG9hdCBibGlua0FjdGl2ZVRpbWU7XHJcbiAgICAgICAgICAgIHB1YmxpYyByZWFkb25seSBmbG9hdCBibGlua0luYWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgcHVibGljIEJsaW5rRGF0YShjaGFyIHRleHQsIGludCBiYWNrQ29sb3IsIGludCB0ZXh0Q29sb3IsIGZsb2F0IGJsaW5rQWN0aXZlVGltZSwgZmxvYXQgYmxpbmtJbmFjdGl2ZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja0NvbG9yID0gYmFja0NvbG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29sb3IgPSB0ZXh0Q29sb3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJsaW5rQWN0aXZlVGltZSA9IGJsaW5rQWN0aXZlVGltZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmxpbmtJbmFjdGl2ZSA9IGJsaW5rSW5hY3RpdmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHB1YmxpYyBzdGF0aWMgQmxpbmtEYXRhIEJhY2tDb2xvcihpbnQgYmFja0NvbG9yLCBmbG9hdCBibGlua0R1cmF0aW9uKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJsaW5rRGF0YShUZXh0Qm9hcmQuTk9DSEFOR0VDSEFSLCBiYWNrQ29sb3IsIFRleHRCb2FyZC5OT0NIQU5HRUNPTE9SLCBibGlua0R1cmF0aW9uLCBibGlua0R1cmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHVibGljIHN0YXRpYyBCbGlua0RhdGEgQ2hhcihjaGFyIGMsIGZsb2F0IGJsaW5rRHVyYXRpb24pXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmxpbmtEYXRhKGMsIFRleHRCb2FyZC5OT0NIQU5HRUNPTE9SLCBUZXh0Qm9hcmQuTk9DSEFOR0VDT0xPUiwgYmxpbmtEdXJhdGlvbiwgYmxpbmtEdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibmFtZXNwYWNlIFBpZHJvaC5UZXh0UmVuZGVyaW5nXHJcbntcclxuICAgIHB1YmxpYyBjbGFzcyBDaGFyQnlDaGFyQW5pbWF0aW9uIDogVGV4dEFuaW1hdGlvbjxDaGFyQnlDaGFyQW5pbWF0aW9uLkNoYXJCeUNoYXJEYXRhPlxyXG4gICAge1xyXG4gICAgICAgIHB1YmxpYyBvdmVycmlkZSB2b2lkIE1vZGlmeShUZXh0RW50aXR5IGVudGl0eSwgQ2hhckJ5Q2hhckRhdGEgbWFpbkRhdGEsIGZsb2F0IHByb2dyZXNzLCBmbG9hdCBsZW5ndGgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiYXNlLk1vZGlmeShlbnRpdHksIG1haW5EYXRhLCBwcm9ncmVzcywgbGVuZ3RoKTtcclxuICAgICAgICAgICAgZmxvYXQgcmF0aW8gPSBwcm9ncmVzcyAvIGxlbmd0aDtcclxuICAgICAgICAgICAgZmxvYXQgbGVuZ3RoVGV4dCA9IG1haW5EYXRhLmNoYXJFbmQgLSBtYWluRGF0YS5jaGFyU3RhcnQ7XHJcbiAgICAgICAgICAgIGludCBsaW5lQnJlYWtzID0gMDtcclxuICAgICAgICAgICAgaW50IG9mZnNldGVkUGVybSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoaW50IGkgPSBtYWluRGF0YS5jaGFyU3RhcnQ7IGkgPCBtYWluRGF0YS5jaGFyRW5kOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGludCBvZmZzZXRlZCA9IGkgKyBvZmZzZXRlZFBlcm07XHJcbiAgICAgICAgICAgICAgICBpbnQgbGluZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGIgPSBlbnRpdHkuQW5pbWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG9mZnNldGVkID49IHRiLldpZHRoKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUrKztcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRlZCAtPSB0Yi5XaWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHkuT3JpZ2luLkNoYXJBdChvZmZzZXRlZCwgbGluZSArIGxpbmVCcmVha3MpID09ICdcXG4nKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVCcmVha3MrKztcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRlZFBlcm0gLT0gb2Zmc2V0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAoKGxlbmd0aFRleHQgKiByYXRpbykgKyBtYWluRGF0YS5jaGFyU3RhcnQpKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRiLkRyYXdDaGFyKCcgJywgb2Zmc2V0ZWQsIGxpbmUgKyBsaW5lQnJlYWtzKTtcclxuICAgICAgICAgICAgICAgICAgICAvL3RiLkRyYXcoXCJcIiArIGksIDYsIDUsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBjbGFzcyBDaGFyQnlDaGFyRGF0YVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW50ZXJuYWwgaW50IGNoYXJTdGFydDtcclxuICAgICAgICAgICAgaW50ZXJuYWwgaW50IGNoYXJFbmQ7XHJcblxyXG4gICAgICAgICAgICBwdWJsaWMgQ2hhckJ5Q2hhckRhdGEoaW50IGNoYXJTdGFydCwgaW50IGNoYXJFbmQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclN0YXJ0ID0gY2hhclN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyRW5kID0gY2hhckVuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXQp9Cg==
2018-06-17T07:52:04:173 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js ...
2018-06-17T07:52:04:173 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:174 	Trace		Output BridgeBuild.meta.js
2018-06-17T07:52:04:174 	Trace		Output file name changed to C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-06-17T07:52:04:174 	Trace		Output full name C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-06-17T07:52:04:176 	Trace		Saving content (string) into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js ...
2018-06-17T07:52:04:176 	Trace		Saved file C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-06-17T07:52:04:176 	Info		Done Save path = C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\
2018-06-17T07:52:04:177 	Info		Injecting resources...
2018-06-17T07:52:04:180 	Trace		PrepareResourcesForEmbedding...
2018-06-17T07:52:04:185 	Trace		Preparing outputs for resources
2018-06-17T07:52:04:186 	Trace		Getting output C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.js
2018-06-17T07:52:04:186 	Trace		Reading content file as the output has HasGeneratedSourceMap
2018-06-17T07:52:04:191 	Trace		Read 730421 bytes for BridgeBuild.js
2018-06-17T07:52:04:192 	Trace		Embedding resource BridgeBuild.js (fileName: BridgeBuild.js)
2018-06-17T07:52:04:196 	Trace		Added resource BridgeBuild.js (fileName: BridgeBuild.js)
2018-06-17T07:52:04:196 	Trace		Getting output C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\bridge\BridgeBuild.meta.js
2018-06-17T07:52:04:197 	Trace		The output item does not have HasGeneratedSourceMap so we use it right from the Outputs
2018-06-17T07:52:04:198 	Trace		The output is of content 169016 length
2018-06-17T07:52:04:198 	Trace		Embedding resource BridgeBuild.meta.js (fileName: BridgeBuild.meta.js)
2018-06-17T07:52:04:198 	Trace		Added resource BridgeBuild.meta.js (fileName: BridgeBuild.meta.js)
2018-06-17T07:52:04:199 	Trace		Done preparing output files for resources
2018-06-17T07:52:04:201 	Trace		PrepareResourcesForEmbedding done
2018-06-17T07:52:04:202 	Trace		Embedding resources...
2018-06-17T07:52:04:204 	Trace		Added resource list Bridge.Resources.json
2018-06-17T07:52:04:204 	Trace		[
  {
    "FileName": "BridgeBuild.js",
    "Name": "BridgeBuild.js",
    "Path": null,
    "Parts": null
  },
  {
    "FileName": "BridgeBuild.meta.js",
    "Name": "BridgeBuild.meta.js",
    "Path": null,
    "Parts": null
  }
]
2018-06-17T07:52:04:205 	Trace		Removing mscorlib reference
2018-06-17T07:52:04:205 	Trace		Writing resources into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
2018-06-17T07:52:04:212 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:212 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference, ReaderParameters) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null, Deferred
2018-06-17T07:52:04:223 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:225 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:226 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:227 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:227 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:227 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:228 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:228 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:228 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:229 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:229 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:229 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:229 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:230 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:230 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:230 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:231 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:231 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:231 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:231 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:232 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:232 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:232 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:232 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:233 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:233 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:233 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:233 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:234 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:234 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:280 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:281 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:282 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:288 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:288 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:289 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:289 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:290 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:290 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:290 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:291 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:291 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:292 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:292 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:292 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:293 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:293 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:294 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:294 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:294 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:295 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:295 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:295 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:296 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:299 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:300 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:300 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:301 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:301 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:302 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:303 	Trace		CecilAssemblyResolver: Resolve(AssemblyNameReference) Bridge, Version=17.0.0.0, Culture=neutral, PublicKeyToken=null
2018-06-17T07:52:04:370 	Trace		Wrote resources into C:\Users\Pedro\Documents\TurnBased\VisualStudioSolution\BridgeBuild\bin\Debug\BridgeBuild.dll
2018-06-17T07:52:04:371 	Trace		Done embedding resources
2018-06-17T07:52:04:371 	Info		Done injecting resources
2018-06-17T07:52:04:372 	Info		Checking AfterBuild event...
2018-06-17T07:52:04:373 	Trace		No AfterBuild event specified
2018-06-17T07:52:04:374 	Info		Done checking AfterBuild event...
2018-06-17T07:52:04:374 	Info		Run plugins AfterOutput...
2018-06-17T07:52:04:375 	Info		Done plugins AfterOutput
2018-06-17T07:52:04:378 	Trace		GenerateHtml...
2018-06-17T07:52:04:378 	Trace		GenerateHtml skipped as disabled in config.
2018-06-17T07:52:04:379 	Trace		Report...
2018-06-17T07:52:04:379 	Trace		Report skipped as disabled in config.
2018-06-17T07:52:04:379 	Info		Done post processing
